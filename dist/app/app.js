(() => {
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequired1b9"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequired1b9"] = parcelRequire;
}
parcelRequire.register("hfThs", function(module, exports) {
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule normalizeWheel
 * @typechecks
 */ 'use strict';

var $2oucB = parcelRequire("2oucB");

var $dygKc = parcelRequire("dygKc");
// Reasonable defaults
var $c8feb7f5659e5dde$var$PIXEL_STEP = 10;
var $c8feb7f5659e5dde$var$LINE_HEIGHT = 40;
var $c8feb7f5659e5dde$var$PAGE_HEIGHT = 800;
/**
 * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
 * complicated, thus this doc is long and (hopefully) detailed enough to answer
 * your questions.
 *
 * If you need to react to the mouse wheel in a predictable way, this code is
 * like your bestest friend. * hugs *
 *
 * As of today, there are 4 DOM event types you can listen to:
 *
 *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
 *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
 *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
 *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
 *
 * So what to do?  The is the best:
 *
 *   normalizeWheel.getEventType();
 *
 * In your event callback, use this code to get sane interpretation of the
 * deltas.  This code will return an object with properties:
 *
 *   spinX   -- normalized spin speed (use for zoom) - x plane
 *   spinY   -- " - y plane
 *   pixelX  -- normalized distance (to pixels) - x plane
 *   pixelY  -- " - y plane
 *
 * Wheel values are provided by the browser assuming you are using the wheel to
 * scroll a web page by a number of lines or pixels (or pages).  Values can vary
 * significantly on different platforms and browsers, forgetting that you can
 * scroll at different speeds.  Some devices (like trackpads) emit more events
 * at smaller increments with fine granularity, and some emit massive jumps with
 * linear speed or acceleration.
 *
 * This code does its best to normalize the deltas for you:
 *
 *   - spin is trying to normalize how far the wheel was spun (or trackpad
 *     dragged).  This is super useful for zoom support where you want to
 *     throw away the chunky scroll steps on the PC and make those equal to
 *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
 *     resolve a single slow step on a wheel to 1.
 *
 *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
 *     get the crazy differences between browsers, but at least it'll be in
 *     pixels!
 *
 *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
 *     should translate to positive value zooming IN, negative zooming OUT.
 *     This matches the newer 'wheel' event.
 *
 * Why are there spinX, spinY (or pixels)?
 *
 *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
 *     with a mouse.  It results in side-scrolling in the browser by default.
 *
 *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
 *
 *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
 *     probably is by browsers in conjunction with fancy 3D controllers .. but
 *     you know.
 *
 * Implementation info:
 *
 * Examples of 'wheel' event if you scroll slowly (down) by one step with an
 * average mouse:
 *
 *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
 *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
 *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
 *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
 *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
 *
 * On the trackpad:
 *
 *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
 *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
 *
 * On other/older browsers.. it's more complicated as there can be multiple and
 * also missing delta values.
 *
 * The 'wheel' event is more standard:
 *
 * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
 *
 * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
 * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
 * backward compatibility with older events.  Those other values help us
 * better normalize spin speed.  Example of what the browsers provide:
 *
 *                          | event.wheelDelta | event.detail
 *        ------------------+------------------+--------------
 *          Safari v5/OS X  |       -120       |       0
 *          Safari v5/Win7  |       -120       |       0
 *         Chrome v17/OS X  |       -120       |       0
 *         Chrome v17/Win7  |       -120       |       0
 *                IE9/Win7  |       -120       |   undefined
 *         Firefox v4/OS X  |     undefined    |       1
 *         Firefox v4/Win7  |     undefined    |       3
 *
 */ function $c8feb7f5659e5dde$var$normalizeWheel(/*object*/ event) /*object*/ {
    var sX = 0, sY = 0, pX = 0, pY = 0; // pixelX, pixelY
    // Legacy
    if ('detail' in event) sY = event.detail;
    if ('wheelDelta' in event) sY = -event.wheelDelta / 120;
    if ('wheelDeltaY' in event) sY = -event.wheelDeltaY / 120;
    if ('wheelDeltaX' in event) sX = -event.wheelDeltaX / 120;
    // side scrolling on FF with DOMMouseScroll
    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
        sX = sY;
        sY = 0;
    }
    pX = sX * $c8feb7f5659e5dde$var$PIXEL_STEP;
    pY = sY * $c8feb7f5659e5dde$var$PIXEL_STEP;
    if ('deltaY' in event) pY = event.deltaY;
    if ('deltaX' in event) pX = event.deltaX;
    if ((pX || pY) && event.deltaMode) {
        if (event.deltaMode == 1) {
            pX *= $c8feb7f5659e5dde$var$LINE_HEIGHT;
            pY *= $c8feb7f5659e5dde$var$LINE_HEIGHT;
        } else {
            pX *= $c8feb7f5659e5dde$var$PAGE_HEIGHT;
            pY *= $c8feb7f5659e5dde$var$PAGE_HEIGHT;
        }
    }
    // Fall-back if spin cannot be determined
    if (pX && !sX) sX = pX < 1 ? -1 : 1;
    if (pY && !sY) sY = pY < 1 ? -1 : 1;
    return {
        spinX: sX,
        spinY: sY,
        pixelX: pX,
        pixelY: pY
    };
}
/**
 * The best combination if you prefer spinX + spinY normalization.  It favors
 * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with
 * 'wheel' event, making spin speed determination impossible.
 */ $c8feb7f5659e5dde$var$normalizeWheel.getEventType = function() /*string*/ {
    return $2oucB.firefox() ? 'DOMMouseScroll' : $dygKc('wheel') ? 'wheel' : 'mousewheel';
};
module.exports = $c8feb7f5659e5dde$var$normalizeWheel;

});
parcelRequire.register("2oucB", function(module, exports) {
/**
 * Copyright 2004-present Facebook. All Rights Reserved.
 *
 * @providesModule UserAgent_DEPRECATED
 */ /**
 *  Provides entirely client-side User Agent and OS detection. You should prefer
 *  the non-deprecated UserAgent module when possible, which exposes our
 *  authoritative server-side PHP-based detection to the client.
 *
 *  Usage is straightforward:
 *
 *    if (UserAgent_DEPRECATED.ie()) {
 *      //  IE
 *    }
 *
 *  You can also do version checks:
 *
 *    if (UserAgent_DEPRECATED.ie() >= 7) {
 *      //  IE7 or better
 *    }
 *
 *  The browser functions will return NaN if the browser does not match, so
 *  you can also do version compares the other way:
 *
 *    if (UserAgent_DEPRECATED.ie() < 7) {
 *      //  IE6 or worse
 *    }
 *
 *  Note that the version is a float and may include a minor version number,
 *  so you should always use range operators to perform comparisons, not
 *  strict equality.
 *
 *  **Note:** You should **strongly** prefer capability detection to browser
 *  version detection where it's reasonable:
 *
 *    http://www.quirksmode.org/js/support.html
 *
 *  Further, we have a large number of mature wrapper functions and classes
 *  which abstract away many browser irregularities. Check the documentation,
 *  grep for things, or ask on javascript@lists.facebook.com before writing yet
 *  another copy of "event || window.event".
 *
 */ var $1be54036fb576fb5$var$_populated = false;
// Browsers
var $1be54036fb576fb5$var$_ie, $1be54036fb576fb5$var$_firefox, $1be54036fb576fb5$var$_opera, $1be54036fb576fb5$var$_webkit, $1be54036fb576fb5$var$_chrome;
// Actual IE browser for compatibility mode
var $1be54036fb576fb5$var$_ie_real_version;
// Platforms
var $1be54036fb576fb5$var$_osx, $1be54036fb576fb5$var$_windows, $1be54036fb576fb5$var$_linux, $1be54036fb576fb5$var$_android;
// Architectures
var $1be54036fb576fb5$var$_win64;
// Devices
var $1be54036fb576fb5$var$_iphone, $1be54036fb576fb5$var$_ipad, $1be54036fb576fb5$var$_native;
var $1be54036fb576fb5$var$_mobile;
function $1be54036fb576fb5$var$_populate() {
    if ($1be54036fb576fb5$var$_populated) return;
    $1be54036fb576fb5$var$_populated = true;
    // To work around buggy JS libraries that can't handle multi-digit
    // version numbers, Opera 10's user agent string claims it's Opera
    // 9, then later includes a Version/X.Y field:
    //
    // Opera/9.80 (foo) Presto/2.2.15 Version/10.10
    var uas = navigator.userAgent;
    var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
    var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
    $1be54036fb576fb5$var$_iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
    $1be54036fb576fb5$var$_ipad = /\b(iP[ao]d)/.exec(uas);
    $1be54036fb576fb5$var$_android = /Android/i.exec(uas);
    $1be54036fb576fb5$var$_native = /FBAN\/\w+;/i.exec(uas);
    $1be54036fb576fb5$var$_mobile = /Mobile/i.exec(uas);
    // Note that the IE team blog would have you believe you should be checking
    // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming
    // from either x64 or ia64;  so ultimately, you should just check for Win64
    // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit
    // Windows will send 'WOW64' instead.
    $1be54036fb576fb5$var$_win64 = !!/Win64/.exec(uas);
    if (agent) {
        $1be54036fb576fb5$var$_ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
        // IE compatibility mode
        if ($1be54036fb576fb5$var$_ie && document && document.documentMode) $1be54036fb576fb5$var$_ie = document.documentMode;
        // grab the "true" ie version from the trident token if available
        var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
        $1be54036fb576fb5$var$_ie_real_version = trident ? parseFloat(trident[1]) + 4 : $1be54036fb576fb5$var$_ie;
        $1be54036fb576fb5$var$_firefox = agent[2] ? parseFloat(agent[2]) : NaN;
        $1be54036fb576fb5$var$_opera = agent[3] ? parseFloat(agent[3]) : NaN;
        $1be54036fb576fb5$var$_webkit = agent[4] ? parseFloat(agent[4]) : NaN;
        if ($1be54036fb576fb5$var$_webkit) {
            // We do not add the regexp to the above test, because it will always
            // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in
            // the userAgent string.
            agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
            $1be54036fb576fb5$var$_chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
        } else $1be54036fb576fb5$var$_chrome = NaN;
    } else $1be54036fb576fb5$var$_ie = $1be54036fb576fb5$var$_firefox = $1be54036fb576fb5$var$_opera = $1be54036fb576fb5$var$_chrome = $1be54036fb576fb5$var$_webkit = NaN;
    if (os) {
        if (os[1]) {
            // Detect OS X version.  If no version number matches, set _osx to true.
            // Version examples:  10, 10_6_1, 10.7
            // Parses version number as a float, taking only first two sets of
            // digits.  If only one set of digits is found, returns just the major
            // version number.
            var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
            $1be54036fb576fb5$var$_osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;
        } else $1be54036fb576fb5$var$_osx = false;
        $1be54036fb576fb5$var$_windows = !!os[2];
        $1be54036fb576fb5$var$_linux = !!os[3];
    } else $1be54036fb576fb5$var$_osx = $1be54036fb576fb5$var$_windows = $1be54036fb576fb5$var$_linux = false;
}
var $1be54036fb576fb5$var$UserAgent_DEPRECATED = {
    /**
   *  Check if the UA is Internet Explorer.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */ ie: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_ie;
    },
    /**
   * Check if we're in Internet Explorer compatibility mode.
   *
   * @return bool true if in compatibility mode, false if
   * not compatibility mode or not ie
   */ ieCompatibilityMode: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_ie_real_version > $1be54036fb576fb5$var$_ie;
    },
    /**
   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
   * only need this because Skype can't handle 64-bit IE yet.  We need to remove
   * this when we don't need it -- tracked by #601957.
   */ ie64: function() {
        return $1be54036fb576fb5$var$UserAgent_DEPRECATED.ie() && $1be54036fb576fb5$var$_win64;
    },
    /**
   *  Check if the UA is Firefox.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */ firefox: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_firefox;
    },
    /**
   *  Check if the UA is Opera.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */ opera: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_opera;
    },
    /**
   *  Check if the UA is WebKit.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */ webkit: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_webkit;
    },
    /**
   *  For Push
   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
   */ safari: function() {
        return $1be54036fb576fb5$var$UserAgent_DEPRECATED.webkit();
    },
    /**
   *  Check if the UA is a Chrome browser.
   *
   *
   *  @return float|NaN Version number (if match) or NaN.
   */ chrome: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_chrome;
    },
    /**
   *  Check if the user is running Windows.
   *
   *  @return bool `true' if the user's OS is Windows.
   */ windows: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_windows;
    },
    /**
   *  Check if the user is running Mac OS X.
   *
   *  @return float|bool   Returns a float if a version number is detected,
   *                       otherwise true/false.
   */ osx: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_osx;
    },
    /**
   * Check if the user is running Linux.
   *
   * @return bool `true' if the user's OS is some flavor of Linux.
   */ linux: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_linux;
    },
    /**
   * Check if the user is running on an iPhone or iPod platform.
   *
   * @return bool `true' if the user is running some flavor of the
   *    iPhone OS.
   */ iphone: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_iphone;
    },
    mobile: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_iphone || $1be54036fb576fb5$var$_ipad || $1be54036fb576fb5$var$_android || $1be54036fb576fb5$var$_mobile;
    },
    nativeApp: function() {
        // webviews inside of the native apps
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_native;
    },
    android: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_android;
    },
    ipad: function() {
        return $1be54036fb576fb5$var$_populate() || $1be54036fb576fb5$var$_ipad;
    }
};
module.exports = $1be54036fb576fb5$var$UserAgent_DEPRECATED;

});

parcelRequire.register("dygKc", function(module, exports) {
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */ 'use strict';

var $abRnM = parcelRequire("abRnM");
var $9ddb705b1fb24f1a$var$useHasFeature;
if ($abRnM.canUseDOM) $9ddb705b1fb24f1a$var$useHasFeature = document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
// @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
document.implementation.hasFeature('', '') !== true;
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function $9ddb705b1fb24f1a$var$isEventSupported(eventNameSuffix, capture) {
    if (!$abRnM.canUseDOM || capture && !('addEventListener' in document)) return false;
    var eventName = 'on' + eventNameSuffix;
    var isSupported = eventName in document;
    if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
    }
    if (!isSupported && $9ddb705b1fb24f1a$var$useHasFeature && eventNameSuffix === 'wheel') // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
    return isSupported;
}
module.exports = $9ddb705b1fb24f1a$var$isEventSupported;

});
parcelRequire.register("abRnM", function(module, exports) {
/**
 * Copyright (c) 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */ /*jslint evil: true */ 'use strict';
var $76b4572067becb01$var$canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */ var $76b4572067becb01$var$ExecutionEnvironment = {
    canUseDOM: $76b4572067becb01$var$canUseDOM,
    canUseWorkers: typeof Worker !== 'undefined',
    canUseEventListeners: $76b4572067becb01$var$canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: $76b4572067becb01$var$canUseDOM && !!window.screen,
    isInWorker: !$76b4572067becb01$var$canUseDOM // For now, this is true - might change in the future.
};
module.exports = $76b4572067becb01$var$ExecutionEnvironment;

});



/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */ const $2d9d8c9fc2282acc$export$3545e07a80636437 = '136';
const $2d9d8c9fc2282acc$export$7177b3e430c2d7ca = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2,
    ROTATE: 0,
    DOLLY: 1,
    PAN: 2
};
const $2d9d8c9fc2282acc$export$d46bd3ead7cc759b = {
    ROTATE: 0,
    PAN: 1,
    DOLLY_PAN: 2,
    DOLLY_ROTATE: 3
};
const $2d9d8c9fc2282acc$export$3237e1f2c1ea1f44 = 0;
const $2d9d8c9fc2282acc$export$b9a7b4fc5cb15f9b = 1;
const $2d9d8c9fc2282acc$export$b8058bcc7037d3f3 = 2;
const $2d9d8c9fc2282acc$export$f24be24dcddeac0d = 3;
const $2d9d8c9fc2282acc$export$346307dbae2b7447 = 0;
const $2d9d8c9fc2282acc$export$5813f879eee7cd88 = 1;
const $2d9d8c9fc2282acc$export$a47c4b43a1be34f0 = 2;
const $2d9d8c9fc2282acc$export$896ae1ade6c829c4 = 3;
const $2d9d8c9fc2282acc$export$2ede184fc2998901 = 0;
const $2d9d8c9fc2282acc$export$d9f0486e75b5ace = 1;
const $2d9d8c9fc2282acc$export$3b296b6f144d5b03 = 2;
const $2d9d8c9fc2282acc$export$a62047d29c96d8ff = 1;
const $2d9d8c9fc2282acc$export$fadb74c06a7f490 = 2;
const $2d9d8c9fc2282acc$export$63b8d6b580fc65ba = 0;
const $2d9d8c9fc2282acc$export$5b29a26d96ee6af0 = 1;
const $2d9d8c9fc2282acc$export$777d8f9551c2216b = 2;
const $2d9d8c9fc2282acc$export$cdfa06f868e2e467 = 3;
const $2d9d8c9fc2282acc$export$4138e1c684b46a20 = 4;
const $2d9d8c9fc2282acc$export$eda4864c68df1fa2 = 5;
const $2d9d8c9fc2282acc$export$20183a0484ce21a0 = 100;
const $2d9d8c9fc2282acc$export$73e0df5177988548 = 101;
const $2d9d8c9fc2282acc$export$28e582859cbec660 = 102;
const $2d9d8c9fc2282acc$export$c8c1508da8d0600c = 103;
const $2d9d8c9fc2282acc$export$99948c02fb51055f = 104;
const $2d9d8c9fc2282acc$export$2110f05edf778d3d = 200;
const $2d9d8c9fc2282acc$export$8805bad65e24940e = 201;
const $2d9d8c9fc2282acc$export$7fbe15b28d28cf52 = 202;
const $2d9d8c9fc2282acc$export$947829af9f2c17f6 = 203;
const $2d9d8c9fc2282acc$export$d5773124e86cf28c = 204;
const $2d9d8c9fc2282acc$export$11d468cc7f19e971 = 205;
const $2d9d8c9fc2282acc$export$a78aed1ca2a87192 = 206;
const $2d9d8c9fc2282acc$export$5d0fe17fd8773bac = 207;
const $2d9d8c9fc2282acc$export$ef5f2dd8ffac5574 = 208;
const $2d9d8c9fc2282acc$export$56b85b2686ab16 = 209;
const $2d9d8c9fc2282acc$export$c05e2a1fc8609506 = 210;
const $2d9d8c9fc2282acc$export$69025ce147cee220 = 0;
const $2d9d8c9fc2282acc$export$7182eb52ea3b3f04 = 1;
const $2d9d8c9fc2282acc$export$eedccec66ab7ebe = 2;
const $2d9d8c9fc2282acc$export$296f78a0b892f81a = 3;
const $2d9d8c9fc2282acc$export$a60d398fc7b7590e = 4;
const $2d9d8c9fc2282acc$export$7d7234c1240a1fc4 = 5;
const $2d9d8c9fc2282acc$export$c5e2c52991f30937 = 6;
const $2d9d8c9fc2282acc$export$2f843afa843d8916 = 7;
const $2d9d8c9fc2282acc$export$e50ac29801f1774d = 0;
const $2d9d8c9fc2282acc$export$9f9d94f963c85479 = 1;
const $2d9d8c9fc2282acc$export$e641dc52bc3494aa = 2;
const $2d9d8c9fc2282acc$export$9fcb6b4294603b2 = 0;
const $2d9d8c9fc2282acc$export$98f52c2a46c598ca = 1;
const $2d9d8c9fc2282acc$export$74b25e54b3bcd548 = 2;
const $2d9d8c9fc2282acc$export$932b3dd283d4a366 = 3;
const $2d9d8c9fc2282acc$export$a0d98fe6d7e4af64 = 4;
const $2d9d8c9fc2282acc$export$2c7b09c1e9abfb5e = 5;
const $2d9d8c9fc2282acc$export$1beec6768cbb3d2d = 300;
const $2d9d8c9fc2282acc$export$8759762a6477f2c4 = 301;
const $2d9d8c9fc2282acc$export$dc59f8aed047f61d = 302;
const $2d9d8c9fc2282acc$export$d64030b316d3b087 = 303;
const $2d9d8c9fc2282acc$export$ee99d97d46898098 = 304;
const $2d9d8c9fc2282acc$export$dbf3e70ff37af79 = 306;
const $2d9d8c9fc2282acc$export$76a9f4355364345c = 307;
const $2d9d8c9fc2282acc$export$533346c8e8dac0f5 = 1000;
const $2d9d8c9fc2282acc$export$9d9334239a5a5e06 = 1001;
const $2d9d8c9fc2282acc$export$c7e7c00b14f51a4f = 1002;
const $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0 = 1003;
const $2d9d8c9fc2282acc$export$d129e38cf6feaa8c = 1004;
const $2d9d8c9fc2282acc$export$14a4936464a36496 = 1004;
const $2d9d8c9fc2282acc$export$d2327c1afe5bfdf2 = 1005;
const $2d9d8c9fc2282acc$export$cbc5b7f5647595d8 = 1005;
const $2d9d8c9fc2282acc$export$8a72f490b25c56c8 = 1006;
const $2d9d8c9fc2282acc$export$19a719f377145a13 = 1007;
const $2d9d8c9fc2282acc$export$dbe96bee3fe9dbf0 = 1007;
const $2d9d8c9fc2282acc$export$5d8599b6a933fb1b = 1008;
const $2d9d8c9fc2282acc$export$90d80f1e3506775f = 1008;
const $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10 = 1009;
const $2d9d8c9fc2282acc$export$545fce0311a9796a = 1010;
const $2d9d8c9fc2282acc$export$88572337f312435f = 1011;
const $2d9d8c9fc2282acc$export$c63dc51868b06a9d = 1012;
const $2d9d8c9fc2282acc$export$5c612977753abe2 = 1013;
const $2d9d8c9fc2282acc$export$c3c7fc4518ebba96 = 1014;
const $2d9d8c9fc2282acc$export$f6d331659b644596 = 1015;
const $2d9d8c9fc2282acc$export$2697304443f382bc = 1016;
const $2d9d8c9fc2282acc$export$b3969b01faf587f2 = 1017;
const $2d9d8c9fc2282acc$export$18886f8ae33e90de = 1018;
const $2d9d8c9fc2282acc$export$cb1fa50553eb14c4 = 1019;
const $2d9d8c9fc2282acc$export$6c8ea339bfab1301 = 1020;
const $2d9d8c9fc2282acc$export$988473390501ed4b = 1021;
const $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb = 1022;
const $2d9d8c9fc2282acc$export$3f8bb04b555a363c = 1023;
const $2d9d8c9fc2282acc$export$cc09ccbf6d1ed449 = 1024;
const $2d9d8c9fc2282acc$export$9053a81c4a69c289 = 1025;
const $2d9d8c9fc2282acc$export$c1b6b5136be58045 = 1026;
const $2d9d8c9fc2282acc$export$1e113ac2d0905829 = 1027;
const $2d9d8c9fc2282acc$export$4e041a7967d15c4b = 1028;
const $2d9d8c9fc2282acc$export$aa92e870a709d190 = 1029;
const $2d9d8c9fc2282acc$export$6cdf0b461c7ce8a0 = 1030;
const $2d9d8c9fc2282acc$export$1ba1c45f9f77d4d7 = 1031;
const $2d9d8c9fc2282acc$export$d1fd40c11bfa798e = 1032;
const $2d9d8c9fc2282acc$export$c200e7d26f592f21 = 1033;
const $2d9d8c9fc2282acc$export$21d1799c6d552fc0 = 33776;
const $2d9d8c9fc2282acc$export$afa304c3e981b668 = 33777;
const $2d9d8c9fc2282acc$export$d2a1a68024a3e56c = 33778;
const $2d9d8c9fc2282acc$export$9a79c424327dacf9 = 33779;
const $2d9d8c9fc2282acc$export$19ada9bbb1af3573 = 35840;
const $2d9d8c9fc2282acc$export$d0f0355bb3d948e4 = 35841;
const $2d9d8c9fc2282acc$export$b82296714358084c = 35842;
const $2d9d8c9fc2282acc$export$b71692456c47b6c3 = 35843;
const $2d9d8c9fc2282acc$export$6ab91af2d757aee7 = 36196;
const $2d9d8c9fc2282acc$export$7800993ef8106a6a = 37492;
const $2d9d8c9fc2282acc$export$23ed8300a860e7d8 = 37496;
const $2d9d8c9fc2282acc$export$dc5570b4a2b92d48 = 37808;
const $2d9d8c9fc2282acc$export$68880cd325f8b2fb = 37809;
const $2d9d8c9fc2282acc$export$7d2c0be323373d95 = 37810;
const $2d9d8c9fc2282acc$export$22b52da301fc3a3e = 37811;
const $2d9d8c9fc2282acc$export$c009e2cb4a66485e = 37812;
const $2d9d8c9fc2282acc$export$118fff5afa255b63 = 37813;
const $2d9d8c9fc2282acc$export$120713c829ae0667 = 37814;
const $2d9d8c9fc2282acc$export$c79eeabbf53313e9 = 37815;
const $2d9d8c9fc2282acc$export$443cf6567cdd6424 = 37816;
const $2d9d8c9fc2282acc$export$6573984fc9840780 = 37817;
const $2d9d8c9fc2282acc$export$e7aee563f30091de = 37818;
const $2d9d8c9fc2282acc$export$2eb8634622ddeab7 = 37819;
const $2d9d8c9fc2282acc$export$202b1ce7b5d25742 = 37820;
const $2d9d8c9fc2282acc$export$18ab77abd087e467 = 37821;
const $2d9d8c9fc2282acc$export$ce40b115e188bc81 = 36492;
const $2d9d8c9fc2282acc$export$4487000d1baf578b = 37840;
const $2d9d8c9fc2282acc$export$4a1746c7512b1ea1 = 37841;
const $2d9d8c9fc2282acc$export$4208debc782f5653 = 37842;
const $2d9d8c9fc2282acc$export$82c5f9d3037aaea3 = 37843;
const $2d9d8c9fc2282acc$export$64e357a152723eb9 = 37844;
const $2d9d8c9fc2282acc$export$1b7711037f5e380e = 37845;
const $2d9d8c9fc2282acc$export$eb234716dfb52c31 = 37846;
const $2d9d8c9fc2282acc$export$8041d2df79c555f = 37847;
const $2d9d8c9fc2282acc$export$27d2c8c0fcc7b83a = 37848;
const $2d9d8c9fc2282acc$export$27b9de07b84a1334 = 37849;
const $2d9d8c9fc2282acc$export$5c2b31a31ccc15c8 = 37850;
const $2d9d8c9fc2282acc$export$5c4d4b335786f8f3 = 37851;
const $2d9d8c9fc2282acc$export$e0c50c800e38be11 = 37852;
const $2d9d8c9fc2282acc$export$9b0442bae422b2db = 37853;
const $2d9d8c9fc2282acc$export$d62fdc9d1b1cccad = 2200;
const $2d9d8c9fc2282acc$export$dfaf4422ce096e29 = 2201;
const $2d9d8c9fc2282acc$export$f8f6f2041b78e210 = 2202;
const $2d9d8c9fc2282acc$export$995b32462a65e855 = 2300;
const $2d9d8c9fc2282acc$export$30fac1aace31cf4d = 2301;
const $2d9d8c9fc2282acc$export$198b11ff4c72bb30 = 2302;
const $2d9d8c9fc2282acc$export$7f795934b84ab523 = 2400;
const $2d9d8c9fc2282acc$export$24a4ccb5099273b5 = 2401;
const $2d9d8c9fc2282acc$export$8e8c3ecdcd8e1fee = 2402;
const $2d9d8c9fc2282acc$export$bcfbbdcf8de7f8cd = 2500;
const $2d9d8c9fc2282acc$export$d875e029ef558d3 = 2501;
const $2d9d8c9fc2282acc$export$4c28c87c2dc84758 = 0;
const $2d9d8c9fc2282acc$export$b23a071aa286eb29 = 1;
const $2d9d8c9fc2282acc$export$f0d8293634f88842 = 2;
const $2d9d8c9fc2282acc$export$7207336e4151a112 = 3000;
const $2d9d8c9fc2282acc$export$f32388edbb32674 = 3001;
const $2d9d8c9fc2282acc$export$deeb383078690b50 = 3200;
const $2d9d8c9fc2282acc$export$8f910f4c4f73df11 = 3201;
const $2d9d8c9fc2282acc$export$2852a58ebdac27b8 = 0;
const $2d9d8c9fc2282acc$export$9990ad26f9db5b2c = 1;
const $2d9d8c9fc2282acc$export$69433f11f42d5527 = 0;
const $2d9d8c9fc2282acc$export$9f542ae4b5baca34 = 7680;
const $2d9d8c9fc2282acc$export$8a4f28336ef203d3 = 7681;
const $2d9d8c9fc2282acc$export$2928c0231297c036 = 7682;
const $2d9d8c9fc2282acc$export$c0e9611c8a15f9a8 = 7683;
const $2d9d8c9fc2282acc$export$9c2c08927385dcc4 = 34055;
const $2d9d8c9fc2282acc$export$7c74ea00fa1315e6 = 34056;
const $2d9d8c9fc2282acc$export$22e2e5726612443 = 5386;
const $2d9d8c9fc2282acc$export$1343870698229224 = 512;
const $2d9d8c9fc2282acc$export$8e1d8ed281997fa6 = 513;
const $2d9d8c9fc2282acc$export$55648a1cde8329a7 = 514;
const $2d9d8c9fc2282acc$export$2dff107857e6aca2 = 515;
const $2d9d8c9fc2282acc$export$6f93765ab2f451a2 = 516;
const $2d9d8c9fc2282acc$export$6f3fb2d2440f2b76 = 517;
const $2d9d8c9fc2282acc$export$4119cf7b4c98fd5a = 518;
const $2d9d8c9fc2282acc$export$14cf96713ddd97a8 = 519;
const $2d9d8c9fc2282acc$export$763e8360f4d7f77d = 35044;
const $2d9d8c9fc2282acc$export$8505d14ac8546ca = 35048;
const $2d9d8c9fc2282acc$export$721e63549e51d81e = 35040;
const $2d9d8c9fc2282acc$export$415731dc4f48e299 = 35045;
const $2d9d8c9fc2282acc$export$9e809946455f13bc = 35049;
const $2d9d8c9fc2282acc$export$2ed9499a35b5f832 = 35041;
const $2d9d8c9fc2282acc$export$32ab2503ea19469a = 35046;
const $2d9d8c9fc2282acc$export$ab4022c2c3f86315 = 35050;
const $2d9d8c9fc2282acc$export$ba7f1db36a76a970 = 35042;
const $2d9d8c9fc2282acc$export$43600cc67fabd9f = '100';
const $2d9d8c9fc2282acc$export$f63012db5506e7dd = '300 es';
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */ class $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    addEventListener(type, listener) {
        if (this._listeners === undefined) this._listeners = {
        };
        const listeners = this._listeners;
        if (listeners[type] === undefined) listeners[type] = [];
        if (listeners[type].indexOf(listener) === -1) listeners[type].push(listener);
    }
    hasEventListener(type, listener) {
        if (this._listeners === undefined) return false;
        const listeners = this._listeners;
        return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[type];
        if (listenerArray !== undefined) {
            const index = listenerArray.indexOf(listener);
            if (index !== -1) listenerArray.splice(index, 1);
        }
    }
    dispatchEvent(event) {
        if (this._listeners === undefined) return;
        const listeners = this._listeners;
        const listenerArray = listeners[event.type];
        if (listenerArray !== undefined) {
            event.target = this;
            // Make a copy, in case listeners are removed while iterating.
            const array = listenerArray.slice(0);
            for(let i1 = 0, l = array.length; i1 < l; i1++)array[i1].call(this, event);
            event.target = null;
        }
    }
}
const $2d9d8c9fc2282acc$var$_lut = [];
for(let i = 0; i < 256; i++)$2d9d8c9fc2282acc$var$_lut[i] = (i < 16 ? '0' : '') + i.toString(16);
let $2d9d8c9fc2282acc$var$_seed = 1234567;
const $2d9d8c9fc2282acc$var$DEG2RAD = Math.PI / 180;
const $2d9d8c9fc2282acc$var$RAD2DEG = 180 / Math.PI;
// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function $2d9d8c9fc2282acc$var$generateUUID() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = $2d9d8c9fc2282acc$var$_lut[d0 & 255] + $2d9d8c9fc2282acc$var$_lut[d0 >> 8 & 255] + $2d9d8c9fc2282acc$var$_lut[d0 >> 16 & 255] + $2d9d8c9fc2282acc$var$_lut[d0 >> 24 & 255] + '-' + $2d9d8c9fc2282acc$var$_lut[d1 & 255] + $2d9d8c9fc2282acc$var$_lut[d1 >> 8 & 255] + '-' + $2d9d8c9fc2282acc$var$_lut[d1 >> 16 & 15 | 64] + $2d9d8c9fc2282acc$var$_lut[d1 >> 24 & 255] + '-' + $2d9d8c9fc2282acc$var$_lut[d2 & 63 | 128] + $2d9d8c9fc2282acc$var$_lut[d2 >> 8 & 255] + '-' + $2d9d8c9fc2282acc$var$_lut[d2 >> 16 & 255] + $2d9d8c9fc2282acc$var$_lut[d2 >> 24 & 255] + $2d9d8c9fc2282acc$var$_lut[d3 & 255] + $2d9d8c9fc2282acc$var$_lut[d3 >> 8 & 255] + $2d9d8c9fc2282acc$var$_lut[d3 >> 16 & 255] + $2d9d8c9fc2282acc$var$_lut[d3 >> 24 & 255];
    // .toUpperCase() here flattens concatenated strings to save heap memory space.
    return uuid.toUpperCase();
}
function $2d9d8c9fc2282acc$var$clamp(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function $2d9d8c9fc2282acc$var$euclideanModulo(n, m) {
    return (n % m + m) % m;
}
// Linear mapping from range <a1, a2> to range <b1, b2>
function $2d9d8c9fc2282acc$var$mapLinear(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function $2d9d8c9fc2282acc$var$inverseLerp(x, y, value) {
    if (x !== y) return (value - x) / (y - x);
    else return 0;
}
// https://en.wikipedia.org/wiki/Linear_interpolation
function $2d9d8c9fc2282acc$var$lerp(x, y, t) {
    return (1 - t) * x + t * y;
}
// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function $2d9d8c9fc2282acc$var$damp(x, y, lambda, dt) {
    return $2d9d8c9fc2282acc$var$lerp(x, y, 1 - Math.exp(-lambda * dt));
}
// https://www.desmos.com/calculator/vcsjnyz7x4
function $2d9d8c9fc2282acc$var$pingpong(x, length = 1) {
    return length - Math.abs($2d9d8c9fc2282acc$var$euclideanModulo(x, length * 2) - length);
}
// http://en.wikipedia.org/wiki/Smoothstep
function $2d9d8c9fc2282acc$var$smoothstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
}
function $2d9d8c9fc2282acc$var$smootherstep(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
// Random integer from <low, high> interval
function $2d9d8c9fc2282acc$var$randInt(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
}
// Random float from <low, high> interval
function $2d9d8c9fc2282acc$var$randFloat(low, high) {
    return low + Math.random() * (high - low);
}
// Random float from <-range/2, range/2> interval
function $2d9d8c9fc2282acc$var$randFloatSpread(range) {
    return range * (0.5 - Math.random());
}
// Deterministic pseudo-random float in the interval [ 0, 1 ]
function $2d9d8c9fc2282acc$var$seededRandom(s) {
    if (s !== undefined) $2d9d8c9fc2282acc$var$_seed = s % 2147483647;
    // Park-Miller algorithm
    $2d9d8c9fc2282acc$var$_seed = $2d9d8c9fc2282acc$var$_seed * 16807 % 2147483647;
    return ($2d9d8c9fc2282acc$var$_seed - 1) / 2147483646;
}
function $2d9d8c9fc2282acc$var$degToRad(degrees) {
    return degrees * $2d9d8c9fc2282acc$var$DEG2RAD;
}
function $2d9d8c9fc2282acc$var$radToDeg(radians) {
    return radians * $2d9d8c9fc2282acc$var$RAD2DEG;
}
function $2d9d8c9fc2282acc$var$isPowerOfTwo(value) {
    return (value & value - 1) === 0 && value !== 0;
}
function $2d9d8c9fc2282acc$var$ceilPowerOfTwo(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function $2d9d8c9fc2282acc$var$floorPowerOfTwo(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function $2d9d8c9fc2282acc$var$setQuaternionFromProperEuler(q, a, b, c, order) {
    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
    // rotations are applied to the axes in the order specified by 'order'
    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    // angles are in radians
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch(order){
        case 'XYX':
            q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
            break;
        case 'YZY':
            q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
            break;
        case 'ZXZ':
            q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
            break;
        case 'XZX':
            q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
            break;
        case 'YXY':
            q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
            break;
        case 'ZYZ':
            q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
            break;
        default:
            console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
    }
}
var $2d9d8c9fc2282acc$export$380958644dbbc22b = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    DEG2RAD: $2d9d8c9fc2282acc$var$DEG2RAD,
    RAD2DEG: $2d9d8c9fc2282acc$var$RAD2DEG,
    generateUUID: $2d9d8c9fc2282acc$var$generateUUID,
    clamp: $2d9d8c9fc2282acc$var$clamp,
    euclideanModulo: $2d9d8c9fc2282acc$var$euclideanModulo,
    mapLinear: $2d9d8c9fc2282acc$var$mapLinear,
    inverseLerp: $2d9d8c9fc2282acc$var$inverseLerp,
    lerp: $2d9d8c9fc2282acc$var$lerp,
    damp: $2d9d8c9fc2282acc$var$damp,
    pingpong: $2d9d8c9fc2282acc$var$pingpong,
    smoothstep: $2d9d8c9fc2282acc$var$smoothstep,
    smootherstep: $2d9d8c9fc2282acc$var$smootherstep,
    randInt: $2d9d8c9fc2282acc$var$randInt,
    randFloat: $2d9d8c9fc2282acc$var$randFloat,
    randFloatSpread: $2d9d8c9fc2282acc$var$randFloatSpread,
    seededRandom: $2d9d8c9fc2282acc$var$seededRandom,
    degToRad: $2d9d8c9fc2282acc$var$degToRad,
    radToDeg: $2d9d8c9fc2282acc$var$radToDeg,
    isPowerOfTwo: $2d9d8c9fc2282acc$var$isPowerOfTwo,
    ceilPowerOfTwo: $2d9d8c9fc2282acc$var$ceilPowerOfTwo,
    floorPowerOfTwo: $2d9d8c9fc2282acc$var$floorPowerOfTwo,
    setQuaternionFromProperEuler: $2d9d8c9fc2282acc$var$setQuaternionFromProperEuler
});
class $2d9d8c9fc2282acc$export$c977b3e384af9ae1 {
    constructor(x = 0, y = 0){
        this.x = x;
        this.y = y;
    }
    get width() {
        return this.x;
    }
    set width(value) {
        this.x = value;
    }
    get height() {
        return this.y;
    }
    set height(value) {
        this.y = value;
    }
    set(x, y) {
        this.x = x;
        this.y = y;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            default:
                throw new Error('index is out of range: ' + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            default:
                throw new Error('index is out of range: ' + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        return this;
    }
    add(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
            return this.addVectors(v, w);
        }
        this.x += v.x;
        this.y += v.y;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        return this;
    }
    sub(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
            return this.subVectors(v, w);
        }
        this.x -= v.x;
        this.y -= v.y;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        return this;
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    applyMatrix3(m) {
        const x = this.x, y = this.y;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6];
        this.y = e[1] * x + e[4] * y + e[7];
        return this;
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y;
    }
    cross(v) {
        return this.x * v.y - this.y * v.x;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    angle() {
        // computes the angle in radians with respect to the positive x-axis
        const angle = Math.atan2(-this.y, -this.x) + Math.PI;
        return angle;
    }
    distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y;
        return dx * dx + dy * dy;
    }
    manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        return array;
    }
    fromBufferAttribute(attribute, index, offset) {
        if (offset !== undefined) console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        return this;
    }
    rotateAround(center, angle) {
        const c = Math.cos(angle), s = Math.sin(angle);
        const x = this.x - center.x;
        const y = this.y - center.y;
        this.x = x * c - y * s + center.x;
        this.y = x * s + y * c + center.y;
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
    }
}
$2d9d8c9fc2282acc$export$c977b3e384af9ae1.prototype.isVector2 = true;
class $2d9d8c9fc2282acc$export$8ff26dafa08918 {
    constructor(){
        this.elements = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (arguments.length > 0) console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
    }
    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
        const te = this.elements;
        te[0] = n11;
        te[1] = n21;
        te[2] = n31;
        te[3] = n12;
        te[4] = n22;
        te[5] = n32;
        te[6] = n13;
        te[7] = n23;
        te[8] = n33;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
        return this;
    }
    copy(m) {
        const te = this.elements;
        const me = m.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrix3Column(this, 0);
        yAxis.setFromMatrix3Column(this, 1);
        zAxis.setFromMatrix3Column(this, 2);
        return this;
    }
    setFromMatrix4(m) {
        const me = m.elements;
        this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);
        return this;
    }
    multiply(m) {
        return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
        return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[3], a13 = ae[6];
        const a21 = ae[1], a22 = ae[4], a23 = ae[7];
        const a31 = ae[2], a32 = ae[5], a33 = ae[8];
        const b11 = be[0], b12 = be[3], b13 = be[6];
        const b21 = be[1], b22 = be[4], b23 = be[7];
        const b31 = be[2], b32 = be[5], b33 = be[8];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31;
        te[3] = a11 * b12 + a12 * b22 + a13 * b32;
        te[6] = a11 * b13 + a12 * b23 + a13 * b33;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31;
        te[4] = a21 * b12 + a22 * b22 + a23 * b32;
        te[7] = a21 * b13 + a22 * b23 + a23 * b33;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31;
        te[5] = a31 * b12 + a32 * b22 + a33 * b32;
        te[8] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
    }
    multiplyScalar(s) {
        const te = this.elements;
        te[0] *= s;
        te[3] *= s;
        te[6] *= s;
        te[1] *= s;
        te[4] *= s;
        te[7] *= s;
        te[2] *= s;
        te[5] *= s;
        te[8] *= s;
        return this;
    }
    determinant() {
        const te = this.elements;
        const a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];
        return a * e * i2 - a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;
    }
    invert() {
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n31 * n23 - n33 * n21) * detInv;
        te[2] = (n32 * n21 - n31 * n22) * detInv;
        te[3] = t12 * detInv;
        te[4] = (n33 * n11 - n31 * n13) * detInv;
        te[5] = (n31 * n12 - n32 * n11) * detInv;
        te[6] = t13 * detInv;
        te[7] = (n21 * n13 - n23 * n11) * detInv;
        te[8] = (n22 * n11 - n21 * n12) * detInv;
        return this;
    }
    transpose() {
        let tmp;
        const m = this.elements;
        tmp = m[1];
        m[1] = m[3];
        m[3] = tmp;
        tmp = m[2];
        m[2] = m[6];
        m[6] = tmp;
        tmp = m[5];
        m[5] = m[7];
        m[7] = tmp;
        return this;
    }
    getNormalMatrix(matrix4) {
        return this.setFromMatrix4(matrix4).invert().transpose();
    }
    transposeIntoArray(r) {
        const m = this.elements;
        r[0] = m[0];
        r[1] = m[3];
        r[2] = m[6];
        r[3] = m[1];
        r[4] = m[4];
        r[5] = m[7];
        r[6] = m[2];
        r[7] = m[5];
        r[8] = m[8];
        return this;
    }
    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
        const c = Math.cos(rotation);
        const s = Math.sin(rotation);
        this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);
        return this;
    }
    scale(sx, sy) {
        const te = this.elements;
        te[0] *= sx;
        te[3] *= sx;
        te[6] *= sx;
        te[1] *= sy;
        te[4] *= sy;
        te[7] *= sy;
        return this;
    }
    rotate(theta) {
        const c = Math.cos(theta);
        const s = Math.sin(theta);
        const te = this.elements;
        const a11 = te[0], a12 = te[3], a13 = te[6];
        const a21 = te[1], a22 = te[4], a23 = te[7];
        te[0] = c * a11 + s * a21;
        te[3] = c * a12 + s * a22;
        te[6] = c * a13 + s * a23;
        te[1] = -s * a11 + c * a21;
        te[4] = -s * a12 + c * a22;
        te[7] = -s * a13 + c * a23;
        return this;
    }
    translate(tx, ty) {
        const te = this.elements;
        te[0] += tx * te[2];
        te[3] += tx * te[5];
        te[6] += tx * te[8];
        te[1] += ty * te[2];
        te[4] += ty * te[5];
        te[7] += ty * te[8];
        return this;
    }
    equals(matrix) {
        const te = this.elements;
        const me = matrix.elements;
        for(let i3 = 0; i3 < 9; i3++){
            if (te[i3] !== me[i3]) return false;
        }
        return true;
    }
    fromArray(array, offset = 0) {
        for(let i4 = 0; i4 < 9; i4++)this.elements[i4] = array[i4 + offset];
        return this;
    }
    toArray(array = [], offset = 0) {
        const te = this.elements;
        array[offset] = te[0];
        array[offset + 1] = te[1];
        array[offset + 2] = te[2];
        array[offset + 3] = te[3];
        array[offset + 4] = te[4];
        array[offset + 5] = te[5];
        array[offset + 6] = te[6];
        array[offset + 7] = te[7];
        array[offset + 8] = te[8];
        return array;
    }
    clone() {
        return new this.constructor().fromArray(this.elements);
    }
}
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.isMatrix3 = true;
function $2d9d8c9fc2282acc$var$arrayMax(array) {
    if (array.length === 0) return -Infinity;
    let max = array[0];
    for(let i5 = 1, l = array.length; i5 < l; ++i5)if (array[i5] > max) max = array[i5];
    return max;
}
const $2d9d8c9fc2282acc$var$TYPED_ARRAYS = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray: Uint8ClampedArray,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array
};
function $2d9d8c9fc2282acc$var$getTypedArray(type, buffer) {
    return new $2d9d8c9fc2282acc$var$TYPED_ARRAYS[type](buffer);
}
function $2d9d8c9fc2282acc$var$createElementNS(name) {
    return document.createElementNS('http://www.w3.org/1999/xhtml', name);
}
let $2d9d8c9fc2282acc$var$_canvas;
class $2d9d8c9fc2282acc$export$698882cf06df44aa {
    static getDataURL(image) {
        if (/^data:/i.test(image.src)) return image.src;
        if (typeof HTMLCanvasElement == 'undefined') return image.src;
        let canvas;
        if (image instanceof HTMLCanvasElement) canvas = image;
        else {
            if ($2d9d8c9fc2282acc$var$_canvas === undefined) $2d9d8c9fc2282acc$var$_canvas = $2d9d8c9fc2282acc$var$createElementNS('canvas');
            $2d9d8c9fc2282acc$var$_canvas.width = image.width;
            $2d9d8c9fc2282acc$var$_canvas.height = image.height;
            const context = $2d9d8c9fc2282acc$var$_canvas.getContext('2d');
            if (image instanceof ImageData) context.putImageData(image, 0, 0);
            else context.drawImage(image, 0, 0, image.width, image.height);
            canvas = $2d9d8c9fc2282acc$var$_canvas;
        }
        if (canvas.width > 2048 || canvas.height > 2048) {
            console.warn('THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image);
            return canvas.toDataURL('image/jpeg', 0.6);
        } else return canvas.toDataURL('image/png');
    }
}
let $2d9d8c9fc2282acc$var$textureId = 0;
class $2d9d8c9fc2282acc$export$5431306cf43de24a extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(image = $2d9d8c9fc2282acc$export$5431306cf43de24a.DEFAULT_IMAGE, mapping = $2d9d8c9fc2282acc$export$5431306cf43de24a.DEFAULT_MAPPING, wrapS = $2d9d8c9fc2282acc$export$9d9334239a5a5e06, wrapT = $2d9d8c9fc2282acc$export$9d9334239a5a5e06, magFilter = $2d9d8c9fc2282acc$export$8a72f490b25c56c8, minFilter = $2d9d8c9fc2282acc$export$5d8599b6a933fb1b, format = $2d9d8c9fc2282acc$export$3f8bb04b555a363c, type = $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10, anisotropy = 1, encoding = $2d9d8c9fc2282acc$export$7207336e4151a112){
        super();
        Object.defineProperty(this, 'id', {
            value: $2d9d8c9fc2282acc$var$textureId++
        });
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        this.name = '';
        this.image = image;
        this.mipmaps = [];
        this.mapping = mapping;
        this.wrapS = wrapS;
        this.wrapT = wrapT;
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.anisotropy = anisotropy;
        this.format = format;
        this.internalFormat = null;
        this.type = type;
        this.offset = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0, 0);
        this.repeat = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.center = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0, 0);
        this.rotation = 0;
        this.matrixAutoUpdate = true;
        this.matrix = new $2d9d8c9fc2282acc$export$8ff26dafa08918();
        this.generateMipmaps = true;
        this.premultiplyAlpha = false;
        this.flipY = true;
        this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
        // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
        //
        // Also changing the encoding after already used by a Material will not automatically make the Material
        // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
        this.encoding = encoding;
        this.userData = {
        };
        this.version = 0;
        this.onUpdate = null;
        this.isRenderTargetTexture = false;
    }
    updateMatrix() {
        this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.image = source.image;
        this.mipmaps = source.mipmaps.slice(0);
        this.mapping = source.mapping;
        this.wrapS = source.wrapS;
        this.wrapT = source.wrapT;
        this.magFilter = source.magFilter;
        this.minFilter = source.minFilter;
        this.anisotropy = source.anisotropy;
        this.format = source.format;
        this.internalFormat = source.internalFormat;
        this.type = source.type;
        this.offset.copy(source.offset);
        this.repeat.copy(source.repeat);
        this.center.copy(source.center);
        this.rotation = source.rotation;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrix.copy(source.matrix);
        this.generateMipmaps = source.generateMipmaps;
        this.premultiplyAlpha = source.premultiplyAlpha;
        this.flipY = source.flipY;
        this.unpackAlignment = source.unpackAlignment;
        this.encoding = source.encoding;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
    }
    toJSON(meta) {
        const isRootObject = meta === undefined || typeof meta === 'string';
        if (!isRootObject && meta.textures[this.uuid] !== undefined) return meta.textures[this.uuid];
        const output = {
            metadata: {
                version: 4.5,
                type: 'Texture',
                generator: 'Texture.toJSON'
            },
            uuid: this.uuid,
            name: this.name,
            mapping: this.mapping,
            repeat: [
                this.repeat.x,
                this.repeat.y
            ],
            offset: [
                this.offset.x,
                this.offset.y
            ],
            center: [
                this.center.x,
                this.center.y
            ],
            rotation: this.rotation,
            wrap: [
                this.wrapS,
                this.wrapT
            ],
            format: this.format,
            type: this.type,
            encoding: this.encoding,
            minFilter: this.minFilter,
            magFilter: this.magFilter,
            anisotropy: this.anisotropy,
            flipY: this.flipY,
            premultiplyAlpha: this.premultiplyAlpha,
            unpackAlignment: this.unpackAlignment
        };
        if (this.image !== undefined) {
            // TODO: Move to THREE.Image
            const image = this.image;
            if (image.uuid === undefined) image.uuid = $2d9d8c9fc2282acc$var$generateUUID(); // UGH
            if (!isRootObject && meta.images[image.uuid] === undefined) {
                let url;
                if (Array.isArray(image)) {
                    // process array of images e.g. CubeTexture
                    url = [];
                    for(let i6 = 0, l = image.length; i6 < l; i6++)// check cube texture with data textures
                    if (image[i6].isDataTexture) url.push($2d9d8c9fc2282acc$var$serializeImage(image[i6].image));
                    else url.push($2d9d8c9fc2282acc$var$serializeImage(image[i6]));
                } else // process single image
                url = $2d9d8c9fc2282acc$var$serializeImage(image);
                meta.images[image.uuid] = {
                    uuid: image.uuid,
                    url: url
                };
            }
            output.image = image.uuid;
        }
        if (JSON.stringify(this.userData) !== '{}') output.userData = this.userData;
        if (!isRootObject) meta.textures[this.uuid] = output;
        return output;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
    transformUv(uv) {
        if (this.mapping !== $2d9d8c9fc2282acc$export$1beec6768cbb3d2d) return uv;
        uv.applyMatrix3(this.matrix);
        if (uv.x < 0 || uv.x > 1) switch(this.wrapS){
            case $2d9d8c9fc2282acc$export$533346c8e8dac0f5:
                uv.x = uv.x - Math.floor(uv.x);
                break;
            case $2d9d8c9fc2282acc$export$9d9334239a5a5e06:
                uv.x = uv.x < 0 ? 0 : 1;
                break;
            case $2d9d8c9fc2282acc$export$c7e7c00b14f51a4f:
                if (Math.abs(Math.floor(uv.x) % 2) === 1) uv.x = Math.ceil(uv.x) - uv.x;
                else uv.x = uv.x - Math.floor(uv.x);
                break;
        }
        if (uv.y < 0 || uv.y > 1) switch(this.wrapT){
            case $2d9d8c9fc2282acc$export$533346c8e8dac0f5:
                uv.y = uv.y - Math.floor(uv.y);
                break;
            case $2d9d8c9fc2282acc$export$9d9334239a5a5e06:
                uv.y = uv.y < 0 ? 0 : 1;
                break;
            case $2d9d8c9fc2282acc$export$c7e7c00b14f51a4f:
                if (Math.abs(Math.floor(uv.y) % 2) === 1) uv.y = Math.ceil(uv.y) - uv.y;
                else uv.y = uv.y - Math.floor(uv.y);
                break;
        }
        if (this.flipY) uv.y = 1 - uv.y;
        return uv;
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
}
$2d9d8c9fc2282acc$export$5431306cf43de24a.DEFAULT_IMAGE = undefined;
$2d9d8c9fc2282acc$export$5431306cf43de24a.DEFAULT_MAPPING = $2d9d8c9fc2282acc$export$1beec6768cbb3d2d;
$2d9d8c9fc2282acc$export$5431306cf43de24a.prototype.isTexture = true;
function $2d9d8c9fc2282acc$var$serializeImage(image) {
    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) // default images
    return $2d9d8c9fc2282acc$export$698882cf06df44aa.getDataURL(image);
    else {
        if (image.data) // images of DataTexture
        return {
            data: Array.prototype.slice.call(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
        };
        else {
            console.warn('THREE.Texture: Unable to serialize Texture.');
            return {
            };
        }
    }
}
class $2d9d8c9fc2282acc$export$fa7daccca11cdbe3 {
    constructor(x = 0, y = 0, z = 0, w = 1){
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    get width() {
        return this.z;
    }
    set width(value) {
        this.z = value;
    }
    get height() {
        return this.w;
    }
    set height(value) {
        this.w = value;
    }
    set(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        this.w = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setZ(z) {
        this.z = z;
        return this;
    }
    setW(w) {
        this.w = w;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            case 2:
                this.z = value;
                break;
            case 3:
                this.w = value;
                break;
            default:
                throw new Error('index is out of range: ' + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            case 3:
                return this.w;
            default:
                throw new Error('index is out of range: ' + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z, this.w);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        this.w = v.w !== undefined ? v.w : 1;
        return this;
    }
    add(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
            return this.addVectors(v, w);
        }
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        this.w += v.w;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        this.w += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        this.w = a.w + b.w;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        this.w += v.w * s;
        return this;
    }
    sub(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
            return this.subVectors(v, w);
        }
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        this.w -= v.w;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        this.w -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        this.w = a.w - b.w;
        return this;
    }
    multiply(v) {
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        this.w *= v.w;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        this.w *= scalar;
        return this;
    }
    applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z, w = this.w;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
        this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
        this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
        this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    setAxisAngleFromQuaternion(q) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
        // q is assumed to be normalized
        this.w = 2 * Math.acos(q.w);
        const s = Math.sqrt(1 - q.w * q.w);
        if (s < 0.0001) {
            this.x = 1;
            this.y = 0;
            this.z = 0;
        } else {
            this.x = q.x / s;
            this.y = q.y / s;
            this.z = q.z / s;
        }
        return this;
    }
    setAxisAngleFromRotationMatrix(m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        let angle, x, y, z; // variables for result
        const epsilon = 0.01, epsilon2 = 0.1, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
        if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {
            // singularity found
            // first check for identity matrix which must have +1 for all terms
            // in leading diagonal and zero in other terms
            if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {
                // this singularity is identity matrix so angle = 0
                this.set(1, 0, 0, 0);
                return this; // zero angle, arbitrary axis
            }
            // otherwise this singularity is angle = 180
            angle = Math.PI;
            const xx = (m11 + 1) / 2;
            const yy = (m22 + 1) / 2;
            const zz = (m33 + 1) / 2;
            const xy = (m12 + m21) / 4;
            const xz = (m13 + m31) / 4;
            const yz = (m23 + m32) / 4;
            if (xx > yy && xx > zz) {
                // m11 is the largest diagonal term
                if (xx < epsilon) {
                    x = 0;
                    y = 0.707106781;
                    z = 0.707106781;
                } else {
                    x = Math.sqrt(xx);
                    y = xy / x;
                    z = xz / x;
                }
            } else if (yy > zz) {
                // m22 is the largest diagonal term
                if (yy < epsilon) {
                    x = 0.707106781;
                    y = 0;
                    z = 0.707106781;
                } else {
                    y = Math.sqrt(yy);
                    x = xy / y;
                    z = yz / y;
                }
            } else // m33 is the largest diagonal term so base result on this
            if (zz < epsilon) {
                x = 0.707106781;
                y = 0.707106781;
                z = 0;
            } else {
                z = Math.sqrt(zz);
                x = xz / z;
                y = yz / z;
            }
            this.set(x, y, z, angle);
            return this; // return 180 deg rotation
        }
        // as we have reached here there are no singularities so we can handle normally
        let s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize
        if (Math.abs(s) < 0.001) s = 1;
        // prevent divide by zero, should not happen if matrix is orthogonal and should be
        // caught by singularity test above, but I've left it in just in case
        this.x = (m32 - m23) / s;
        this.y = (m13 - m31) / s;
        this.z = (m21 - m12) / s;
        this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
        return this;
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        this.w = Math.min(this.w, v.w);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        this.w = Math.max(this.w, v.w);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        this.z = Math.max(min.z, Math.min(max.z, this.z));
        this.w = Math.max(min.w, Math.min(max.w, this.w));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        this.w = Math.max(minVal, Math.min(maxVal, this.w));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        this.w = Math.floor(this.w);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        this.w = Math.ceil(this.w);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        this.w = Math.round(this.w);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        this.w = -this.w;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
    }
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        this.w += (v.w - this.w) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        this.w = v1.w + (v2.w - v1.w) * alpha;
        return this;
    }
    equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        this.w = array[offset + 3];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        array[offset + 3] = this.w;
        return array;
    }
    fromBufferAttribute(attribute, index, offset) {
        if (offset !== undefined) console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        this.w = attribute.getW(index);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        this.w = Math.random();
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
        yield this.w;
    }
}
$2d9d8c9fc2282acc$export$fa7daccca11cdbe3.prototype.isVector4 = true;
/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/ class $2d9d8c9fc2282acc$export$3c052beb2e51e23f extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(width, height, options = {
    }){
        super();
        this.width = width;
        this.height = height;
        this.depth = 1;
        this.scissor = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 0, width, height);
        this.scissorTest = false;
        this.viewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 0, width, height);
        this.texture = new $2d9d8c9fc2282acc$export$5431306cf43de24a(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
        this.texture.isRenderTargetTexture = true;
        this.texture.image = {
            width: width,
            height: height,
            depth: 1
        };
        this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
        this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
        this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
        this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;
        this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
    }
    setTexture(texture) {
        texture.image = {
            width: this.width,
            height: this.height,
            depth: this.depth
        };
        this.texture = texture;
    }
    setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            this.texture.image.width = width;
            this.texture.image.height = height;
            this.texture.image.depth = depth;
            this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.viewport.copy(source.viewport);
        this.texture = source.texture.clone();
        this.texture.image = {
            ...this.texture.image
        }; // See #20328.
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        this.depthTexture = source.depthTexture;
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
}
$2d9d8c9fc2282acc$export$3c052beb2e51e23f.prototype.isWebGLRenderTarget = true;
class $2d9d8c9fc2282acc$export$bd934554fb721730 extends $2d9d8c9fc2282acc$export$3c052beb2e51e23f {
    constructor(width, height, count){
        super(width, height);
        const texture = this.texture;
        this.texture = [];
        for(let i7 = 0; i7 < count; i7++)this.texture[i7] = texture.clone();
    }
    setSize(width, height, depth = 1) {
        if (this.width !== width || this.height !== height || this.depth !== depth) {
            this.width = width;
            this.height = height;
            this.depth = depth;
            for(let i8 = 0, il = this.texture.length; i8 < il; i8++){
                this.texture[i8].image.width = width;
                this.texture[i8].image.height = height;
                this.texture[i8].image.depth = depth;
            }
            this.dispose();
        }
        this.viewport.set(0, 0, width, height);
        this.scissor.set(0, 0, width, height);
        return this;
    }
    copy(source) {
        this.dispose();
        this.width = source.width;
        this.height = source.height;
        this.depth = source.depth;
        this.viewport.set(0, 0, this.width, this.height);
        this.scissor.set(0, 0, this.width, this.height);
        this.depthBuffer = source.depthBuffer;
        this.stencilBuffer = source.stencilBuffer;
        this.depthTexture = source.depthTexture;
        this.texture.length = 0;
        for(let i9 = 0, il = source.texture.length; i9 < il; i9++)this.texture[i9] = source.texture[i9].clone();
        return this;
    }
}
$2d9d8c9fc2282acc$export$bd934554fb721730.prototype.isWebGLMultipleRenderTargets = true;
class $2d9d8c9fc2282acc$export$cb2022643d3c928d extends $2d9d8c9fc2282acc$export$3c052beb2e51e23f {
    constructor(width, height, options = {
    }){
        super(width, height, options);
        this.samples = 4;
        this.ignoreDepthForMultisampleCopy = options.ignoreDepth !== undefined ? options.ignoreDepth : true;
        this.useRenderToTexture = options.useRenderToTexture !== undefined ? options.useRenderToTexture : false;
        this.useRenderbuffer = this.useRenderToTexture === false;
    }
    copy(source) {
        super.copy.call(this, source);
        this.samples = source.samples;
        this.useRenderToTexture = source.useRenderToTexture;
        this.useRenderbuffer = source.useRenderbuffer;
        return this;
    }
}
$2d9d8c9fc2282acc$export$cb2022643d3c928d.prototype.isWebGLMultisampleRenderTarget = true;
class $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3 {
    constructor(x = 0, y = 0, z = 0, w = 1){
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
    }
    static slerp(qa, qb, qm, t) {
        console.warn('THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.');
        return qm.slerpQuaternions(qa, qb, t);
    }
    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
        // fuzz-free, array-based Quaternion SLERP operation
        let x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
        if (t === 0) {
            dst[dstOffset + 0] = x0;
            dst[dstOffset + 1] = y0;
            dst[dstOffset + 2] = z0;
            dst[dstOffset + 3] = w0;
            return;
        }
        if (t === 1) {
            dst[dstOffset + 0] = x1;
            dst[dstOffset + 1] = y1;
            dst[dstOffset + 2] = z1;
            dst[dstOffset + 3] = w1;
            return;
        }
        if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
            let s = 1 - t;
            const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
            // Skip the Slerp for tiny steps to avoid numeric problems:
            if (sqrSin > Number.EPSILON) {
                const sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
                s = Math.sin(s * len) / sin;
                t = Math.sin(t * len) / sin;
            }
            const tDir = t * dir;
            x0 = x0 * s + x1 * tDir;
            y0 = y0 * s + y1 * tDir;
            z0 = z0 * s + z1 * tDir;
            w0 = w0 * s + w1 * tDir;
            // Normalize in case we just did a lerp:
            if (s === 1 - t) {
                const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                x0 *= f;
                y0 *= f;
                z0 *= f;
                w0 *= f;
            }
        }
        dst[dstOffset] = x0;
        dst[dstOffset + 1] = y0;
        dst[dstOffset + 2] = z0;
        dst[dstOffset + 3] = w0;
    }
    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
        const x0 = src0[srcOffset0];
        const y0 = src0[srcOffset0 + 1];
        const z0 = src0[srcOffset0 + 2];
        const w0 = src0[srcOffset0 + 3];
        const x1 = src1[srcOffset1];
        const y1 = src1[srcOffset1 + 1];
        const z1 = src1[srcOffset1 + 2];
        const w1 = src1[srcOffset1 + 3];
        dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
        dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
        dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
        dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;
        return dst;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onChangeCallback();
    }
    get w() {
        return this._w;
    }
    set w(value) {
        this._w = value;
        this._onChangeCallback();
    }
    set(x, y, z, w) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._w = w;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._w);
    }
    copy(quaternion) {
        this._x = quaternion.x;
        this._y = quaternion.y;
        this._z = quaternion.z;
        this._w = quaternion.w;
        this._onChangeCallback();
        return this;
    }
    setFromEuler(euler, update) {
        if (!(euler && euler.isEuler)) throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
        const x = euler._x, y = euler._y, z = euler._z, order = euler._order;
        // http://www.mathworks.com/matlabcentral/fileexchange/
        // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
        //	content/SpinCalc.m
        const cos = Math.cos;
        const sin = Math.sin;
        const c1 = cos(x / 2);
        const c2 = cos(y / 2);
        const c3 = cos(z / 2);
        const s1 = sin(x / 2);
        const s2 = sin(y / 2);
        const s3 = sin(z / 2);
        switch(order){
            case 'XYZ':
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'YXZ':
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case 'ZXY':
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'ZYX':
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            case 'YZX':
                this._x = s1 * c2 * c3 + c1 * s2 * s3;
                this._y = c1 * s2 * c3 + s1 * c2 * s3;
                this._z = c1 * c2 * s3 - s1 * s2 * c3;
                this._w = c1 * c2 * c3 - s1 * s2 * s3;
                break;
            case 'XZY':
                this._x = s1 * c2 * c3 - c1 * s2 * s3;
                this._y = c1 * s2 * c3 - s1 * c2 * s3;
                this._z = c1 * c2 * s3 + s1 * s2 * c3;
                this._w = c1 * c2 * c3 + s1 * s2 * s3;
                break;
            default:
                console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
        }
        if (update !== false) this._onChangeCallback();
        return this;
    }
    setFromAxisAngle(axis, angle) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
        // assumes axis is normalized
        const halfAngle = angle / 2, s = Math.sin(halfAngle);
        this._x = axis.x * s;
        this._y = axis.y * s;
        this._z = axis.z * s;
        this._w = Math.cos(halfAngle);
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
        if (trace > 0) {
            const s = 0.5 / Math.sqrt(trace + 1);
            this._w = 0.25 / s;
            this._x = (m32 - m23) * s;
            this._y = (m13 - m31) * s;
            this._z = (m21 - m12) * s;
        } else if (m11 > m22 && m11 > m33) {
            const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            this._w = (m32 - m23) / s;
            this._x = 0.25 * s;
            this._y = (m12 + m21) / s;
            this._z = (m13 + m31) / s;
        } else if (m22 > m33) {
            const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            this._w = (m13 - m31) / s;
            this._x = (m12 + m21) / s;
            this._y = 0.25 * s;
            this._z = (m23 + m32) / s;
        } else {
            const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            this._w = (m21 - m12) / s;
            this._x = (m13 + m31) / s;
            this._y = (m23 + m32) / s;
            this._z = 0.25 * s;
        }
        this._onChangeCallback();
        return this;
    }
    setFromUnitVectors(vFrom, vTo) {
        // assumes direction vectors vFrom and vTo are normalized
        let r = vFrom.dot(vTo) + 1;
        if (r < Number.EPSILON) {
            // vFrom and vTo point in opposite directions
            r = 0;
            if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
                this._x = -vFrom.y;
                this._y = vFrom.x;
                this._z = 0;
                this._w = r;
            } else {
                this._x = 0;
                this._y = -vFrom.z;
                this._z = vFrom.y;
                this._w = r;
            }
        } else {
            // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
            this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
            this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
            this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
            this._w = r;
        }
        return this.normalize();
    }
    angleTo(q) {
        return 2 * Math.acos(Math.abs($2d9d8c9fc2282acc$var$clamp(this.dot(q), -1, 1)));
    }
    rotateTowards(q, step) {
        const angle = this.angleTo(q);
        if (angle === 0) return this;
        const t = Math.min(1, step / angle);
        this.slerp(q, t);
        return this;
    }
    identity() {
        return this.set(0, 0, 0, 1);
    }
    invert() {
        // quaternion is assumed to have unit length
        return this.conjugate();
    }
    conjugate() {
        this._x *= -1;
        this._y *= -1;
        this._z *= -1;
        this._onChangeCallback();
        return this;
    }
    dot(v) {
        return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
    }
    lengthSq() {
        return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
    }
    length() {
        return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
    }
    normalize() {
        let l = this.length();
        if (l === 0) {
            this._x = 0;
            this._y = 0;
            this._z = 0;
            this._w = 1;
        } else {
            l = 1 / l;
            this._x = this._x * l;
            this._y = this._y * l;
            this._z = this._z * l;
            this._w = this._w * l;
        }
        this._onChangeCallback();
        return this;
    }
    multiply(q, p) {
        if (p !== undefined) {
            console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');
            return this.multiplyQuaternions(q, p);
        }
        return this.multiplyQuaternions(this, q);
    }
    premultiply(q) {
        return this.multiplyQuaternions(q, this);
    }
    multiplyQuaternions(a, b) {
        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
        const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
        const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
        this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
        this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
        this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
        this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
        this._onChangeCallback();
        return this;
    }
    slerp(qb, t) {
        if (t === 0) return this;
        if (t === 1) return this.copy(qb);
        const x = this._x, y = this._y, z = this._z, w = this._w;
        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
        let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
        if (cosHalfTheta < 0) {
            this._w = -qb._w;
            this._x = -qb._x;
            this._y = -qb._y;
            this._z = -qb._z;
            cosHalfTheta = -cosHalfTheta;
        } else this.copy(qb);
        if (cosHalfTheta >= 1) {
            this._w = w;
            this._x = x;
            this._y = y;
            this._z = z;
            return this;
        }
        const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
        if (sqrSinHalfTheta <= Number.EPSILON) {
            const s = 1 - t;
            this._w = s * w + t * this._w;
            this._x = s * x + t * this._x;
            this._y = s * y + t * this._y;
            this._z = s * z + t * this._z;
            this.normalize();
            this._onChangeCallback();
            return this;
        }
        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
        this._w = w * ratioA + this._w * ratioB;
        this._x = x * ratioA + this._x * ratioB;
        this._y = y * ratioA + this._y * ratioB;
        this._z = z * ratioA + this._z * ratioB;
        this._onChangeCallback();
        return this;
    }
    slerpQuaternions(qa, qb, t) {
        this.copy(qa).slerp(qb, t);
    }
    random() {
        // Derived from http://planning.cs.uiuc.edu/node198.html
        // Note, this source uses w, x, y, z ordering,
        // so we swap the order below.
        const u1 = Math.random();
        const sqrt1u1 = Math.sqrt(1 - u1);
        const sqrtu1 = Math.sqrt(u1);
        const u2 = 2 * Math.PI * Math.random();
        const u3 = 2 * Math.PI * Math.random();
        return this.set(sqrt1u1 * Math.cos(u2), sqrtu1 * Math.sin(u3), sqrtu1 * Math.cos(u3), sqrt1u1 * Math.sin(u2));
    }
    equals(quaternion) {
        return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
    }
    fromArray(array, offset = 0) {
        this._x = array[offset];
        this._y = array[offset + 1];
        this._z = array[offset + 2];
        this._w = array[offset + 3];
        this._onChangeCallback();
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._w;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this._x = attribute.getX(index);
        this._y = attribute.getY(index);
        this._z = attribute.getZ(index);
        this._w = attribute.getW(index);
        return this;
    }
    _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
    }
    _onChangeCallback() {
    }
}
$2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.prototype.isQuaternion = true;
class $2d9d8c9fc2282acc$export$64b5c384219d3699 {
    constructor(x = 0, y = 0, z = 0){
        this.x = x;
        this.y = y;
        this.z = z;
    }
    set(x, y, z) {
        if (z === undefined) z = this.z; // sprite.scale.set(x,y)
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
    }
    setScalar(scalar) {
        this.x = scalar;
        this.y = scalar;
        this.z = scalar;
        return this;
    }
    setX(x) {
        this.x = x;
        return this;
    }
    setY(y) {
        this.y = y;
        return this;
    }
    setZ(z) {
        this.z = z;
        return this;
    }
    setComponent(index, value) {
        switch(index){
            case 0:
                this.x = value;
                break;
            case 1:
                this.y = value;
                break;
            case 2:
                this.z = value;
                break;
            default:
                throw new Error('index is out of range: ' + index);
        }
        return this;
    }
    getComponent(index) {
        switch(index){
            case 0:
                return this.x;
            case 1:
                return this.y;
            case 2:
                return this.z;
            default:
                throw new Error('index is out of range: ' + index);
        }
    }
    clone() {
        return new this.constructor(this.x, this.y, this.z);
    }
    copy(v) {
        this.x = v.x;
        this.y = v.y;
        this.z = v.z;
        return this;
    }
    add(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');
            return this.addVectors(v, w);
        }
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
    }
    addScalar(s) {
        this.x += s;
        this.y += s;
        this.z += s;
        return this;
    }
    addVectors(a, b) {
        this.x = a.x + b.x;
        this.y = a.y + b.y;
        this.z = a.z + b.z;
        return this;
    }
    addScaledVector(v, s) {
        this.x += v.x * s;
        this.y += v.y * s;
        this.z += v.z * s;
        return this;
    }
    sub(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');
            return this.subVectors(v, w);
        }
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
    }
    subScalar(s) {
        this.x -= s;
        this.y -= s;
        this.z -= s;
        return this;
    }
    subVectors(a, b) {
        this.x = a.x - b.x;
        this.y = a.y - b.y;
        this.z = a.z - b.z;
        return this;
    }
    multiply(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');
            return this.multiplyVectors(v, w);
        }
        this.x *= v.x;
        this.y *= v.y;
        this.z *= v.z;
        return this;
    }
    multiplyScalar(scalar) {
        this.x *= scalar;
        this.y *= scalar;
        this.z *= scalar;
        return this;
    }
    multiplyVectors(a, b) {
        this.x = a.x * b.x;
        this.y = a.y * b.y;
        this.z = a.z * b.z;
        return this;
    }
    applyEuler(euler) {
        if (!(euler && euler.isEuler)) console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');
        return this.applyQuaternion($2d9d8c9fc2282acc$var$_quaternion$4.setFromEuler(euler));
    }
    applyAxisAngle(axis, angle) {
        return this.applyQuaternion($2d9d8c9fc2282acc$var$_quaternion$4.setFromAxisAngle(axis, angle));
    }
    applyMatrix3(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[3] * y + e[6] * z;
        this.y = e[1] * x + e[4] * y + e[7] * z;
        this.z = e[2] * x + e[5] * y + e[8] * z;
        return this;
    }
    applyNormalMatrix(m) {
        return this.applyMatrix3(m).normalize();
    }
    applyMatrix4(m) {
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
        this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
        this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
        this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
        return this;
    }
    applyQuaternion(q) {
        const x = this.x, y = this.y, z = this.z;
        const qx = q.x, qy = q.y, qz = q.z, qw = q.w;
        // calculate quat * vector
        const ix = qw * x + qy * z - qz * y;
        const iy = qw * y + qz * x - qx * z;
        const iz = qw * z + qx * y - qy * x;
        const iw = -qx * x - qy * y - qz * z;
        // calculate result * inverse quat
        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        return this;
    }
    project(camera) {
        return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
    }
    unproject(camera) {
        return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
    }
    transformDirection(m) {
        // input: THREE.Matrix4 affine matrix
        // vector interpreted as a direction
        const x = this.x, y = this.y, z = this.z;
        const e = m.elements;
        this.x = e[0] * x + e[4] * y + e[8] * z;
        this.y = e[1] * x + e[5] * y + e[9] * z;
        this.z = e[2] * x + e[6] * y + e[10] * z;
        return this.normalize();
    }
    divide(v) {
        this.x /= v.x;
        this.y /= v.y;
        this.z /= v.z;
        return this;
    }
    divideScalar(scalar) {
        return this.multiplyScalar(1 / scalar);
    }
    min(v) {
        this.x = Math.min(this.x, v.x);
        this.y = Math.min(this.y, v.y);
        this.z = Math.min(this.z, v.z);
        return this;
    }
    max(v) {
        this.x = Math.max(this.x, v.x);
        this.y = Math.max(this.y, v.y);
        this.z = Math.max(this.z, v.z);
        return this;
    }
    clamp(min, max) {
        // assumes min < max, componentwise
        this.x = Math.max(min.x, Math.min(max.x, this.x));
        this.y = Math.max(min.y, Math.min(max.y, this.y));
        this.z = Math.max(min.z, Math.min(max.z, this.z));
        return this;
    }
    clampScalar(minVal, maxVal) {
        this.x = Math.max(minVal, Math.min(maxVal, this.x));
        this.y = Math.max(minVal, Math.min(maxVal, this.y));
        this.z = Math.max(minVal, Math.min(maxVal, this.z));
        return this;
    }
    clampLength(min, max) {
        const length = this.length();
        return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
    }
    floor() {
        this.x = Math.floor(this.x);
        this.y = Math.floor(this.y);
        this.z = Math.floor(this.z);
        return this;
    }
    ceil() {
        this.x = Math.ceil(this.x);
        this.y = Math.ceil(this.y);
        this.z = Math.ceil(this.z);
        return this;
    }
    round() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
    }
    roundToZero() {
        this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);
        this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);
        this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);
        return this;
    }
    negate() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    }
    dot(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    }
    // TODO lengthSquared?
    lengthSq() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
    }
    length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    manhattanLength() {
        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
    }
    normalize() {
        return this.divideScalar(this.length() || 1);
    }
    setLength(length) {
        return this.normalize().multiplyScalar(length);
    }
    lerp(v, alpha) {
        this.x += (v.x - this.x) * alpha;
        this.y += (v.y - this.y) * alpha;
        this.z += (v.z - this.z) * alpha;
        return this;
    }
    lerpVectors(v1, v2, alpha) {
        this.x = v1.x + (v2.x - v1.x) * alpha;
        this.y = v1.y + (v2.y - v1.y) * alpha;
        this.z = v1.z + (v2.z - v1.z) * alpha;
        return this;
    }
    cross(v, w) {
        if (w !== undefined) {
            console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');
            return this.crossVectors(v, w);
        }
        return this.crossVectors(this, v);
    }
    crossVectors(a, b) {
        const ax = a.x, ay = a.y, az = a.z;
        const bx = b.x, by = b.y, bz = b.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
    }
    projectOnVector(v) {
        const denominator = v.lengthSq();
        if (denominator === 0) return this.set(0, 0, 0);
        const scalar = v.dot(this) / denominator;
        return this.copy(v).multiplyScalar(scalar);
    }
    projectOnPlane(planeNormal) {
        $2d9d8c9fc2282acc$var$_vector$c.copy(this).projectOnVector(planeNormal);
        return this.sub($2d9d8c9fc2282acc$var$_vector$c);
    }
    reflect(normal) {
        // reflect incident vector off plane orthogonal to normal
        // normal is assumed to have unit length
        return this.sub($2d9d8c9fc2282acc$var$_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));
    }
    angleTo(v) {
        const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
        if (denominator === 0) return Math.PI / 2;
        const theta = this.dot(v) / denominator;
        // clamp, to handle numerical problems
        return Math.acos($2d9d8c9fc2282acc$var$clamp(theta, -1, 1));
    }
    distanceTo(v) {
        return Math.sqrt(this.distanceToSquared(v));
    }
    distanceToSquared(v) {
        const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
        return dx * dx + dy * dy + dz * dz;
    }
    manhattanDistanceTo(v) {
        return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
    }
    setFromSpherical(s) {
        return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
    }
    setFromSphericalCoords(radius, phi, theta) {
        const sinPhiRadius = Math.sin(phi) * radius;
        this.x = sinPhiRadius * Math.sin(theta);
        this.y = Math.cos(phi) * radius;
        this.z = sinPhiRadius * Math.cos(theta);
        return this;
    }
    setFromCylindrical(c) {
        return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
    }
    setFromCylindricalCoords(radius, theta, y) {
        this.x = radius * Math.sin(theta);
        this.y = y;
        this.z = radius * Math.cos(theta);
        return this;
    }
    setFromMatrixPosition(m) {
        const e = m.elements;
        this.x = e[12];
        this.y = e[13];
        this.z = e[14];
        return this;
    }
    setFromMatrixScale(m) {
        const sx = this.setFromMatrixColumn(m, 0).length();
        const sy = this.setFromMatrixColumn(m, 1).length();
        const sz = this.setFromMatrixColumn(m, 2).length();
        this.x = sx;
        this.y = sy;
        this.z = sz;
        return this;
    }
    setFromMatrixColumn(m, index) {
        return this.fromArray(m.elements, index * 4);
    }
    setFromMatrix3Column(m, index) {
        return this.fromArray(m.elements, index * 3);
    }
    equals(v) {
        return v.x === this.x && v.y === this.y && v.z === this.z;
    }
    fromArray(array, offset = 0) {
        this.x = array[offset];
        this.y = array[offset + 1];
        this.z = array[offset + 2];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.x;
        array[offset + 1] = this.y;
        array[offset + 2] = this.z;
        return array;
    }
    fromBufferAttribute(attribute, index, offset) {
        if (offset !== undefined) console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');
        this.x = attribute.getX(index);
        this.y = attribute.getY(index);
        this.z = attribute.getZ(index);
        return this;
    }
    random() {
        this.x = Math.random();
        this.y = Math.random();
        this.z = Math.random();
        return this;
    }
    randomDirection() {
        // Derived from https://mathworld.wolfram.com/SpherePointPicking.html
        const u = (Math.random() - 0.5) * 2;
        const t = Math.random() * Math.PI * 2;
        const f = Math.sqrt(1 - u ** 2);
        this.x = f * Math.cos(t);
        this.y = f * Math.sin(t);
        this.z = u;
        return this;
    }
    *[Symbol.iterator]() {
        yield this.x;
        yield this.y;
        yield this.z;
    }
}
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.isVector3 = true;
const $2d9d8c9fc2282acc$var$_vector$c = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_quaternion$4 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
class $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3 {
    constructor(min = new $2d9d8c9fc2282acc$export$64b5c384219d3699(Infinity, Infinity, Infinity), max = new $2d9d8c9fc2282acc$export$64b5c384219d3699(-Infinity, -Infinity, -Infinity)){
        this.min = min;
        this.max = max;
    }
    set(min, max) {
        this.min.copy(min);
        this.max.copy(max);
        return this;
    }
    setFromArray(array) {
        let minX = Infinity;
        let minY = Infinity;
        let minZ = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        let maxZ = -Infinity;
        for(let i10 = 0, l = array.length; i10 < l; i10 += 3){
            const x = array[i10];
            const y = array[i10 + 1];
            const z = array[i10 + 2];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (z < minZ) minZ = z;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            if (z > maxZ) maxZ = z;
        }
        this.min.set(minX, minY, minZ);
        this.max.set(maxX, maxY, maxZ);
        return this;
    }
    setFromBufferAttribute(attribute) {
        let minX = Infinity;
        let minY = Infinity;
        let minZ = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        let maxZ = -Infinity;
        for(let i11 = 0, l = attribute.count; i11 < l; i11++){
            const x = attribute.getX(i11);
            const y = attribute.getY(i11);
            const z = attribute.getZ(i11);
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (z < minZ) minZ = z;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            if (z > maxZ) maxZ = z;
        }
        this.min.set(minX, minY, minZ);
        this.max.set(maxX, maxY, maxZ);
        return this;
    }
    setFromPoints(points) {
        this.makeEmpty();
        for(let i12 = 0, il = points.length; i12 < il; i12++)this.expandByPoint(points[i12]);
        return this;
    }
    setFromCenterAndSize(center, size) {
        const halfSize = $2d9d8c9fc2282acc$var$_vector$b.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    setFromObject(object) {
        this.makeEmpty();
        return this.expandByObject(object);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = this.min.z = Infinity;
        this.max.x = this.max.y = this.max.z = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
    }
    getCenter(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
        return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
    }
    expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
    }
    expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
    }
    expandByObject(object) {
        // Computes the world-axis-aligned bounding box of an object (including its children),
        // accounting for both the object's, and children's, world transforms
        object.updateWorldMatrix(false, false);
        const geometry = object.geometry;
        if (geometry !== undefined) {
            if (geometry.boundingBox === null) geometry.computeBoundingBox();
            $2d9d8c9fc2282acc$var$_box$3.copy(geometry.boundingBox);
            $2d9d8c9fc2282acc$var$_box$3.applyMatrix4(object.matrixWorld);
            this.union($2d9d8c9fc2282acc$var$_box$3);
        }
        const children = object.children;
        for(let i13 = 0, l = children.length; i13 < l; i13++)this.expandByObject(children[i13]);
        return this;
    }
    containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;
    }
    containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
    }
    getParameter(point, target) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
    }
    intersectsBox(box) {
        // using 6 splitting planes to rule out intersections.
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
    }
    intersectsSphere(sphere) {
        // Find the point on the AABB closest to the sphere center.
        this.clampPoint(sphere.center, $2d9d8c9fc2282acc$var$_vector$b);
        // If that point is inside the sphere, the AABB and sphere intersect.
        return $2d9d8c9fc2282acc$var$_vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
    }
    intersectsPlane(plane) {
        // We compute the minimum and maximum dot product values. If those values
        // are on the same side (back or front) of the plane, then there is no intersection.
        let min, max;
        if (plane.normal.x > 0) {
            min = plane.normal.x * this.min.x;
            max = plane.normal.x * this.max.x;
        } else {
            min = plane.normal.x * this.max.x;
            max = plane.normal.x * this.min.x;
        }
        if (plane.normal.y > 0) {
            min += plane.normal.y * this.min.y;
            max += plane.normal.y * this.max.y;
        } else {
            min += plane.normal.y * this.max.y;
            max += plane.normal.y * this.min.y;
        }
        if (plane.normal.z > 0) {
            min += plane.normal.z * this.min.z;
            max += plane.normal.z * this.max.z;
        } else {
            min += plane.normal.z * this.max.z;
            max += plane.normal.z * this.min.z;
        }
        return min <= -plane.constant && max >= -plane.constant;
    }
    intersectsTriangle(triangle) {
        if (this.isEmpty()) return false;
        // compute box center and extents
        this.getCenter($2d9d8c9fc2282acc$var$_center);
        $2d9d8c9fc2282acc$var$_extents.subVectors(this.max, $2d9d8c9fc2282acc$var$_center);
        // translate triangle to aabb origin
        $2d9d8c9fc2282acc$var$_v0$2.subVectors(triangle.a, $2d9d8c9fc2282acc$var$_center);
        $2d9d8c9fc2282acc$var$_v1$7.subVectors(triangle.b, $2d9d8c9fc2282acc$var$_center);
        $2d9d8c9fc2282acc$var$_v2$3.subVectors(triangle.c, $2d9d8c9fc2282acc$var$_center);
        // compute edge vectors for triangle
        $2d9d8c9fc2282acc$var$_f0.subVectors($2d9d8c9fc2282acc$var$_v1$7, $2d9d8c9fc2282acc$var$_v0$2);
        $2d9d8c9fc2282acc$var$_f1.subVectors($2d9d8c9fc2282acc$var$_v2$3, $2d9d8c9fc2282acc$var$_v1$7);
        $2d9d8c9fc2282acc$var$_f2.subVectors($2d9d8c9fc2282acc$var$_v0$2, $2d9d8c9fc2282acc$var$_v2$3);
        // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
        // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
        // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
        let axes = [
            0,
            -$2d9d8c9fc2282acc$var$_f0.z,
            $2d9d8c9fc2282acc$var$_f0.y,
            0,
            -$2d9d8c9fc2282acc$var$_f1.z,
            $2d9d8c9fc2282acc$var$_f1.y,
            0,
            -$2d9d8c9fc2282acc$var$_f2.z,
            $2d9d8c9fc2282acc$var$_f2.y,
            $2d9d8c9fc2282acc$var$_f0.z,
            0,
            -$2d9d8c9fc2282acc$var$_f0.x,
            $2d9d8c9fc2282acc$var$_f1.z,
            0,
            -$2d9d8c9fc2282acc$var$_f1.x,
            $2d9d8c9fc2282acc$var$_f2.z,
            0,
            -$2d9d8c9fc2282acc$var$_f2.x,
            -$2d9d8c9fc2282acc$var$_f0.y,
            $2d9d8c9fc2282acc$var$_f0.x,
            0,
            -$2d9d8c9fc2282acc$var$_f1.y,
            $2d9d8c9fc2282acc$var$_f1.x,
            0,
            -$2d9d8c9fc2282acc$var$_f2.y,
            $2d9d8c9fc2282acc$var$_f2.x,
            0
        ];
        if (!$2d9d8c9fc2282acc$var$satForAxes(axes, $2d9d8c9fc2282acc$var$_v0$2, $2d9d8c9fc2282acc$var$_v1$7, $2d9d8c9fc2282acc$var$_v2$3, $2d9d8c9fc2282acc$var$_extents)) return false;
        // test 3 face normals from the aabb
        axes = [
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1
        ];
        if (!$2d9d8c9fc2282acc$var$satForAxes(axes, $2d9d8c9fc2282acc$var$_v0$2, $2d9d8c9fc2282acc$var$_v1$7, $2d9d8c9fc2282acc$var$_v2$3, $2d9d8c9fc2282acc$var$_extents)) return false;
        // finally testing the face normal of the triangle
        // use already existing triangle edge vectors here
        $2d9d8c9fc2282acc$var$_triangleNormal.crossVectors($2d9d8c9fc2282acc$var$_f0, $2d9d8c9fc2282acc$var$_f1);
        axes = [
            $2d9d8c9fc2282acc$var$_triangleNormal.x,
            $2d9d8c9fc2282acc$var$_triangleNormal.y,
            $2d9d8c9fc2282acc$var$_triangleNormal.z
        ];
        return $2d9d8c9fc2282acc$var$satForAxes(axes, $2d9d8c9fc2282acc$var$_v0$2, $2d9d8c9fc2282acc$var$_v1$7, $2d9d8c9fc2282acc$var$_v2$3, $2d9d8c9fc2282acc$var$_extents);
    }
    clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
        const clampedPoint = $2d9d8c9fc2282acc$var$_vector$b.copy(point).clamp(this.min, this.max);
        return clampedPoint.sub(point).length();
    }
    getBoundingSphere(target) {
        this.getCenter(target.center);
        target.radius = this.getSize($2d9d8c9fc2282acc$var$_vector$b).length() * 0.5;
        return target;
    }
    intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
        if (this.isEmpty()) this.makeEmpty();
        return this;
    }
    union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
    }
    applyMatrix4(matrix) {
        // transform of empty box is an empty box.
        if (this.isEmpty()) return this;
        // NOTE: I am using a binary pattern to specify all 2^3 combinations below
        $2d9d8c9fc2282acc$var$_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000
        $2d9d8c9fc2282acc$var$_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001
        $2d9d8c9fc2282acc$var$_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010
        $2d9d8c9fc2282acc$var$_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011
        $2d9d8c9fc2282acc$var$_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100
        $2d9d8c9fc2282acc$var$_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101
        $2d9d8c9fc2282acc$var$_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110
        $2d9d8c9fc2282acc$var$_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111
        this.setFromPoints($2d9d8c9fc2282acc$var$_points);
        return this;
    }
    translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
    }
}
$2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3.prototype.isBox3 = true;
const $2d9d8c9fc2282acc$var$_points = [
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699()
];
const $2d9d8c9fc2282acc$var$_vector$b = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_box$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3();
// triangle centered vertices
const $2d9d8c9fc2282acc$var$_v0$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v1$7 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v2$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
// triangle edge vectors
const $2d9d8c9fc2282acc$var$_f0 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_f1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_f2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_center = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_extents = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_triangleNormal = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_testAxis = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
function $2d9d8c9fc2282acc$var$satForAxes(axes, v0, v1, v2, extents) {
    for(let i14 = 0, j = axes.length - 3; i14 <= j; i14 += 3){
        $2d9d8c9fc2282acc$var$_testAxis.fromArray(axes, i14);
        // project the aabb onto the seperating axis
        const r = extents.x * Math.abs($2d9d8c9fc2282acc$var$_testAxis.x) + extents.y * Math.abs($2d9d8c9fc2282acc$var$_testAxis.y) + extents.z * Math.abs($2d9d8c9fc2282acc$var$_testAxis.z);
        // project all 3 vertices of the triangle onto the seperating axis
        const p0 = v0.dot($2d9d8c9fc2282acc$var$_testAxis);
        const p1 = v1.dot($2d9d8c9fc2282acc$var$_testAxis);
        const p2 = v2.dot($2d9d8c9fc2282acc$var$_testAxis);
        // actual test, basically see if either of the most extreme of the triangle points intersects r
        if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) // points of the projected triangle are outside the projected half-length of the aabb
        // the axis is seperating and we can exit
        return false;
    }
    return true;
}
const $2d9d8c9fc2282acc$var$_box$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3();
const $2d9d8c9fc2282acc$var$_v1$6 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_toFarthestPoint = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_toPoint = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$805e8b72413ccaba {
    constructor(center = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), radius = -1){
        this.center = center;
        this.radius = radius;
    }
    set(center, radius) {
        this.center.copy(center);
        this.radius = radius;
        return this;
    }
    setFromPoints(points, optionalCenter) {
        const center = this.center;
        if (optionalCenter !== undefined) center.copy(optionalCenter);
        else $2d9d8c9fc2282acc$var$_box$2.setFromPoints(points).getCenter(center);
        let maxRadiusSq = 0;
        for(let i15 = 0, il = points.length; i15 < il; i15++)maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i15]));
        this.radius = Math.sqrt(maxRadiusSq);
        return this;
    }
    copy(sphere) {
        this.center.copy(sphere.center);
        this.radius = sphere.radius;
        return this;
    }
    isEmpty() {
        return this.radius < 0;
    }
    makeEmpty() {
        this.center.set(0, 0, 0);
        this.radius = -1;
        return this;
    }
    containsPoint(point) {
        return point.distanceToSquared(this.center) <= this.radius * this.radius;
    }
    distanceToPoint(point) {
        return point.distanceTo(this.center) - this.radius;
    }
    intersectsSphere(sphere) {
        const radiusSum = this.radius + sphere.radius;
        return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
    }
    intersectsBox(box) {
        return box.intersectsSphere(this);
    }
    intersectsPlane(plane) {
        return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
    }
    clampPoint(point, target) {
        const deltaLengthSq = this.center.distanceToSquared(point);
        target.copy(point);
        if (deltaLengthSq > this.radius * this.radius) {
            target.sub(this.center).normalize();
            target.multiplyScalar(this.radius).add(this.center);
        }
        return target;
    }
    getBoundingBox(target) {
        if (this.isEmpty()) {
            // Empty sphere produces empty bounding box
            target.makeEmpty();
            return target;
        }
        target.set(this.center, this.center);
        target.expandByScalar(this.radius);
        return target;
    }
    applyMatrix4(matrix) {
        this.center.applyMatrix4(matrix);
        this.radius = this.radius * matrix.getMaxScaleOnAxis();
        return this;
    }
    translate(offset) {
        this.center.add(offset);
        return this;
    }
    expandByPoint(point) {
        // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671
        $2d9d8c9fc2282acc$var$_toPoint.subVectors(point, this.center);
        const lengthSq = $2d9d8c9fc2282acc$var$_toPoint.lengthSq();
        if (lengthSq > this.radius * this.radius) {
            const length = Math.sqrt(lengthSq);
            const missingRadiusHalf = (length - this.radius) * 0.5;
            // Nudge this sphere towards the target point. Add half the missing distance to radius,
            // and the other half to position. This gives a tighter enclosure, instead of if
            // the whole missing distance were just added to radius.
            this.center.add($2d9d8c9fc2282acc$var$_toPoint.multiplyScalar(missingRadiusHalf / length));
            this.radius += missingRadiusHalf;
        }
        return this;
    }
    union(sphere) {
        // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769
        // To enclose another sphere into this sphere, we only need to enclose two points:
        // 1) Enclose the farthest point on the other sphere into this sphere.
        // 2) Enclose the opposite point of the farthest point into this sphere.
        if (this.center.equals(sphere.center) === true) $2d9d8c9fc2282acc$var$_toFarthestPoint.set(0, 0, 1).multiplyScalar(sphere.radius);
        else $2d9d8c9fc2282acc$var$_toFarthestPoint.subVectors(sphere.center, this.center).normalize().multiplyScalar(sphere.radius);
        this.expandByPoint($2d9d8c9fc2282acc$var$_v1$6.copy(sphere.center).add($2d9d8c9fc2282acc$var$_toFarthestPoint));
        this.expandByPoint($2d9d8c9fc2282acc$var$_v1$6.copy(sphere.center).sub($2d9d8c9fc2282acc$var$_toFarthestPoint));
        return this;
    }
    equals(sphere) {
        return sphere.center.equals(this.center) && sphere.radius === this.radius;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $2d9d8c9fc2282acc$var$_vector$a = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_segCenter = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_segDir = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_diff = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_edge1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_edge2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_normal$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$a186db52eed6d40e {
    constructor(origin = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), direction = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, -1)){
        this.origin = origin;
        this.direction = direction;
    }
    set(origin, direction) {
        this.origin.copy(origin);
        this.direction.copy(direction);
        return this;
    }
    copy(ray) {
        this.origin.copy(ray.origin);
        this.direction.copy(ray.direction);
        return this;
    }
    at(t, target) {
        return target.copy(this.direction).multiplyScalar(t).add(this.origin);
    }
    lookAt(v) {
        this.direction.copy(v).sub(this.origin).normalize();
        return this;
    }
    recast(t) {
        this.origin.copy(this.at(t, $2d9d8c9fc2282acc$var$_vector$a));
        return this;
    }
    closestPointToPoint(point, target) {
        target.subVectors(point, this.origin);
        const directionDistance = target.dot(this.direction);
        if (directionDistance < 0) return target.copy(this.origin);
        return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
    }
    distanceToPoint(point) {
        return Math.sqrt(this.distanceSqToPoint(point));
    }
    distanceSqToPoint(point) {
        const directionDistance = $2d9d8c9fc2282acc$var$_vector$a.subVectors(point, this.origin).dot(this.direction);
        // point behind the ray
        if (directionDistance < 0) return this.origin.distanceToSquared(point);
        $2d9d8c9fc2282acc$var$_vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
        return $2d9d8c9fc2282acc$var$_vector$a.distanceToSquared(point);
    }
    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
        // It returns the min distance between the ray and the segment
        // defined by v0 and v1
        // It can also set two optional targets :
        // - The closest point on the ray
        // - The closest point on the segment
        $2d9d8c9fc2282acc$var$_segCenter.copy(v0).add(v1).multiplyScalar(0.5);
        $2d9d8c9fc2282acc$var$_segDir.copy(v1).sub(v0).normalize();
        $2d9d8c9fc2282acc$var$_diff.copy(this.origin).sub($2d9d8c9fc2282acc$var$_segCenter);
        const segExtent = v0.distanceTo(v1) * 0.5;
        const a01 = -this.direction.dot($2d9d8c9fc2282acc$var$_segDir);
        const b0 = $2d9d8c9fc2282acc$var$_diff.dot(this.direction);
        const b1 = -$2d9d8c9fc2282acc$var$_diff.dot($2d9d8c9fc2282acc$var$_segDir);
        const c = $2d9d8c9fc2282acc$var$_diff.lengthSq();
        const det = Math.abs(1 - a01 * a01);
        let s0, s1, sqrDist, extDet;
        if (det > 0) {
            // The ray and segment are not parallel.
            s0 = a01 * b1 - b0;
            s1 = a01 * b0 - b1;
            extDet = segExtent * det;
            if (s0 >= 0) {
                if (s1 >= -extDet) {
                    if (s1 <= extDet) {
                        // region 0
                        // Minimum at interior points of ray and segment.
                        const invDet = 1 / det;
                        s0 *= invDet;
                        s1 *= invDet;
                        sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                    } else {
                        // region 1
                        s1 = segExtent;
                        s0 = Math.max(0, -(a01 * s1 + b0));
                        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                    }
                } else {
                    // region 5
                    s1 = -segExtent;
                    s0 = Math.max(0, -(a01 * s1 + b0));
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            } else {
                if (s1 <= -extDet) {
                    // region 4
                    s0 = Math.max(0, -(-a01 * segExtent + b0));
                    s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                } else if (s1 <= extDet) {
                    // region 3
                    s0 = 0;
                    s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = s1 * (s1 + 2 * b1) + c;
                } else {
                    // region 2
                    s0 = Math.max(0, -(a01 * segExtent + b0));
                    s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
                    sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
                }
            }
        } else {
            // Ray and segment are parallel.
            s1 = a01 > 0 ? -segExtent : segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;
        }
        if (optionalPointOnRay) optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);
        if (optionalPointOnSegment) optionalPointOnSegment.copy($2d9d8c9fc2282acc$var$_segDir).multiplyScalar(s1).add($2d9d8c9fc2282acc$var$_segCenter);
        return sqrDist;
    }
    intersectSphere(sphere, target) {
        $2d9d8c9fc2282acc$var$_vector$a.subVectors(sphere.center, this.origin);
        const tca = $2d9d8c9fc2282acc$var$_vector$a.dot(this.direction);
        const d2 = $2d9d8c9fc2282acc$var$_vector$a.dot($2d9d8c9fc2282acc$var$_vector$a) - tca * tca;
        const radius2 = sphere.radius * sphere.radius;
        if (d2 > radius2) return null;
        const thc = Math.sqrt(radius2 - d2);
        // t0 = first intersect point - entrance on front of sphere
        const t0 = tca - thc;
        // t1 = second intersect point - exit point on back of sphere
        const t1 = tca + thc;
        // test to see if both t0 and t1 are behind the ray - if so, return null
        if (t0 < 0 && t1 < 0) return null;
        // test to see if t0 is behind the ray:
        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
        // in order to always return an intersect point that is in front of the ray.
        if (t0 < 0) return this.at(t1, target);
        // else t0 is in front of the ray, so return the first collision point scaled by t0
        return this.at(t0, target);
    }
    intersectsSphere(sphere) {
        return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
    }
    distanceToPlane(plane) {
        const denominator = plane.normal.dot(this.direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (plane.distanceToPoint(this.origin) === 0) return 0;
            // Null is preferable to undefined since undefined means.... it is undefined
            return null;
        }
        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
        // Return if the ray never intersects the plane
        return t >= 0 ? t : null;
    }
    intersectPlane(plane, target) {
        const t = this.distanceToPlane(plane);
        if (t === null) return null;
        return this.at(t, target);
    }
    intersectsPlane(plane) {
        // check if the ray lies on the plane first
        const distToPoint = plane.distanceToPoint(this.origin);
        if (distToPoint === 0) return true;
        const denominator = plane.normal.dot(this.direction);
        if (denominator * distToPoint < 0) return true;
        // ray origin is behind the plane (and is pointing behind it)
        return false;
    }
    intersectBox(box, target) {
        let tmin, tmax, tymin, tymax, tzmin, tzmax;
        const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
        const origin = this.origin;
        if (invdirx >= 0) {
            tmin = (box.min.x - origin.x) * invdirx;
            tmax = (box.max.x - origin.x) * invdirx;
        } else {
            tmin = (box.max.x - origin.x) * invdirx;
            tmax = (box.min.x - origin.x) * invdirx;
        }
        if (invdiry >= 0) {
            tymin = (box.min.y - origin.y) * invdiry;
            tymax = (box.max.y - origin.y) * invdiry;
        } else {
            tymin = (box.max.y - origin.y) * invdiry;
            tymax = (box.min.y - origin.y) * invdiry;
        }
        if (tmin > tymax || tymin > tmax) return null;
        // These lines also handle the case where tmin or tmax is NaN
        // (result of 0 * Infinity). x !== x returns true if x is NaN
        if (tymin > tmin || tmin !== tmin) tmin = tymin;
        if (tymax < tmax || tmax !== tmax) tmax = tymax;
        if (invdirz >= 0) {
            tzmin = (box.min.z - origin.z) * invdirz;
            tzmax = (box.max.z - origin.z) * invdirz;
        } else {
            tzmin = (box.max.z - origin.z) * invdirz;
            tzmax = (box.min.z - origin.z) * invdirz;
        }
        if (tmin > tzmax || tzmin > tmax) return null;
        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
        //return point closest to the ray (positive side)
        if (tmax < 0) return null;
        return this.at(tmin >= 0 ? tmin : tmax, target);
    }
    intersectsBox(box) {
        return this.intersectBox(box, $2d9d8c9fc2282acc$var$_vector$a) !== null;
    }
    intersectTriangle(a, b, c, backfaceCulling, target) {
        // Compute the offset origin, edges, and normal.
        // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
        $2d9d8c9fc2282acc$var$_edge1.subVectors(b, a);
        $2d9d8c9fc2282acc$var$_edge2.subVectors(c, a);
        $2d9d8c9fc2282acc$var$_normal$1.crossVectors($2d9d8c9fc2282acc$var$_edge1, $2d9d8c9fc2282acc$var$_edge2);
        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
        let DdN = this.direction.dot($2d9d8c9fc2282acc$var$_normal$1);
        let sign;
        if (DdN > 0) {
            if (backfaceCulling) return null;
            sign = 1;
        } else if (DdN < 0) {
            sign = -1;
            DdN = -DdN;
        } else return null;
        $2d9d8c9fc2282acc$var$_diff.subVectors(this.origin, a);
        const DdQxE2 = sign * this.direction.dot($2d9d8c9fc2282acc$var$_edge2.crossVectors($2d9d8c9fc2282acc$var$_diff, $2d9d8c9fc2282acc$var$_edge2));
        // b1 < 0, no intersection
        if (DdQxE2 < 0) return null;
        const DdE1xQ = sign * this.direction.dot($2d9d8c9fc2282acc$var$_edge1.cross($2d9d8c9fc2282acc$var$_diff));
        // b2 < 0, no intersection
        if (DdE1xQ < 0) return null;
        // b1+b2 > 1, no intersection
        if (DdQxE2 + DdE1xQ > DdN) return null;
        // Line intersects triangle, check if ray does.
        const QdN = -sign * $2d9d8c9fc2282acc$var$_diff.dot($2d9d8c9fc2282acc$var$_normal$1);
        // t < 0, no intersection
        if (QdN < 0) return null;
        // Ray intersects triangle.
        return this.at(QdN / DdN, target);
    }
    applyMatrix4(matrix4) {
        this.origin.applyMatrix4(matrix4);
        this.direction.transformDirection(matrix4);
        return this;
    }
    equals(ray) {
        return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
class $2d9d8c9fc2282acc$export$2ae72fc923e5eb5 {
    constructor(){
        this.elements = [
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1
        ];
        if (arguments.length > 0) console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
    }
    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
        const te = this.elements;
        te[0] = n11;
        te[4] = n12;
        te[8] = n13;
        te[12] = n14;
        te[1] = n21;
        te[5] = n22;
        te[9] = n23;
        te[13] = n24;
        te[2] = n31;
        te[6] = n32;
        te[10] = n33;
        te[14] = n34;
        te[3] = n41;
        te[7] = n42;
        te[11] = n43;
        te[15] = n44;
        return this;
    }
    identity() {
        this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    clone() {
        return new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5().fromArray(this.elements);
    }
    copy(m) {
        const te = this.elements;
        const me = m.elements;
        te[0] = me[0];
        te[1] = me[1];
        te[2] = me[2];
        te[3] = me[3];
        te[4] = me[4];
        te[5] = me[5];
        te[6] = me[6];
        te[7] = me[7];
        te[8] = me[8];
        te[9] = me[9];
        te[10] = me[10];
        te[11] = me[11];
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        te[15] = me[15];
        return this;
    }
    copyPosition(m) {
        const te = this.elements, me = m.elements;
        te[12] = me[12];
        te[13] = me[13];
        te[14] = me[14];
        return this;
    }
    setFromMatrix3(m) {
        const me = m.elements;
        this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);
        return this;
    }
    extractBasis(xAxis, yAxis, zAxis) {
        xAxis.setFromMatrixColumn(this, 0);
        yAxis.setFromMatrixColumn(this, 1);
        zAxis.setFromMatrixColumn(this, 2);
        return this;
    }
    makeBasis(xAxis, yAxis, zAxis) {
        this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);
        return this;
    }
    extractRotation(m) {
        // this method does not support reflection matrices
        const te = this.elements;
        const me = m.elements;
        const scaleX = 1 / $2d9d8c9fc2282acc$var$_v1$5.setFromMatrixColumn(m, 0).length();
        const scaleY = 1 / $2d9d8c9fc2282acc$var$_v1$5.setFromMatrixColumn(m, 1).length();
        const scaleZ = 1 / $2d9d8c9fc2282acc$var$_v1$5.setFromMatrixColumn(m, 2).length();
        te[0] = me[0] * scaleX;
        te[1] = me[1] * scaleX;
        te[2] = me[2] * scaleX;
        te[3] = 0;
        te[4] = me[4] * scaleY;
        te[5] = me[5] * scaleY;
        te[6] = me[6] * scaleY;
        te[7] = 0;
        te[8] = me[8] * scaleZ;
        te[9] = me[9] * scaleZ;
        te[10] = me[10] * scaleZ;
        te[11] = 0;
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromEuler(euler) {
        if (!(euler && euler.isEuler)) console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
        const te = this.elements;
        const x = euler.x, y = euler.y, z = euler.z;
        const a = Math.cos(x), b = Math.sin(x);
        const c = Math.cos(y), d = Math.sin(y);
        const e = Math.cos(z), f = Math.sin(z);
        if (euler.order === 'XYZ') {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = -c * f;
            te[8] = d;
            te[1] = af + be * d;
            te[5] = ae - bf * d;
            te[9] = -b * c;
            te[2] = bf - ae * d;
            te[6] = be + af * d;
            te[10] = a * c;
        } else if (euler.order === 'YXZ') {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce + df * b;
            te[4] = de * b - cf;
            te[8] = a * d;
            te[1] = a * f;
            te[5] = a * e;
            te[9] = -b;
            te[2] = cf * b - de;
            te[6] = df + ce * b;
            te[10] = a * c;
        } else if (euler.order === 'ZXY') {
            const ce = c * e, cf = c * f, de = d * e, df = d * f;
            te[0] = ce - df * b;
            te[4] = -a * f;
            te[8] = de + cf * b;
            te[1] = cf + de * b;
            te[5] = a * e;
            te[9] = df - ce * b;
            te[2] = -a * d;
            te[6] = b;
            te[10] = a * c;
        } else if (euler.order === 'ZYX') {
            const ae = a * e, af = a * f, be = b * e, bf = b * f;
            te[0] = c * e;
            te[4] = be * d - af;
            te[8] = ae * d + bf;
            te[1] = c * f;
            te[5] = bf * d + ae;
            te[9] = af * d - be;
            te[2] = -d;
            te[6] = b * c;
            te[10] = a * c;
        } else if (euler.order === 'YZX') {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = bd - ac * f;
            te[8] = bc * f + ad;
            te[1] = f;
            te[5] = a * e;
            te[9] = -b * e;
            te[2] = -d * e;
            te[6] = ad * f + bc;
            te[10] = ac - bd * f;
        } else if (euler.order === 'XZY') {
            const ac = a * c, ad = a * d, bc = b * c, bd = b * d;
            te[0] = c * e;
            te[4] = -f;
            te[8] = d * e;
            te[1] = ac * f + bd;
            te[5] = a * e;
            te[9] = ad * f - bc;
            te[2] = bc * f - ad;
            te[6] = b * e;
            te[10] = bd * f + ac;
        }
        // bottom row
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        // last column
        te[12] = 0;
        te[13] = 0;
        te[14] = 0;
        te[15] = 1;
        return this;
    }
    makeRotationFromQuaternion(q) {
        return this.compose($2d9d8c9fc2282acc$var$_zero, q, $2d9d8c9fc2282acc$var$_one);
    }
    lookAt(eye, target, up) {
        const te = this.elements;
        $2d9d8c9fc2282acc$var$_z.subVectors(eye, target);
        if ($2d9d8c9fc2282acc$var$_z.lengthSq() === 0) // eye and target are in the same position
        $2d9d8c9fc2282acc$var$_z.z = 1;
        $2d9d8c9fc2282acc$var$_z.normalize();
        $2d9d8c9fc2282acc$var$_x.crossVectors(up, $2d9d8c9fc2282acc$var$_z);
        if ($2d9d8c9fc2282acc$var$_x.lengthSq() === 0) {
            // up and z are parallel
            if (Math.abs(up.z) === 1) $2d9d8c9fc2282acc$var$_z.x += 0.0001;
            else $2d9d8c9fc2282acc$var$_z.z += 0.0001;
            $2d9d8c9fc2282acc$var$_z.normalize();
            $2d9d8c9fc2282acc$var$_x.crossVectors(up, $2d9d8c9fc2282acc$var$_z);
        }
        $2d9d8c9fc2282acc$var$_x.normalize();
        $2d9d8c9fc2282acc$var$_y.crossVectors($2d9d8c9fc2282acc$var$_z, $2d9d8c9fc2282acc$var$_x);
        te[0] = $2d9d8c9fc2282acc$var$_x.x;
        te[4] = $2d9d8c9fc2282acc$var$_y.x;
        te[8] = $2d9d8c9fc2282acc$var$_z.x;
        te[1] = $2d9d8c9fc2282acc$var$_x.y;
        te[5] = $2d9d8c9fc2282acc$var$_y.y;
        te[9] = $2d9d8c9fc2282acc$var$_z.y;
        te[2] = $2d9d8c9fc2282acc$var$_x.z;
        te[6] = $2d9d8c9fc2282acc$var$_y.z;
        te[10] = $2d9d8c9fc2282acc$var$_z.z;
        return this;
    }
    multiply(m, n) {
        if (n !== undefined) {
            console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');
            return this.multiplyMatrices(m, n);
        }
        return this.multiplyMatrices(this, m);
    }
    premultiply(m) {
        return this.multiplyMatrices(m, this);
    }
    multiplyMatrices(a, b) {
        const ae = a.elements;
        const be = b.elements;
        const te = this.elements;
        const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
        const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
        const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
        const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
        const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
        const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
        const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
        const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
        return this;
    }
    multiplyScalar(s) {
        const te = this.elements;
        te[0] *= s;
        te[4] *= s;
        te[8] *= s;
        te[12] *= s;
        te[1] *= s;
        te[5] *= s;
        te[9] *= s;
        te[13] *= s;
        te[2] *= s;
        te[6] *= s;
        te[10] *= s;
        te[14] *= s;
        te[3] *= s;
        te[7] *= s;
        te[11] *= s;
        te[15] *= s;
        return this;
    }
    determinant() {
        const te = this.elements;
        const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
        const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
        const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
        const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
        //TODO: make this more efficient
        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
        return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
    }
    transpose() {
        const te = this.elements;
        let tmp;
        tmp = te[1];
        te[1] = te[4];
        te[4] = tmp;
        tmp = te[2];
        te[2] = te[8];
        te[8] = tmp;
        tmp = te[6];
        te[6] = te[9];
        te[9] = tmp;
        tmp = te[3];
        te[3] = te[12];
        te[12] = tmp;
        tmp = te[7];
        te[7] = te[13];
        te[13] = tmp;
        tmp = te[11];
        te[11] = te[14];
        te[14] = tmp;
        return this;
    }
    setPosition(x, y, z) {
        const te = this.elements;
        if (x.isVector3) {
            te[12] = x.x;
            te[13] = x.y;
            te[14] = x.z;
        } else {
            te[12] = x;
            te[13] = y;
            te[14] = z;
        }
        return this;
    }
    invert() {
        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
        const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
        if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        const detInv = 1 / det;
        te[0] = t11 * detInv;
        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
        te[4] = t12 * detInv;
        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
        te[8] = t13 * detInv;
        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
        te[12] = t14 * detInv;
        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
        return this;
    }
    scale(v) {
        const te = this.elements;
        const x = v.x, y = v.y, z = v.z;
        te[0] *= x;
        te[4] *= y;
        te[8] *= z;
        te[1] *= x;
        te[5] *= y;
        te[9] *= z;
        te[2] *= x;
        te[6] *= y;
        te[10] *= z;
        te[3] *= x;
        te[7] *= y;
        te[11] *= z;
        return this;
    }
    getMaxScaleOnAxis() {
        const te = this.elements;
        const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
        const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
        const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
        return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
    }
    makeTranslation(x, y, z) {
        this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);
        return this;
    }
    makeRotationX(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationY(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationZ(theta) {
        const c = Math.cos(theta), s = Math.sin(theta);
        this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        return this;
    }
    makeRotationAxis(axis, angle) {
        // Based on http://www.gamedev.net/reference/articles/article1199.asp
        const c = Math.cos(angle);
        const s = Math.sin(angle);
        const t = 1 - c;
        const x = axis.x, y = axis.y, z = axis.z;
        const tx = t * x, ty = t * y;
        this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);
        return this;
    }
    makeScale(x, y, z) {
        this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);
        return this;
    }
    makeShear(xy, xz, yx, yz, zx, zy) {
        this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);
        return this;
    }
    compose(position, quaternion, scale) {
        const te = this.elements;
        const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
        const x2 = x + x, y2 = y + y, z2 = z + z;
        const xx = x * x2, xy = x * y2, xz = x * z2;
        const yy = y * y2, yz = y * z2, zz = z * z2;
        const wx = w * x2, wy = w * y2, wz = w * z2;
        const sx = scale.x, sy = scale.y, sz = scale.z;
        te[0] = (1 - (yy + zz)) * sx;
        te[1] = (xy + wz) * sx;
        te[2] = (xz - wy) * sx;
        te[3] = 0;
        te[4] = (xy - wz) * sy;
        te[5] = (1 - (xx + zz)) * sy;
        te[6] = (yz + wx) * sy;
        te[7] = 0;
        te[8] = (xz + wy) * sz;
        te[9] = (yz - wx) * sz;
        te[10] = (1 - (xx + yy)) * sz;
        te[11] = 0;
        te[12] = position.x;
        te[13] = position.y;
        te[14] = position.z;
        te[15] = 1;
        return this;
    }
    decompose(position, quaternion, scale) {
        const te = this.elements;
        let sx = $2d9d8c9fc2282acc$var$_v1$5.set(te[0], te[1], te[2]).length();
        const sy = $2d9d8c9fc2282acc$var$_v1$5.set(te[4], te[5], te[6]).length();
        const sz = $2d9d8c9fc2282acc$var$_v1$5.set(te[8], te[9], te[10]).length();
        // if determine is negative, we need to invert one scale
        const det = this.determinant();
        if (det < 0) sx = -sx;
        position.x = te[12];
        position.y = te[13];
        position.z = te[14];
        // scale the rotation part
        $2d9d8c9fc2282acc$var$_m1$2.copy(this);
        const invSX = 1 / sx;
        const invSY = 1 / sy;
        const invSZ = 1 / sz;
        $2d9d8c9fc2282acc$var$_m1$2.elements[0] *= invSX;
        $2d9d8c9fc2282acc$var$_m1$2.elements[1] *= invSX;
        $2d9d8c9fc2282acc$var$_m1$2.elements[2] *= invSX;
        $2d9d8c9fc2282acc$var$_m1$2.elements[4] *= invSY;
        $2d9d8c9fc2282acc$var$_m1$2.elements[5] *= invSY;
        $2d9d8c9fc2282acc$var$_m1$2.elements[6] *= invSY;
        $2d9d8c9fc2282acc$var$_m1$2.elements[8] *= invSZ;
        $2d9d8c9fc2282acc$var$_m1$2.elements[9] *= invSZ;
        $2d9d8c9fc2282acc$var$_m1$2.elements[10] *= invSZ;
        quaternion.setFromRotationMatrix($2d9d8c9fc2282acc$var$_m1$2);
        scale.x = sx;
        scale.y = sy;
        scale.z = sz;
        return this;
    }
    makePerspective(left, right, top, bottom, near, far) {
        if (far === undefined) console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
        const te = this.elements;
        const x = 2 * near / (right - left);
        const y = 2 * near / (top - bottom);
        const a = (right + left) / (right - left);
        const b = (top + bottom) / (top - bottom);
        const c = -(far + near) / (far - near);
        const d = -2 * far * near / (far - near);
        te[0] = x;
        te[4] = 0;
        te[8] = a;
        te[12] = 0;
        te[1] = 0;
        te[5] = y;
        te[9] = b;
        te[13] = 0;
        te[2] = 0;
        te[6] = 0;
        te[10] = c;
        te[14] = d;
        te[3] = 0;
        te[7] = 0;
        te[11] = -1;
        te[15] = 0;
        return this;
    }
    makeOrthographic(left, right, top, bottom, near, far) {
        const te = this.elements;
        const w = 1 / (right - left);
        const h = 1 / (top - bottom);
        const p = 1 / (far - near);
        const x = (right + left) * w;
        const y = (top + bottom) * h;
        const z = (far + near) * p;
        te[0] = 2 * w;
        te[4] = 0;
        te[8] = 0;
        te[12] = -x;
        te[1] = 0;
        te[5] = 2 * h;
        te[9] = 0;
        te[13] = -y;
        te[2] = 0;
        te[6] = 0;
        te[10] = -2 * p;
        te[14] = -z;
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
        te[15] = 1;
        return this;
    }
    equals(matrix) {
        const te = this.elements;
        const me = matrix.elements;
        for(let i16 = 0; i16 < 16; i16++){
            if (te[i16] !== me[i16]) return false;
        }
        return true;
    }
    fromArray(array, offset = 0) {
        for(let i17 = 0; i17 < 16; i17++)this.elements[i17] = array[i17 + offset];
        return this;
    }
    toArray(array = [], offset = 0) {
        const te = this.elements;
        array[offset] = te[0];
        array[offset + 1] = te[1];
        array[offset + 2] = te[2];
        array[offset + 3] = te[3];
        array[offset + 4] = te[4];
        array[offset + 5] = te[5];
        array[offset + 6] = te[6];
        array[offset + 7] = te[7];
        array[offset + 8] = te[8];
        array[offset + 9] = te[9];
        array[offset + 10] = te[10];
        array[offset + 11] = te[11];
        array[offset + 12] = te[12];
        array[offset + 13] = te[13];
        array[offset + 14] = te[14];
        array[offset + 15] = te[15];
        return array;
    }
}
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.isMatrix4 = true;
const $2d9d8c9fc2282acc$var$_v1$5 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_m1$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_zero = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 0);
const $2d9d8c9fc2282acc$var$_one = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 1, 1);
const $2d9d8c9fc2282acc$var$_x = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_y = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_z = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_matrix$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_quaternion$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
class $2d9d8c9fc2282acc$export$d93cc409a0768c5f {
    constructor(x = 0, y = 0, z = 0, order = $2d9d8c9fc2282acc$export$d93cc409a0768c5f.DefaultOrder){
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
        this._onChangeCallback();
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
        this._onChangeCallback();
    }
    get z() {
        return this._z;
    }
    set z(value) {
        this._z = value;
        this._onChangeCallback();
    }
    get order() {
        return this._order;
    }
    set order(value) {
        this._order = value;
        this._onChangeCallback();
    }
    set(x, y, z, order = this._order) {
        this._x = x;
        this._y = y;
        this._z = z;
        this._order = order;
        this._onChangeCallback();
        return this;
    }
    clone() {
        return new this.constructor(this._x, this._y, this._z, this._order);
    }
    copy(euler) {
        this._x = euler._x;
        this._y = euler._y;
        this._z = euler._z;
        this._order = euler._order;
        this._onChangeCallback();
        return this;
    }
    setFromRotationMatrix(m, order = this._order, update = true) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        const te = m.elements;
        const m11 = te[0], m12 = te[4], m13 = te[8];
        const m21 = te[1], m22 = te[5], m23 = te[9];
        const m31 = te[2], m32 = te[6], m33 = te[10];
        switch(order){
            case 'XYZ':
                this._y = Math.asin($2d9d8c9fc2282acc$var$clamp(m13, -1, 1));
                if (Math.abs(m13) < 0.9999999) {
                    this._x = Math.atan2(-m23, m33);
                    this._z = Math.atan2(-m12, m11);
                } else {
                    this._x = Math.atan2(m32, m22);
                    this._z = 0;
                }
                break;
            case 'YXZ':
                this._x = Math.asin(-$2d9d8c9fc2282acc$var$clamp(m23, -1, 1));
                if (Math.abs(m23) < 0.9999999) {
                    this._y = Math.atan2(m13, m33);
                    this._z = Math.atan2(m21, m22);
                } else {
                    this._y = Math.atan2(-m31, m11);
                    this._z = 0;
                }
                break;
            case 'ZXY':
                this._x = Math.asin($2d9d8c9fc2282acc$var$clamp(m32, -1, 1));
                if (Math.abs(m32) < 0.9999999) {
                    this._y = Math.atan2(-m31, m33);
                    this._z = Math.atan2(-m12, m22);
                } else {
                    this._y = 0;
                    this._z = Math.atan2(m21, m11);
                }
                break;
            case 'ZYX':
                this._y = Math.asin(-$2d9d8c9fc2282acc$var$clamp(m31, -1, 1));
                if (Math.abs(m31) < 0.9999999) {
                    this._x = Math.atan2(m32, m33);
                    this._z = Math.atan2(m21, m11);
                } else {
                    this._x = 0;
                    this._z = Math.atan2(-m12, m22);
                }
                break;
            case 'YZX':
                this._z = Math.asin($2d9d8c9fc2282acc$var$clamp(m21, -1, 1));
                if (Math.abs(m21) < 0.9999999) {
                    this._x = Math.atan2(-m23, m22);
                    this._y = Math.atan2(-m31, m11);
                } else {
                    this._x = 0;
                    this._y = Math.atan2(m13, m33);
                }
                break;
            case 'XZY':
                this._z = Math.asin(-$2d9d8c9fc2282acc$var$clamp(m12, -1, 1));
                if (Math.abs(m12) < 0.9999999) {
                    this._x = Math.atan2(m32, m22);
                    this._y = Math.atan2(m13, m11);
                } else {
                    this._x = Math.atan2(-m23, m33);
                    this._y = 0;
                }
                break;
            default:
                console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
        }
        this._order = order;
        if (update === true) this._onChangeCallback();
        return this;
    }
    setFromQuaternion(q, order, update) {
        $2d9d8c9fc2282acc$var$_matrix$1.makeRotationFromQuaternion(q);
        return this.setFromRotationMatrix($2d9d8c9fc2282acc$var$_matrix$1, order, update);
    }
    setFromVector3(v, order = this._order) {
        return this.set(v.x, v.y, v.z, order);
    }
    reorder(newOrder) {
        // WARNING: this discards revolution information -bhouston
        $2d9d8c9fc2282acc$var$_quaternion$3.setFromEuler(this);
        return this.setFromQuaternion($2d9d8c9fc2282acc$var$_quaternion$3, newOrder);
    }
    equals(euler) {
        return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
    }
    fromArray(array) {
        this._x = array[0];
        this._y = array[1];
        this._z = array[2];
        if (array[3] !== undefined) this._order = array[3];
        this._onChangeCallback();
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this._x;
        array[offset + 1] = this._y;
        array[offset + 2] = this._z;
        array[offset + 3] = this._order;
        return array;
    }
    toVector3(optionalResult) {
        if (optionalResult) return optionalResult.set(this._x, this._y, this._z);
        else return new $2d9d8c9fc2282acc$export$64b5c384219d3699(this._x, this._y, this._z);
    }
    _onChange(callback) {
        this._onChangeCallback = callback;
        return this;
    }
    _onChangeCallback() {
    }
}
$2d9d8c9fc2282acc$export$d93cc409a0768c5f.prototype.isEuler = true;
$2d9d8c9fc2282acc$export$d93cc409a0768c5f.DefaultOrder = 'XYZ';
$2d9d8c9fc2282acc$export$d93cc409a0768c5f.RotationOrders = [
    'XYZ',
    'YZX',
    'ZXY',
    'XZY',
    'YXZ',
    'ZYX'
];
class $2d9d8c9fc2282acc$export$89312ce47c0ca777 {
    constructor(){
        this.mask = 1;
    }
    set(channel) {
        this.mask = (1 << channel | 0) >>> 0;
    }
    enable(channel) {
        this.mask |= 1 << channel | 0;
    }
    enableAll() {
        this.mask = -1;
    }
    toggle(channel) {
        this.mask ^= 1 << channel | 0;
    }
    disable(channel) {
        this.mask &= ~(1 << channel | 0);
    }
    disableAll() {
        this.mask = 0;
    }
    test(layers) {
        return (this.mask & layers.mask) !== 0;
    }
    isEnabled(channel) {
        return (this.mask & (1 << channel | 0)) !== 0;
    }
}
let $2d9d8c9fc2282acc$var$_object3DId = 0;
const $2d9d8c9fc2282acc$var$_v1$4 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_q1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
const $2d9d8c9fc2282acc$var$_m1$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_target = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_position$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_scale$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_quaternion$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
const $2d9d8c9fc2282acc$var$_xAxis = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 0, 0);
const $2d9d8c9fc2282acc$var$_yAxis = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0);
const $2d9d8c9fc2282acc$var$_zAxis = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 1);
const $2d9d8c9fc2282acc$var$_addedEvent = {
    type: 'added'
};
const $2d9d8c9fc2282acc$var$_removedEvent = {
    type: 'removed'
};
class $2d9d8c9fc2282acc$export$e4dd07dff30cc924 extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        Object.defineProperty(this, 'id', {
            value: $2d9d8c9fc2282acc$var$_object3DId++
        });
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        this.name = '';
        this.type = 'Object3D';
        this.parent = null;
        this.children = [];
        this.up = $2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultUp.clone();
        const position = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const rotation = new $2d9d8c9fc2282acc$export$d93cc409a0768c5f();
        const quaternion = new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
        const scale = new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 1, 1);
        function onRotationChange() {
            quaternion.setFromEuler(rotation, false);
        }
        function onQuaternionChange() {
            rotation.setFromQuaternion(quaternion, undefined, false);
        }
        rotation._onChange(onRotationChange);
        quaternion._onChange(onQuaternionChange);
        Object.defineProperties(this, {
            position: {
                configurable: true,
                enumerable: true,
                value: position
            },
            rotation: {
                configurable: true,
                enumerable: true,
                value: rotation
            },
            quaternion: {
                configurable: true,
                enumerable: true,
                value: quaternion
            },
            scale: {
                configurable: true,
                enumerable: true,
                value: scale
            },
            modelViewMatrix: {
                value: new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5()
            },
            normalMatrix: {
                value: new $2d9d8c9fc2282acc$export$8ff26dafa08918()
            }
        });
        this.matrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        this.matrixWorld = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        this.matrixAutoUpdate = $2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultMatrixAutoUpdate;
        this.matrixWorldNeedsUpdate = false;
        this.layers = new $2d9d8c9fc2282acc$export$89312ce47c0ca777();
        this.visible = true;
        this.castShadow = false;
        this.receiveShadow = false;
        this.frustumCulled = true;
        this.renderOrder = 0;
        this.animations = [];
        this.userData = {
        };
    }
    onBeforeRender() {
    }
    onAfterRender() {
    }
    applyMatrix4(matrix) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        this.matrix.premultiply(matrix);
        this.matrix.decompose(this.position, this.quaternion, this.scale);
    }
    applyQuaternion(q) {
        this.quaternion.premultiply(q);
        return this;
    }
    setRotationFromAxisAngle(axis, angle) {
        // assumes axis is normalized
        this.quaternion.setFromAxisAngle(axis, angle);
    }
    setRotationFromEuler(euler) {
        this.quaternion.setFromEuler(euler, true);
    }
    setRotationFromMatrix(m) {
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        this.quaternion.setFromRotationMatrix(m);
    }
    setRotationFromQuaternion(q) {
        // assumes q is normalized
        this.quaternion.copy(q);
    }
    rotateOnAxis(axis, angle) {
        // rotate object on axis in object space
        // axis is assumed to be normalized
        $2d9d8c9fc2282acc$var$_q1.setFromAxisAngle(axis, angle);
        this.quaternion.multiply($2d9d8c9fc2282acc$var$_q1);
        return this;
    }
    rotateOnWorldAxis(axis, angle) {
        // rotate object on axis in world space
        // axis is assumed to be normalized
        // method assumes no rotated parent
        $2d9d8c9fc2282acc$var$_q1.setFromAxisAngle(axis, angle);
        this.quaternion.premultiply($2d9d8c9fc2282acc$var$_q1);
        return this;
    }
    rotateX(angle) {
        return this.rotateOnAxis($2d9d8c9fc2282acc$var$_xAxis, angle);
    }
    rotateY(angle) {
        return this.rotateOnAxis($2d9d8c9fc2282acc$var$_yAxis, angle);
    }
    rotateZ(angle) {
        return this.rotateOnAxis($2d9d8c9fc2282acc$var$_zAxis, angle);
    }
    translateOnAxis(axis, distance) {
        // translate object by distance along axis in object space
        // axis is assumed to be normalized
        $2d9d8c9fc2282acc$var$_v1$4.copy(axis).applyQuaternion(this.quaternion);
        this.position.add($2d9d8c9fc2282acc$var$_v1$4.multiplyScalar(distance));
        return this;
    }
    translateX(distance) {
        return this.translateOnAxis($2d9d8c9fc2282acc$var$_xAxis, distance);
    }
    translateY(distance) {
        return this.translateOnAxis($2d9d8c9fc2282acc$var$_yAxis, distance);
    }
    translateZ(distance) {
        return this.translateOnAxis($2d9d8c9fc2282acc$var$_zAxis, distance);
    }
    localToWorld(vector) {
        return vector.applyMatrix4(this.matrixWorld);
    }
    worldToLocal(vector) {
        return vector.applyMatrix4($2d9d8c9fc2282acc$var$_m1$1.copy(this.matrixWorld).invert());
    }
    lookAt(x, y, z) {
        // This method does not support objects having non-uniformly-scaled parent(s)
        if (x.isVector3) $2d9d8c9fc2282acc$var$_target.copy(x);
        else $2d9d8c9fc2282acc$var$_target.set(x, y, z);
        const parent = this.parent;
        this.updateWorldMatrix(true, false);
        $2d9d8c9fc2282acc$var$_position$3.setFromMatrixPosition(this.matrixWorld);
        if (this.isCamera || this.isLight) $2d9d8c9fc2282acc$var$_m1$1.lookAt($2d9d8c9fc2282acc$var$_position$3, $2d9d8c9fc2282acc$var$_target, this.up);
        else $2d9d8c9fc2282acc$var$_m1$1.lookAt($2d9d8c9fc2282acc$var$_target, $2d9d8c9fc2282acc$var$_position$3, this.up);
        this.quaternion.setFromRotationMatrix($2d9d8c9fc2282acc$var$_m1$1);
        if (parent) {
            $2d9d8c9fc2282acc$var$_m1$1.extractRotation(parent.matrixWorld);
            $2d9d8c9fc2282acc$var$_q1.setFromRotationMatrix($2d9d8c9fc2282acc$var$_m1$1);
            this.quaternion.premultiply($2d9d8c9fc2282acc$var$_q1.invert());
        }
    }
    add(object) {
        if (arguments.length > 1) {
            for(let i18 = 0; i18 < arguments.length; i18++)this.add(arguments[i18]);
            return this;
        }
        if (object === this) {
            console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object);
            return this;
        }
        if (object && object.isObject3D) {
            if (object.parent !== null) object.parent.remove(object);
            object.parent = this;
            this.children.push(object);
            object.dispatchEvent($2d9d8c9fc2282acc$var$_addedEvent);
        } else console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);
        return this;
    }
    remove(object) {
        if (arguments.length > 1) {
            for(let i19 = 0; i19 < arguments.length; i19++)this.remove(arguments[i19]);
            return this;
        }
        const index = this.children.indexOf(object);
        if (index !== -1) {
            object.parent = null;
            this.children.splice(index, 1);
            object.dispatchEvent($2d9d8c9fc2282acc$var$_removedEvent);
        }
        return this;
    }
    removeFromParent() {
        const parent = this.parent;
        if (parent !== null) parent.remove(this);
        return this;
    }
    clear() {
        for(let i20 = 0; i20 < this.children.length; i20++){
            const object = this.children[i20];
            object.parent = null;
            object.dispatchEvent($2d9d8c9fc2282acc$var$_removedEvent);
        }
        this.children.length = 0;
        return this;
    }
    attach(object) {
        // adds object as a child of this, while maintaining the object's world transform
        // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)
        this.updateWorldMatrix(true, false);
        $2d9d8c9fc2282acc$var$_m1$1.copy(this.matrixWorld).invert();
        if (object.parent !== null) {
            object.parent.updateWorldMatrix(true, false);
            $2d9d8c9fc2282acc$var$_m1$1.multiply(object.parent.matrixWorld);
        }
        object.applyMatrix4($2d9d8c9fc2282acc$var$_m1$1);
        this.add(object);
        object.updateWorldMatrix(false, true);
        return this;
    }
    getObjectById(id) {
        return this.getObjectByProperty('id', id);
    }
    getObjectByName(name) {
        return this.getObjectByProperty('name', name);
    }
    getObjectByProperty(name, value) {
        if (this[name] === value) return this;
        for(let i21 = 0, l = this.children.length; i21 < l; i21++){
            const child = this.children[i21];
            const object = child.getObjectByProperty(name, value);
            if (object !== undefined) return object;
        }
        return undefined;
    }
    getWorldPosition(target) {
        this.updateWorldMatrix(true, false);
        return target.setFromMatrixPosition(this.matrixWorld);
    }
    getWorldQuaternion(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose($2d9d8c9fc2282acc$var$_position$3, target, $2d9d8c9fc2282acc$var$_scale$2);
        return target;
    }
    getWorldScale(target) {
        this.updateWorldMatrix(true, false);
        this.matrixWorld.decompose($2d9d8c9fc2282acc$var$_position$3, $2d9d8c9fc2282acc$var$_quaternion$2, target);
        return target;
    }
    getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(e[8], e[9], e[10]).normalize();
    }
    raycast() {
    }
    traverse(callback) {
        callback(this);
        const children = this.children;
        for(let i22 = 0, l = children.length; i22 < l; i22++)children[i22].traverse(callback);
    }
    traverseVisible(callback) {
        if (this.visible === false) return;
        callback(this);
        const children = this.children;
        for(let i23 = 0, l = children.length; i23 < l; i23++)children[i23].traverseVisible(callback);
    }
    traverseAncestors(callback) {
        const parent = this.parent;
        if (parent !== null) {
            callback(parent);
            parent.traverseAncestors(callback);
        }
    }
    updateMatrix() {
        this.matrix.compose(this.position, this.quaternion, this.scale);
        this.matrixWorldNeedsUpdate = true;
    }
    updateMatrixWorld(force) {
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.matrixWorldNeedsUpdate || force) {
            if (this.parent === null) this.matrixWorld.copy(this.matrix);
            else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
            this.matrixWorldNeedsUpdate = false;
            force = true;
        }
        // update children
        const children = this.children;
        for(let i24 = 0, l = children.length; i24 < l; i24++)children[i24].updateMatrixWorld(force);
    }
    updateWorldMatrix(updateParents, updateChildren) {
        const parent = this.parent;
        if (updateParents === true && parent !== null) parent.updateWorldMatrix(true, false);
        if (this.matrixAutoUpdate) this.updateMatrix();
        if (this.parent === null) this.matrixWorld.copy(this.matrix);
        else this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        // update children
        if (updateChildren === true) {
            const children = this.children;
            for(let i25 = 0, l = children.length; i25 < l; i25++)children[i25].updateWorldMatrix(false, true);
        }
    }
    toJSON(meta) {
        // meta is a string when called from JSON.stringify
        const isRootObject = meta === undefined || typeof meta === 'string';
        const output = {
        };
        // meta is a hash used to collect geometries, materials.
        // not providing it implies that this is the root object
        // being serialized.
        if (isRootObject) {
            // initialize meta obj
            meta = {
                geometries: {
                },
                materials: {
                },
                textures: {
                },
                images: {
                },
                shapes: {
                },
                skeletons: {
                },
                animations: {
                }
            };
            output.metadata = {
                version: 4.5,
                type: 'Object',
                generator: 'Object3D.toJSON'
            };
        }
        // standard Object3D serialization
        const object = {
        };
        object.uuid = this.uuid;
        object.type = this.type;
        if (this.name !== '') object.name = this.name;
        if (this.castShadow === true) object.castShadow = true;
        if (this.receiveShadow === true) object.receiveShadow = true;
        if (this.visible === false) object.visible = false;
        if (this.frustumCulled === false) object.frustumCulled = false;
        if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;
        if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;
        object.layers = this.layers.mask;
        object.matrix = this.matrix.toArray();
        if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;
        // object specific properties
        if (this.isInstancedMesh) {
            object.type = 'InstancedMesh';
            object.count = this.count;
            object.instanceMatrix = this.instanceMatrix.toJSON();
            if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();
        }
        //
        function serialize(library, element) {
            if (library[element.uuid] === undefined) library[element.uuid] = element.toJSON(meta);
            return element.uuid;
        }
        if (this.isScene) {
            if (this.background) {
                if (this.background.isColor) object.background = this.background.toJSON();
                else if (this.background.isTexture) object.background = this.background.toJSON(meta).uuid;
            }
            if (this.environment && this.environment.isTexture) object.environment = this.environment.toJSON(meta).uuid;
        } else if (this.isMesh || this.isLine || this.isPoints) {
            object.geometry = serialize(meta.geometries, this.geometry);
            const parameters = this.geometry.parameters;
            if (parameters !== undefined && parameters.shapes !== undefined) {
                const shapes = parameters.shapes;
                if (Array.isArray(shapes)) for(let i26 = 0, l = shapes.length; i26 < l; i26++){
                    const shape = shapes[i26];
                    serialize(meta.shapes, shape);
                }
                else serialize(meta.shapes, shapes);
            }
        }
        if (this.isSkinnedMesh) {
            object.bindMode = this.bindMode;
            object.bindMatrix = this.bindMatrix.toArray();
            if (this.skeleton !== undefined) {
                serialize(meta.skeletons, this.skeleton);
                object.skeleton = this.skeleton.uuid;
            }
        }
        if (this.material !== undefined) {
            if (Array.isArray(this.material)) {
                const uuids = [];
                for(let i27 = 0, l = this.material.length; i27 < l; i27++)uuids.push(serialize(meta.materials, this.material[i27]));
                object.material = uuids;
            } else object.material = serialize(meta.materials, this.material);
        }
        //
        if (this.children.length > 0) {
            object.children = [];
            for(let i28 = 0; i28 < this.children.length; i28++)object.children.push(this.children[i28].toJSON(meta).object);
        }
        //
        if (this.animations.length > 0) {
            object.animations = [];
            for(let i29 = 0; i29 < this.animations.length; i29++){
                const animation = this.animations[i29];
                object.animations.push(serialize(meta.animations, animation));
            }
        }
        if (isRootObject) {
            const geometries = extractFromCache(meta.geometries);
            const materials = extractFromCache(meta.materials);
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            const shapes = extractFromCache(meta.shapes);
            const skeletons = extractFromCache(meta.skeletons);
            const animations = extractFromCache(meta.animations);
            if (geometries.length > 0) output.geometries = geometries;
            if (materials.length > 0) output.materials = materials;
            if (textures.length > 0) output.textures = textures;
            if (images.length > 0) output.images = images;
            if (shapes.length > 0) output.shapes = shapes;
            if (skeletons.length > 0) output.skeletons = skeletons;
            if (animations.length > 0) output.animations = animations;
        }
        output.object = object;
        // extract data from the cache hash
        // remove metadata on each item
        // and return as array
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
        return output;
    }
    clone(recursive) {
        return new this.constructor().copy(this, recursive);
    }
    copy(source, recursive = true) {
        this.name = source.name;
        this.up.copy(source.up);
        this.position.copy(source.position);
        this.rotation.order = source.rotation.order;
        this.quaternion.copy(source.quaternion);
        this.scale.copy(source.scale);
        this.matrix.copy(source.matrix);
        this.matrixWorld.copy(source.matrixWorld);
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
        this.layers.mask = source.layers.mask;
        this.visible = source.visible;
        this.castShadow = source.castShadow;
        this.receiveShadow = source.receiveShadow;
        this.frustumCulled = source.frustumCulled;
        this.renderOrder = source.renderOrder;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        if (recursive === true) for(let i30 = 0; i30 < source.children.length; i30++){
            const child = source.children[i30];
            this.add(child.clone());
        }
        return this;
    }
}
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultUp = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0);
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultMatrixAutoUpdate = true;
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype.isObject3D = true;
const $2d9d8c9fc2282acc$var$_v0$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v1$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v2$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v3$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vab = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vac = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vbc = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vap = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vbp = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vcp = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$5a465592bfe74b48 {
    constructor(a = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), b = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), c = new $2d9d8c9fc2282acc$export$64b5c384219d3699()){
        this.a = a;
        this.b = b;
        this.c = c;
    }
    static getNormal(a, b, c, target) {
        target.subVectors(c, b);
        $2d9d8c9fc2282acc$var$_v0$1.subVectors(a, b);
        target.cross($2d9d8c9fc2282acc$var$_v0$1);
        const targetLengthSq = target.lengthSq();
        if (targetLengthSq > 0) return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
        return target.set(0, 0, 0);
    }
    // static/instance method to calculate barycentric coordinates
    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
    static getBarycoord(point, a, b, c, target) {
        $2d9d8c9fc2282acc$var$_v0$1.subVectors(c, a);
        $2d9d8c9fc2282acc$var$_v1$3.subVectors(b, a);
        $2d9d8c9fc2282acc$var$_v2$2.subVectors(point, a);
        const dot00 = $2d9d8c9fc2282acc$var$_v0$1.dot($2d9d8c9fc2282acc$var$_v0$1);
        const dot01 = $2d9d8c9fc2282acc$var$_v0$1.dot($2d9d8c9fc2282acc$var$_v1$3);
        const dot02 = $2d9d8c9fc2282acc$var$_v0$1.dot($2d9d8c9fc2282acc$var$_v2$2);
        const dot11 = $2d9d8c9fc2282acc$var$_v1$3.dot($2d9d8c9fc2282acc$var$_v1$3);
        const dot12 = $2d9d8c9fc2282acc$var$_v1$3.dot($2d9d8c9fc2282acc$var$_v2$2);
        const denom = dot00 * dot11 - dot01 * dot01;
        // collinear or singular triangle
        if (denom === 0) // arbitrary location outside of triangle?
        // not sure if this is the best idea, maybe should be returning undefined
        return target.set(-2, -1, -1);
        const invDenom = 1 / denom;
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        // barycentric coordinates must always sum to 1
        return target.set(1 - u - v, v, u);
    }
    static containsPoint(point, a, b, c) {
        this.getBarycoord(point, a, b, c, $2d9d8c9fc2282acc$var$_v3$1);
        return $2d9d8c9fc2282acc$var$_v3$1.x >= 0 && $2d9d8c9fc2282acc$var$_v3$1.y >= 0 && $2d9d8c9fc2282acc$var$_v3$1.x + $2d9d8c9fc2282acc$var$_v3$1.y <= 1;
    }
    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {
        this.getBarycoord(point, p1, p2, p3, $2d9d8c9fc2282acc$var$_v3$1);
        target.set(0, 0);
        target.addScaledVector(uv1, $2d9d8c9fc2282acc$var$_v3$1.x);
        target.addScaledVector(uv2, $2d9d8c9fc2282acc$var$_v3$1.y);
        target.addScaledVector(uv3, $2d9d8c9fc2282acc$var$_v3$1.z);
        return target;
    }
    static isFrontFacing(a, b, c, direction) {
        $2d9d8c9fc2282acc$var$_v0$1.subVectors(c, b);
        $2d9d8c9fc2282acc$var$_v1$3.subVectors(a, b);
        // strictly front facing
        return $2d9d8c9fc2282acc$var$_v0$1.cross($2d9d8c9fc2282acc$var$_v1$3).dot(direction) < 0 ? true : false;
    }
    set(a, b, c) {
        this.a.copy(a);
        this.b.copy(b);
        this.c.copy(c);
        return this;
    }
    setFromPointsAndIndices(points, i0, i1, i2) {
        this.a.copy(points[i0]);
        this.b.copy(points[i1]);
        this.c.copy(points[i2]);
        return this;
    }
    setFromAttributeAndIndices(attribute, i0, i1, i2) {
        this.a.fromBufferAttribute(attribute, i0);
        this.b.fromBufferAttribute(attribute, i1);
        this.c.fromBufferAttribute(attribute, i2);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(triangle) {
        this.a.copy(triangle.a);
        this.b.copy(triangle.b);
        this.c.copy(triangle.c);
        return this;
    }
    getArea() {
        $2d9d8c9fc2282acc$var$_v0$1.subVectors(this.c, this.b);
        $2d9d8c9fc2282acc$var$_v1$3.subVectors(this.a, this.b);
        return $2d9d8c9fc2282acc$var$_v0$1.cross($2d9d8c9fc2282acc$var$_v1$3).length() * 0.5;
    }
    getMidpoint(target) {
        return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
    }
    getNormal(target) {
        return $2d9d8c9fc2282acc$export$5a465592bfe74b48.getNormal(this.a, this.b, this.c, target);
    }
    getPlane(target) {
        return target.setFromCoplanarPoints(this.a, this.b, this.c);
    }
    getBarycoord(point, target) {
        return $2d9d8c9fc2282acc$export$5a465592bfe74b48.getBarycoord(point, this.a, this.b, this.c, target);
    }
    getUV(point, uv1, uv2, uv3, target) {
        return $2d9d8c9fc2282acc$export$5a465592bfe74b48.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
    }
    containsPoint(point) {
        return $2d9d8c9fc2282acc$export$5a465592bfe74b48.containsPoint(point, this.a, this.b, this.c);
    }
    isFrontFacing(direction) {
        return $2d9d8c9fc2282acc$export$5a465592bfe74b48.isFrontFacing(this.a, this.b, this.c, direction);
    }
    intersectsBox(box) {
        return box.intersectsTriangle(this);
    }
    closestPointToPoint(p, target) {
        const a = this.a, b = this.b, c = this.c;
        let v, w;
        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,
        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
        // under the accompanying license; see chapter 5.1.5 for detailed explanation.
        // basically, we're distinguishing which of the voronoi regions of the triangle
        // the point lies in with the minimum amount of redundant computation.
        $2d9d8c9fc2282acc$var$_vab.subVectors(b, a);
        $2d9d8c9fc2282acc$var$_vac.subVectors(c, a);
        $2d9d8c9fc2282acc$var$_vap.subVectors(p, a);
        const d1 = $2d9d8c9fc2282acc$var$_vab.dot($2d9d8c9fc2282acc$var$_vap);
        const d2 = $2d9d8c9fc2282acc$var$_vac.dot($2d9d8c9fc2282acc$var$_vap);
        if (d1 <= 0 && d2 <= 0) // vertex region of A; barycentric coords (1, 0, 0)
        return target.copy(a);
        $2d9d8c9fc2282acc$var$_vbp.subVectors(p, b);
        const d3 = $2d9d8c9fc2282acc$var$_vab.dot($2d9d8c9fc2282acc$var$_vbp);
        const d4 = $2d9d8c9fc2282acc$var$_vac.dot($2d9d8c9fc2282acc$var$_vbp);
        if (d3 >= 0 && d4 <= d3) // vertex region of B; barycentric coords (0, 1, 0)
        return target.copy(b);
        const vc = d1 * d4 - d3 * d2;
        if (vc <= 0 && d1 >= 0 && d3 <= 0) {
            v = d1 / (d1 - d3);
            // edge region of AB; barycentric coords (1-v, v, 0)
            return target.copy(a).addScaledVector($2d9d8c9fc2282acc$var$_vab, v);
        }
        $2d9d8c9fc2282acc$var$_vcp.subVectors(p, c);
        const d5 = $2d9d8c9fc2282acc$var$_vab.dot($2d9d8c9fc2282acc$var$_vcp);
        const d6 = $2d9d8c9fc2282acc$var$_vac.dot($2d9d8c9fc2282acc$var$_vcp);
        if (d6 >= 0 && d5 <= d6) // vertex region of C; barycentric coords (0, 0, 1)
        return target.copy(c);
        const vb = d5 * d2 - d1 * d6;
        if (vb <= 0 && d2 >= 0 && d6 <= 0) {
            w = d2 / (d2 - d6);
            // edge region of AC; barycentric coords (1-w, 0, w)
            return target.copy(a).addScaledVector($2d9d8c9fc2282acc$var$_vac, w);
        }
        const va = d3 * d6 - d5 * d4;
        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
            $2d9d8c9fc2282acc$var$_vbc.subVectors(c, b);
            w = (d4 - d3) / (d4 - d3 + (d5 - d6));
            // edge region of BC; barycentric coords (0, 1-w, w)
            return target.copy(b).addScaledVector($2d9d8c9fc2282acc$var$_vbc, w); // edge region of BC
        }
        // face region
        const denom = 1 / (va + vb + vc);
        // u = va * denom
        v = vb * denom;
        w = vc * denom;
        return target.copy(a).addScaledVector($2d9d8c9fc2282acc$var$_vab, v).addScaledVector($2d9d8c9fc2282acc$var$_vac, w);
    }
    equals(triangle) {
        return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
    }
}
let $2d9d8c9fc2282acc$var$materialId = 0;
class $2d9d8c9fc2282acc$export$a2d8b23205c25948 extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        Object.defineProperty(this, 'id', {
            value: $2d9d8c9fc2282acc$var$materialId++
        });
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        this.name = '';
        this.type = 'Material';
        this.fog = true;
        this.blending = $2d9d8c9fc2282acc$export$5b29a26d96ee6af0;
        this.side = $2d9d8c9fc2282acc$export$2ede184fc2998901;
        this.vertexColors = false;
        this.opacity = 1;
        this.format = $2d9d8c9fc2282acc$export$3f8bb04b555a363c;
        this.transparent = false;
        this.blendSrc = $2d9d8c9fc2282acc$export$d5773124e86cf28c;
        this.blendDst = $2d9d8c9fc2282acc$export$11d468cc7f19e971;
        this.blendEquation = $2d9d8c9fc2282acc$export$20183a0484ce21a0;
        this.blendSrcAlpha = null;
        this.blendDstAlpha = null;
        this.blendEquationAlpha = null;
        this.depthFunc = $2d9d8c9fc2282acc$export$296f78a0b892f81a;
        this.depthTest = true;
        this.depthWrite = true;
        this.stencilWriteMask = 255;
        this.stencilFunc = $2d9d8c9fc2282acc$export$14cf96713ddd97a8;
        this.stencilRef = 0;
        this.stencilFuncMask = 255;
        this.stencilFail = $2d9d8c9fc2282acc$export$9f542ae4b5baca34;
        this.stencilZFail = $2d9d8c9fc2282acc$export$9f542ae4b5baca34;
        this.stencilZPass = $2d9d8c9fc2282acc$export$9f542ae4b5baca34;
        this.stencilWrite = false;
        this.clippingPlanes = null;
        this.clipIntersection = false;
        this.clipShadows = false;
        this.shadowSide = null;
        this.colorWrite = true;
        this.precision = null; // override the renderer's default precision for this material
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.dithering = false;
        this.alphaToCoverage = false;
        this.premultipliedAlpha = false;
        this.visible = true;
        this.toneMapped = true;
        this.userData = {
        };
        this.version = 0;
        this._alphaTest = 0;
    }
    get alphaTest() {
        return this._alphaTest;
    }
    set alphaTest(value) {
        if (this._alphaTest > 0 !== value > 0) this.version++;
        this._alphaTest = value;
    }
    onBuild() {
    }
    onBeforeRender() {
    }
    onBeforeCompile() {
    }
    customProgramCacheKey() {
        return this.onBeforeCompile.toString();
    }
    setValues(values) {
        if (values === undefined) return;
        for(const key in values){
            const newValue = values[key];
            if (newValue === undefined) {
                console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
                continue;
            }
            // for backward compatability if shading is set in the constructor
            if (key === 'shading') {
                console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
                this.flatShading = newValue === $2d9d8c9fc2282acc$export$a62047d29c96d8ff ? true : false;
                continue;
            }
            const currentValue = this[key];
            if (currentValue === undefined) {
                console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
                continue;
            }
            if (currentValue && currentValue.isColor) currentValue.set(newValue);
            else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) currentValue.copy(newValue);
            else this[key] = newValue;
        }
    }
    toJSON(meta) {
        const isRoot = meta === undefined || typeof meta === 'string';
        if (isRoot) meta = {
            textures: {
            },
            images: {
            }
        };
        const data1 = {
            metadata: {
                version: 4.5,
                type: 'Material',
                generator: 'Material.toJSON'
            }
        };
        // standard Material serialization
        data1.uuid = this.uuid;
        data1.type = this.type;
        if (this.name !== '') data1.name = this.name;
        if (this.color && this.color.isColor) data1.color = this.color.getHex();
        if (this.roughness !== undefined) data1.roughness = this.roughness;
        if (this.metalness !== undefined) data1.metalness = this.metalness;
        if (this.sheen !== undefined) data1.sheen = this.sheen;
        if (this.sheenColor && this.sheenColor.isColor) data1.sheenColor = this.sheenColor.getHex();
        if (this.sheenRoughness !== undefined) data1.sheenRoughness = this.sheenRoughness;
        if (this.emissive && this.emissive.isColor) data1.emissive = this.emissive.getHex();
        if (this.emissiveIntensity && this.emissiveIntensity !== 1) data1.emissiveIntensity = this.emissiveIntensity;
        if (this.specular && this.specular.isColor) data1.specular = this.specular.getHex();
        if (this.specularIntensity !== undefined) data1.specularIntensity = this.specularIntensity;
        if (this.specularColor && this.specularColor.isColor) data1.specularColor = this.specularColor.getHex();
        if (this.shininess !== undefined) data1.shininess = this.shininess;
        if (this.clearcoat !== undefined) data1.clearcoat = this.clearcoat;
        if (this.clearcoatRoughness !== undefined) data1.clearcoatRoughness = this.clearcoatRoughness;
        if (this.clearcoatMap && this.clearcoatMap.isTexture) data1.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
        if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) data1.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
        if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
            data1.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
            data1.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
        }
        if (this.map && this.map.isTexture) data1.map = this.map.toJSON(meta).uuid;
        if (this.matcap && this.matcap.isTexture) data1.matcap = this.matcap.toJSON(meta).uuid;
        if (this.alphaMap && this.alphaMap.isTexture) data1.alphaMap = this.alphaMap.toJSON(meta).uuid;
        if (this.lightMap && this.lightMap.isTexture) {
            data1.lightMap = this.lightMap.toJSON(meta).uuid;
            data1.lightMapIntensity = this.lightMapIntensity;
        }
        if (this.aoMap && this.aoMap.isTexture) {
            data1.aoMap = this.aoMap.toJSON(meta).uuid;
            data1.aoMapIntensity = this.aoMapIntensity;
        }
        if (this.bumpMap && this.bumpMap.isTexture) {
            data1.bumpMap = this.bumpMap.toJSON(meta).uuid;
            data1.bumpScale = this.bumpScale;
        }
        if (this.normalMap && this.normalMap.isTexture) {
            data1.normalMap = this.normalMap.toJSON(meta).uuid;
            data1.normalMapType = this.normalMapType;
            data1.normalScale = this.normalScale.toArray();
        }
        if (this.displacementMap && this.displacementMap.isTexture) {
            data1.displacementMap = this.displacementMap.toJSON(meta).uuid;
            data1.displacementScale = this.displacementScale;
            data1.displacementBias = this.displacementBias;
        }
        if (this.roughnessMap && this.roughnessMap.isTexture) data1.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
        if (this.metalnessMap && this.metalnessMap.isTexture) data1.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
        if (this.emissiveMap && this.emissiveMap.isTexture) data1.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
        if (this.specularMap && this.specularMap.isTexture) data1.specularMap = this.specularMap.toJSON(meta).uuid;
        if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data1.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
        if (this.specularColorMap && this.specularColorMap.isTexture) data1.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
        if (this.envMap && this.envMap.isTexture) {
            data1.envMap = this.envMap.toJSON(meta).uuid;
            if (this.combine !== undefined) data1.combine = this.combine;
        }
        if (this.envMapIntensity !== undefined) data1.envMapIntensity = this.envMapIntensity;
        if (this.reflectivity !== undefined) data1.reflectivity = this.reflectivity;
        if (this.refractionRatio !== undefined) data1.refractionRatio = this.refractionRatio;
        if (this.gradientMap && this.gradientMap.isTexture) data1.gradientMap = this.gradientMap.toJSON(meta).uuid;
        if (this.transmission !== undefined) data1.transmission = this.transmission;
        if (this.transmissionMap && this.transmissionMap.isTexture) data1.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
        if (this.thickness !== undefined) data1.thickness = this.thickness;
        if (this.thicknessMap && this.thicknessMap.isTexture) data1.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
        if (this.attenuationDistance !== undefined) data1.attenuationDistance = this.attenuationDistance;
        if (this.attenuationColor !== undefined) data1.attenuationColor = this.attenuationColor.getHex();
        if (this.size !== undefined) data1.size = this.size;
        if (this.shadowSide !== null) data1.shadowSide = this.shadowSide;
        if (this.sizeAttenuation !== undefined) data1.sizeAttenuation = this.sizeAttenuation;
        if (this.blending !== $2d9d8c9fc2282acc$export$5b29a26d96ee6af0) data1.blending = this.blending;
        if (this.side !== $2d9d8c9fc2282acc$export$2ede184fc2998901) data1.side = this.side;
        if (this.vertexColors) data1.vertexColors = true;
        if (this.opacity < 1) data1.opacity = this.opacity;
        if (this.format !== $2d9d8c9fc2282acc$export$3f8bb04b555a363c) data1.format = this.format;
        if (this.transparent === true) data1.transparent = this.transparent;
        data1.depthFunc = this.depthFunc;
        data1.depthTest = this.depthTest;
        data1.depthWrite = this.depthWrite;
        data1.colorWrite = this.colorWrite;
        data1.stencilWrite = this.stencilWrite;
        data1.stencilWriteMask = this.stencilWriteMask;
        data1.stencilFunc = this.stencilFunc;
        data1.stencilRef = this.stencilRef;
        data1.stencilFuncMask = this.stencilFuncMask;
        data1.stencilFail = this.stencilFail;
        data1.stencilZFail = this.stencilZFail;
        data1.stencilZPass = this.stencilZPass;
        // rotation (SpriteMaterial)
        if (this.rotation && this.rotation !== 0) data1.rotation = this.rotation;
        if (this.polygonOffset === true) data1.polygonOffset = true;
        if (this.polygonOffsetFactor !== 0) data1.polygonOffsetFactor = this.polygonOffsetFactor;
        if (this.polygonOffsetUnits !== 0) data1.polygonOffsetUnits = this.polygonOffsetUnits;
        if (this.linewidth && this.linewidth !== 1) data1.linewidth = this.linewidth;
        if (this.dashSize !== undefined) data1.dashSize = this.dashSize;
        if (this.gapSize !== undefined) data1.gapSize = this.gapSize;
        if (this.scale !== undefined) data1.scale = this.scale;
        if (this.dithering === true) data1.dithering = true;
        if (this.alphaTest > 0) data1.alphaTest = this.alphaTest;
        if (this.alphaToCoverage === true) data1.alphaToCoverage = this.alphaToCoverage;
        if (this.premultipliedAlpha === true) data1.premultipliedAlpha = this.premultipliedAlpha;
        if (this.wireframe === true) data1.wireframe = this.wireframe;
        if (this.wireframeLinewidth > 1) data1.wireframeLinewidth = this.wireframeLinewidth;
        if (this.wireframeLinecap !== 'round') data1.wireframeLinecap = this.wireframeLinecap;
        if (this.wireframeLinejoin !== 'round') data1.wireframeLinejoin = this.wireframeLinejoin;
        if (this.flatShading === true) data1.flatShading = this.flatShading;
        if (this.visible === false) data1.visible = false;
        if (this.toneMapped === false) data1.toneMapped = false;
        if (JSON.stringify(this.userData) !== '{}') data1.userData = this.userData;
        // TODO: Copied from Object3D.toJSON
        function extractFromCache(cache) {
            const values = [];
            for(const key in cache){
                const data = cache[key];
                delete data.metadata;
                values.push(data);
            }
            return values;
        }
        if (isRoot) {
            const textures = extractFromCache(meta.textures);
            const images = extractFromCache(meta.images);
            if (textures.length > 0) data1.textures = textures;
            if (images.length > 0) data1.images = images;
        }
        return data1;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.name = source.name;
        this.fog = source.fog;
        this.blending = source.blending;
        this.side = source.side;
        this.vertexColors = source.vertexColors;
        this.opacity = source.opacity;
        this.format = source.format;
        this.transparent = source.transparent;
        this.blendSrc = source.blendSrc;
        this.blendDst = source.blendDst;
        this.blendEquation = source.blendEquation;
        this.blendSrcAlpha = source.blendSrcAlpha;
        this.blendDstAlpha = source.blendDstAlpha;
        this.blendEquationAlpha = source.blendEquationAlpha;
        this.depthFunc = source.depthFunc;
        this.depthTest = source.depthTest;
        this.depthWrite = source.depthWrite;
        this.stencilWriteMask = source.stencilWriteMask;
        this.stencilFunc = source.stencilFunc;
        this.stencilRef = source.stencilRef;
        this.stencilFuncMask = source.stencilFuncMask;
        this.stencilFail = source.stencilFail;
        this.stencilZFail = source.stencilZFail;
        this.stencilZPass = source.stencilZPass;
        this.stencilWrite = source.stencilWrite;
        const srcPlanes = source.clippingPlanes;
        let dstPlanes = null;
        if (srcPlanes !== null) {
            const n = srcPlanes.length;
            dstPlanes = new Array(n);
            for(let i31 = 0; i31 !== n; ++i31)dstPlanes[i31] = srcPlanes[i31].clone();
        }
        this.clippingPlanes = dstPlanes;
        this.clipIntersection = source.clipIntersection;
        this.clipShadows = source.clipShadows;
        this.shadowSide = source.shadowSide;
        this.colorWrite = source.colorWrite;
        this.precision = source.precision;
        this.polygonOffset = source.polygonOffset;
        this.polygonOffsetFactor = source.polygonOffsetFactor;
        this.polygonOffsetUnits = source.polygonOffsetUnits;
        this.dithering = source.dithering;
        this.alphaTest = source.alphaTest;
        this.alphaToCoverage = source.alphaToCoverage;
        this.premultipliedAlpha = source.premultipliedAlpha;
        this.visible = source.visible;
        this.toneMapped = source.toneMapped;
        this.userData = JSON.parse(JSON.stringify(source.userData));
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
}
$2d9d8c9fc2282acc$export$a2d8b23205c25948.prototype.isMaterial = true;
const $2d9d8c9fc2282acc$var$_colorKeywords = {
    'aliceblue': 15792383,
    'antiquewhite': 16444375,
    'aqua': 65535,
    'aquamarine': 8388564,
    'azure': 15794175,
    'beige': 16119260,
    'bisque': 16770244,
    'black': 0,
    'blanchedalmond': 16772045,
    'blue': 255,
    'blueviolet': 9055202,
    'brown': 10824234,
    'burlywood': 14596231,
    'cadetblue': 6266528,
    'chartreuse': 8388352,
    'chocolate': 13789470,
    'coral': 16744272,
    'cornflowerblue': 6591981,
    'cornsilk': 16775388,
    'crimson': 14423100,
    'cyan': 65535,
    'darkblue': 139,
    'darkcyan': 35723,
    'darkgoldenrod': 12092939,
    'darkgray': 11119017,
    'darkgreen': 25600,
    'darkgrey': 11119017,
    'darkkhaki': 12433259,
    'darkmagenta': 9109643,
    'darkolivegreen': 5597999,
    'darkorange': 16747520,
    'darkorchid': 10040012,
    'darkred': 9109504,
    'darksalmon': 15308410,
    'darkseagreen': 9419919,
    'darkslateblue': 4734347,
    'darkslategray': 3100495,
    'darkslategrey': 3100495,
    'darkturquoise': 52945,
    'darkviolet': 9699539,
    'deeppink': 16716947,
    'deepskyblue': 49151,
    'dimgray': 6908265,
    'dimgrey': 6908265,
    'dodgerblue': 2003199,
    'firebrick': 11674146,
    'floralwhite': 16775920,
    'forestgreen': 2263842,
    'fuchsia': 16711935,
    'gainsboro': 14474460,
    'ghostwhite': 16316671,
    'gold': 16766720,
    'goldenrod': 14329120,
    'gray': 8421504,
    'green': 32768,
    'greenyellow': 11403055,
    'grey': 8421504,
    'honeydew': 15794160,
    'hotpink': 16738740,
    'indianred': 13458524,
    'indigo': 4915330,
    'ivory': 16777200,
    'khaki': 15787660,
    'lavender': 15132410,
    'lavenderblush': 16773365,
    'lawngreen': 8190976,
    'lemonchiffon': 16775885,
    'lightblue': 11393254,
    'lightcoral': 15761536,
    'lightcyan': 14745599,
    'lightgoldenrodyellow': 16448210,
    'lightgray': 13882323,
    'lightgreen': 9498256,
    'lightgrey': 13882323,
    'lightpink': 16758465,
    'lightsalmon': 16752762,
    'lightseagreen': 2142890,
    'lightskyblue': 8900346,
    'lightslategray': 7833753,
    'lightslategrey': 7833753,
    'lightsteelblue': 11584734,
    'lightyellow': 16777184,
    'lime': 65280,
    'limegreen': 3329330,
    'linen': 16445670,
    'magenta': 16711935,
    'maroon': 8388608,
    'mediumaquamarine': 6737322,
    'mediumblue': 205,
    'mediumorchid': 12211667,
    'mediumpurple': 9662683,
    'mediumseagreen': 3978097,
    'mediumslateblue': 8087790,
    'mediumspringgreen': 64154,
    'mediumturquoise': 4772300,
    'mediumvioletred': 13047173,
    'midnightblue': 1644912,
    'mintcream': 16121850,
    'mistyrose': 16770273,
    'moccasin': 16770229,
    'navajowhite': 16768685,
    'navy': 128,
    'oldlace': 16643558,
    'olive': 8421376,
    'olivedrab': 7048739,
    'orange': 16753920,
    'orangered': 16729344,
    'orchid': 14315734,
    'palegoldenrod': 15657130,
    'palegreen': 10025880,
    'paleturquoise': 11529966,
    'palevioletred': 14381203,
    'papayawhip': 16773077,
    'peachpuff': 16767673,
    'peru': 13468991,
    'pink': 16761035,
    'plum': 14524637,
    'powderblue': 11591910,
    'purple': 8388736,
    'rebeccapurple': 6697881,
    'red': 16711680,
    'rosybrown': 12357519,
    'royalblue': 4286945,
    'saddlebrown': 9127187,
    'salmon': 16416882,
    'sandybrown': 16032864,
    'seagreen': 3050327,
    'seashell': 16774638,
    'sienna': 10506797,
    'silver': 12632256,
    'skyblue': 8900331,
    'slateblue': 6970061,
    'slategray': 7372944,
    'slategrey': 7372944,
    'snow': 16775930,
    'springgreen': 65407,
    'steelblue': 4620980,
    'tan': 13808780,
    'teal': 32896,
    'thistle': 14204888,
    'tomato': 16737095,
    'turquoise': 4251856,
    'violet': 15631086,
    'wheat': 16113331,
    'white': 16777215,
    'whitesmoke': 16119285,
    'yellow': 16776960,
    'yellowgreen': 10145074
};
const $2d9d8c9fc2282acc$var$_hslA = {
    h: 0,
    s: 0,
    l: 0
};
const $2d9d8c9fc2282acc$var$_hslB = {
    h: 0,
    s: 0,
    l: 0
};
function $2d9d8c9fc2282acc$var$hue2rgb(p, q, t) {
    if (t < 0) t += 1;
    if (t > 1) t -= 1;
    if (t < 1 / 6) return p + (q - p) * 6 * t;
    if (t < 0.5) return q;
    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);
    return p;
}
function $2d9d8c9fc2282acc$var$SRGBToLinear(c) {
    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);
}
function $2d9d8c9fc2282acc$var$LinearToSRGB(c) {
    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;
}
class $2d9d8c9fc2282acc$export$892596cec99bc70e {
    constructor(r, g, b){
        if (g === undefined && b === undefined) // r is THREE.Color, hex or string
        return this.set(r);
        return this.setRGB(r, g, b);
    }
    set(value) {
        if (value && value.isColor) this.copy(value);
        else if (typeof value === 'number') this.setHex(value);
        else if (typeof value === 'string') this.setStyle(value);
        return this;
    }
    setScalar(scalar) {
        this.r = scalar;
        this.g = scalar;
        this.b = scalar;
        return this;
    }
    setHex(hex) {
        hex = Math.floor(hex);
        this.r = (hex >> 16 & 255) / 255;
        this.g = (hex >> 8 & 255) / 255;
        this.b = (hex & 255) / 255;
        return this;
    }
    setRGB(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
        return this;
    }
    setHSL(h, s, l) {
        // h,s,l ranges are in 0.0 - 1.0
        h = $2d9d8c9fc2282acc$var$euclideanModulo(h, 1);
        s = $2d9d8c9fc2282acc$var$clamp(s, 0, 1);
        l = $2d9d8c9fc2282acc$var$clamp(l, 0, 1);
        if (s === 0) this.r = this.g = this.b = l;
        else {
            const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
            const q = 2 * l - p;
            this.r = $2d9d8c9fc2282acc$var$hue2rgb(q, p, h + 1 / 3);
            this.g = $2d9d8c9fc2282acc$var$hue2rgb(q, p, h);
            this.b = $2d9d8c9fc2282acc$var$hue2rgb(q, p, h - 1 / 3);
        }
        return this;
    }
    setStyle(style) {
        function handleAlpha(string) {
            if (string === undefined) return;
            if (parseFloat(string) < 1) console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
        }
        let m;
        if (m = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
            // rgb / hsl
            let color;
            const name = m[1];
            const components = m[2];
            switch(name){
                case 'rgb':
                case 'rgba':
                    if (color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(255,0,0) rgba(255,0,0,0.5)
                        this.r = Math.min(255, parseInt(color[1], 10)) / 255;
                        this.g = Math.min(255, parseInt(color[2], 10)) / 255;
                        this.b = Math.min(255, parseInt(color[3], 10)) / 255;
                        handleAlpha(color[4]);
                        return this;
                    }
                    if (color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
                        this.r = Math.min(100, parseInt(color[1], 10)) / 100;
                        this.g = Math.min(100, parseInt(color[2], 10)) / 100;
                        this.b = Math.min(100, parseInt(color[3], 10)) / 100;
                        handleAlpha(color[4]);
                        return this;
                    }
                    break;
                case 'hsl':
                case 'hsla':
                    if (color = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                        // hsl(120,50%,50%) hsla(120,50%,50%,0.5)
                        const h = parseFloat(color[1]) / 360;
                        const s = parseInt(color[2], 10) / 100;
                        const l = parseInt(color[3], 10) / 100;
                        handleAlpha(color[4]);
                        return this.setHSL(h, s, l);
                    }
                    break;
            }
        } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
            // hex color
            const hex = m[1];
            const size = hex.length;
            if (size === 3) {
                // #ff0
                this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;
                this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;
                this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;
                return this;
            } else if (size === 6) {
                // #ff0000
                this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;
                this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;
                this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;
                return this;
            }
        }
        if (style && style.length > 0) return this.setColorName(style);
        return this;
    }
    setColorName(style) {
        // color keywords
        const hex = $2d9d8c9fc2282acc$var$_colorKeywords[style.toLowerCase()];
        if (hex !== undefined) // red
        this.setHex(hex);
        else // unknown color
        console.warn('THREE.Color: Unknown color ' + style);
        return this;
    }
    clone() {
        return new this.constructor(this.r, this.g, this.b);
    }
    copy(color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
        return this;
    }
    copySRGBToLinear(color) {
        this.r = $2d9d8c9fc2282acc$var$SRGBToLinear(color.r);
        this.g = $2d9d8c9fc2282acc$var$SRGBToLinear(color.g);
        this.b = $2d9d8c9fc2282acc$var$SRGBToLinear(color.b);
        return this;
    }
    copyLinearToSRGB(color) {
        this.r = $2d9d8c9fc2282acc$var$LinearToSRGB(color.r);
        this.g = $2d9d8c9fc2282acc$var$LinearToSRGB(color.g);
        this.b = $2d9d8c9fc2282acc$var$LinearToSRGB(color.b);
        return this;
    }
    convertSRGBToLinear() {
        this.copySRGBToLinear(this);
        return this;
    }
    convertLinearToSRGB() {
        this.copyLinearToSRGB(this);
        return this;
    }
    getHex() {
        return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
    }
    getHexString() {
        return ('000000' + this.getHex().toString(16)).slice(-6);
    }
    getHSL(target) {
        // h,s,l ranges are in 0.0 - 1.0
        const r = this.r, g = this.g, b = this.b;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let hue, saturation;
        const lightness = (min + max) / 2;
        if (min === max) {
            hue = 0;
            saturation = 0;
        } else {
            const delta = max - min;
            saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
            switch(max){
                case r:
                    hue = (g - b) / delta + (g < b ? 6 : 0);
                    break;
                case g:
                    hue = (b - r) / delta + 2;
                    break;
                case b:
                    hue = (r - g) / delta + 4;
                    break;
            }
            hue /= 6;
        }
        target.h = hue;
        target.s = saturation;
        target.l = lightness;
        return target;
    }
    getStyle() {
        return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';
    }
    offsetHSL(h, s, l) {
        this.getHSL($2d9d8c9fc2282acc$var$_hslA);
        $2d9d8c9fc2282acc$var$_hslA.h += h;
        $2d9d8c9fc2282acc$var$_hslA.s += s;
        $2d9d8c9fc2282acc$var$_hslA.l += l;
        this.setHSL($2d9d8c9fc2282acc$var$_hslA.h, $2d9d8c9fc2282acc$var$_hslA.s, $2d9d8c9fc2282acc$var$_hslA.l);
        return this;
    }
    add(color) {
        this.r += color.r;
        this.g += color.g;
        this.b += color.b;
        return this;
    }
    addColors(color1, color2) {
        this.r = color1.r + color2.r;
        this.g = color1.g + color2.g;
        this.b = color1.b + color2.b;
        return this;
    }
    addScalar(s) {
        this.r += s;
        this.g += s;
        this.b += s;
        return this;
    }
    sub(color) {
        this.r = Math.max(0, this.r - color.r);
        this.g = Math.max(0, this.g - color.g);
        this.b = Math.max(0, this.b - color.b);
        return this;
    }
    multiply(color) {
        this.r *= color.r;
        this.g *= color.g;
        this.b *= color.b;
        return this;
    }
    multiplyScalar(s) {
        this.r *= s;
        this.g *= s;
        this.b *= s;
        return this;
    }
    lerp(color, alpha) {
        this.r += (color.r - this.r) * alpha;
        this.g += (color.g - this.g) * alpha;
        this.b += (color.b - this.b) * alpha;
        return this;
    }
    lerpColors(color1, color2, alpha) {
        this.r = color1.r + (color2.r - color1.r) * alpha;
        this.g = color1.g + (color2.g - color1.g) * alpha;
        this.b = color1.b + (color2.b - color1.b) * alpha;
        return this;
    }
    lerpHSL(color, alpha) {
        this.getHSL($2d9d8c9fc2282acc$var$_hslA);
        color.getHSL($2d9d8c9fc2282acc$var$_hslB);
        const h = $2d9d8c9fc2282acc$var$lerp($2d9d8c9fc2282acc$var$_hslA.h, $2d9d8c9fc2282acc$var$_hslB.h, alpha);
        const s = $2d9d8c9fc2282acc$var$lerp($2d9d8c9fc2282acc$var$_hslA.s, $2d9d8c9fc2282acc$var$_hslB.s, alpha);
        const l = $2d9d8c9fc2282acc$var$lerp($2d9d8c9fc2282acc$var$_hslA.l, $2d9d8c9fc2282acc$var$_hslB.l, alpha);
        this.setHSL(h, s, l);
        return this;
    }
    equals(c) {
        return c.r === this.r && c.g === this.g && c.b === this.b;
    }
    fromArray(array, offset = 0) {
        this.r = array[offset];
        this.g = array[offset + 1];
        this.b = array[offset + 2];
        return this;
    }
    toArray(array = [], offset = 0) {
        array[offset] = this.r;
        array[offset + 1] = this.g;
        array[offset + 2] = this.b;
        return array;
    }
    fromBufferAttribute(attribute, index) {
        this.r = attribute.getX(index);
        this.g = attribute.getY(index);
        this.b = attribute.getZ(index);
        if (attribute.normalized === true) {
            // assuming Uint8Array
            this.r /= 255;
            this.g /= 255;
            this.b /= 255;
        }
        return this;
    }
    toJSON() {
        return this.getHex();
    }
}
$2d9d8c9fc2282acc$export$892596cec99bc70e.NAMES = $2d9d8c9fc2282acc$var$_colorKeywords;
$2d9d8c9fc2282acc$export$892596cec99bc70e.prototype.isColor = true;
$2d9d8c9fc2282acc$export$892596cec99bc70e.prototype.r = 1;
$2d9d8c9fc2282acc$export$892596cec99bc70e.prototype.g = 1;
$2d9d8c9fc2282acc$export$892596cec99bc70e.prototype.b = 1;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 * }
 */ class $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'MeshBasicMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215); // emissive
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = $2d9d8c9fc2282acc$export$e50ac29801f1774d;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        return this;
    }
}
$2d9d8c9fc2282acc$export$55cbcc9b622fe1f5.prototype.isMeshBasicMaterial = true;
const $2d9d8c9fc2282acc$var$_vector$9 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vector2$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
class $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        if (Array.isArray(array)) throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');
        this.name = '';
        this.array = array;
        this.itemSize = itemSize;
        this.count = array !== undefined ? array.length / itemSize : 0;
        this.normalized = normalized === true;
        this.usage = $2d9d8c9fc2282acc$export$763e8360f4d7f77d;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    copy(source) {
        this.name = source.name;
        this.array = new source.array.constructor(source.array);
        this.itemSize = source.itemSize;
        this.count = source.count;
        this.normalized = source.normalized;
        this.usage = source.usage;
        return this;
    }
    copyAt(index1, attribute, index2) {
        index1 *= this.itemSize;
        index2 *= attribute.itemSize;
        for(let i32 = 0, l = this.itemSize; i32 < l; i32++)this.array[index1 + i32] = attribute.array[index2 + i32];
        return this;
    }
    copyArray(array) {
        this.array.set(array);
        return this;
    }
    copyColorsArray(colors) {
        const array = this.array;
        let offset = 0;
        for(let i33 = 0, l = colors.length; i33 < l; i33++){
            let color = colors[i33];
            if (color === undefined) {
                console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i33);
                color = new $2d9d8c9fc2282acc$export$892596cec99bc70e();
            }
            array[offset++] = color.r;
            array[offset++] = color.g;
            array[offset++] = color.b;
        }
        return this;
    }
    copyVector2sArray(vectors) {
        const array = this.array;
        let offset = 0;
        for(let i34 = 0, l = vectors.length; i34 < l; i34++){
            let vector = vectors[i34];
            if (vector === undefined) {
                console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i34);
                vector = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
            }
            array[offset++] = vector.x;
            array[offset++] = vector.y;
        }
        return this;
    }
    copyVector3sArray(vectors) {
        const array = this.array;
        let offset = 0;
        for(let i35 = 0, l = vectors.length; i35 < l; i35++){
            let vector = vectors[i35];
            if (vector === undefined) {
                console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i35);
                vector = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            }
            array[offset++] = vector.x;
            array[offset++] = vector.y;
            array[offset++] = vector.z;
        }
        return this;
    }
    copyVector4sArray(vectors) {
        const array = this.array;
        let offset = 0;
        for(let i36 = 0, l = vectors.length; i36 < l; i36++){
            let vector = vectors[i36];
            if (vector === undefined) {
                console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i36);
                vector = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
            }
            array[offset++] = vector.x;
            array[offset++] = vector.y;
            array[offset++] = vector.z;
            array[offset++] = vector.w;
        }
        return this;
    }
    applyMatrix3(m) {
        if (this.itemSize === 2) for(let i38 = 0, l = this.count; i38 < l; i38++){
            $2d9d8c9fc2282acc$var$_vector2$1.fromBufferAttribute(this, i38);
            $2d9d8c9fc2282acc$var$_vector2$1.applyMatrix3(m);
            this.setXY(i38, $2d9d8c9fc2282acc$var$_vector2$1.x, $2d9d8c9fc2282acc$var$_vector2$1.y);
        }
        else if (this.itemSize === 3) for(let i37 = 0, l1 = this.count; i37 < l1; i37++){
            $2d9d8c9fc2282acc$var$_vector$9.fromBufferAttribute(this, i37);
            $2d9d8c9fc2282acc$var$_vector$9.applyMatrix3(m);
            this.setXYZ(i37, $2d9d8c9fc2282acc$var$_vector$9.x, $2d9d8c9fc2282acc$var$_vector$9.y, $2d9d8c9fc2282acc$var$_vector$9.z);
        }
        return this;
    }
    applyMatrix4(m) {
        for(let i39 = 0, l = this.count; i39 < l; i39++){
            $2d9d8c9fc2282acc$var$_vector$9.x = this.getX(i39);
            $2d9d8c9fc2282acc$var$_vector$9.y = this.getY(i39);
            $2d9d8c9fc2282acc$var$_vector$9.z = this.getZ(i39);
            $2d9d8c9fc2282acc$var$_vector$9.applyMatrix4(m);
            this.setXYZ(i39, $2d9d8c9fc2282acc$var$_vector$9.x, $2d9d8c9fc2282acc$var$_vector$9.y, $2d9d8c9fc2282acc$var$_vector$9.z);
        }
        return this;
    }
    applyNormalMatrix(m) {
        for(let i40 = 0, l = this.count; i40 < l; i40++){
            $2d9d8c9fc2282acc$var$_vector$9.x = this.getX(i40);
            $2d9d8c9fc2282acc$var$_vector$9.y = this.getY(i40);
            $2d9d8c9fc2282acc$var$_vector$9.z = this.getZ(i40);
            $2d9d8c9fc2282acc$var$_vector$9.applyNormalMatrix(m);
            this.setXYZ(i40, $2d9d8c9fc2282acc$var$_vector$9.x, $2d9d8c9fc2282acc$var$_vector$9.y, $2d9d8c9fc2282acc$var$_vector$9.z);
        }
        return this;
    }
    transformDirection(m) {
        for(let i41 = 0, l = this.count; i41 < l; i41++){
            $2d9d8c9fc2282acc$var$_vector$9.x = this.getX(i41);
            $2d9d8c9fc2282acc$var$_vector$9.y = this.getY(i41);
            $2d9d8c9fc2282acc$var$_vector$9.z = this.getZ(i41);
            $2d9d8c9fc2282acc$var$_vector$9.transformDirection(m);
            this.setXYZ(i41, $2d9d8c9fc2282acc$var$_vector$9.x, $2d9d8c9fc2282acc$var$_vector$9.y, $2d9d8c9fc2282acc$var$_vector$9.z);
        }
        return this;
    }
    set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
    }
    getX(index) {
        return this.array[index * this.itemSize];
    }
    setX(index, x) {
        this.array[index * this.itemSize] = x;
        return this;
    }
    getY(index) {
        return this.array[index * this.itemSize + 1];
    }
    setY(index, y) {
        this.array[index * this.itemSize + 1] = y;
        return this;
    }
    getZ(index) {
        return this.array[index * this.itemSize + 2];
    }
    setZ(index, z) {
        this.array[index * this.itemSize + 2] = z;
        return this;
    }
    getW(index) {
        return this.array[index * this.itemSize + 3];
    }
    setW(index, w) {
        this.array[index * this.itemSize + 3] = w;
        return this;
    }
    setXY(index, x, y) {
        index *= this.itemSize;
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        return this;
    }
    setXYZ(index, x, y, z) {
        index *= this.itemSize;
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index *= this.itemSize;
        this.array[index + 0] = x;
        this.array[index + 1] = y;
        this.array[index + 2] = z;
        this.array[index + 3] = w;
        return this;
    }
    onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
    }
    clone() {
        return new this.constructor(this.array, this.itemSize).copy(this);
    }
    toJSON() {
        const data = {
            itemSize: this.itemSize,
            type: this.array.constructor.name,
            array: Array.prototype.slice.call(this.array),
            normalized: this.normalized
        };
        if (this.name !== '') data.name = this.name;
        if (this.usage !== $2d9d8c9fc2282acc$export$763e8360f4d7f77d) data.usage = this.usage;
        if (this.updateRange.offset !== 0 || this.updateRange.count !== -1) data.updateRange = this.updateRange;
        return data;
    }
}
$2d9d8c9fc2282acc$export$8dea267bd6bde117.prototype.isBufferAttribute = true;
//
class $2d9d8c9fc2282acc$export$f9ff2d6a20248cbf extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Int8Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$cacc90cf35d11cdd extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint8Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$baaa85a1a812c157 extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint8ClampedArray(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$2b755a102ccdcefe extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Int16Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$640a853f68025f2e extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint16Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$46b369aed2968a0a extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Int32Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$7eb8c9fa25cd5bd6 extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint32Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$dbd3698c64958d69 extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Uint16Array(array), itemSize, normalized);
    }
}
$2d9d8c9fc2282acc$export$dbd3698c64958d69.prototype.isFloat16BufferAttribute = true;
class $2d9d8c9fc2282acc$export$cbe7a62641830ebd extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Float32Array(array), itemSize, normalized);
    }
}
class $2d9d8c9fc2282acc$export$9e0ade74842adbb8 extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized){
        super(new Float64Array(array), itemSize, normalized);
    }
}
let $2d9d8c9fc2282acc$var$_id$1 = 0;
const $2d9d8c9fc2282acc$var$_m1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_obj = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$e4dd07dff30cc924();
const $2d9d8c9fc2282acc$var$_offset = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_box$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3();
const $2d9d8c9fc2282acc$var$_boxMorphTargets = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3();
const $2d9d8c9fc2282acc$var$_vector$8 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$b7be63a67df8959 extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(){
        super();
        Object.defineProperty(this, 'id', {
            value: $2d9d8c9fc2282acc$var$_id$1++
        });
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        this.name = '';
        this.type = 'BufferGeometry';
        this.index = null;
        this.attributes = {
        };
        this.morphAttributes = {
        };
        this.morphTargetsRelative = false;
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        this.drawRange = {
            start: 0,
            count: Infinity
        };
        this.userData = {
        };
    }
    getIndex() {
        return this.index;
    }
    setIndex(index) {
        if (Array.isArray(index)) this.index = new ($2d9d8c9fc2282acc$var$arrayMax(index) > 65535 ? $2d9d8c9fc2282acc$export$7eb8c9fa25cd5bd6 : $2d9d8c9fc2282acc$export$640a853f68025f2e)(index, 1);
        else this.index = index;
        return this;
    }
    getAttribute(name) {
        return this.attributes[name];
    }
    setAttribute(name, attribute) {
        this.attributes[name] = attribute;
        return this;
    }
    deleteAttribute(name) {
        delete this.attributes[name];
        return this;
    }
    hasAttribute(name) {
        return this.attributes[name] !== undefined;
    }
    addGroup(start, count, materialIndex = 0) {
        this.groups.push({
            start: start,
            count: count,
            materialIndex: materialIndex
        });
    }
    clearGroups() {
        this.groups = [];
    }
    setDrawRange(start, count) {
        this.drawRange.start = start;
        this.drawRange.count = count;
    }
    applyMatrix4(matrix) {
        const position = this.attributes.position;
        if (position !== undefined) {
            position.applyMatrix4(matrix);
            position.needsUpdate = true;
        }
        const normal = this.attributes.normal;
        if (normal !== undefined) {
            const normalMatrix = new $2d9d8c9fc2282acc$export$8ff26dafa08918().getNormalMatrix(matrix);
            normal.applyNormalMatrix(normalMatrix);
            normal.needsUpdate = true;
        }
        const tangent = this.attributes.tangent;
        if (tangent !== undefined) {
            tangent.transformDirection(matrix);
            tangent.needsUpdate = true;
        }
        if (this.boundingBox !== null) this.computeBoundingBox();
        if (this.boundingSphere !== null) this.computeBoundingSphere();
        return this;
    }
    applyQuaternion(q) {
        $2d9d8c9fc2282acc$var$_m1.makeRotationFromQuaternion(q);
        this.applyMatrix4($2d9d8c9fc2282acc$var$_m1);
        return this;
    }
    rotateX(angle) {
        // rotate geometry around world x-axis
        $2d9d8c9fc2282acc$var$_m1.makeRotationX(angle);
        this.applyMatrix4($2d9d8c9fc2282acc$var$_m1);
        return this;
    }
    rotateY(angle) {
        // rotate geometry around world y-axis
        $2d9d8c9fc2282acc$var$_m1.makeRotationY(angle);
        this.applyMatrix4($2d9d8c9fc2282acc$var$_m1);
        return this;
    }
    rotateZ(angle) {
        // rotate geometry around world z-axis
        $2d9d8c9fc2282acc$var$_m1.makeRotationZ(angle);
        this.applyMatrix4($2d9d8c9fc2282acc$var$_m1);
        return this;
    }
    translate(x, y, z) {
        // translate geometry
        $2d9d8c9fc2282acc$var$_m1.makeTranslation(x, y, z);
        this.applyMatrix4($2d9d8c9fc2282acc$var$_m1);
        return this;
    }
    scale(x, y, z) {
        // scale geometry
        $2d9d8c9fc2282acc$var$_m1.makeScale(x, y, z);
        this.applyMatrix4($2d9d8c9fc2282acc$var$_m1);
        return this;
    }
    lookAt(vector) {
        $2d9d8c9fc2282acc$var$_obj.lookAt(vector);
        $2d9d8c9fc2282acc$var$_obj.updateMatrix();
        this.applyMatrix4($2d9d8c9fc2282acc$var$_obj.matrix);
        return this;
    }
    center() {
        this.computeBoundingBox();
        this.boundingBox.getCenter($2d9d8c9fc2282acc$var$_offset).negate();
        this.translate($2d9d8c9fc2282acc$var$_offset.x, $2d9d8c9fc2282acc$var$_offset.y, $2d9d8c9fc2282acc$var$_offset.z);
        return this;
    }
    setFromPoints(points) {
        const position = [];
        for(let i42 = 0, l = points.length; i42 < l; i42++){
            const point = points[i42];
            position.push(point.x, point.y, point.z || 0);
        }
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(position, 3));
        return this;
    }
    computeBoundingBox() {
        if (this.boundingBox === null) this.boundingBox = new $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingBox.set(new $2d9d8c9fc2282acc$export$64b5c384219d3699(-Infinity, -Infinity, -Infinity), new $2d9d8c9fc2282acc$export$64b5c384219d3699(Infinity, Infinity, Infinity));
            return;
        }
        if (position !== undefined) {
            this.boundingBox.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i43 = 0, il = morphAttributesPosition.length; i43 < il; i43++){
                const morphAttribute = morphAttributesPosition[i43];
                $2d9d8c9fc2282acc$var$_box$1.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    $2d9d8c9fc2282acc$var$_vector$8.addVectors(this.boundingBox.min, $2d9d8c9fc2282acc$var$_box$1.min);
                    this.boundingBox.expandByPoint($2d9d8c9fc2282acc$var$_vector$8);
                    $2d9d8c9fc2282acc$var$_vector$8.addVectors(this.boundingBox.max, $2d9d8c9fc2282acc$var$_box$1.max);
                    this.boundingBox.expandByPoint($2d9d8c9fc2282acc$var$_vector$8);
                } else {
                    this.boundingBox.expandByPoint($2d9d8c9fc2282acc$var$_box$1.min);
                    this.boundingBox.expandByPoint($2d9d8c9fc2282acc$var$_box$1.max);
                }
            }
        } else this.boundingBox.makeEmpty();
        if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
    computeBoundingSphere() {
        if (this.boundingSphere === null) this.boundingSphere = new $2d9d8c9fc2282acc$export$805e8b72413ccaba();
        const position = this.attributes.position;
        const morphAttributesPosition = this.morphAttributes.position;
        if (position && position.isGLBufferAttribute) {
            console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this);
            this.boundingSphere.set(new $2d9d8c9fc2282acc$export$64b5c384219d3699(), Infinity);
            return;
        }
        if (position) {
            // first, find the center of the bounding sphere
            const center = this.boundingSphere.center;
            $2d9d8c9fc2282acc$var$_box$1.setFromBufferAttribute(position);
            // process morph attributes if present
            if (morphAttributesPosition) for(let i46 = 0, il = morphAttributesPosition.length; i46 < il; i46++){
                const morphAttribute = morphAttributesPosition[i46];
                $2d9d8c9fc2282acc$var$_boxMorphTargets.setFromBufferAttribute(morphAttribute);
                if (this.morphTargetsRelative) {
                    $2d9d8c9fc2282acc$var$_vector$8.addVectors($2d9d8c9fc2282acc$var$_box$1.min, $2d9d8c9fc2282acc$var$_boxMorphTargets.min);
                    $2d9d8c9fc2282acc$var$_box$1.expandByPoint($2d9d8c9fc2282acc$var$_vector$8);
                    $2d9d8c9fc2282acc$var$_vector$8.addVectors($2d9d8c9fc2282acc$var$_box$1.max, $2d9d8c9fc2282acc$var$_boxMorphTargets.max);
                    $2d9d8c9fc2282acc$var$_box$1.expandByPoint($2d9d8c9fc2282acc$var$_vector$8);
                } else {
                    $2d9d8c9fc2282acc$var$_box$1.expandByPoint($2d9d8c9fc2282acc$var$_boxMorphTargets.min);
                    $2d9d8c9fc2282acc$var$_box$1.expandByPoint($2d9d8c9fc2282acc$var$_boxMorphTargets.max);
                }
            }
            $2d9d8c9fc2282acc$var$_box$1.getCenter(center);
            // second, try to find a boundingSphere with a radius smaller than the
            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case
            let maxRadiusSq = 0;
            for(let i44 = 0, il1 = position.count; i44 < il1; i44++){
                $2d9d8c9fc2282acc$var$_vector$8.fromBufferAttribute(position, i44);
                maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared($2d9d8c9fc2282acc$var$_vector$8));
            }
            // process morph attributes if present
            if (morphAttributesPosition) for(let i45 = 0, il2 = morphAttributesPosition.length; i45 < il2; i45++){
                const morphAttribute = morphAttributesPosition[i45];
                const morphTargetsRelative = this.morphTargetsRelative;
                for(let j = 0, jl = morphAttribute.count; j < jl; j++){
                    $2d9d8c9fc2282acc$var$_vector$8.fromBufferAttribute(morphAttribute, j);
                    if (morphTargetsRelative) {
                        $2d9d8c9fc2282acc$var$_offset.fromBufferAttribute(position, j);
                        $2d9d8c9fc2282acc$var$_vector$8.add($2d9d8c9fc2282acc$var$_offset);
                    }
                    maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared($2d9d8c9fc2282acc$var$_vector$8));
                }
            }
            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
            if (isNaN(this.boundingSphere.radius)) console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
        }
    }
    computeTangents() {
        const index = this.index;
        const attributes = this.attributes;
        // based on http://www.terathon.com/code/tangent.html
        // (per vertex tangents)
        if (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {
            console.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');
            return;
        }
        const indices = index.array;
        const positions = attributes.position.array;
        const normals = attributes.normal.array;
        const uvs = attributes.uv.array;
        const nVertices = positions.length / 3;
        if (attributes.tangent === undefined) this.setAttribute('tangent', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(new Float32Array(4 * nVertices), 4));
        const tangents = attributes.tangent.array;
        const tan1 = [], tan2 = [];
        for(let i49 = 0; i49 < nVertices; i49++){
            tan1[i49] = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            tan2[i49] = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        }
        const vA = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), vB = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), vC = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), uvA = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), uvB = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), uvC = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), sdir = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), tdir = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        function handleTriangle(a, b, c) {
            vA.fromArray(positions, a * 3);
            vB.fromArray(positions, b * 3);
            vC.fromArray(positions, c * 3);
            uvA.fromArray(uvs, a * 2);
            uvB.fromArray(uvs, b * 2);
            uvC.fromArray(uvs, c * 2);
            vB.sub(vA);
            vC.sub(vA);
            uvB.sub(uvA);
            uvC.sub(uvA);
            const r = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
            // silently ignore degenerate uv triangles having coincident or colinear vertices
            if (!isFinite(r)) return;
            sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);
            tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);
            tan1[a].add(sdir);
            tan1[b].add(sdir);
            tan1[c].add(sdir);
            tan2[a].add(tdir);
            tan2[b].add(tdir);
            tan2[c].add(tdir);
        }
        let groups = this.groups;
        if (groups.length === 0) groups = [
            {
                start: 0,
                count: indices.length
            }
        ];
        for(let i47 = 0, il = groups.length; i47 < il; ++i47){
            const group = groups[i47];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3)handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
        }
        const tmp = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), tmp2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const n = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), n2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        function handleVertex(v) {
            n.fromArray(normals, v * 3);
            n2.copy(n);
            const t = tan1[v];
            // Gram-Schmidt orthogonalize
            tmp.copy(t);
            tmp.sub(n.multiplyScalar(n.dot(t))).normalize();
            // Calculate handedness
            tmp2.crossVectors(n2, t);
            const test = tmp2.dot(tan2[v]);
            const w = test < 0 ? -1 : 1;
            tangents[v * 4] = tmp.x;
            tangents[v * 4 + 1] = tmp.y;
            tangents[v * 4 + 2] = tmp.z;
            tangents[v * 4 + 3] = w;
        }
        for(let i48 = 0, il3 = groups.length; i48 < il3; ++i48){
            const group = groups[i48];
            const start = group.start;
            const count = group.count;
            for(let j = start, jl = start + count; j < jl; j += 3){
                handleVertex(indices[j + 0]);
                handleVertex(indices[j + 1]);
                handleVertex(indices[j + 2]);
            }
        }
    }
    computeVertexNormals() {
        const index = this.index;
        const positionAttribute = this.getAttribute('position');
        if (positionAttribute !== undefined) {
            let normalAttribute = this.getAttribute('normal');
            if (normalAttribute === undefined) {
                normalAttribute = new $2d9d8c9fc2282acc$export$8dea267bd6bde117(new Float32Array(positionAttribute.count * 3), 3);
                this.setAttribute('normal', normalAttribute);
            } else // reset existing normals to zero
            for(let i52 = 0, il = normalAttribute.count; i52 < il; i52++)normalAttribute.setXYZ(i52, 0, 0, 0);
            const pA = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), pB = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), pC = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const nA = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), nB = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), nC = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const cb = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), ab = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            // indexed elements
            if (index) for(let i50 = 0, il4 = index.count; i50 < il4; i50 += 3){
                const vA = index.getX(i50 + 0);
                const vB = index.getX(i50 + 1);
                const vC = index.getX(i50 + 2);
                pA.fromBufferAttribute(positionAttribute, vA);
                pB.fromBufferAttribute(positionAttribute, vB);
                pC.fromBufferAttribute(positionAttribute, vC);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                nA.fromBufferAttribute(normalAttribute, vA);
                nB.fromBufferAttribute(normalAttribute, vB);
                nC.fromBufferAttribute(normalAttribute, vC);
                nA.add(cb);
                nB.add(cb);
                nC.add(cb);
                normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
                normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
                normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
            }
            else // non-indexed elements (unconnected triangle soup)
            for(let i51 = 0, il5 = positionAttribute.count; i51 < il5; i51 += 3){
                pA.fromBufferAttribute(positionAttribute, i51 + 0);
                pB.fromBufferAttribute(positionAttribute, i51 + 1);
                pC.fromBufferAttribute(positionAttribute, i51 + 2);
                cb.subVectors(pC, pB);
                ab.subVectors(pA, pB);
                cb.cross(ab);
                normalAttribute.setXYZ(i51 + 0, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i51 + 1, cb.x, cb.y, cb.z);
                normalAttribute.setXYZ(i51 + 2, cb.x, cb.y, cb.z);
            }
            this.normalizeNormals();
            normalAttribute.needsUpdate = true;
        }
    }
    merge(geometry, offset) {
        if (!(geometry && geometry.isBufferGeometry)) {
            console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
            return;
        }
        if (offset === undefined) {
            offset = 0;
            console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.");
        }
        const attributes = this.attributes;
        for(const key in attributes){
            if (geometry.attributes[key] === undefined) continue;
            const attribute1 = attributes[key];
            const attributeArray1 = attribute1.array;
            const attribute2 = geometry.attributes[key];
            const attributeArray2 = attribute2.array;
            const attributeOffset = attribute2.itemSize * offset;
            const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);
            for(let i53 = 0, j = attributeOffset; i53 < length; i53++, j++)attributeArray1[j] = attributeArray2[i53];
        }
        return this;
    }
    normalizeNormals() {
        const normals = this.attributes.normal;
        for(let i54 = 0, il = normals.count; i54 < il; i54++){
            $2d9d8c9fc2282acc$var$_vector$8.fromBufferAttribute(normals, i54);
            $2d9d8c9fc2282acc$var$_vector$8.normalize();
            normals.setXYZ(i54, $2d9d8c9fc2282acc$var$_vector$8.x, $2d9d8c9fc2282acc$var$_vector$8.y, $2d9d8c9fc2282acc$var$_vector$8.z);
        }
    }
    toNonIndexed() {
        function convertBufferAttribute(attribute, indices) {
            const array = attribute.array;
            const itemSize = attribute.itemSize;
            const normalized = attribute.normalized;
            const array2 = new array.constructor(indices.length * itemSize);
            let index = 0, index2 = 0;
            for(let i56 = 0, l = indices.length; i56 < l; i56++){
                if (attribute.isInterleavedBufferAttribute) index = indices[i56] * attribute.data.stride + attribute.offset;
                else index = indices[i56] * itemSize;
                for(let j = 0; j < itemSize; j++)array2[index2++] = array[index++];
            }
            return new $2d9d8c9fc2282acc$export$8dea267bd6bde117(array2, itemSize, normalized);
        }
        //
        if (this.index === null) {
            console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');
            return this;
        }
        const geometry2 = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        const indices1 = this.index.array;
        const attributes = this.attributes;
        // attributes
        for(const name in attributes){
            const attribute = attributes[name];
            const newAttribute = convertBufferAttribute(attribute, indices1);
            geometry2.setAttribute(name, newAttribute);
        }
        // morph attributes
        const morphAttributes = this.morphAttributes;
        for(const name1 in morphAttributes){
            const morphArray = [];
            const morphAttribute = morphAttributes[name1]; // morphAttribute: array of Float32BufferAttributes
            for(let i57 = 0, il = morphAttribute.length; i57 < il; i57++){
                const attribute = morphAttribute[i57];
                const newAttribute = convertBufferAttribute(attribute, indices1);
                morphArray.push(newAttribute);
            }
            geometry2.morphAttributes[name1] = morphArray;
        }
        geometry2.morphTargetsRelative = this.morphTargetsRelative;
        // groups
        const groups = this.groups;
        for(let i55 = 0, l2 = groups.length; i55 < l2; i55++){
            const group = groups[i55];
            geometry2.addGroup(group.start, group.count, group.materialIndex);
        }
        return geometry2;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.5,
                type: 'BufferGeometry',
                generator: 'BufferGeometry.toJSON'
            }
        };
        // standard BufferGeometry serialization
        data.uuid = this.uuid;
        data.type = this.type;
        if (this.name !== '') data.name = this.name;
        if (Object.keys(this.userData).length > 0) data.userData = this.userData;
        if (this.parameters !== undefined) {
            const parameters = this.parameters;
            for(const key in parameters)if (parameters[key] !== undefined) data[key] = parameters[key];
            return data;
        }
        // for simplicity the code assumes attributes are not shared across geometries, see #15811
        data.data = {
            attributes: {
            }
        };
        const index = this.index;
        if (index !== null) data.data.index = {
            type: index.array.constructor.name,
            array: Array.prototype.slice.call(index.array)
        };
        const attributes = this.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            data.data.attributes[key] = attribute.toJSON(data.data);
        }
        const morphAttributes = {
        };
        let hasMorphAttributes = false;
        for(const key1 in this.morphAttributes){
            const attributeArray = this.morphAttributes[key1];
            const array = [];
            for(let i58 = 0, il = attributeArray.length; i58 < il; i58++){
                const attribute = attributeArray[i58];
                array.push(attribute.toJSON(data.data));
            }
            if (array.length > 0) {
                morphAttributes[key1] = array;
                hasMorphAttributes = true;
            }
        }
        if (hasMorphAttributes) {
            data.data.morphAttributes = morphAttributes;
            data.data.morphTargetsRelative = this.morphTargetsRelative;
        }
        const groups = this.groups;
        if (groups.length > 0) data.data.groups = JSON.parse(JSON.stringify(groups));
        const boundingSphere = this.boundingSphere;
        if (boundingSphere !== null) data.data.boundingSphere = {
            center: boundingSphere.center.toArray(),
            radius: boundingSphere.radius
        };
        return data;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        // reset
        this.index = null;
        this.attributes = {
        };
        this.morphAttributes = {
        };
        this.groups = [];
        this.boundingBox = null;
        this.boundingSphere = null;
        // used for storing cloned, shared data
        const data = {
        };
        // name
        this.name = source.name;
        // index
        const index = source.index;
        if (index !== null) this.setIndex(index.clone(data));
        // attributes
        const attributes = source.attributes;
        for(const name in attributes){
            const attribute = attributes[name];
            this.setAttribute(name, attribute.clone(data));
        }
        // morph attributes
        const morphAttributes = source.morphAttributes;
        for(const name2 in morphAttributes){
            const array = [];
            const morphAttribute = morphAttributes[name2]; // morphAttribute: array of Float32BufferAttributes
            for(let i59 = 0, l = morphAttribute.length; i59 < l; i59++)array.push(morphAttribute[i59].clone(data));
            this.morphAttributes[name2] = array;
        }
        this.morphTargetsRelative = source.morphTargetsRelative;
        // groups
        const groups = source.groups;
        for(let i60 = 0, l = groups.length; i60 < l; i60++){
            const group = groups[i60];
            this.addGroup(group.start, group.count, group.materialIndex);
        }
        // bounding box
        const boundingBox = source.boundingBox;
        if (boundingBox !== null) this.boundingBox = boundingBox.clone();
        // bounding sphere
        const boundingSphere = source.boundingSphere;
        if (boundingSphere !== null) this.boundingSphere = boundingSphere.clone();
        // draw range
        this.drawRange.start = source.drawRange.start;
        this.drawRange.count = source.drawRange.count;
        // user data
        this.userData = source.userData;
        // geometry generator parameters
        if (source.parameters !== undefined) this.parameters = Object.assign({
        }, source.parameters);
        return this;
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
}
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.isBufferGeometry = true;
const $2d9d8c9fc2282acc$var$_inverseMatrix$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_ray$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$a186db52eed6d40e();
const $2d9d8c9fc2282acc$var$_sphere$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$805e8b72413ccaba();
const $2d9d8c9fc2282acc$var$_vA$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vB$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vC$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_tempA = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_tempB = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_tempC = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_morphA = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_morphB = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_morphC = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_uvA$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_uvB$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_uvC$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_intersectionPoint = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_intersectionPointWorld = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$e176487c05830cc5 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959(), material = new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5()){
        super();
        this.type = 'Mesh';
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source) {
        super.copy(source);
        if (source.morphTargetInfluences !== undefined) this.morphTargetInfluences = source.morphTargetInfluences.slice();
        if (source.morphTargetDictionary !== undefined) this.morphTargetDictionary = Object.assign({
        }, source.morphTargetDictionary);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            const morphAttributes = geometry.morphAttributes;
            const keys = Object.keys(morphAttributes);
            if (keys.length > 0) {
                const morphAttribute = morphAttributes[keys[0]];
                if (morphAttribute !== undefined) {
                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {
                    };
                    for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                        const name = morphAttribute[m].name || String(m);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[name] = m;
                    }
                }
            }
        } else {
            const morphTargets = geometry.morphTargets;
            if (morphTargets !== undefined && morphTargets.length > 0) console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const material = this.material;
        const matrixWorld = this.matrixWorld;
        if (material === undefined) return;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $2d9d8c9fc2282acc$var$_sphere$3.copy(geometry.boundingSphere);
        $2d9d8c9fc2282acc$var$_sphere$3.applyMatrix4(matrixWorld);
        if (raycaster.ray.intersectsSphere($2d9d8c9fc2282acc$var$_sphere$3) === false) return;
        //
        $2d9d8c9fc2282acc$var$_inverseMatrix$2.copy(matrixWorld).invert();
        $2d9d8c9fc2282acc$var$_ray$2.copy(raycaster.ray).applyMatrix4($2d9d8c9fc2282acc$var$_inverseMatrix$2);
        // Check boundingBox before continuing
        if (geometry.boundingBox !== null) {
            if ($2d9d8c9fc2282acc$var$_ray$2.intersectsBox(geometry.boundingBox) === false) return;
        }
        let intersection;
        if (geometry.isBufferGeometry) {
            const index = geometry.index;
            const position = geometry.attributes.position;
            const morphPosition = geometry.morphAttributes.position;
            const morphTargetsRelative = geometry.morphTargetsRelative;
            const uv = geometry.attributes.uv;
            const uv2 = geometry.attributes.uv2;
            const groups = geometry.groups;
            const drawRange = geometry.drawRange;
            if (index !== null) {
                // indexed buffer geometry
                if (Array.isArray(material)) for(let i61 = 0, il = groups.length; i61 < il; i61++){
                    const group = groups[i61];
                    const groupMaterial = material[group.materialIndex];
                    const start = Math.max(group.start, drawRange.start);
                    const end = Math.min(index.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                    for(let j = start, jl = end; j < jl; j += 3){
                        const a = index.getX(j);
                        const b = index.getX(j + 1);
                        const c = index.getX(j + 2);
                        intersection = $2d9d8c9fc2282acc$var$checkBufferGeometryIntersection(this, groupMaterial, raycaster, $2d9d8c9fc2282acc$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics
                            intersection.face.materialIndex = group.materialIndex;
                            intersects.push(intersection);
                        }
                    }
                }
                else {
                    const start = Math.max(0, drawRange.start);
                    const end = Math.min(index.count, drawRange.start + drawRange.count);
                    for(let i62 = start, il = end; i62 < il; i62 += 3){
                        const a = index.getX(i62);
                        const b = index.getX(i62 + 1);
                        const c = index.getX(i62 + 2);
                        intersection = $2d9d8c9fc2282acc$var$checkBufferGeometryIntersection(this, material, raycaster, $2d9d8c9fc2282acc$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(i62 / 3); // triangle number in indexed buffer semantics
                            intersects.push(intersection);
                        }
                    }
                }
            } else if (position !== undefined) {
                // non-indexed buffer geometry
                if (Array.isArray(material)) for(let i63 = 0, il = groups.length; i63 < il; i63++){
                    const group = groups[i63];
                    const groupMaterial = material[group.materialIndex];
                    const start = Math.max(group.start, drawRange.start);
                    const end = Math.min(position.count, Math.min(group.start + group.count, drawRange.start + drawRange.count));
                    for(let j = start, jl = end; j < jl; j += 3){
                        const a = j;
                        const b = j + 1;
                        const c = j + 2;
                        intersection = $2d9d8c9fc2282acc$var$checkBufferGeometryIntersection(this, groupMaterial, raycaster, $2d9d8c9fc2282acc$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics
                            intersection.face.materialIndex = group.materialIndex;
                            intersects.push(intersection);
                        }
                    }
                }
                else {
                    const start = Math.max(0, drawRange.start);
                    const end = Math.min(position.count, drawRange.start + drawRange.count);
                    for(let i64 = start, il = end; i64 < il; i64 += 3){
                        const a = i64;
                        const b = i64 + 1;
                        const c = i64 + 2;
                        intersection = $2d9d8c9fc2282acc$var$checkBufferGeometryIntersection(this, material, raycaster, $2d9d8c9fc2282acc$var$_ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);
                        if (intersection) {
                            intersection.faceIndex = Math.floor(i64 / 3); // triangle number in non-indexed buffer semantics
                            intersects.push(intersection);
                        }
                    }
                }
            }
        } else if (geometry.isGeometry) console.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
    }
}
$2d9d8c9fc2282acc$export$e176487c05830cc5.prototype.isMesh = true;
function $2d9d8c9fc2282acc$var$checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
    let intersect;
    if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) intersect = ray.intersectTriangle(pC, pB, pA, true, point);
    else intersect = ray.intersectTriangle(pA, pB, pC, material.side !== $2d9d8c9fc2282acc$export$3b296b6f144d5b03, point);
    if (intersect === null) return null;
    $2d9d8c9fc2282acc$var$_intersectionPointWorld.copy(point);
    $2d9d8c9fc2282acc$var$_intersectionPointWorld.applyMatrix4(object.matrixWorld);
    const distance = raycaster.ray.origin.distanceTo($2d9d8c9fc2282acc$var$_intersectionPointWorld);
    if (distance < raycaster.near || distance > raycaster.far) return null;
    return {
        distance: distance,
        point: $2d9d8c9fc2282acc$var$_intersectionPointWorld.clone(),
        object: object
    };
}
function $2d9d8c9fc2282acc$var$checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
    $2d9d8c9fc2282acc$var$_vA$1.fromBufferAttribute(position, a);
    $2d9d8c9fc2282acc$var$_vB$1.fromBufferAttribute(position, b);
    $2d9d8c9fc2282acc$var$_vC$1.fromBufferAttribute(position, c);
    const morphInfluences = object.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
        $2d9d8c9fc2282acc$var$_morphA.set(0, 0, 0);
        $2d9d8c9fc2282acc$var$_morphB.set(0, 0, 0);
        $2d9d8c9fc2282acc$var$_morphC.set(0, 0, 0);
        for(let i65 = 0, il = morphPosition.length; i65 < il; i65++){
            const influence = morphInfluences[i65];
            const morphAttribute = morphPosition[i65];
            if (influence === 0) continue;
            $2d9d8c9fc2282acc$var$_tempA.fromBufferAttribute(morphAttribute, a);
            $2d9d8c9fc2282acc$var$_tempB.fromBufferAttribute(morphAttribute, b);
            $2d9d8c9fc2282acc$var$_tempC.fromBufferAttribute(morphAttribute, c);
            if (morphTargetsRelative) {
                $2d9d8c9fc2282acc$var$_morphA.addScaledVector($2d9d8c9fc2282acc$var$_tempA, influence);
                $2d9d8c9fc2282acc$var$_morphB.addScaledVector($2d9d8c9fc2282acc$var$_tempB, influence);
                $2d9d8c9fc2282acc$var$_morphC.addScaledVector($2d9d8c9fc2282acc$var$_tempC, influence);
            } else {
                $2d9d8c9fc2282acc$var$_morphA.addScaledVector($2d9d8c9fc2282acc$var$_tempA.sub($2d9d8c9fc2282acc$var$_vA$1), influence);
                $2d9d8c9fc2282acc$var$_morphB.addScaledVector($2d9d8c9fc2282acc$var$_tempB.sub($2d9d8c9fc2282acc$var$_vB$1), influence);
                $2d9d8c9fc2282acc$var$_morphC.addScaledVector($2d9d8c9fc2282acc$var$_tempC.sub($2d9d8c9fc2282acc$var$_vC$1), influence);
            }
        }
        $2d9d8c9fc2282acc$var$_vA$1.add($2d9d8c9fc2282acc$var$_morphA);
        $2d9d8c9fc2282acc$var$_vB$1.add($2d9d8c9fc2282acc$var$_morphB);
        $2d9d8c9fc2282acc$var$_vC$1.add($2d9d8c9fc2282acc$var$_morphC);
    }
    if (object.isSkinnedMesh) {
        object.boneTransform(a, $2d9d8c9fc2282acc$var$_vA$1);
        object.boneTransform(b, $2d9d8c9fc2282acc$var$_vB$1);
        object.boneTransform(c, $2d9d8c9fc2282acc$var$_vC$1);
    }
    const intersection = $2d9d8c9fc2282acc$var$checkIntersection(object, material, raycaster, ray, $2d9d8c9fc2282acc$var$_vA$1, $2d9d8c9fc2282acc$var$_vB$1, $2d9d8c9fc2282acc$var$_vC$1, $2d9d8c9fc2282acc$var$_intersectionPoint);
    if (intersection) {
        if (uv) {
            $2d9d8c9fc2282acc$var$_uvA$1.fromBufferAttribute(uv, a);
            $2d9d8c9fc2282acc$var$_uvB$1.fromBufferAttribute(uv, b);
            $2d9d8c9fc2282acc$var$_uvC$1.fromBufferAttribute(uv, c);
            intersection.uv = $2d9d8c9fc2282acc$export$5a465592bfe74b48.getUV($2d9d8c9fc2282acc$var$_intersectionPoint, $2d9d8c9fc2282acc$var$_vA$1, $2d9d8c9fc2282acc$var$_vB$1, $2d9d8c9fc2282acc$var$_vC$1, $2d9d8c9fc2282acc$var$_uvA$1, $2d9d8c9fc2282acc$var$_uvB$1, $2d9d8c9fc2282acc$var$_uvC$1, new $2d9d8c9fc2282acc$export$c977b3e384af9ae1());
        }
        if (uv2) {
            $2d9d8c9fc2282acc$var$_uvA$1.fromBufferAttribute(uv2, a);
            $2d9d8c9fc2282acc$var$_uvB$1.fromBufferAttribute(uv2, b);
            $2d9d8c9fc2282acc$var$_uvC$1.fromBufferAttribute(uv2, c);
            intersection.uv2 = $2d9d8c9fc2282acc$export$5a465592bfe74b48.getUV($2d9d8c9fc2282acc$var$_intersectionPoint, $2d9d8c9fc2282acc$var$_vA$1, $2d9d8c9fc2282acc$var$_vB$1, $2d9d8c9fc2282acc$var$_vC$1, $2d9d8c9fc2282acc$var$_uvA$1, $2d9d8c9fc2282acc$var$_uvB$1, $2d9d8c9fc2282acc$var$_uvC$1, new $2d9d8c9fc2282acc$export$c977b3e384af9ae1());
        }
        const face = {
            a: a,
            b: b,
            c: c,
            normal: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
            materialIndex: 0
        };
        $2d9d8c9fc2282acc$export$5a465592bfe74b48.getNormal($2d9d8c9fc2282acc$var$_vA$1, $2d9d8c9fc2282acc$var$_vB$1, $2d9d8c9fc2282acc$var$_vC$1, face.normal);
        intersection.face = face;
    }
    return intersection;
}
class $2d9d8c9fc2282acc$export$ab3456a079aa7d80 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(width1 = 1, height1 = 1, depth1 = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1){
        super();
        this.type = 'BoxGeometry';
        this.parameters = {
            width: width1,
            height: height1,
            depth: depth1,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            depthSegments: depthSegments
        };
        const scope = this;
        // segments
        widthSegments = Math.floor(widthSegments);
        heightSegments = Math.floor(heightSegments);
        depthSegments = Math.floor(depthSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let numberOfVertices = 0;
        let groupStart = 0;
        // build each side of the box geometry
        buildPlane('z', 'y', 'x', -1, -1, depth1, height1, width1, depthSegments, heightSegments, 0); // px
        buildPlane('z', 'y', 'x', 1, -1, depth1, height1, -width1, depthSegments, heightSegments, 1); // nx
        buildPlane('x', 'z', 'y', 1, 1, width1, depth1, height1, widthSegments, depthSegments, 2); // py
        buildPlane('x', 'z', 'y', 1, -1, width1, depth1, -height1, widthSegments, depthSegments, 3); // ny
        buildPlane('x', 'y', 'z', 1, -1, width1, height1, depth1, widthSegments, heightSegments, 4); // pz
        buildPlane('x', 'y', 'z', -1, -1, width1, height1, -depth1, widthSegments, heightSegments, 5); // nz
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
        function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
            const segmentWidth = width / gridX;
            const segmentHeight = height / gridY;
            const widthHalf = width / 2;
            const heightHalf = height / 2;
            const depthHalf = depth / 2;
            const gridX1 = gridX + 1;
            const gridY1 = gridY + 1;
            let vertexCounter = 0;
            let groupCount = 0;
            const vector = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            // generate vertices, normals and uvs
            for(let iy = 0; iy < gridY1; iy++){
                const y = iy * segmentHeight - heightHalf;
                for(let ix = 0; ix < gridX1; ix++){
                    const x = ix * segmentWidth - widthHalf;
                    // set values to correct vector component
                    vector[u] = x * udir;
                    vector[v] = y * vdir;
                    vector[w] = depthHalf;
                    // now apply vector to vertex buffer
                    vertices.push(vector.x, vector.y, vector.z);
                    // set values to correct vector component
                    vector[u] = 0;
                    vector[v] = 0;
                    vector[w] = depth > 0 ? 1 : -1;
                    // now apply vector to normal buffer
                    normals.push(vector.x, vector.y, vector.z);
                    // uvs
                    uvs.push(ix / gridX);
                    uvs.push(1 - iy / gridY);
                    // counters
                    vertexCounter += 1;
                }
            }
            // indices
            // 1. you need three indices to draw a single face
            // 2. a single segment consists of two faces
            // 3. so we need to generate six (2*3) indices per segment
            for(let iy1 = 0; iy1 < gridY; iy1++)for(let ix = 0; ix < gridX; ix++){
                const a = numberOfVertices + ix + gridX1 * iy1;
                const b = numberOfVertices + ix + gridX1 * (iy1 + 1);
                const c = numberOfVertices + (ix + 1) + gridX1 * (iy1 + 1);
                const d = numberOfVertices + (ix + 1) + gridX1 * iy1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // increase counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, materialIndex);
            // calculate new start value for groups
            groupStart += groupCount;
            // update total number of vertices
            numberOfVertices += vertexCounter;
        }
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$ab3456a079aa7d80(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
    }
}
/**
 * Uniform Utilities
 */ function $2d9d8c9fc2282acc$var$cloneUniforms(src) {
    const dst = {
    };
    for(const u in src){
        dst[u] = {
        };
        for(const p in src[u]){
            const property = src[u][p];
            if (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) dst[u][p] = property.clone();
            else if (Array.isArray(property)) dst[u][p] = property.slice();
            else dst[u][p] = property;
        }
    }
    return dst;
}
function $2d9d8c9fc2282acc$var$mergeUniforms(uniforms) {
    const merged = {
    };
    for(let u = 0; u < uniforms.length; u++){
        const tmp = $2d9d8c9fc2282acc$var$cloneUniforms(uniforms[u]);
        for(const p in tmp)merged[p] = tmp[p];
    }
    return merged;
}
// Legacy
const $2d9d8c9fc2282acc$export$d8ecdf8615bfea69 = {
    clone: $2d9d8c9fc2282acc$var$cloneUniforms,
    merge: $2d9d8c9fc2282acc$var$mergeUniforms
};
var $2d9d8c9fc2282acc$var$default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var $2d9d8c9fc2282acc$var$default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
/**
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>
 * }
 */ class $2d9d8c9fc2282acc$export$83c7d75d550a8b0d extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'ShaderMaterial';
        this.defines = {
        };
        this.uniforms = {
        };
        this.vertexShader = $2d9d8c9fc2282acc$var$default_vertex;
        this.fragmentShader = $2d9d8c9fc2282acc$var$default_fragment;
        this.linewidth = 1;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false; // set to use scene fog
        this.lights = false; // set to use scene lights
        this.clipping = false; // set to use user-defined clipping planes
        this.extensions = {
            derivatives: false,
            fragDepth: false,
            drawBuffers: false,
            shaderTextureLOD: false // set to use shader texture LOD
        };
        // When rendered geometry doesn't include these attributes but the material does,
        // use these default values in WebGL. This avoids errors when buffer data is missing.
        this.defaultAttributeValues = {
            'color': [
                1,
                1,
                1
            ],
            'uv': [
                0,
                0
            ],
            'uv2': [
                0,
                0
            ]
        };
        this.index0AttributeName = undefined;
        this.uniformsNeedUpdate = false;
        this.glslVersion = null;
        if (parameters !== undefined) {
            if (parameters.attributes !== undefined) console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');
            this.setValues(parameters);
        }
    }
    copy(source) {
        super.copy(source);
        this.fragmentShader = source.fragmentShader;
        this.vertexShader = source.vertexShader;
        this.uniforms = $2d9d8c9fc2282acc$var$cloneUniforms(source.uniforms);
        this.defines = Object.assign({
        }, source.defines);
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.lights = source.lights;
        this.clipping = source.clipping;
        this.extensions = Object.assign({
        }, source.extensions);
        this.glslVersion = source.glslVersion;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.glslVersion = this.glslVersion;
        data.uniforms = {
        };
        for(const name in this.uniforms){
            const uniform = this.uniforms[name];
            const value = uniform.value;
            if (value && value.isTexture) data.uniforms[name] = {
                type: 't',
                value: value.toJSON(meta).uuid
            };
            else if (value && value.isColor) data.uniforms[name] = {
                type: 'c',
                value: value.getHex()
            };
            else if (value && value.isVector2) data.uniforms[name] = {
                type: 'v2',
                value: value.toArray()
            };
            else if (value && value.isVector3) data.uniforms[name] = {
                type: 'v3',
                value: value.toArray()
            };
            else if (value && value.isVector4) data.uniforms[name] = {
                type: 'v4',
                value: value.toArray()
            };
            else if (value && value.isMatrix3) data.uniforms[name] = {
                type: 'm3',
                value: value.toArray()
            };
            else if (value && value.isMatrix4) data.uniforms[name] = {
                type: 'm4',
                value: value.toArray()
            };
            else data.uniforms[name] = {
                value: value
            };
        }
        if (Object.keys(this.defines).length > 0) data.defines = this.defines;
        data.vertexShader = this.vertexShader;
        data.fragmentShader = this.fragmentShader;
        const extensions = {
        };
        for(const key in this.extensions)if (this.extensions[key] === true) extensions[key] = true;
        if (Object.keys(extensions).length > 0) data.extensions = extensions;
        return data;
    }
}
$2d9d8c9fc2282acc$export$83c7d75d550a8b0d.prototype.isShaderMaterial = true;
class $2d9d8c9fc2282acc$export$79f141de891a5fed extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.type = 'Camera';
        this.matrixWorldInverse = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        this.projectionMatrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        this.projectionMatrixInverse = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.matrixWorldInverse.copy(source.matrixWorldInverse);
        this.projectionMatrix.copy(source.projectionMatrix);
        this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
        return this;
    }
    getWorldDirection(target) {
        this.updateWorldMatrix(true, false);
        const e = this.matrixWorld.elements;
        return target.set(-e[8], -e[9], -e[10]).normalize();
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    updateWorldMatrix(updateParents, updateChildren) {
        super.updateWorldMatrix(updateParents, updateChildren);
        this.matrixWorldInverse.copy(this.matrixWorld).invert();
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
$2d9d8c9fc2282acc$export$79f141de891a5fed.prototype.isCamera = true;
class $2d9d8c9fc2282acc$export$74e4ae24825f68d7 extends $2d9d8c9fc2282acc$export$79f141de891a5fed {
    constructor(fov = 50, aspect = 1, near = 0.1, far = 2000){
        super();
        this.type = 'PerspectiveCamera';
        this.fov = fov;
        this.zoom = 1;
        this.near = near;
        this.far = far;
        this.focus = 10;
        this.aspect = aspect;
        this.view = null;
        this.filmGauge = 35; // width of the film (default in millimeters)
        this.filmOffset = 0; // horizontal film offset (same unit as gauge)
        this.updateProjectionMatrix();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.fov = source.fov;
        this.zoom = source.zoom;
        this.near = source.near;
        this.far = source.far;
        this.focus = source.focus;
        this.aspect = source.aspect;
        this.view = source.view === null ? null : Object.assign({
        }, source.view);
        this.filmGauge = source.filmGauge;
        this.filmOffset = source.filmOffset;
        return this;
    }
    /**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */ setFocalLength(focalLength) {
        /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */ const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
        this.fov = $2d9d8c9fc2282acc$var$RAD2DEG * 2 * Math.atan(vExtentSlope);
        this.updateProjectionMatrix();
    }
    /**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */ getFocalLength() {
        const vExtentSlope = Math.tan($2d9d8c9fc2282acc$var$DEG2RAD * 0.5 * this.fov);
        return 0.5 * this.getFilmHeight() / vExtentSlope;
    }
    getEffectiveFOV() {
        return $2d9d8c9fc2282acc$var$RAD2DEG * 2 * Math.atan(Math.tan($2d9d8c9fc2282acc$var$DEG2RAD * 0.5 * this.fov) / this.zoom);
    }
    getFilmWidth() {
        // film not completely covered in portrait format (aspect < 1)
        return this.filmGauge * Math.min(this.aspect, 1);
    }
    getFilmHeight() {
        // film not completely covered in landscape format (aspect > 1)
        return this.filmGauge / Math.max(this.aspect, 1);
    }
    /**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */ setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        this.aspect = fullWidth / fullHeight;
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const near = this.near;
        let top = near * Math.tan($2d9d8c9fc2282acc$var$DEG2RAD * 0.5 * this.fov) / this.zoom;
        let height = 2 * top;
        let width = this.aspect * height;
        let left = -0.5 * width;
        const view = this.view;
        if (this.view !== null && this.view.enabled) {
            const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
            left += view.offsetX * width / fullWidth;
            top -= view.offsetY * height / fullHeight;
            width *= view.width / fullWidth;
            height *= view.height / fullHeight;
        }
        const skew = this.filmOffset;
        if (skew !== 0) left += near * skew / this.getFilmWidth();
        this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.fov = this.fov;
        data.object.zoom = this.zoom;
        data.object.near = this.near;
        data.object.far = this.far;
        data.object.focus = this.focus;
        data.object.aspect = this.aspect;
        if (this.view !== null) data.object.view = Object.assign({
        }, this.view);
        data.object.filmGauge = this.filmGauge;
        data.object.filmOffset = this.filmOffset;
        return data;
    }
}
$2d9d8c9fc2282acc$export$74e4ae24825f68d7.prototype.isPerspectiveCamera = true;
const $2d9d8c9fc2282acc$var$fov = 90, $2d9d8c9fc2282acc$var$aspect = 1;
class $2d9d8c9fc2282acc$export$d0cdd0bd804995de extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(near, far, renderTarget){
        super();
        this.type = 'CubeCamera';
        if (renderTarget.isWebGLCubeRenderTarget !== true) {
            console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
            return;
        }
        this.renderTarget = renderTarget;
        const cameraPX = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7($2d9d8c9fc2282acc$var$fov, $2d9d8c9fc2282acc$var$aspect, near, far);
        cameraPX.layers = this.layers;
        cameraPX.up.set(0, -1, 0);
        cameraPX.lookAt(new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 0, 0));
        this.add(cameraPX);
        const cameraNX = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7($2d9d8c9fc2282acc$var$fov, $2d9d8c9fc2282acc$var$aspect, near, far);
        cameraNX.layers = this.layers;
        cameraNX.up.set(0, -1, 0);
        cameraNX.lookAt(new $2d9d8c9fc2282acc$export$64b5c384219d3699(-1, 0, 0));
        this.add(cameraNX);
        const cameraPY = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7($2d9d8c9fc2282acc$var$fov, $2d9d8c9fc2282acc$var$aspect, near, far);
        cameraPY.layers = this.layers;
        cameraPY.up.set(0, 0, 1);
        cameraPY.lookAt(new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0));
        this.add(cameraPY);
        const cameraNY = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7($2d9d8c9fc2282acc$var$fov, $2d9d8c9fc2282acc$var$aspect, near, far);
        cameraNY.layers = this.layers;
        cameraNY.up.set(0, 0, -1);
        cameraNY.lookAt(new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, -1, 0));
        this.add(cameraNY);
        const cameraPZ = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7($2d9d8c9fc2282acc$var$fov, $2d9d8c9fc2282acc$var$aspect, near, far);
        cameraPZ.layers = this.layers;
        cameraPZ.up.set(0, -1, 0);
        cameraPZ.lookAt(new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 1));
        this.add(cameraPZ);
        const cameraNZ = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7($2d9d8c9fc2282acc$var$fov, $2d9d8c9fc2282acc$var$aspect, near, far);
        cameraNZ.layers = this.layers;
        cameraNZ.up.set(0, -1, 0);
        cameraNZ.lookAt(new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, -1));
        this.add(cameraNZ);
    }
    update(renderer, scene) {
        if (this.parent === null) this.updateMatrixWorld();
        const renderTarget = this.renderTarget;
        const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
        const currentXrEnabled = renderer.xr.enabled;
        const currentRenderTarget = renderer.getRenderTarget();
        renderer.xr.enabled = false;
        const generateMipmaps = renderTarget.texture.generateMipmaps;
        renderTarget.texture.generateMipmaps = false;
        renderer.setRenderTarget(renderTarget, 0);
        renderer.render(scene, cameraPX);
        renderer.setRenderTarget(renderTarget, 1);
        renderer.render(scene, cameraNX);
        renderer.setRenderTarget(renderTarget, 2);
        renderer.render(scene, cameraPY);
        renderer.setRenderTarget(renderTarget, 3);
        renderer.render(scene, cameraNY);
        renderer.setRenderTarget(renderTarget, 4);
        renderer.render(scene, cameraPZ);
        renderTarget.texture.generateMipmaps = generateMipmaps;
        renderer.setRenderTarget(renderTarget, 5);
        renderer.render(scene, cameraNZ);
        renderer.setRenderTarget(currentRenderTarget);
        renderer.xr.enabled = currentXrEnabled;
    }
}
class $2d9d8c9fc2282acc$export$ee2e5a18258a4049 extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding){
        images = images !== undefined ? images : [];
        mapping = mapping !== undefined ? mapping : $2d9d8c9fc2282acc$export$8759762a6477f2c4;
        super(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        this.flipY = false;
    }
    get images() {
        return this.image;
    }
    set images(value) {
        this.image = value;
    }
}
$2d9d8c9fc2282acc$export$ee2e5a18258a4049.prototype.isCubeTexture = true;
class $2d9d8c9fc2282acc$export$ac386671d651941e extends $2d9d8c9fc2282acc$export$3c052beb2e51e23f {
    constructor(size, options, dummy){
        if (Number.isInteger(options)) {
            console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');
            options = dummy;
        }
        super(size, size, options);
        options = options || {
        };
        // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
        // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
        // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.
        // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
        // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
        // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).
        this.texture = new $2d9d8c9fc2282acc$export$ee2e5a18258a4049(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);
        this.texture.isRenderTargetTexture = true;
        this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
        this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
        this.texture._needsFlipEnvMap = false;
    }
    fromEquirectangularTexture(renderer, texture) {
        this.texture.type = texture.type;
        this.texture.format = $2d9d8c9fc2282acc$export$3f8bb04b555a363c; // see #18859
        this.texture.encoding = texture.encoding;
        this.texture.generateMipmaps = texture.generateMipmaps;
        this.texture.minFilter = texture.minFilter;
        this.texture.magFilter = texture.magFilter;
        const shader = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: /* glsl */ `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,
            fragmentShader: /* glsl */ `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
        };
        const geometry = new $2d9d8c9fc2282acc$export$ab3456a079aa7d80(5, 5, 5);
        const material = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            name: 'CubemapFromEquirect',
            uniforms: $2d9d8c9fc2282acc$var$cloneUniforms(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            side: $2d9d8c9fc2282acc$export$d9f0486e75b5ace,
            blending: $2d9d8c9fc2282acc$export$63b8d6b580fc65ba
        });
        material.uniforms.tEquirect.value = texture;
        const mesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(geometry, material);
        const currentMinFilter = texture.minFilter;
        // Avoid blurred poles
        if (texture.minFilter === $2d9d8c9fc2282acc$export$5d8599b6a933fb1b) texture.minFilter = $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
        const camera = new $2d9d8c9fc2282acc$export$d0cdd0bd804995de(1, 10, this);
        camera.update(renderer, mesh);
        texture.minFilter = currentMinFilter;
        mesh.geometry.dispose();
        mesh.material.dispose();
        return this;
    }
    clear(renderer, color, depth, stencil) {
        const currentRenderTarget = renderer.getRenderTarget();
        for(let i66 = 0; i66 < 6; i66++){
            renderer.setRenderTarget(this, i66);
            renderer.clear(color, depth, stencil);
        }
        renderer.setRenderTarget(currentRenderTarget);
    }
}
$2d9d8c9fc2282acc$export$ac386671d651941e.prototype.isWebGLCubeRenderTarget = true;
const $2d9d8c9fc2282acc$var$_vector1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vector2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_normalMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$8ff26dafa08918();
class $2d9d8c9fc2282acc$export$7ff5ac152ef991b0 {
    constructor(normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 0, 0), constant = 0){
        // normal is assumed to be normalized
        this.normal = normal;
        this.constant = constant;
    }
    set(normal, constant) {
        this.normal.copy(normal);
        this.constant = constant;
        return this;
    }
    setComponents(x, y, z, w) {
        this.normal.set(x, y, z);
        this.constant = w;
        return this;
    }
    setFromNormalAndCoplanarPoint(normal, point) {
        this.normal.copy(normal);
        this.constant = -point.dot(this.normal);
        return this;
    }
    setFromCoplanarPoints(a, b, c) {
        const normal = $2d9d8c9fc2282acc$var$_vector1.subVectors(c, b).cross($2d9d8c9fc2282acc$var$_vector2.subVectors(a, b)).normalize();
        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
        this.setFromNormalAndCoplanarPoint(normal, a);
        return this;
    }
    copy(plane) {
        this.normal.copy(plane.normal);
        this.constant = plane.constant;
        return this;
    }
    normalize() {
        // Note: will lead to a divide by zero if the plane is invalid.
        const inverseNormalLength = 1 / this.normal.length();
        this.normal.multiplyScalar(inverseNormalLength);
        this.constant *= inverseNormalLength;
        return this;
    }
    negate() {
        this.constant *= -1;
        this.normal.negate();
        return this;
    }
    distanceToPoint(point) {
        return this.normal.dot(point) + this.constant;
    }
    distanceToSphere(sphere) {
        return this.distanceToPoint(sphere.center) - sphere.radius;
    }
    projectPoint(point, target) {
        return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
    }
    intersectLine(line, target) {
        const direction = line.delta($2d9d8c9fc2282acc$var$_vector1);
        const denominator = this.normal.dot(direction);
        if (denominator === 0) {
            // line is coplanar, return origin
            if (this.distanceToPoint(line.start) === 0) return target.copy(line.start);
            // Unsure if this is the correct method to handle this case.
            return null;
        }
        const t = -(line.start.dot(this.normal) + this.constant) / denominator;
        if (t < 0 || t > 1) return null;
        return target.copy(direction).multiplyScalar(t).add(line.start);
    }
    intersectsLine(line) {
        // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
        const startSign = this.distanceToPoint(line.start);
        const endSign = this.distanceToPoint(line.end);
        return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
    }
    intersectsBox(box) {
        return box.intersectsPlane(this);
    }
    intersectsSphere(sphere) {
        return sphere.intersectsPlane(this);
    }
    coplanarPoint(target) {
        return target.copy(this.normal).multiplyScalar(-this.constant);
    }
    applyMatrix4(matrix, optionalNormalMatrix) {
        const normalMatrix = optionalNormalMatrix || $2d9d8c9fc2282acc$var$_normalMatrix.getNormalMatrix(matrix);
        const referencePoint = this.coplanarPoint($2d9d8c9fc2282acc$var$_vector1).applyMatrix4(matrix);
        const normal = this.normal.applyMatrix3(normalMatrix).normalize();
        this.constant = -referencePoint.dot(normal);
        return this;
    }
    translate(offset) {
        this.constant -= offset.dot(this.normal);
        return this;
    }
    equals(plane) {
        return plane.normal.equals(this.normal) && plane.constant === this.constant;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
$2d9d8c9fc2282acc$export$7ff5ac152ef991b0.prototype.isPlane = true;
const $2d9d8c9fc2282acc$var$_sphere$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$805e8b72413ccaba();
const $2d9d8c9fc2282acc$var$_vector$7 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$35efe6f4c85463d2 {
    constructor(p0 = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0(), p1 = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0(), p2 = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0(), p3 = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0(), p4 = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0(), p5 = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0()){
        this.planes = [
            p0,
            p1,
            p2,
            p3,
            p4,
            p5
        ];
    }
    set(p0, p1, p2, p3, p4, p5) {
        const planes = this.planes;
        planes[0].copy(p0);
        planes[1].copy(p1);
        planes[2].copy(p2);
        planes[3].copy(p3);
        planes[4].copy(p4);
        planes[5].copy(p5);
        return this;
    }
    copy(frustum) {
        const planes = this.planes;
        for(let i67 = 0; i67 < 6; i67++)planes[i67].copy(frustum.planes[i67]);
        return this;
    }
    setFromProjectionMatrix(m) {
        const planes = this.planes;
        const me = m.elements;
        const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
        const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
        const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
        const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
        planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
        planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
        planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
        planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
        planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
        planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
        return this;
    }
    intersectsObject(object) {
        const geometry = object.geometry;
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $2d9d8c9fc2282acc$var$_sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);
        return this.intersectsSphere($2d9d8c9fc2282acc$var$_sphere$2);
    }
    intersectsSprite(sprite) {
        $2d9d8c9fc2282acc$var$_sphere$2.center.set(0, 0, 0);
        $2d9d8c9fc2282acc$var$_sphere$2.radius = 0.7071067811865476;
        $2d9d8c9fc2282acc$var$_sphere$2.applyMatrix4(sprite.matrixWorld);
        return this.intersectsSphere($2d9d8c9fc2282acc$var$_sphere$2);
    }
    intersectsSphere(sphere) {
        const planes = this.planes;
        const center = sphere.center;
        const negRadius = -sphere.radius;
        for(let i68 = 0; i68 < 6; i68++){
            const distance = planes[i68].distanceToPoint(center);
            if (distance < negRadius) return false;
        }
        return true;
    }
    intersectsBox(box) {
        const planes = this.planes;
        for(let i69 = 0; i69 < 6; i69++){
            const plane = planes[i69];
            // corner at max distance
            $2d9d8c9fc2282acc$var$_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
            $2d9d8c9fc2282acc$var$_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
            $2d9d8c9fc2282acc$var$_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
            if (plane.distanceToPoint($2d9d8c9fc2282acc$var$_vector$7) < 0) return false;
        }
        return true;
    }
    containsPoint(point) {
        const planes = this.planes;
        for(let i70 = 0; i70 < 6; i70++){
            if (planes[i70].distanceToPoint(point) < 0) return false;
        }
        return true;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
function $2d9d8c9fc2282acc$var$WebGLAnimation() {
    let context = null;
    let isAnimating = false;
    let animationLoop = null;
    let requestId = null;
    function onAnimationFrame(time, frame) {
        animationLoop(time, frame);
        requestId = context.requestAnimationFrame(onAnimationFrame);
    }
    return {
        start: function() {
            if (isAnimating === true) return;
            if (animationLoop === null) return;
            requestId = context.requestAnimationFrame(onAnimationFrame);
            isAnimating = true;
        },
        stop: function() {
            context.cancelAnimationFrame(requestId);
            isAnimating = false;
        },
        setAnimationLoop: function(callback) {
            animationLoop = callback;
        },
        setContext: function(value) {
            context = value;
        }
    };
}
function $2d9d8c9fc2282acc$var$WebGLAttributes(gl, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    const buffers = new WeakMap();
    function createBuffer(attribute, bufferType) {
        const array = attribute.array;
        const usage = attribute.usage;
        const buffer = gl.createBuffer();
        gl.bindBuffer(bufferType, buffer);
        gl.bufferData(bufferType, array, usage);
        attribute.onUploadCallback();
        let type = 5126;
        if (array instanceof Float32Array) type = 5126;
        else if (array instanceof Float64Array) console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');
        else if (array instanceof Uint16Array) {
            if (attribute.isFloat16BufferAttribute) {
                if (isWebGL2) type = 5131;
                else console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');
            } else type = 5123;
        } else if (array instanceof Int16Array) type = 5122;
        else if (array instanceof Uint32Array) type = 5125;
        else if (array instanceof Int32Array) type = 5124;
        else if (array instanceof Int8Array) type = 5120;
        else if (array instanceof Uint8Array) type = 5121;
        else if (array instanceof Uint8ClampedArray) type = 5121;
        return {
            buffer: buffer,
            type: type,
            bytesPerElement: array.BYTES_PER_ELEMENT,
            version: attribute.version
        };
    }
    function updateBuffer(buffer, attribute, bufferType) {
        const array = attribute.array;
        const updateRange = attribute.updateRange;
        gl.bindBuffer(bufferType, buffer);
        if (updateRange.count === -1) // Not using update ranges
        gl.bufferSubData(bufferType, 0, array);
        else {
            if (isWebGL2) gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);
            else gl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));
            updateRange.count = -1; // reset range
        }
    }
    //
    function get(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        return buffers.get(attribute);
    }
    function remove(attribute) {
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data) {
            gl.deleteBuffer(data.buffer);
            buffers.delete(attribute);
        }
    }
    function update(attribute, bufferType) {
        if (attribute.isGLBufferAttribute) {
            const cached = buffers.get(attribute);
            if (!cached || cached.version < attribute.version) buffers.set(attribute, {
                buffer: attribute.buffer,
                type: attribute.type,
                bytesPerElement: attribute.elementSize,
                version: attribute.version
            });
            return;
        }
        if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;
        const data = buffers.get(attribute);
        if (data === undefined) buffers.set(attribute, createBuffer(attribute, bufferType));
        else if (data.version < attribute.version) {
            updateBuffer(data.buffer, attribute, bufferType);
            data.version = attribute.version;
        }
    }
    return {
        get: get,
        remove: remove,
        update: update
    };
}
class $2d9d8c9fc2282acc$export$e789a11a194ca4e0 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1){
        super();
        this.type = 'PlaneGeometry';
        this.parameters = {
            width: width,
            height: height,
            widthSegments: widthSegments,
            heightSegments: heightSegments
        };
        const width_half = width / 2;
        const height_half = height / 2;
        const gridX = Math.floor(widthSegments);
        const gridY = Math.floor(heightSegments);
        const gridX1 = gridX + 1;
        const gridY1 = gridY + 1;
        const segment_width = width / gridX;
        const segment_height = height / gridY;
        //
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        for(let iy = 0; iy < gridY1; iy++){
            const y = iy * segment_height - height_half;
            for(let ix = 0; ix < gridX1; ix++){
                const x = ix * segment_width - width_half;
                vertices.push(x, -y, 0);
                normals.push(0, 0, 1);
                uvs.push(ix / gridX);
                uvs.push(1 - iy / gridY);
            }
        }
        for(let iy2 = 0; iy2 < gridY; iy2++)for(let ix = 0; ix < gridX; ix++){
            const a = ix + gridX1 * iy2;
            const b = ix + gridX1 * (iy2 + 1);
            const c = ix + 1 + gridX1 * (iy2 + 1);
            const d = ix + 1 + gridX1 * iy2;
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$e789a11a194ca4e0(data.width, data.height, data.widthSegments, data.heightSegments);
    }
}
var $2d9d8c9fc2282acc$var$alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
var $2d9d8c9fc2282acc$var$alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var $2d9d8c9fc2282acc$var$alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";
var $2d9d8c9fc2282acc$var$alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";
var $2d9d8c9fc2282acc$var$aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
var $2d9d8c9fc2282acc$var$begin_vertex = "vec3 transformed = vec3( position );";
var $2d9d8c9fc2282acc$var$beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
var $2d9d8c9fc2282acc$var$bsdfs = "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";
var $2d9d8c9fc2282acc$var$bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var $2d9d8c9fc2282acc$var$clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";
var $2d9d8c9fc2282acc$var$clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";
var $2d9d8c9fc2282acc$var$color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";
var $2d9d8c9fc2282acc$var$color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";
var $2d9d8c9fc2282acc$var$color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";
var $2d9d8c9fc2282acc$var$color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";
var $2d9d8c9fc2282acc$var$common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";
var $2d9d8c9fc2282acc$var$cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\treturn texture2D( envMap, uv ).rgb;\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
var $2d9d8c9fc2282acc$var$displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
var $2d9d8c9fc2282acc$var$emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var $2d9d8c9fc2282acc$var$emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
var $2d9d8c9fc2282acc$var$encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var $2d9d8c9fc2282acc$var$encodings_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var $2d9d8c9fc2282acc$var$envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
var $2d9d8c9fc2282acc$var$envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";
var $2d9d8c9fc2282acc$var$fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";
var $2d9d8c9fc2282acc$var$fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var $2d9d8c9fc2282acc$var$fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";
var $2d9d8c9fc2282acc$var$lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";
var $2d9d8c9fc2282acc$var$lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
var $2d9d8c9fc2282acc$var$lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";
var $2d9d8c9fc2282acc$var$lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var $2d9d8c9fc2282acc$var$lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";
var $2d9d8c9fc2282acc$var$lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var $2d9d8c9fc2282acc$var$lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
var $2d9d8c9fc2282acc$var$lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var $2d9d8c9fc2282acc$var$lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var $2d9d8c9fc2282acc$var$lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
var $2d9d8c9fc2282acc$var$logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var $2d9d8c9fc2282acc$var$logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
var $2d9d8c9fc2282acc$var$logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
var $2d9d8c9fc2282acc$var$map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
var $2d9d8c9fc2282acc$var$map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var $2d9d8c9fc2282acc$var$map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
var $2d9d8c9fc2282acc$var$metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
var $2d9d8c9fc2282acc$var$metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
var $2d9d8c9fc2282acc$var$morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
var $2d9d8c9fc2282acc$var$normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var $2d9d8c9fc2282acc$var$normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
var $2d9d8c9fc2282acc$var$clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
var $2d9d8c9fc2282acc$var$output_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var $2d9d8c9fc2282acc$var$packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
var $2d9d8c9fc2282acc$var$premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var $2d9d8c9fc2282acc$var$project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var $2d9d8c9fc2282acc$var$dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var $2d9d8c9fc2282acc$var$dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
var $2d9d8c9fc2282acc$var$roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
var $2d9d8c9fc2282acc$var$shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";
var $2d9d8c9fc2282acc$var$skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var $2d9d8c9fc2282acc$var$skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var $2d9d8c9fc2282acc$var$skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
var $2d9d8c9fc2282acc$var$specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
var $2d9d8c9fc2282acc$var$specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
var $2d9d8c9fc2282acc$var$tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var $2d9d8c9fc2282acc$var$tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var $2d9d8c9fc2282acc$var$transmission_fragment = "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";
var $2d9d8c9fc2282acc$var$transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";
var $2d9d8c9fc2282acc$var$uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
var $2d9d8c9fc2282acc$var$uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
var $2d9d8c9fc2282acc$var$uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
var $2d9d8c9fc2282acc$var$uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
var $2d9d8c9fc2282acc$var$uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";
var $2d9d8c9fc2282acc$var$uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
var $2d9d8c9fc2282acc$var$worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
const $2d9d8c9fc2282acc$var$vertex$g = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
const $2d9d8c9fc2282acc$var$fragment$g = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
const $2d9d8c9fc2282acc$var$fragment$f = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
const $2d9d8c9fc2282acc$var$fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";
const $2d9d8c9fc2282acc$var$vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
const $2d9d8c9fc2282acc$var$fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
const $2d9d8c9fc2282acc$var$vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$9 = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$9 = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
const $2d9d8c9fc2282acc$var$fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
const $2d9d8c9fc2282acc$var$fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
const $2d9d8c9fc2282acc$var$vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";
const $2d9d8c9fc2282acc$var$fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
const $2d9d8c9fc2282acc$var$vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
const $2d9d8c9fc2282acc$var$fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
const $2d9d8c9fc2282acc$export$955f9f2e84c43c8b = {
    alphamap_fragment: $2d9d8c9fc2282acc$var$alphamap_fragment,
    alphamap_pars_fragment: $2d9d8c9fc2282acc$var$alphamap_pars_fragment,
    alphatest_fragment: $2d9d8c9fc2282acc$var$alphatest_fragment,
    alphatest_pars_fragment: $2d9d8c9fc2282acc$var$alphatest_pars_fragment,
    aomap_fragment: $2d9d8c9fc2282acc$var$aomap_fragment,
    aomap_pars_fragment: $2d9d8c9fc2282acc$var$aomap_pars_fragment,
    begin_vertex: $2d9d8c9fc2282acc$var$begin_vertex,
    beginnormal_vertex: $2d9d8c9fc2282acc$var$beginnormal_vertex,
    bsdfs: $2d9d8c9fc2282acc$var$bsdfs,
    bumpmap_pars_fragment: $2d9d8c9fc2282acc$var$bumpmap_pars_fragment,
    clipping_planes_fragment: $2d9d8c9fc2282acc$var$clipping_planes_fragment,
    clipping_planes_pars_fragment: $2d9d8c9fc2282acc$var$clipping_planes_pars_fragment,
    clipping_planes_pars_vertex: $2d9d8c9fc2282acc$var$clipping_planes_pars_vertex,
    clipping_planes_vertex: $2d9d8c9fc2282acc$var$clipping_planes_vertex,
    color_fragment: $2d9d8c9fc2282acc$var$color_fragment,
    color_pars_fragment: $2d9d8c9fc2282acc$var$color_pars_fragment,
    color_pars_vertex: $2d9d8c9fc2282acc$var$color_pars_vertex,
    color_vertex: $2d9d8c9fc2282acc$var$color_vertex,
    common: $2d9d8c9fc2282acc$var$common,
    cube_uv_reflection_fragment: $2d9d8c9fc2282acc$var$cube_uv_reflection_fragment,
    defaultnormal_vertex: $2d9d8c9fc2282acc$var$defaultnormal_vertex,
    displacementmap_pars_vertex: $2d9d8c9fc2282acc$var$displacementmap_pars_vertex,
    displacementmap_vertex: $2d9d8c9fc2282acc$var$displacementmap_vertex,
    emissivemap_fragment: $2d9d8c9fc2282acc$var$emissivemap_fragment,
    emissivemap_pars_fragment: $2d9d8c9fc2282acc$var$emissivemap_pars_fragment,
    encodings_fragment: $2d9d8c9fc2282acc$var$encodings_fragment,
    encodings_pars_fragment: $2d9d8c9fc2282acc$var$encodings_pars_fragment,
    envmap_fragment: $2d9d8c9fc2282acc$var$envmap_fragment,
    envmap_common_pars_fragment: $2d9d8c9fc2282acc$var$envmap_common_pars_fragment,
    envmap_pars_fragment: $2d9d8c9fc2282acc$var$envmap_pars_fragment,
    envmap_pars_vertex: $2d9d8c9fc2282acc$var$envmap_pars_vertex,
    envmap_physical_pars_fragment: $2d9d8c9fc2282acc$var$envmap_physical_pars_fragment,
    envmap_vertex: $2d9d8c9fc2282acc$var$envmap_vertex,
    fog_vertex: $2d9d8c9fc2282acc$var$fog_vertex,
    fog_pars_vertex: $2d9d8c9fc2282acc$var$fog_pars_vertex,
    fog_fragment: $2d9d8c9fc2282acc$var$fog_fragment,
    fog_pars_fragment: $2d9d8c9fc2282acc$var$fog_pars_fragment,
    gradientmap_pars_fragment: $2d9d8c9fc2282acc$var$gradientmap_pars_fragment,
    lightmap_fragment: $2d9d8c9fc2282acc$var$lightmap_fragment,
    lightmap_pars_fragment: $2d9d8c9fc2282acc$var$lightmap_pars_fragment,
    lights_lambert_vertex: $2d9d8c9fc2282acc$var$lights_lambert_vertex,
    lights_pars_begin: $2d9d8c9fc2282acc$var$lights_pars_begin,
    lights_toon_fragment: $2d9d8c9fc2282acc$var$lights_toon_fragment,
    lights_toon_pars_fragment: $2d9d8c9fc2282acc$var$lights_toon_pars_fragment,
    lights_phong_fragment: $2d9d8c9fc2282acc$var$lights_phong_fragment,
    lights_phong_pars_fragment: $2d9d8c9fc2282acc$var$lights_phong_pars_fragment,
    lights_physical_fragment: $2d9d8c9fc2282acc$var$lights_physical_fragment,
    lights_physical_pars_fragment: $2d9d8c9fc2282acc$var$lights_physical_pars_fragment,
    lights_fragment_begin: $2d9d8c9fc2282acc$var$lights_fragment_begin,
    lights_fragment_maps: $2d9d8c9fc2282acc$var$lights_fragment_maps,
    lights_fragment_end: $2d9d8c9fc2282acc$var$lights_fragment_end,
    logdepthbuf_fragment: $2d9d8c9fc2282acc$var$logdepthbuf_fragment,
    logdepthbuf_pars_fragment: $2d9d8c9fc2282acc$var$logdepthbuf_pars_fragment,
    logdepthbuf_pars_vertex: $2d9d8c9fc2282acc$var$logdepthbuf_pars_vertex,
    logdepthbuf_vertex: $2d9d8c9fc2282acc$var$logdepthbuf_vertex,
    map_fragment: $2d9d8c9fc2282acc$var$map_fragment,
    map_pars_fragment: $2d9d8c9fc2282acc$var$map_pars_fragment,
    map_particle_fragment: $2d9d8c9fc2282acc$var$map_particle_fragment,
    map_particle_pars_fragment: $2d9d8c9fc2282acc$var$map_particle_pars_fragment,
    metalnessmap_fragment: $2d9d8c9fc2282acc$var$metalnessmap_fragment,
    metalnessmap_pars_fragment: $2d9d8c9fc2282acc$var$metalnessmap_pars_fragment,
    morphnormal_vertex: $2d9d8c9fc2282acc$var$morphnormal_vertex,
    morphtarget_pars_vertex: $2d9d8c9fc2282acc$var$morphtarget_pars_vertex,
    morphtarget_vertex: $2d9d8c9fc2282acc$var$morphtarget_vertex,
    normal_fragment_begin: $2d9d8c9fc2282acc$var$normal_fragment_begin,
    normal_fragment_maps: $2d9d8c9fc2282acc$var$normal_fragment_maps,
    normal_pars_fragment: $2d9d8c9fc2282acc$var$normal_pars_fragment,
    normal_pars_vertex: $2d9d8c9fc2282acc$var$normal_pars_vertex,
    normal_vertex: $2d9d8c9fc2282acc$var$normal_vertex,
    normalmap_pars_fragment: $2d9d8c9fc2282acc$var$normalmap_pars_fragment,
    clearcoat_normal_fragment_begin: $2d9d8c9fc2282acc$var$clearcoat_normal_fragment_begin,
    clearcoat_normal_fragment_maps: $2d9d8c9fc2282acc$var$clearcoat_normal_fragment_maps,
    clearcoat_pars_fragment: $2d9d8c9fc2282acc$var$clearcoat_pars_fragment,
    output_fragment: $2d9d8c9fc2282acc$var$output_fragment,
    packing: $2d9d8c9fc2282acc$var$packing,
    premultiplied_alpha_fragment: $2d9d8c9fc2282acc$var$premultiplied_alpha_fragment,
    project_vertex: $2d9d8c9fc2282acc$var$project_vertex,
    dithering_fragment: $2d9d8c9fc2282acc$var$dithering_fragment,
    dithering_pars_fragment: $2d9d8c9fc2282acc$var$dithering_pars_fragment,
    roughnessmap_fragment: $2d9d8c9fc2282acc$var$roughnessmap_fragment,
    roughnessmap_pars_fragment: $2d9d8c9fc2282acc$var$roughnessmap_pars_fragment,
    shadowmap_pars_fragment: $2d9d8c9fc2282acc$var$shadowmap_pars_fragment,
    shadowmap_pars_vertex: $2d9d8c9fc2282acc$var$shadowmap_pars_vertex,
    shadowmap_vertex: $2d9d8c9fc2282acc$var$shadowmap_vertex,
    shadowmask_pars_fragment: $2d9d8c9fc2282acc$var$shadowmask_pars_fragment,
    skinbase_vertex: $2d9d8c9fc2282acc$var$skinbase_vertex,
    skinning_pars_vertex: $2d9d8c9fc2282acc$var$skinning_pars_vertex,
    skinning_vertex: $2d9d8c9fc2282acc$var$skinning_vertex,
    skinnormal_vertex: $2d9d8c9fc2282acc$var$skinnormal_vertex,
    specularmap_fragment: $2d9d8c9fc2282acc$var$specularmap_fragment,
    specularmap_pars_fragment: $2d9d8c9fc2282acc$var$specularmap_pars_fragment,
    tonemapping_fragment: $2d9d8c9fc2282acc$var$tonemapping_fragment,
    tonemapping_pars_fragment: $2d9d8c9fc2282acc$var$tonemapping_pars_fragment,
    transmission_fragment: $2d9d8c9fc2282acc$var$transmission_fragment,
    transmission_pars_fragment: $2d9d8c9fc2282acc$var$transmission_pars_fragment,
    uv_pars_fragment: $2d9d8c9fc2282acc$var$uv_pars_fragment,
    uv_pars_vertex: $2d9d8c9fc2282acc$var$uv_pars_vertex,
    uv_vertex: $2d9d8c9fc2282acc$var$uv_vertex,
    uv2_pars_fragment: $2d9d8c9fc2282acc$var$uv2_pars_fragment,
    uv2_pars_vertex: $2d9d8c9fc2282acc$var$uv2_pars_vertex,
    uv2_vertex: $2d9d8c9fc2282acc$var$uv2_vertex,
    worldpos_vertex: $2d9d8c9fc2282acc$var$worldpos_vertex,
    background_vert: $2d9d8c9fc2282acc$var$vertex$g,
    background_frag: $2d9d8c9fc2282acc$var$fragment$g,
    cube_vert: $2d9d8c9fc2282acc$var$vertex$f,
    cube_frag: $2d9d8c9fc2282acc$var$fragment$f,
    depth_vert: $2d9d8c9fc2282acc$var$vertex$e,
    depth_frag: $2d9d8c9fc2282acc$var$fragment$e,
    distanceRGBA_vert: $2d9d8c9fc2282acc$var$vertex$d,
    distanceRGBA_frag: $2d9d8c9fc2282acc$var$fragment$d,
    equirect_vert: $2d9d8c9fc2282acc$var$vertex$c,
    equirect_frag: $2d9d8c9fc2282acc$var$fragment$c,
    linedashed_vert: $2d9d8c9fc2282acc$var$vertex$b,
    linedashed_frag: $2d9d8c9fc2282acc$var$fragment$b,
    meshbasic_vert: $2d9d8c9fc2282acc$var$vertex$a,
    meshbasic_frag: $2d9d8c9fc2282acc$var$fragment$a,
    meshlambert_vert: $2d9d8c9fc2282acc$var$vertex$9,
    meshlambert_frag: $2d9d8c9fc2282acc$var$fragment$9,
    meshmatcap_vert: $2d9d8c9fc2282acc$var$vertex$8,
    meshmatcap_frag: $2d9d8c9fc2282acc$var$fragment$8,
    meshnormal_vert: $2d9d8c9fc2282acc$var$vertex$7,
    meshnormal_frag: $2d9d8c9fc2282acc$var$fragment$7,
    meshphong_vert: $2d9d8c9fc2282acc$var$vertex$6,
    meshphong_frag: $2d9d8c9fc2282acc$var$fragment$6,
    meshphysical_vert: $2d9d8c9fc2282acc$var$vertex$5,
    meshphysical_frag: $2d9d8c9fc2282acc$var$fragment$5,
    meshtoon_vert: $2d9d8c9fc2282acc$var$vertex$4,
    meshtoon_frag: $2d9d8c9fc2282acc$var$fragment$4,
    points_vert: $2d9d8c9fc2282acc$var$vertex$3,
    points_frag: $2d9d8c9fc2282acc$var$fragment$3,
    shadow_vert: $2d9d8c9fc2282acc$var$vertex$2,
    shadow_frag: $2d9d8c9fc2282acc$var$fragment$2,
    sprite_vert: $2d9d8c9fc2282acc$var$vertex$1,
    sprite_frag: $2d9d8c9fc2282acc$var$fragment$1
};
/**
 * Uniforms library for shared webgl shaders
 */ const $2d9d8c9fc2282acc$export$6643083551874bf5 = {
    common: {
        diffuse: {
            value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215)
        },
        opacity: {
            value: 1
        },
        map: {
            value: null
        },
        uvTransform: {
            value: new $2d9d8c9fc2282acc$export$8ff26dafa08918()
        },
        uv2Transform: {
            value: new $2d9d8c9fc2282acc$export$8ff26dafa08918()
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        }
    },
    specularmap: {
        specularMap: {
            value: null
        }
    },
    envmap: {
        envMap: {
            value: null
        },
        flipEnvMap: {
            value: -1
        },
        reflectivity: {
            value: 1
        },
        ior: {
            value: 1.5
        },
        refractionRatio: {
            value: 0.98
        }
    },
    aomap: {
        aoMap: {
            value: null
        },
        aoMapIntensity: {
            value: 1
        }
    },
    lightmap: {
        lightMap: {
            value: null
        },
        lightMapIntensity: {
            value: 1
        }
    },
    emissivemap: {
        emissiveMap: {
            value: null
        }
    },
    bumpmap: {
        bumpMap: {
            value: null
        },
        bumpScale: {
            value: 1
        }
    },
    normalmap: {
        normalMap: {
            value: null
        },
        normalScale: {
            value: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1)
        }
    },
    displacementmap: {
        displacementMap: {
            value: null
        },
        displacementScale: {
            value: 1
        },
        displacementBias: {
            value: 0
        }
    },
    roughnessmap: {
        roughnessMap: {
            value: null
        }
    },
    metalnessmap: {
        metalnessMap: {
            value: null
        }
    },
    gradientmap: {
        gradientMap: {
            value: null
        }
    },
    fog: {
        fogDensity: {
            value: 0.00025
        },
        fogNear: {
            value: 1
        },
        fogFar: {
            value: 2000
        },
        fogColor: {
            value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215)
        }
    },
    lights: {
        ambientLightColor: {
            value: []
        },
        lightProbe: {
            value: []
        },
        directionalLights: {
            value: [],
            properties: {
                direction: {
                },
                color: {
                }
            }
        },
        directionalLightShadows: {
            value: [],
            properties: {
                shadowBias: {
                },
                shadowNormalBias: {
                },
                shadowRadius: {
                },
                shadowMapSize: {
                }
            }
        },
        directionalShadowMap: {
            value: []
        },
        directionalShadowMatrix: {
            value: []
        },
        spotLights: {
            value: [],
            properties: {
                color: {
                },
                position: {
                },
                direction: {
                },
                distance: {
                },
                coneCos: {
                },
                penumbraCos: {
                },
                decay: {
                }
            }
        },
        spotLightShadows: {
            value: [],
            properties: {
                shadowBias: {
                },
                shadowNormalBias: {
                },
                shadowRadius: {
                },
                shadowMapSize: {
                }
            }
        },
        spotShadowMap: {
            value: []
        },
        spotShadowMatrix: {
            value: []
        },
        pointLights: {
            value: [],
            properties: {
                color: {
                },
                position: {
                },
                decay: {
                },
                distance: {
                }
            }
        },
        pointLightShadows: {
            value: [],
            properties: {
                shadowBias: {
                },
                shadowNormalBias: {
                },
                shadowRadius: {
                },
                shadowMapSize: {
                },
                shadowCameraNear: {
                },
                shadowCameraFar: {
                }
            }
        },
        pointShadowMap: {
            value: []
        },
        pointShadowMatrix: {
            value: []
        },
        hemisphereLights: {
            value: [],
            properties: {
                direction: {
                },
                skyColor: {
                },
                groundColor: {
                }
            }
        },
        // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
        rectAreaLights: {
            value: [],
            properties: {
                color: {
                },
                position: {
                },
                width: {
                },
                height: {
                }
            }
        },
        ltc_1: {
            value: null
        },
        ltc_2: {
            value: null
        }
    },
    points: {
        diffuse: {
            value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215)
        },
        opacity: {
            value: 1
        },
        size: {
            value: 1
        },
        scale: {
            value: 1
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new $2d9d8c9fc2282acc$export$8ff26dafa08918()
        }
    },
    sprite: {
        diffuse: {
            value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215)
        },
        opacity: {
            value: 1
        },
        center: {
            value: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0.5, 0.5)
        },
        rotation: {
            value: 0
        },
        map: {
            value: null
        },
        alphaMap: {
            value: null
        },
        alphaTest: {
            value: 0
        },
        uvTransform: {
            value: new $2d9d8c9fc2282acc$export$8ff26dafa08918()
        }
    }
};
const $2d9d8c9fc2282acc$export$bee4a7d47f8f5014 = {
    basic: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.specularmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.envmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.aomap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lightmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshbasic_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshbasic_frag
    },
    lambert: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.specularmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.envmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.aomap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lightmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.emissivemap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshlambert_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshlambert_frag
    },
    phong: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.specularmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.envmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.aomap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lightmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.emissivemap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.bumpmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.normalmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
                },
                specular: {
                    value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(1118481)
                },
                shininess: {
                    value: 30
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshphong_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshphong_frag
    },
    standard: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.envmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.aomap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lightmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.emissivemap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.bumpmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.normalmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.roughnessmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.metalnessmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
                },
                roughness: {
                    value: 1
                },
                metalness: {
                    value: 0
                },
                envMapIntensity: {
                    value: 1
                } // temporary
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshphysical_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshphysical_frag
    },
    toon: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.aomap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lightmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.emissivemap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.bumpmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.normalmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.gradientmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            $2d9d8c9fc2282acc$export$6643083551874bf5.lights,
            {
                emissive: {
                    value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshtoon_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshtoon_frag
    },
    matcap: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.bumpmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.normalmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            {
                matcap: {
                    value: null
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshmatcap_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshmatcap_frag
    },
    points: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.points,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.points_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.points_frag
    },
    dashed: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            {
                scale: {
                    value: 1
                },
                dashSize: {
                    value: 1
                },
                totalSize: {
                    value: 2
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.linedashed_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.linedashed_frag
    },
    depth: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.depth_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.depth_frag
    },
    normal: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.bumpmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.normalmap,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshnormal_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshnormal_frag
    },
    sprite: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.sprite,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.sprite_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.sprite_frag
    },
    background: {
        uniforms: {
            uvTransform: {
                value: new $2d9d8c9fc2282acc$export$8ff26dafa08918()
            },
            t2D: {
                value: null
            }
        },
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.background_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.background_frag
    },
    /* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */ cube: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.envmap,
            {
                opacity: {
                    value: 1
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.cube_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.cube_frag
    },
    equirect: {
        uniforms: {
            tEquirect: {
                value: null
            }
        },
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.equirect_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.equirect_frag
    },
    distanceRGBA: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.common,
            $2d9d8c9fc2282acc$export$6643083551874bf5.displacementmap,
            {
                referencePosition: {
                    value: new $2d9d8c9fc2282acc$export$64b5c384219d3699()
                },
                nearDistance: {
                    value: 1
                },
                farDistance: {
                    value: 1000
                }
            }
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.distanceRGBA_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.distanceRGBA_frag
    },
    shadow: {
        uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
            $2d9d8c9fc2282acc$export$6643083551874bf5.lights,
            $2d9d8c9fc2282acc$export$6643083551874bf5.fog,
            {
                color: {
                    value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
                },
                opacity: {
                    value: 1
                }
            }, 
        ]),
        vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.shadow_vert,
        fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.shadow_frag
    }
};
$2d9d8c9fc2282acc$export$bee4a7d47f8f5014.physical = {
    uniforms: $2d9d8c9fc2282acc$var$mergeUniforms([
        $2d9d8c9fc2282acc$export$bee4a7d47f8f5014.standard.uniforms,
        {
            clearcoat: {
                value: 0
            },
            clearcoatMap: {
                value: null
            },
            clearcoatRoughness: {
                value: 0
            },
            clearcoatRoughnessMap: {
                value: null
            },
            clearcoatNormalScale: {
                value: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1)
            },
            clearcoatNormalMap: {
                value: null
            },
            sheen: {
                value: 0
            },
            sheenColor: {
                value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
            },
            sheenColorMap: {
                value: null
            },
            sheenRoughness: {
                value: 0
            },
            sheenRoughnessMap: {
                value: null
            },
            transmission: {
                value: 0
            },
            transmissionMap: {
                value: null
            },
            transmissionSamplerSize: {
                value: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()
            },
            transmissionSamplerMap: {
                value: null
            },
            thickness: {
                value: 0
            },
            thicknessMap: {
                value: null
            },
            attenuationDistance: {
                value: 0
            },
            attenuationColor: {
                value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(0)
            },
            specularIntensity: {
                value: 0
            },
            specularIntensityMap: {
                value: null
            },
            specularColor: {
                value: new $2d9d8c9fc2282acc$export$892596cec99bc70e(1, 1, 1)
            },
            specularColorMap: {
                value: null
            }
        }
    ]),
    vertexShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshphysical_vert,
    fragmentShader: $2d9d8c9fc2282acc$export$955f9f2e84c43c8b.meshphysical_frag
};
function $2d9d8c9fc2282acc$var$WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {
    const clearColor = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
    let clearAlpha = 0;
    let planeMesh;
    let boxMesh;
    let currentBackground = null;
    let currentBackgroundVersion = 0;
    let currentTonemapping = null;
    function render(renderList, scene) {
        let forceClear = false;
        let background = scene.isScene === true ? scene.background : null;
        if (background && background.isTexture) background = cubemaps.get(background);
        // Ignore background in AR
        // TODO: Reconsider this.
        const xr = renderer.xr;
        const session = xr.getSession && xr.getSession();
        if (session && session.environmentBlendMode === 'additive') background = null;
        if (background === null) setClear(clearColor, clearAlpha);
        else if (background && background.isColor) {
            setClear(background, 1);
            forceClear = true;
        }
        if (renderer.autoClear || forceClear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);
        if (background && (background.isCubeTexture || background.mapping === $2d9d8c9fc2282acc$export$dbf3e70ff37af79)) {
            if (boxMesh === undefined) {
                boxMesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(new $2d9d8c9fc2282acc$export$ab3456a079aa7d80(1, 1, 1), new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
                    name: 'BackgroundCubeMaterial',
                    uniforms: $2d9d8c9fc2282acc$var$cloneUniforms($2d9d8c9fc2282acc$export$bee4a7d47f8f5014.cube.uniforms),
                    vertexShader: $2d9d8c9fc2282acc$export$bee4a7d47f8f5014.cube.vertexShader,
                    fragmentShader: $2d9d8c9fc2282acc$export$bee4a7d47f8f5014.cube.fragmentShader,
                    side: $2d9d8c9fc2282acc$export$d9f0486e75b5ace,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                boxMesh.geometry.deleteAttribute('normal');
                boxMesh.geometry.deleteAttribute('uv');
                boxMesh.onBeforeRender = function(renderer, scene, camera) {
                    this.matrixWorld.copyPosition(camera.matrixWorld);
                };
                // enable code injection for non-built-in material
                Object.defineProperty(boxMesh.material, 'envMap', {
                    get: function() {
                        return this.uniforms.envMap.value;
                    }
                });
                objects.update(boxMesh);
            }
            boxMesh.material.uniforms.envMap.value = background;
            boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                boxMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            // push to the pre-sorted opaque render list
            renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
        } else if (background && background.isTexture) {
            if (planeMesh === undefined) {
                planeMesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(new $2d9d8c9fc2282acc$export$e789a11a194ca4e0(2, 2), new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
                    name: 'BackgroundMaterial',
                    uniforms: $2d9d8c9fc2282acc$var$cloneUniforms($2d9d8c9fc2282acc$export$bee4a7d47f8f5014.background.uniforms),
                    vertexShader: $2d9d8c9fc2282acc$export$bee4a7d47f8f5014.background.vertexShader,
                    fragmentShader: $2d9d8c9fc2282acc$export$bee4a7d47f8f5014.background.fragmentShader,
                    side: $2d9d8c9fc2282acc$export$2ede184fc2998901,
                    depthTest: false,
                    depthWrite: false,
                    fog: false
                }));
                planeMesh.geometry.deleteAttribute('normal');
                // enable code injection for non-built-in material
                Object.defineProperty(planeMesh.material, 'map', {
                    get: function() {
                        return this.uniforms.t2D.value;
                    }
                });
                objects.update(planeMesh);
            }
            planeMesh.material.uniforms.t2D.value = background;
            if (background.matrixAutoUpdate === true) background.updateMatrix();
            planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
            if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {
                planeMesh.material.needsUpdate = true;
                currentBackground = background;
                currentBackgroundVersion = background.version;
                currentTonemapping = renderer.toneMapping;
            }
            // push to the pre-sorted opaque render list
            renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
        }
    }
    function setClear(color, alpha) {
        state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
    }
    return {
        getClearColor: function() {
            return clearColor;
        },
        setClearColor: function(color, alpha = 1) {
            clearColor.set(color);
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        getClearAlpha: function() {
            return clearAlpha;
        },
        setClearAlpha: function(alpha) {
            clearAlpha = alpha;
            setClear(clearColor, clearAlpha);
        },
        render: render
    };
}
function $2d9d8c9fc2282acc$var$WebGLBindingStates(gl, extensions, attributes1, capabilities) {
    const maxVertexAttributes = gl.getParameter(34921);
    const extension1 = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');
    const vaoAvailable = capabilities.isWebGL2 || extension1 !== null;
    const bindingStates = {
    };
    const defaultState = createBindingState(null);
    let currentState = defaultState;
    function setup(object, material, program, geometry, index) {
        let updateBuffers = false;
        if (vaoAvailable) {
            const state = getBindingState(geometry, program, material);
            if (currentState !== state) {
                currentState = state;
                bindVertexArrayObject(currentState.object);
            }
            updateBuffers = needsUpdate(geometry, index);
            if (updateBuffers) saveCache(geometry, index);
        } else {
            const wireframe = material.wireframe === true;
            if (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {
                currentState.geometry = geometry.id;
                currentState.program = program.id;
                currentState.wireframe = wireframe;
                updateBuffers = true;
            }
        }
        if (object.isInstancedMesh === true) updateBuffers = true;
        if (index !== null) attributes1.update(index, 34963);
        if (updateBuffers) {
            setupVertexAttributes(object, material, program, geometry);
            if (index !== null) gl.bindBuffer(34963, attributes1.get(index).buffer);
        }
    }
    function createVertexArrayObject() {
        if (capabilities.isWebGL2) return gl.createVertexArray();
        return extension1.createVertexArrayOES();
    }
    function bindVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.bindVertexArray(vao);
        return extension1.bindVertexArrayOES(vao);
    }
    function deleteVertexArrayObject(vao) {
        if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);
        return extension1.deleteVertexArrayOES(vao);
    }
    function getBindingState(geometry, program, material) {
        const wireframe = material.wireframe === true;
        let programMap = bindingStates[geometry.id];
        if (programMap === undefined) {
            programMap = {
            };
            bindingStates[geometry.id] = programMap;
        }
        let stateMap = programMap[program.id];
        if (stateMap === undefined) {
            stateMap = {
            };
            programMap[program.id] = stateMap;
        }
        let state = stateMap[wireframe];
        if (state === undefined) {
            state = createBindingState(createVertexArrayObject());
            stateMap[wireframe] = state;
        }
        return state;
    }
    function createBindingState(vao) {
        const newAttributes = [];
        const enabledAttributes = [];
        const attributeDivisors = [];
        for(let i71 = 0; i71 < maxVertexAttributes; i71++){
            newAttributes[i71] = 0;
            enabledAttributes[i71] = 0;
            attributeDivisors[i71] = 0;
        }
        return {
            // for backward compatibility on non-VAO support browser
            geometry: null,
            program: null,
            wireframe: false,
            newAttributes: newAttributes,
            enabledAttributes: enabledAttributes,
            attributeDivisors: attributeDivisors,
            object: vao,
            attributes: {
            },
            index: null
        };
    }
    function needsUpdate(geometry, index) {
        const cachedAttributes = currentState.attributes;
        const geometryAttributes = geometry.attributes;
        let attributesNum = 0;
        for(const key in geometryAttributes){
            const cachedAttribute = cachedAttributes[key];
            const geometryAttribute = geometryAttributes[key];
            if (cachedAttribute === undefined) return true;
            if (cachedAttribute.attribute !== geometryAttribute) return true;
            if (cachedAttribute.data !== geometryAttribute.data) return true;
            attributesNum++;
        }
        if (currentState.attributesNum !== attributesNum) return true;
        if (currentState.index !== index) return true;
        return false;
    }
    function saveCache(geometry, index) {
        const cache = {
        };
        const attributes = geometry.attributes;
        let attributesNum = 0;
        for(const key in attributes){
            const attribute = attributes[key];
            const data = {
            };
            data.attribute = attribute;
            if (attribute.data) data.data = attribute.data;
            cache[key] = data;
            attributesNum++;
        }
        currentState.attributes = cache;
        currentState.attributesNum = attributesNum;
        currentState.index = index;
    }
    function initAttributes() {
        const newAttributes = currentState.newAttributes;
        for(let i72 = 0, il = newAttributes.length; i72 < il; i72++)newAttributes[i72] = 0;
    }
    function enableAttribute(attribute) {
        enableAttributeAndDivisor(attribute, 0);
    }
    function enableAttributeAndDivisor(attribute, meshPerAttribute) {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        const attributeDivisors = currentState.attributeDivisors;
        newAttributes[attribute] = 1;
        if (enabledAttributes[attribute] === 0) {
            gl.enableVertexAttribArray(attribute);
            enabledAttributes[attribute] = 1;
        }
        if (attributeDivisors[attribute] !== meshPerAttribute) {
            const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');
            extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);
            attributeDivisors[attribute] = meshPerAttribute;
        }
    }
    function disableUnusedAttributes() {
        const newAttributes = currentState.newAttributes;
        const enabledAttributes = currentState.enabledAttributes;
        for(let i73 = 0, il = enabledAttributes.length; i73 < il; i73++)if (enabledAttributes[i73] !== newAttributes[i73]) {
            gl.disableVertexAttribArray(i73);
            enabledAttributes[i73] = 0;
        }
    }
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        if (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) gl.vertexAttribIPointer(index, size, type, stride, offset);
        else gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    function setupVertexAttributes(object, material, program, geometry) {
        if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {
            if (extensions.get('ANGLE_instanced_arrays') === null) return;
        }
        initAttributes();
        const geometryAttributes = geometry.attributes;
        const programAttributes = program.getAttributes();
        const materialDefaultAttributeValues = material.defaultAttributeValues;
        for(const name in programAttributes){
            const programAttribute = programAttributes[name];
            if (programAttribute.location >= 0) {
                let geometryAttribute = geometryAttributes[name];
                if (geometryAttribute === undefined) {
                    if (name === 'instanceMatrix' && object.instanceMatrix) geometryAttribute = object.instanceMatrix;
                    if (name === 'instanceColor' && object.instanceColor) geometryAttribute = object.instanceColor;
                }
                if (geometryAttribute !== undefined) {
                    const normalized = geometryAttribute.normalized;
                    const size = geometryAttribute.itemSize;
                    const attribute = attributes1.get(geometryAttribute);
                    // TODO Attribute may not be available on context restore
                    if (attribute === undefined) continue;
                    const buffer = attribute.buffer;
                    const type = attribute.type;
                    const bytesPerElement = attribute.bytesPerElement;
                    if (geometryAttribute.isInterleavedBufferAttribute) {
                        const data = geometryAttribute.data;
                        const stride = data.stride;
                        const offset = geometryAttribute.offset;
                        if (data && data.isInstancedInterleavedBuffer) {
                            for(let i75 = 0; i75 < programAttribute.locationSize; i75++)enableAttributeAndDivisor(programAttribute.location + i75, data.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = data.meshPerAttribute * data.count;
                        } else for(let i76 = 0; i76 < programAttribute.locationSize; i76++)enableAttribute(programAttribute.location + i76);
                        gl.bindBuffer(34962, buffer);
                        for(let i74 = 0; i74 < programAttribute.locationSize; i74++)vertexAttribPointer(programAttribute.location + i74, size / programAttribute.locationSize, type, normalized, stride * bytesPerElement, (offset + size / programAttribute.locationSize * i74) * bytesPerElement);
                    } else {
                        if (geometryAttribute.isInstancedBufferAttribute) {
                            for(let i78 = 0; i78 < programAttribute.locationSize; i78++)enableAttributeAndDivisor(programAttribute.location + i78, geometryAttribute.meshPerAttribute);
                            if (object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined) geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
                        } else for(let i79 = 0; i79 < programAttribute.locationSize; i79++)enableAttribute(programAttribute.location + i79);
                        gl.bindBuffer(34962, buffer);
                        for(let i77 = 0; i77 < programAttribute.locationSize; i77++)vertexAttribPointer(programAttribute.location + i77, size / programAttribute.locationSize, type, normalized, size * bytesPerElement, size / programAttribute.locationSize * i77 * bytesPerElement);
                    }
                } else if (materialDefaultAttributeValues !== undefined) {
                    const value = materialDefaultAttributeValues[name];
                    if (value !== undefined) switch(value.length){
                        case 2:
                            gl.vertexAttrib2fv(programAttribute.location, value);
                            break;
                        case 3:
                            gl.vertexAttrib3fv(programAttribute.location, value);
                            break;
                        case 4:
                            gl.vertexAttrib4fv(programAttribute.location, value);
                            break;
                        default:
                            gl.vertexAttrib1fv(programAttribute.location, value);
                    }
                }
            }
        }
        disableUnusedAttributes();
    }
    function dispose() {
        reset();
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            for(const programId in programMap){
                const stateMap = programMap[programId];
                for(const wireframe in stateMap){
                    deleteVertexArrayObject(stateMap[wireframe].object);
                    delete stateMap[wireframe];
                }
                delete programMap[programId];
            }
            delete bindingStates[geometryId];
        }
    }
    function releaseStatesOfGeometry(geometry) {
        if (bindingStates[geometry.id] === undefined) return;
        const programMap = bindingStates[geometry.id];
        for(const programId in programMap){
            const stateMap = programMap[programId];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[programId];
        }
        delete bindingStates[geometry.id];
    }
    function releaseStatesOfProgram(program) {
        for(const geometryId in bindingStates){
            const programMap = bindingStates[geometryId];
            if (programMap[program.id] === undefined) continue;
            const stateMap = programMap[program.id];
            for(const wireframe in stateMap){
                deleteVertexArrayObject(stateMap[wireframe].object);
                delete stateMap[wireframe];
            }
            delete programMap[program.id];
        }
    }
    function reset() {
        resetDefaultState();
        if (currentState === defaultState) return;
        currentState = defaultState;
        bindVertexArrayObject(currentState.object);
    }
    // for backward-compatilibity
    function resetDefaultState() {
        defaultState.geometry = null;
        defaultState.program = null;
        defaultState.wireframe = false;
    }
    return {
        setup: setup,
        reset: reset,
        resetDefaultState: resetDefaultState,
        dispose: dispose,
        releaseStatesOfGeometry: releaseStatesOfGeometry,
        releaseStatesOfProgram: releaseStatesOfProgram,
        initAttributes: initAttributes,
        enableAttribute: enableAttribute,
        disableUnusedAttributes: disableUnusedAttributes
    };
}
function $2d9d8c9fc2282acc$var$WebGLBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    function render(start, count) {
        gl.drawArrays(mode, start, count);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = 'drawArraysInstanced';
        } else {
            extension = extensions.get('ANGLE_instanced_arrays');
            methodName = 'drawArraysInstancedANGLE';
            if (extension === null) {
                console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                return;
            }
        }
        extension[methodName](mode, start, count, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.render = render;
    this.renderInstances = renderInstances;
}
function $2d9d8c9fc2282acc$var$WebGLCapabilities(gl, extensions, parameters) {
    let maxAnisotropy;
    function getMaxAnisotropy() {
        if (maxAnisotropy !== undefined) return maxAnisotropy;
        if (extensions.has('EXT_texture_filter_anisotropic') === true) {
            const extension = extensions.get('EXT_texture_filter_anisotropic');
            maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        } else maxAnisotropy = 0;
        return maxAnisotropy;
    }
    function getMaxPrecision(precision) {
        if (precision === 'highp') {
            if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) return 'highp';
            precision = 'mediump';
        }
        if (precision === 'mediump') {
            if (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) return 'mediump';
        }
        return 'lowp';
    }
    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;
    let precision1 = parameters.precision !== undefined ? parameters.precision : 'highp';
    const maxPrecision = getMaxPrecision(precision1);
    if (maxPrecision !== precision1) {
        console.warn('THREE.WebGLRenderer:', precision1, 'not supported, using', maxPrecision, 'instead.');
        precision1 = maxPrecision;
    }
    const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');
    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
    const maxTextures = gl.getParameter(34930);
    const maxVertexTextures = gl.getParameter(35660);
    const maxTextureSize = gl.getParameter(3379);
    const maxCubemapSize = gl.getParameter(34076);
    const maxAttributes = gl.getParameter(34921);
    const maxVertexUniforms = gl.getParameter(36347);
    const maxVaryings = gl.getParameter(36348);
    const maxFragmentUniforms = gl.getParameter(36349);
    const vertexTextures = maxVertexTextures > 0;
    const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');
    const floatVertexTextures = vertexTextures && floatFragmentTextures;
    const maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
    return {
        isWebGL2: isWebGL2,
        drawBuffers: drawBuffers,
        getMaxAnisotropy: getMaxAnisotropy,
        getMaxPrecision: getMaxPrecision,
        precision: precision1,
        logarithmicDepthBuffer: logarithmicDepthBuffer,
        maxTextures: maxTextures,
        maxVertexTextures: maxVertexTextures,
        maxTextureSize: maxTextureSize,
        maxCubemapSize: maxCubemapSize,
        maxAttributes: maxAttributes,
        maxVertexUniforms: maxVertexUniforms,
        maxVaryings: maxVaryings,
        maxFragmentUniforms: maxFragmentUniforms,
        vertexTextures: vertexTextures,
        floatFragmentTextures: floatFragmentTextures,
        floatVertexTextures: floatVertexTextures,
        maxSamples: maxSamples
    };
}
function $2d9d8c9fc2282acc$var$WebGLClipping(properties) {
    const scope = this;
    let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
    const plane = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0(), viewNormalMatrix = new $2d9d8c9fc2282acc$export$8ff26dafa08918(), uniform = {
        value: null,
        needsUpdate: false
    };
    this.uniform = uniform;
    this.numPlanes = 0;
    this.numIntersection = 0;
    this.init = function(planes, enableLocalClipping, camera) {
        const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
        // run another frame in order to reset the state:
        numGlobalPlanes !== 0 || localClippingEnabled;
        localClippingEnabled = enableLocalClipping;
        globalState = projectPlanes(planes, camera, 0);
        numGlobalPlanes = planes.length;
        return enabled;
    };
    this.beginShadows = function() {
        renderingShadows = true;
        projectPlanes(null);
    };
    this.endShadows = function() {
        renderingShadows = false;
        resetGlobalState();
    };
    this.setState = function(material, camera, useCache) {
        const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
        const materialProperties = properties.get(material);
        if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
            // there's no local clipping
            if (renderingShadows) // there's no global clipping
            projectPlanes(null);
            else resetGlobalState();
        } else {
            const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
            let dstArray = materialProperties.clippingState || null;
            uniform.value = dstArray; // ensure unique state
            dstArray = projectPlanes(planes, camera, lGlobal, useCache);
            for(let i80 = 0; i80 !== lGlobal; ++i80)dstArray[i80] = globalState[i80];
            materialProperties.clippingState = dstArray;
            this.numIntersection = clipIntersection ? this.numPlanes : 0;
            this.numPlanes += nGlobal;
        }
    };
    function resetGlobalState() {
        if (uniform.value !== globalState) {
            uniform.value = globalState;
            uniform.needsUpdate = numGlobalPlanes > 0;
        }
        scope.numPlanes = numGlobalPlanes;
        scope.numIntersection = 0;
    }
    function projectPlanes(planes, camera, dstOffset, skipTransform) {
        const nPlanes = planes !== null ? planes.length : 0;
        let dstArray = null;
        if (nPlanes !== 0) {
            dstArray = uniform.value;
            if (skipTransform !== true || dstArray === null) {
                const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera.matrixWorldInverse;
                viewNormalMatrix.getNormalMatrix(viewMatrix);
                if (dstArray === null || dstArray.length < flatSize) dstArray = new Float32Array(flatSize);
                for(let i81 = 0, i4 = dstOffset; i81 !== nPlanes; ++i81, i4 += 4){
                    plane.copy(planes[i81]).applyMatrix4(viewMatrix, viewNormalMatrix);
                    plane.normal.toArray(dstArray, i4);
                    dstArray[i4 + 3] = plane.constant;
                }
            }
            uniform.value = dstArray;
            uniform.needsUpdate = true;
        }
        scope.numPlanes = nPlanes;
        scope.numIntersection = 0;
        return dstArray;
    }
}
function $2d9d8c9fc2282acc$var$WebGLCubeMaps(renderer) {
    let cubemaps = new WeakMap();
    function mapTextureMapping(texture, mapping) {
        if (mapping === $2d9d8c9fc2282acc$export$d64030b316d3b087) texture.mapping = $2d9d8c9fc2282acc$export$8759762a6477f2c4;
        else if (mapping === $2d9d8c9fc2282acc$export$ee99d97d46898098) texture.mapping = $2d9d8c9fc2282acc$export$dc59f8aed047f61d;
        return texture;
    }
    function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            const mapping = texture.mapping;
            if (mapping === $2d9d8c9fc2282acc$export$d64030b316d3b087 || mapping === $2d9d8c9fc2282acc$export$ee99d97d46898098) {
                if (cubemaps.has(texture)) {
                    const cubemap = cubemaps.get(texture).texture;
                    return mapTextureMapping(cubemap, texture.mapping);
                } else {
                    const image = texture.image;
                    if (image && image.height > 0) {
                        const currentRenderTarget = renderer.getRenderTarget();
                        const renderTarget = new $2d9d8c9fc2282acc$export$ac386671d651941e(image.height / 2);
                        renderTarget.fromEquirectangularTexture(renderer, texture);
                        cubemaps.set(texture, renderTarget);
                        renderer.setRenderTarget(currentRenderTarget);
                        texture.addEventListener('dispose', onTextureDispose);
                        return mapTextureMapping(renderTarget.texture, texture.mapping);
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener('dispose', onTextureDispose);
        const cubemap = cubemaps.get(texture);
        if (cubemap !== undefined) {
            cubemaps.delete(texture);
            cubemap.dispose();
        }
    }
    function dispose() {
        cubemaps = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
class $2d9d8c9fc2282acc$export$9ebf355ee4ed261b extends $2d9d8c9fc2282acc$export$79f141de891a5fed {
    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000){
        super();
        this.type = 'OrthographicCamera';
        this.zoom = 1;
        this.view = null;
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.near = near;
        this.far = far;
        this.updateProjectionMatrix();
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        this.left = source.left;
        this.right = source.right;
        this.top = source.top;
        this.bottom = source.bottom;
        this.near = source.near;
        this.far = source.far;
        this.zoom = source.zoom;
        this.view = source.view === null ? null : Object.assign({
        }, source.view);
        return this;
    }
    setViewOffset(fullWidth, fullHeight, x, y, width, height) {
        if (this.view === null) this.view = {
            enabled: true,
            fullWidth: 1,
            fullHeight: 1,
            offsetX: 0,
            offsetY: 0,
            width: 1,
            height: 1
        };
        this.view.enabled = true;
        this.view.fullWidth = fullWidth;
        this.view.fullHeight = fullHeight;
        this.view.offsetX = x;
        this.view.offsetY = y;
        this.view.width = width;
        this.view.height = height;
        this.updateProjectionMatrix();
    }
    clearViewOffset() {
        if (this.view !== null) this.view.enabled = false;
        this.updateProjectionMatrix();
    }
    updateProjectionMatrix() {
        const dx = (this.right - this.left) / (2 * this.zoom);
        const dy = (this.top - this.bottom) / (2 * this.zoom);
        const cx = (this.right + this.left) / 2;
        const cy = (this.top + this.bottom) / 2;
        let left = cx - dx;
        let right = cx + dx;
        let top = cy + dy;
        let bottom = cy - dy;
        if (this.view !== null && this.view.enabled) {
            const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
            const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
            left += scaleW * this.view.offsetX;
            right = left + scaleW * this.view.width;
            top -= scaleH * this.view.offsetY;
            bottom = top - scaleH * this.view.height;
        }
        this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);
        this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.zoom = this.zoom;
        data.object.left = this.left;
        data.object.right = this.right;
        data.object.top = this.top;
        data.object.bottom = this.bottom;
        data.object.near = this.near;
        data.object.far = this.far;
        if (this.view !== null) data.object.view = Object.assign({
        }, this.view);
        return data;
    }
}
$2d9d8c9fc2282acc$export$9ebf355ee4ed261b.prototype.isOrthographicCamera = true;
class $2d9d8c9fc2282acc$export$21c421a2e1df9d22 extends $2d9d8c9fc2282acc$export$83c7d75d550a8b0d {
    constructor(parameters){
        super(parameters);
        this.type = 'RawShaderMaterial';
    }
}
$2d9d8c9fc2282acc$export$21c421a2e1df9d22.prototype.isRawShaderMaterial = true;
const $2d9d8c9fc2282acc$var$LOD_MIN = 4;
const $2d9d8c9fc2282acc$var$LOD_MAX = 8;
const $2d9d8c9fc2282acc$var$SIZE_MAX = Math.pow(2, $2d9d8c9fc2282acc$var$LOD_MAX);
// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const $2d9d8c9fc2282acc$var$EXTRA_LOD_SIGMA = [
    0.125,
    0.215,
    0.35,
    0.446,
    0.526,
    0.582
];
const $2d9d8c9fc2282acc$var$TOTAL_LODS = $2d9d8c9fc2282acc$var$LOD_MAX - $2d9d8c9fc2282acc$var$LOD_MIN + 1 + $2d9d8c9fc2282acc$var$EXTRA_LOD_SIGMA.length;
// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const $2d9d8c9fc2282acc$var$MAX_SAMPLES = 20;
const $2d9d8c9fc2282acc$var$ENCODINGS = {
    [$2d9d8c9fc2282acc$export$7207336e4151a112]: 0,
    [$2d9d8c9fc2282acc$export$f32388edbb32674]: 1
};
const $2d9d8c9fc2282acc$var$_flatCamera = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$9ebf355ee4ed261b();
const { _lodPlanes: $2d9d8c9fc2282acc$var$_lodPlanes , _sizeLods: $2d9d8c9fc2282acc$var$_sizeLods , _sigmas: $2d9d8c9fc2282acc$var$_sigmas  } = /*@__PURE__*/ $2d9d8c9fc2282acc$var$_createPlanes();
const $2d9d8c9fc2282acc$var$_clearColor = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$892596cec99bc70e();
let $2d9d8c9fc2282acc$var$_oldTarget = null;
// Golden Ratio
const $2d9d8c9fc2282acc$var$PHI = (1 + Math.sqrt(5)) / 2;
const $2d9d8c9fc2282acc$var$INV_PHI = 1 / $2d9d8c9fc2282acc$var$PHI;
// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const $2d9d8c9fc2282acc$var$_axisDirections = [
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 1, 1),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(-1, 1, 1),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 1, -1),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(-1, 1, -1),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, $2d9d8c9fc2282acc$var$PHI, $2d9d8c9fc2282acc$var$INV_PHI),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, $2d9d8c9fc2282acc$var$PHI, -$2d9d8c9fc2282acc$var$INV_PHI),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699($2d9d8c9fc2282acc$var$INV_PHI, 0, $2d9d8c9fc2282acc$var$PHI),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(-$2d9d8c9fc2282acc$var$INV_PHI, 0, $2d9d8c9fc2282acc$var$PHI),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699($2d9d8c9fc2282acc$var$PHI, $2d9d8c9fc2282acc$var$INV_PHI, 0),
    /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699(-$2d9d8c9fc2282acc$var$PHI, $2d9d8c9fc2282acc$var$INV_PHI, 0)
];
/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/ class $2d9d8c9fc2282acc$export$6add42717753e221 {
    constructor(renderer){
        this._renderer = renderer;
        this._pingPongRenderTarget = null;
        this._blurMaterial = $2d9d8c9fc2282acc$var$_getBlurShader($2d9d8c9fc2282acc$var$MAX_SAMPLES);
        this._equirectShader = null;
        this._cubemapShader = null;
        this._compileMaterial(this._blurMaterial);
    }
    /**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */ fromScene(scene, sigma = 0, near = 0.1, far = 100) {
        $2d9d8c9fc2282acc$var$_oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = this._allocateTargets();
        this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);
        if (sigma > 0) this._blur(cubeUVRenderTarget, 0, 0, sigma);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    /**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromEquirectangular(equirectangular) {
        return this._fromTexture(equirectangular);
    }
    /**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */ fromCubemap(cubemap) {
        return this._fromTexture(cubemap);
    }
    /**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileCubemapShader() {
        if (this._cubemapShader === null) {
            this._cubemapShader = $2d9d8c9fc2282acc$var$_getCubemapShader();
            this._compileMaterial(this._cubemapShader);
        }
    }
    /**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */ compileEquirectangularShader() {
        if (this._equirectShader === null) {
            this._equirectShader = $2d9d8c9fc2282acc$var$_getEquirectShader();
            this._compileMaterial(this._equirectShader);
        }
    }
    /**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */ dispose() {
        this._blurMaterial.dispose();
        if (this._cubemapShader !== null) this._cubemapShader.dispose();
        if (this._equirectShader !== null) this._equirectShader.dispose();
        for(let i82 = 0; i82 < $2d9d8c9fc2282acc$var$_lodPlanes.length; i82++)$2d9d8c9fc2282acc$var$_lodPlanes[i82].dispose();
    }
    // private interface
    _cleanup(outputTarget) {
        this._pingPongRenderTarget.dispose();
        this._renderer.setRenderTarget($2d9d8c9fc2282acc$var$_oldTarget);
        outputTarget.scissorTest = false;
        $2d9d8c9fc2282acc$var$_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
    }
    _fromTexture(texture) {
        $2d9d8c9fc2282acc$var$_oldTarget = this._renderer.getRenderTarget();
        const cubeUVRenderTarget = this._allocateTargets(texture);
        this._textureToCubeUV(texture, cubeUVRenderTarget);
        this._applyPMREM(cubeUVRenderTarget);
        this._cleanup(cubeUVRenderTarget);
        return cubeUVRenderTarget;
    }
    _allocateTargets(texture) {
        const params = {
            magFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
            minFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
            generateMipmaps: false,
            type: $2d9d8c9fc2282acc$export$2697304443f382bc,
            format: $2d9d8c9fc2282acc$export$3f8bb04b555a363c,
            encoding: $2d9d8c9fc2282acc$export$7207336e4151a112,
            depthBuffer: false
        };
        const cubeUVRenderTarget = $2d9d8c9fc2282acc$var$_createRenderTarget(params);
        cubeUVRenderTarget.depthBuffer = texture ? false : true;
        this._pingPongRenderTarget = $2d9d8c9fc2282acc$var$_createRenderTarget(params);
        return cubeUVRenderTarget;
    }
    _compileMaterial(material) {
        const tmpMesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5($2d9d8c9fc2282acc$var$_lodPlanes[0], material);
        this._renderer.compile(tmpMesh, $2d9d8c9fc2282acc$var$_flatCamera);
    }
    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {
        const fov = 90;
        const aspect = 1;
        const cubeCamera = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7(fov, aspect, near, far);
        const upSign = [
            1,
            -1,
            1,
            1,
            1,
            1
        ];
        const forwardSign = [
            1,
            1,
            1,
            -1,
            -1,
            -1
        ];
        const renderer = this._renderer;
        const originalAutoClear = renderer.autoClear;
        const toneMapping = renderer.toneMapping;
        renderer.getClearColor($2d9d8c9fc2282acc$var$_clearColor);
        renderer.toneMapping = $2d9d8c9fc2282acc$export$9fcb6b4294603b2;
        renderer.autoClear = false;
        const backgroundMaterial = new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5({
            name: 'PMREM.Background',
            side: $2d9d8c9fc2282acc$export$d9f0486e75b5ace,
            depthWrite: false,
            depthTest: false
        });
        const backgroundBox = new $2d9d8c9fc2282acc$export$e176487c05830cc5(new $2d9d8c9fc2282acc$export$ab3456a079aa7d80(), backgroundMaterial);
        let useSolidColor = false;
        const background = scene.background;
        if (background) {
            if (background.isColor) {
                backgroundMaterial.color.copy(background);
                scene.background = null;
                useSolidColor = true;
            }
        } else {
            backgroundMaterial.color.copy($2d9d8c9fc2282acc$var$_clearColor);
            useSolidColor = true;
        }
        for(let i83 = 0; i83 < 6; i83++){
            const col = i83 % 3;
            if (col == 0) {
                cubeCamera.up.set(0, upSign[i83], 0);
                cubeCamera.lookAt(forwardSign[i83], 0, 0);
            } else if (col == 1) {
                cubeCamera.up.set(0, 0, upSign[i83]);
                cubeCamera.lookAt(0, forwardSign[i83], 0);
            } else {
                cubeCamera.up.set(0, upSign[i83], 0);
                cubeCamera.lookAt(0, 0, forwardSign[i83]);
            }
            $2d9d8c9fc2282acc$var$_setViewport(cubeUVRenderTarget, col * $2d9d8c9fc2282acc$var$SIZE_MAX, i83 > 2 ? $2d9d8c9fc2282acc$var$SIZE_MAX : 0, $2d9d8c9fc2282acc$var$SIZE_MAX, $2d9d8c9fc2282acc$var$SIZE_MAX);
            renderer.setRenderTarget(cubeUVRenderTarget);
            if (useSolidColor) renderer.render(backgroundBox, cubeCamera);
            renderer.render(scene, cubeCamera);
        }
        backgroundBox.geometry.dispose();
        backgroundBox.material.dispose();
        renderer.toneMapping = toneMapping;
        renderer.autoClear = originalAutoClear;
        scene.background = background;
    }
    _setEncoding(uniform, texture) {
        if (this._renderer.capabilities.isWebGL2 === true && texture.format === $2d9d8c9fc2282acc$export$3f8bb04b555a363c && texture.type === $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10 && texture.encoding === $2d9d8c9fc2282acc$export$f32388edbb32674) uniform.value = $2d9d8c9fc2282acc$var$ENCODINGS[$2d9d8c9fc2282acc$export$7207336e4151a112];
        else uniform.value = $2d9d8c9fc2282acc$var$ENCODINGS[texture.encoding];
    }
    _textureToCubeUV(texture, cubeUVRenderTarget) {
        const renderer = this._renderer;
        const isCubeTexture = texture.mapping === $2d9d8c9fc2282acc$export$8759762a6477f2c4 || texture.mapping === $2d9d8c9fc2282acc$export$dc59f8aed047f61d;
        if (isCubeTexture) {
            if (this._cubemapShader == null) this._cubemapShader = $2d9d8c9fc2282acc$var$_getCubemapShader();
        } else if (this._equirectShader == null) this._equirectShader = $2d9d8c9fc2282acc$var$_getEquirectShader();
        const material = isCubeTexture ? this._cubemapShader : this._equirectShader;
        const mesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5($2d9d8c9fc2282acc$var$_lodPlanes[0], material);
        const uniforms = material.uniforms;
        uniforms['envMap'].value = texture;
        if (!isCubeTexture) uniforms['texelSize'].value.set(1 / texture.image.width, 1 / texture.image.height);
        this._setEncoding(uniforms['inputEncoding'], texture);
        $2d9d8c9fc2282acc$var$_setViewport(cubeUVRenderTarget, 0, 0, 3 * $2d9d8c9fc2282acc$var$SIZE_MAX, 2 * $2d9d8c9fc2282acc$var$SIZE_MAX);
        renderer.setRenderTarget(cubeUVRenderTarget);
        renderer.render(mesh, $2d9d8c9fc2282acc$var$_flatCamera);
    }
    _applyPMREM(cubeUVRenderTarget) {
        const renderer = this._renderer;
        const autoClear = renderer.autoClear;
        renderer.autoClear = false;
        for(let i84 = 1; i84 < $2d9d8c9fc2282acc$var$TOTAL_LODS; i84++){
            const sigma = Math.sqrt($2d9d8c9fc2282acc$var$_sigmas[i84] * $2d9d8c9fc2282acc$var$_sigmas[i84] - $2d9d8c9fc2282acc$var$_sigmas[i84 - 1] * $2d9d8c9fc2282acc$var$_sigmas[i84 - 1]);
            const poleAxis = $2d9d8c9fc2282acc$var$_axisDirections[(i84 - 1) % $2d9d8c9fc2282acc$var$_axisDirections.length];
            this._blur(cubeUVRenderTarget, i84 - 1, i84, sigma, poleAxis);
        }
        renderer.autoClear = autoClear;
    }
    /**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */ _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
        const pingPongRenderTarget = this._pingPongRenderTarget;
        this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);
        this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
    }
    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
        const renderer = this._renderer;
        const blurMaterial = this._blurMaterial;
        if (direction !== 'latitudinal' && direction !== 'longitudinal') console.error('blur direction must be either latitudinal or longitudinal!');
        // Number of standard deviations at which to cut off the discrete approximation.
        const STANDARD_DEVIATIONS = 3;
        const blurMesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5($2d9d8c9fc2282acc$var$_lodPlanes[lodOut], blurMaterial);
        const blurUniforms = blurMaterial.uniforms;
        const pixels = $2d9d8c9fc2282acc$var$_sizeLods[lodIn] - 1;
        const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * $2d9d8c9fc2282acc$var$MAX_SAMPLES - 1);
        const sigmaPixels = sigmaRadians / radiansPerPixel;
        const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : $2d9d8c9fc2282acc$var$MAX_SAMPLES;
        if (samples > $2d9d8c9fc2282acc$var$MAX_SAMPLES) console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${$2d9d8c9fc2282acc$var$MAX_SAMPLES}`);
        const weights = [];
        let sum = 0;
        for(let i86 = 0; i86 < $2d9d8c9fc2282acc$var$MAX_SAMPLES; ++i86){
            const x = i86 / sigmaPixels;
            const weight = Math.exp(-x * x / 2);
            weights.push(weight);
            if (i86 == 0) sum += weight;
            else if (i86 < samples) sum += 2 * weight;
        }
        for(let i85 = 0; i85 < weights.length; i85++)weights[i85] = weights[i85] / sum;
        blurUniforms['envMap'].value = targetIn.texture;
        blurUniforms['samples'].value = samples;
        blurUniforms['weights'].value = weights;
        blurUniforms['latitudinal'].value = direction === 'latitudinal';
        if (poleAxis) blurUniforms['poleAxis'].value = poleAxis;
        blurUniforms['dTheta'].value = radiansPerPixel;
        blurUniforms['mipInt'].value = $2d9d8c9fc2282acc$var$LOD_MAX - lodIn;
        const outputSize = $2d9d8c9fc2282acc$var$_sizeLods[lodOut];
        const x = 3 * Math.max(0, $2d9d8c9fc2282acc$var$SIZE_MAX - 2 * outputSize);
        const y = (lodOut === 0 ? 0 : 2 * $2d9d8c9fc2282acc$var$SIZE_MAX) + 2 * outputSize * (lodOut > $2d9d8c9fc2282acc$var$LOD_MAX - $2d9d8c9fc2282acc$var$LOD_MIN ? lodOut - $2d9d8c9fc2282acc$var$LOD_MAX + $2d9d8c9fc2282acc$var$LOD_MIN : 0);
        $2d9d8c9fc2282acc$var$_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);
        renderer.setRenderTarget(targetOut);
        renderer.render(blurMesh, $2d9d8c9fc2282acc$var$_flatCamera);
    }
}
function $2d9d8c9fc2282acc$var$_createPlanes() {
    const _lodPlanes = [];
    const _sizeLods = [];
    const _sigmas = [];
    let lod = $2d9d8c9fc2282acc$var$LOD_MAX;
    for(let i87 = 0; i87 < $2d9d8c9fc2282acc$var$TOTAL_LODS; i87++){
        const sizeLod = Math.pow(2, lod);
        _sizeLods.push(sizeLod);
        let sigma = 1 / sizeLod;
        if (i87 > $2d9d8c9fc2282acc$var$LOD_MAX - $2d9d8c9fc2282acc$var$LOD_MIN) sigma = $2d9d8c9fc2282acc$var$EXTRA_LOD_SIGMA[i87 - $2d9d8c9fc2282acc$var$LOD_MAX + $2d9d8c9fc2282acc$var$LOD_MIN - 1];
        else if (i87 == 0) sigma = 0;
        _sigmas.push(sigma);
        const texelSize = 1 / (sizeLod - 1);
        const min = -texelSize / 2;
        const max = 1 + texelSize / 2;
        const uv1 = [
            min,
            min,
            max,
            min,
            max,
            max,
            min,
            min,
            max,
            max,
            min,
            max
        ];
        const cubeFaces = 6;
        const vertices = 6;
        const positionSize = 3;
        const uvSize = 2;
        const faceIndexSize = 1;
        const position = new Float32Array(positionSize * vertices * cubeFaces);
        const uv = new Float32Array(uvSize * vertices * cubeFaces);
        const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
        for(let face = 0; face < cubeFaces; face++){
            const x = face % 3 * 2 / 3 - 1;
            const y = face > 2 ? 0 : -1;
            const coordinates = [
                x,
                y,
                0,
                x + 2 / 3,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y,
                0,
                x + 2 / 3,
                y + 1,
                0,
                x,
                y + 1,
                0
            ];
            position.set(coordinates, positionSize * vertices * face);
            uv.set(uv1, uvSize * vertices * face);
            const fill = [
                face,
                face,
                face,
                face,
                face,
                face
            ];
            faceIndex.set(fill, faceIndexSize * vertices * face);
        }
        const planes = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        planes.setAttribute('position', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(position, positionSize));
        planes.setAttribute('uv', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(uv, uvSize));
        planes.setAttribute('faceIndex', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(faceIndex, faceIndexSize));
        _lodPlanes.push(planes);
        if (lod > $2d9d8c9fc2282acc$var$LOD_MIN) lod--;
    }
    return {
        _lodPlanes: _lodPlanes,
        _sizeLods: _sizeLods,
        _sigmas: _sigmas
    };
}
function $2d9d8c9fc2282acc$var$_createRenderTarget(params) {
    const cubeUVRenderTarget = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(3 * $2d9d8c9fc2282acc$var$SIZE_MAX, 3 * $2d9d8c9fc2282acc$var$SIZE_MAX, params);
    cubeUVRenderTarget.texture.mapping = $2d9d8c9fc2282acc$export$dbf3e70ff37af79;
    cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
    cubeUVRenderTarget.scissorTest = true;
    return cubeUVRenderTarget;
}
function $2d9d8c9fc2282acc$var$_setViewport(target, x, y, width, height) {
    target.viewport.set(x, y, width, height);
    target.scissor.set(x, y, width, height);
}
function $2d9d8c9fc2282acc$var$_getBlurShader(maxSamples) {
    const weights = new Float32Array(maxSamples);
    const poleAxis = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0);
    const shaderMaterial = new $2d9d8c9fc2282acc$export$21c421a2e1df9d22({
        name: 'SphericalGaussianBlur',
        defines: {
            'n': maxSamples
        },
        uniforms: {
            'envMap': {
                value: null
            },
            'samples': {
                value: 1
            },
            'weights': {
                value: weights
            },
            'latitudinal': {
                value: false
            },
            'dTheta': {
                value: 0
            },
            'mipInt': {
                value: 0
            },
            'poleAxis': {
                value: poleAxis
            }
        },
        vertexShader: $2d9d8c9fc2282acc$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${$2d9d8c9fc2282acc$var$_getEncodings()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,
        blending: $2d9d8c9fc2282acc$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $2d9d8c9fc2282acc$var$_getEquirectShader() {
    const texelSize = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
    const shaderMaterial = new $2d9d8c9fc2282acc$export$21c421a2e1df9d22({
        name: 'EquirectangularToCubeUV',
        uniforms: {
            'envMap': {
                value: null
            },
            'texelSize': {
                value: texelSize
            },
            'inputEncoding': {
                value: $2d9d8c9fc2282acc$var$ENCODINGS[$2d9d8c9fc2282acc$export$7207336e4151a112]
            }
        },
        vertexShader: $2d9d8c9fc2282acc$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${$2d9d8c9fc2282acc$var$_getEncodings()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

			}
		`,
        blending: $2d9d8c9fc2282acc$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $2d9d8c9fc2282acc$var$_getCubemapShader() {
    const shaderMaterial = new $2d9d8c9fc2282acc$export$21c421a2e1df9d22({
        name: 'CubemapToCubeUV',
        uniforms: {
            'envMap': {
                value: null
            },
            'inputEncoding': {
                value: $2d9d8c9fc2282acc$var$ENCODINGS[$2d9d8c9fc2282acc$export$7207336e4151a112]
            }
        },
        vertexShader: $2d9d8c9fc2282acc$var$_getCommonVertexShader(),
        fragmentShader: /* glsl */ `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${$2d9d8c9fc2282acc$var$_getEncodings()}

			void main() {

				gl_FragColor = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) );

			}
		`,
        blending: $2d9d8c9fc2282acc$export$63b8d6b580fc65ba,
        depthTest: false,
        depthWrite: false
    });
    return shaderMaterial;
}
function $2d9d8c9fc2282acc$var$_getCommonVertexShader() {
    return(/* glsl */ `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`);
}
function $2d9d8c9fc2282acc$var$_getEncodings() {
    return(/* glsl */ `

		uniform int inputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else {

				return sRGBToLinear( value );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`);
}
function $2d9d8c9fc2282acc$var$WebGLCubeUVMaps(renderer) {
    let cubeUVmaps = new WeakMap();
    let pmremGenerator = null;
    function get(texture) {
        if (texture && texture.isTexture && texture.isRenderTargetTexture === false) {
            const mapping = texture.mapping;
            const isEquirectMap = mapping === $2d9d8c9fc2282acc$export$d64030b316d3b087 || mapping === $2d9d8c9fc2282acc$export$ee99d97d46898098;
            const isCubeMap = mapping === $2d9d8c9fc2282acc$export$8759762a6477f2c4 || mapping === $2d9d8c9fc2282acc$export$dc59f8aed047f61d;
            if (isEquirectMap || isCubeMap) {
                // equirect/cube map to cubeUV conversion
                if (cubeUVmaps.has(texture)) return cubeUVmaps.get(texture).texture;
                else {
                    const image = texture.image;
                    if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
                        const currentRenderTarget = renderer.getRenderTarget();
                        if (pmremGenerator === null) pmremGenerator = new $2d9d8c9fc2282acc$export$6add42717753e221(renderer);
                        const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture) : pmremGenerator.fromCubemap(texture);
                        cubeUVmaps.set(texture, renderTarget);
                        renderer.setRenderTarget(currentRenderTarget);
                        texture.addEventListener('dispose', onTextureDispose);
                        return renderTarget.texture;
                    } else // image not yet ready. try the conversion next frame
                    return null;
                }
            }
        }
        return texture;
    }
    function isCubeTextureComplete(image) {
        let count = 0;
        const length = 6;
        for(let i88 = 0; i88 < length; i88++)if (image[i88] !== undefined) count++;
        return count === length;
    }
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener('dispose', onTextureDispose);
        const cubemapUV = cubeUVmaps.get(texture);
        if (cubemapUV !== undefined) {
            cubeUVmaps.delete(texture);
            cubemapUV.dispose();
        }
    }
    function dispose() {
        cubeUVmaps = new WeakMap();
        if (pmremGenerator !== null) {
            pmremGenerator.dispose();
            pmremGenerator = null;
        }
    }
    return {
        get: get,
        dispose: dispose
    };
}
function $2d9d8c9fc2282acc$var$WebGLExtensions(gl) {
    const extensions = {
    };
    function getExtension(name) {
        if (extensions[name] !== undefined) return extensions[name];
        let extension;
        switch(name){
            case 'WEBGL_depth_texture':
                extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
                break;
            case 'EXT_texture_filter_anisotropic':
                extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
                break;
            case 'WEBGL_compressed_texture_s3tc':
                extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
                break;
            case 'WEBGL_compressed_texture_pvrtc':
                extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
                break;
            default:
                extension = gl.getExtension(name);
        }
        extensions[name] = extension;
        return extension;
    }
    return {
        has: function(name) {
            return getExtension(name) !== null;
        },
        init: function(capabilities) {
            if (capabilities.isWebGL2) getExtension('EXT_color_buffer_float');
            else {
                getExtension('WEBGL_depth_texture');
                getExtension('OES_texture_float');
                getExtension('OES_texture_half_float');
                getExtension('OES_texture_half_float_linear');
                getExtension('OES_standard_derivatives');
                getExtension('OES_element_index_uint');
                getExtension('OES_vertex_array_object');
                getExtension('ANGLE_instanced_arrays');
            }
            getExtension('OES_texture_float_linear');
            getExtension('EXT_color_buffer_half_float');
            getExtension('WEBGL_multisampled_render_to_texture');
        },
        get: function(name) {
            const extension = getExtension(name);
            if (extension === null) console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');
            return extension;
        }
    };
}
function $2d9d8c9fc2282acc$var$WebGLGeometries(gl, attributes, info, bindingStates) {
    const geometries = {
    };
    const wireframeAttributes = new WeakMap();
    function onGeometryDispose(event) {
        const geometry = event.target;
        if (geometry.index !== null) attributes.remove(geometry.index);
        for(const name in geometry.attributes)attributes.remove(geometry.attributes[name]);
        geometry.removeEventListener('dispose', onGeometryDispose);
        delete geometries[geometry.id];
        const attribute = wireframeAttributes.get(geometry);
        if (attribute) {
            attributes.remove(attribute);
            wireframeAttributes.delete(geometry);
        }
        bindingStates.releaseStatesOfGeometry(geometry);
        if (geometry.isInstancedBufferGeometry === true) delete geometry._maxInstanceCount;
        //
        info.memory.geometries--;
    }
    function get(object, geometry) {
        if (geometries[geometry.id] === true) return geometry;
        geometry.addEventListener('dispose', onGeometryDispose);
        geometries[geometry.id] = true;
        info.memory.geometries++;
        return geometry;
    }
    function update(geometry) {
        const geometryAttributes = geometry.attributes;
        // Updating index buffer in VAO now. See WebGLBindingStates.
        for(const name in geometryAttributes)attributes.update(geometryAttributes[name], 34962);
        // morph targets
        const morphAttributes = geometry.morphAttributes;
        for(const name3 in morphAttributes){
            const array = morphAttributes[name3];
            for(let i89 = 0, l = array.length; i89 < l; i89++)attributes.update(array[i89], 34962);
        }
    }
    function updateWireframeAttribute(geometry) {
        const indices = [];
        const geometryIndex = geometry.index;
        const geometryPosition = geometry.attributes.position;
        let version = 0;
        if (geometryIndex !== null) {
            const array = geometryIndex.array;
            version = geometryIndex.version;
            for(let i90 = 0, l = array.length; i90 < l; i90 += 3){
                const a = array[i90 + 0];
                const b = array[i90 + 1];
                const c = array[i90 + 2];
                indices.push(a, b, b, c, c, a);
            }
        } else {
            const array = geometryPosition.array;
            version = geometryPosition.version;
            for(let i91 = 0, l = array.length / 3 - 1; i91 < l; i91 += 3){
                const a = i91 + 0;
                const b = i91 + 1;
                const c = i91 + 2;
                indices.push(a, b, b, c, c, a);
            }
        }
        const attribute = new ($2d9d8c9fc2282acc$var$arrayMax(indices) > 65535 ? $2d9d8c9fc2282acc$export$7eb8c9fa25cd5bd6 : $2d9d8c9fc2282acc$export$640a853f68025f2e)(indices, 1);
        attribute.version = version;
        // Updating index buffer in VAO now. See WebGLBindingStates
        //
        const previousAttribute = wireframeAttributes.get(geometry);
        if (previousAttribute) attributes.remove(previousAttribute);
        //
        wireframeAttributes.set(geometry, attribute);
    }
    function getWireframeAttribute(geometry) {
        const currentAttribute = wireframeAttributes.get(geometry);
        if (currentAttribute) {
            const geometryIndex = geometry.index;
            if (geometryIndex !== null) // if the attribute is obsolete, create a new one
            {
                if (currentAttribute.version < geometryIndex.version) updateWireframeAttribute(geometry);
            }
        } else updateWireframeAttribute(geometry);
        return wireframeAttributes.get(geometry);
    }
    return {
        get: get,
        update: update,
        getWireframeAttribute: getWireframeAttribute
    };
}
function $2d9d8c9fc2282acc$var$WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    let mode;
    function setMode(value) {
        mode = value;
    }
    let type, bytesPerElement;
    function setIndex(value) {
        type = value.type;
        bytesPerElement = value.bytesPerElement;
    }
    function render(start, count) {
        gl.drawElements(mode, count, type, start * bytesPerElement);
        info.update(count, mode, 1);
    }
    function renderInstances(start, count, primcount) {
        if (primcount === 0) return;
        let extension, methodName;
        if (isWebGL2) {
            extension = gl;
            methodName = 'drawElementsInstanced';
        } else {
            extension = extensions.get('ANGLE_instanced_arrays');
            methodName = 'drawElementsInstancedANGLE';
            if (extension === null) {
                console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                return;
            }
        }
        extension[methodName](mode, count, type, start * bytesPerElement, primcount);
        info.update(count, mode, primcount);
    }
    //
    this.setMode = setMode;
    this.setIndex = setIndex;
    this.render = render;
    this.renderInstances = renderInstances;
}
function $2d9d8c9fc2282acc$var$WebGLInfo(gl) {
    const memory = {
        geometries: 0,
        textures: 0
    };
    const render = {
        frame: 0,
        calls: 0,
        triangles: 0,
        points: 0,
        lines: 0
    };
    function update(count, mode, instanceCount) {
        render.calls++;
        switch(mode){
            case 4:
                render.triangles += instanceCount * (count / 3);
                break;
            case 1:
                render.lines += instanceCount * (count / 2);
                break;
            case 3:
                render.lines += instanceCount * (count - 1);
                break;
            case 2:
                render.lines += instanceCount * count;
                break;
            case 0:
                render.points += instanceCount * count;
                break;
            default:
                console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
                break;
        }
    }
    function reset() {
        render.frame++;
        render.calls = 0;
        render.triangles = 0;
        render.points = 0;
        render.lines = 0;
    }
    return {
        memory: memory,
        render: render,
        programs: null,
        autoReset: true,
        reset: reset,
        update: update
    };
}
class $2d9d8c9fc2282acc$export$e38bf4541665bbbd extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(data = null, width = 1, height = 1, depth = 1){
        super(null);
        this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        };
        this.magFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.minFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.wrapR = $2d9d8c9fc2282acc$export$9d9334239a5a5e06;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
$2d9d8c9fc2282acc$export$e38bf4541665bbbd.prototype.isDataTexture2DArray = true;
function $2d9d8c9fc2282acc$var$numericalSort(a, b) {
    return a[0] - b[0];
}
function $2d9d8c9fc2282acc$var$absNumericalSort(a, b) {
    return Math.abs(b[1]) - Math.abs(a[1]);
}
function $2d9d8c9fc2282acc$var$denormalize(morph, attribute) {
    let denominator = 1;
    const array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;
    if (array instanceof Int8Array) denominator = 127;
    else if (array instanceof Int16Array) denominator = 32767;
    else if (array instanceof Int32Array) denominator = 2147483647;
    else console.error('THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array);
    morph.divideScalar(denominator);
}
function $2d9d8c9fc2282acc$var$WebGLMorphtargets(gl, capabilities, textures) {
    const influencesList = {
    };
    const morphInfluences = new Float32Array(8);
    const morphTextures = new WeakMap();
    const morph = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
    const workInfluences = [];
    for(let i92 = 0; i92 < 8; i92++)workInfluences[i92] = [
        i92,
        0
    ];
    function update(object, geometry, material, program) {
        const objectInfluences = object.morphTargetInfluences;
        if (capabilities.isWebGL2 === true) {
            // instead of using attributes, the WebGL 2 code path encodes morph targets
            // into an array of data textures. Each layer represents a single morph target.
            const numberOfMorphTargets = geometry.morphAttributes.position.length;
            let entry = morphTextures.get(geometry);
            if (entry === undefined || entry.count !== numberOfMorphTargets) {
                if (entry !== undefined) entry.texture.dispose();
                const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
                const morphTargets = geometry.morphAttributes.position;
                const morphNormals = geometry.morphAttributes.normal || [];
                const numberOfVertices = geometry.attributes.position.count;
                const numberOfVertexData = hasMorphNormals === true ? 2 : 1; // (v,n) vs. (v)
                let width = numberOfVertices * numberOfVertexData;
                let height = 1;
                if (width > capabilities.maxTextureSize) {
                    height = Math.ceil(width / capabilities.maxTextureSize);
                    width = capabilities.maxTextureSize;
                }
                const buffer = new Float32Array(width * height * 4 * numberOfMorphTargets);
                const texture = new $2d9d8c9fc2282acc$export$e38bf4541665bbbd(buffer, width, height, numberOfMorphTargets);
                texture.format = $2d9d8c9fc2282acc$export$3f8bb04b555a363c; // using RGBA since RGB might be emulated (and is thus slower)
                texture.type = $2d9d8c9fc2282acc$export$f6d331659b644596;
                texture.needsUpdate = true;
                // fill buffer
                const vertexDataStride = numberOfVertexData * 4;
                for(let i93 = 0; i93 < numberOfMorphTargets; i93++){
                    const morphTarget = morphTargets[i93];
                    const morphNormal = morphNormals[i93];
                    const offset = width * height * 4 * i93;
                    for(let j = 0; j < morphTarget.count; j++){
                        morph.fromBufferAttribute(morphTarget, j);
                        if (morphTarget.normalized === true) $2d9d8c9fc2282acc$var$denormalize(morph, morphTarget);
                        const stride = j * vertexDataStride;
                        buffer[offset + stride + 0] = morph.x;
                        buffer[offset + stride + 1] = morph.y;
                        buffer[offset + stride + 2] = morph.z;
                        buffer[offset + stride + 3] = 0;
                        if (hasMorphNormals === true) {
                            morph.fromBufferAttribute(morphNormal, j);
                            if (morphNormal.normalized === true) $2d9d8c9fc2282acc$var$denormalize(morph, morphNormal);
                            buffer[offset + stride + 4] = morph.x;
                            buffer[offset + stride + 5] = morph.y;
                            buffer[offset + stride + 6] = morph.z;
                            buffer[offset + stride + 7] = 0;
                        }
                    }
                }
                entry = {
                    count: numberOfMorphTargets,
                    texture: texture,
                    size: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(width, height)
                };
                morphTextures.set(geometry, entry);
            }
            //
            let morphInfluencesSum = 0;
            for(let i94 = 0; i94 < objectInfluences.length; i94++)morphInfluencesSum += objectInfluences[i94];
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
            program.getUniforms().setValue(gl, 'morphTargetInfluences', objectInfluences);
            program.getUniforms().setValue(gl, 'morphTargetsTexture', entry.texture, textures);
            program.getUniforms().setValue(gl, 'morphTargetsTextureSize', entry.size);
        } else {
            // When object doesn't have morph target influences defined, we treat it as a 0-length array
            // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
            const length = objectInfluences === undefined ? 0 : objectInfluences.length;
            let influences = influencesList[geometry.id];
            if (influences === undefined || influences.length !== length) {
                // initialise list
                influences = [];
                for(let i97 = 0; i97 < length; i97++)influences[i97] = [
                    i97,
                    0
                ];
                influencesList[geometry.id] = influences;
            }
            // Collect influences
            for(let i98 = 0; i98 < length; i98++){
                const influence = influences[i98];
                influence[0] = i98;
                influence[1] = objectInfluences[i98];
            }
            influences.sort($2d9d8c9fc2282acc$var$absNumericalSort);
            for(let i95 = 0; i95 < 8; i95++)if (i95 < length && influences[i95][1]) {
                workInfluences[i95][0] = influences[i95][0];
                workInfluences[i95][1] = influences[i95][1];
            } else {
                workInfluences[i95][0] = Number.MAX_SAFE_INTEGER;
                workInfluences[i95][1] = 0;
            }
            workInfluences.sort($2d9d8c9fc2282acc$var$numericalSort);
            const morphTargets = geometry.morphAttributes.position;
            const morphNormals = geometry.morphAttributes.normal;
            let morphInfluencesSum = 0;
            for(let i96 = 0; i96 < 8; i96++){
                const influence = workInfluences[i96];
                const index = influence[0];
                const value = influence[1];
                if (index !== Number.MAX_SAFE_INTEGER && value) {
                    if (morphTargets && geometry.getAttribute('morphTarget' + i96) !== morphTargets[index]) geometry.setAttribute('morphTarget' + i96, morphTargets[index]);
                    if (morphNormals && geometry.getAttribute('morphNormal' + i96) !== morphNormals[index]) geometry.setAttribute('morphNormal' + i96, morphNormals[index]);
                    morphInfluences[i96] = value;
                    morphInfluencesSum += value;
                } else {
                    if (morphTargets && geometry.hasAttribute('morphTarget' + i96) === true) geometry.deleteAttribute('morphTarget' + i96);
                    if (morphNormals && geometry.hasAttribute('morphNormal' + i96) === true) geometry.deleteAttribute('morphNormal' + i96);
                    morphInfluences[i96] = 0;
                }
            }
            // GLSL shader uses formula baseinfluence * base + sum(target * influence)
            // This allows us to switch between absolute morphs and relative morphs without changing shader code
            // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
            const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
            program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);
            program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
        }
    }
    return {
        update: update
    };
}
function $2d9d8c9fc2282acc$var$WebGLObjects(gl, geometries, attributes, info) {
    let updateMap = new WeakMap();
    function update(object) {
        const frame = info.render.frame;
        const geometry = object.geometry;
        const buffergeometry = geometries.get(object, geometry);
        // Update once per frame
        if (updateMap.get(buffergeometry) !== frame) {
            geometries.update(buffergeometry);
            updateMap.set(buffergeometry, frame);
        }
        if (object.isInstancedMesh) {
            if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) object.addEventListener('dispose', onInstancedMeshDispose);
            attributes.update(object.instanceMatrix, 34962);
            if (object.instanceColor !== null) attributes.update(object.instanceColor, 34962);
        }
        return buffergeometry;
    }
    function dispose() {
        updateMap = new WeakMap();
    }
    function onInstancedMeshDispose(event) {
        const instancedMesh = event.target;
        instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);
        attributes.remove(instancedMesh.instanceMatrix);
        if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
    }
    return {
        update: update,
        dispose: dispose
    };
}
class $2d9d8c9fc2282acc$export$ef03cdc98340bab4 extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(data = null, width = 1, height = 1, depth = 1){
        // We're going to add .setXXX() methods for setting properties later.
        // Users can still set in DataTexture3D directly.
        //
        //	const texture = new THREE.DataTexture3D( data, width, height, depth );
        // 	texture.anisotropy = 16;
        //
        // See #14839
        super(null);
        this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        };
        this.magFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.minFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.wrapR = $2d9d8c9fc2282acc$export$9d9334239a5a5e06;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
$2d9d8c9fc2282acc$export$ef03cdc98340bab4.prototype.isDataTexture3D = true;
/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */ const $2d9d8c9fc2282acc$var$emptyTexture = new $2d9d8c9fc2282acc$export$5431306cf43de24a();
const $2d9d8c9fc2282acc$var$emptyTexture2dArray = new $2d9d8c9fc2282acc$export$e38bf4541665bbbd();
const $2d9d8c9fc2282acc$var$emptyTexture3d = new $2d9d8c9fc2282acc$export$ef03cdc98340bab4();
const $2d9d8c9fc2282acc$var$emptyCubeTexture = new $2d9d8c9fc2282acc$export$ee2e5a18258a4049();
// --- Utilities ---
// Array Caches (provide typed arrays for temporary by size)
const $2d9d8c9fc2282acc$var$arrayCacheF32 = [];
const $2d9d8c9fc2282acc$var$arrayCacheI32 = [];
// Float32Array caches used for uploading Matrix uniforms
const $2d9d8c9fc2282acc$var$mat4array = new Float32Array(16);
const $2d9d8c9fc2282acc$var$mat3array = new Float32Array(9);
const $2d9d8c9fc2282acc$var$mat2array = new Float32Array(4);
// Flattening for arrays of vectors and matrices
function $2d9d8c9fc2282acc$var$flatten(array, nBlocks, blockSize) {
    const firstElem = array[0];
    if (firstElem <= 0 || firstElem > 0) return array;
    // unoptimized: ! isNaN( firstElem )
    // see http://jacksondunstan.com/articles/983
    const n = nBlocks * blockSize;
    let r = $2d9d8c9fc2282acc$var$arrayCacheF32[n];
    if (r === undefined) {
        r = new Float32Array(n);
        $2d9d8c9fc2282acc$var$arrayCacheF32[n] = r;
    }
    if (nBlocks !== 0) {
        firstElem.toArray(r, 0);
        for(let i99 = 1, offset = 0; i99 !== nBlocks; ++i99){
            offset += blockSize;
            array[i99].toArray(r, offset);
        }
    }
    return r;
}
function $2d9d8c9fc2282acc$var$arraysEqual(a, b) {
    if (a.length !== b.length) return false;
    for(let i100 = 0, l = a.length; i100 < l; i100++){
        if (a[i100] !== b[i100]) return false;
    }
    return true;
}
function $2d9d8c9fc2282acc$var$copyArray(a, b) {
    for(let i101 = 0, l = b.length; i101 < l; i101++)a[i101] = b[i101];
}
// Texture unit allocation
function $2d9d8c9fc2282acc$var$allocTexUnits(textures, n) {
    let r = $2d9d8c9fc2282acc$var$arrayCacheI32[n];
    if (r === undefined) {
        r = new Int32Array(n);
        $2d9d8c9fc2282acc$var$arrayCacheI32[n] = r;
    }
    for(let i102 = 0; i102 !== n; ++i102)r[i102] = textures.allocateTextureUnit();
    return r;
}
// --- Setters ---
// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.
// Single scalar
function $2d9d8c9fc2282acc$var$setValueV1f(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1f(this.addr, v);
    cache[0] = v;
}
// Single float vector (from flat array or THREE.VectorN)
function $2d9d8c9fc2282acc$var$setValueV2f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y) {
            gl.uniform2f(this.addr, v.x, v.y);
            cache[0] = v.x;
            cache[1] = v.y;
        }
    } else {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
        gl.uniform2fv(this.addr, v);
        $2d9d8c9fc2282acc$var$copyArray(cache, v);
    }
}
function $2d9d8c9fc2282acc$var$setValueV3f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {
            gl.uniform3f(this.addr, v.x, v.y, v.z);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
        }
    } else if (v.r !== undefined) {
        if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {
            gl.uniform3f(this.addr, v.r, v.g, v.b);
            cache[0] = v.r;
            cache[1] = v.g;
            cache[2] = v.b;
        }
    } else {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
        gl.uniform3fv(this.addr, v);
        $2d9d8c9fc2282acc$var$copyArray(cache, v);
    }
}
function $2d9d8c9fc2282acc$var$setValueV4f(gl, v) {
    const cache = this.cache;
    if (v.x !== undefined) {
        if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {
            gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);
            cache[0] = v.x;
            cache[1] = v.y;
            cache[2] = v.z;
            cache[3] = v.w;
        }
    } else {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
        gl.uniform4fv(this.addr, v);
        $2d9d8c9fc2282acc$var$copyArray(cache, v);
    }
}
// Single matrix (from flat array or THREE.MatrixN)
function $2d9d8c9fc2282acc$var$setValueM2(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix2fv(this.addr, false, v);
        $2d9d8c9fc2282acc$var$copyArray(cache, v);
    } else {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, elements)) return;
        $2d9d8c9fc2282acc$var$mat2array.set(elements);
        gl.uniformMatrix2fv(this.addr, false, $2d9d8c9fc2282acc$var$mat2array);
        $2d9d8c9fc2282acc$var$copyArray(cache, elements);
    }
}
function $2d9d8c9fc2282acc$var$setValueM3(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix3fv(this.addr, false, v);
        $2d9d8c9fc2282acc$var$copyArray(cache, v);
    } else {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, elements)) return;
        $2d9d8c9fc2282acc$var$mat3array.set(elements);
        gl.uniformMatrix3fv(this.addr, false, $2d9d8c9fc2282acc$var$mat3array);
        $2d9d8c9fc2282acc$var$copyArray(cache, elements);
    }
}
function $2d9d8c9fc2282acc$var$setValueM4(gl, v) {
    const cache = this.cache;
    const elements = v.elements;
    if (elements === undefined) {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
        gl.uniformMatrix4fv(this.addr, false, v);
        $2d9d8c9fc2282acc$var$copyArray(cache, v);
    } else {
        if ($2d9d8c9fc2282acc$var$arraysEqual(cache, elements)) return;
        $2d9d8c9fc2282acc$var$mat4array.set(elements);
        gl.uniformMatrix4fv(this.addr, false, $2d9d8c9fc2282acc$var$mat4array);
        $2d9d8c9fc2282acc$var$copyArray(cache, elements);
    }
}
// Single integer / boolean
function $2d9d8c9fc2282acc$var$setValueV1i(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1i(this.addr, v);
    cache[0] = v;
}
// Single integer / boolean vector (from flat array)
function $2d9d8c9fc2282acc$var$setValueV2i(gl, v) {
    const cache = this.cache;
    if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
    gl.uniform2iv(this.addr, v);
    $2d9d8c9fc2282acc$var$copyArray(cache, v);
}
function $2d9d8c9fc2282acc$var$setValueV3i(gl, v) {
    const cache = this.cache;
    if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
    gl.uniform3iv(this.addr, v);
    $2d9d8c9fc2282acc$var$copyArray(cache, v);
}
function $2d9d8c9fc2282acc$var$setValueV4i(gl, v) {
    const cache = this.cache;
    if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
    gl.uniform4iv(this.addr, v);
    $2d9d8c9fc2282acc$var$copyArray(cache, v);
}
// Single unsigned integer
function $2d9d8c9fc2282acc$var$setValueV1ui(gl, v) {
    const cache = this.cache;
    if (cache[0] === v) return;
    gl.uniform1ui(this.addr, v);
    cache[0] = v;
}
// Single unsigned integer vector (from flat array)
function $2d9d8c9fc2282acc$var$setValueV2ui(gl, v) {
    const cache = this.cache;
    if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
    gl.uniform2uiv(this.addr, v);
    $2d9d8c9fc2282acc$var$copyArray(cache, v);
}
function $2d9d8c9fc2282acc$var$setValueV3ui(gl, v) {
    const cache = this.cache;
    if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
    gl.uniform3uiv(this.addr, v);
    $2d9d8c9fc2282acc$var$copyArray(cache, v);
}
function $2d9d8c9fc2282acc$var$setValueV4ui(gl, v) {
    const cache = this.cache;
    if ($2d9d8c9fc2282acc$var$arraysEqual(cache, v)) return;
    gl.uniform4uiv(this.addr, v);
    $2d9d8c9fc2282acc$var$copyArray(cache, v);
}
// Single texture (2D / Cube)
function $2d9d8c9fc2282acc$var$setValueT1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.safeSetTexture2D(v || $2d9d8c9fc2282acc$var$emptyTexture, unit);
}
function $2d9d8c9fc2282acc$var$setValueT3D1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture3D(v || $2d9d8c9fc2282acc$var$emptyTexture3d, unit);
}
function $2d9d8c9fc2282acc$var$setValueT6(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.safeSetTextureCube(v || $2d9d8c9fc2282acc$var$emptyCubeTexture, unit);
}
function $2d9d8c9fc2282acc$var$setValueT2DArray1(gl, v, textures) {
    const cache = this.cache;
    const unit = textures.allocateTextureUnit();
    if (cache[0] !== unit) {
        gl.uniform1i(this.addr, unit);
        cache[0] = unit;
    }
    textures.setTexture2DArray(v || $2d9d8c9fc2282acc$var$emptyTexture2dArray, unit);
}
// Helper to pick the right setter for the singular case
function $2d9d8c9fc2282acc$var$getSingularSetter(type) {
    switch(type){
        case 5126:
            return $2d9d8c9fc2282acc$var$setValueV1f; // FLOAT
        case 35664:
            return $2d9d8c9fc2282acc$var$setValueV2f; // _VEC2
        case 35665:
            return $2d9d8c9fc2282acc$var$setValueV3f; // _VEC3
        case 35666:
            return $2d9d8c9fc2282acc$var$setValueV4f; // _VEC4
        case 35674:
            return $2d9d8c9fc2282acc$var$setValueM2; // _MAT2
        case 35675:
            return $2d9d8c9fc2282acc$var$setValueM3; // _MAT3
        case 35676:
            return $2d9d8c9fc2282acc$var$setValueM4; // _MAT4
        case 5124:
        case 35670:
            return $2d9d8c9fc2282acc$var$setValueV1i; // INT, BOOL
        case 35667:
        case 35671:
            return $2d9d8c9fc2282acc$var$setValueV2i; // _VEC2
        case 35668:
        case 35672:
            return $2d9d8c9fc2282acc$var$setValueV3i; // _VEC3
        case 35669:
        case 35673:
            return $2d9d8c9fc2282acc$var$setValueV4i; // _VEC4
        case 5125:
            return $2d9d8c9fc2282acc$var$setValueV1ui; // UINT
        case 36294:
            return $2d9d8c9fc2282acc$var$setValueV2ui; // _VEC2
        case 36295:
            return $2d9d8c9fc2282acc$var$setValueV3ui; // _VEC3
        case 36296:
            return $2d9d8c9fc2282acc$var$setValueV4ui; // _VEC4
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return $2d9d8c9fc2282acc$var$setValueT1;
        case 35679:
        case 36299:
        case 36307:
            return $2d9d8c9fc2282acc$var$setValueT3D1;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return $2d9d8c9fc2282acc$var$setValueT6;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return $2d9d8c9fc2282acc$var$setValueT2DArray1;
    }
}
// Array of scalars
function $2d9d8c9fc2282acc$var$setValueV1fArray(gl, v) {
    gl.uniform1fv(this.addr, v);
}
// Array of vectors (from flat array or array of THREE.VectorN)
function $2d9d8c9fc2282acc$var$setValueV2fArray(gl, v) {
    const data = $2d9d8c9fc2282acc$var$flatten(v, this.size, 2);
    gl.uniform2fv(this.addr, data);
}
function $2d9d8c9fc2282acc$var$setValueV3fArray(gl, v) {
    const data = $2d9d8c9fc2282acc$var$flatten(v, this.size, 3);
    gl.uniform3fv(this.addr, data);
}
function $2d9d8c9fc2282acc$var$setValueV4fArray(gl, v) {
    const data = $2d9d8c9fc2282acc$var$flatten(v, this.size, 4);
    gl.uniform4fv(this.addr, data);
}
// Array of matrices (from flat array or array of THREE.MatrixN)
function $2d9d8c9fc2282acc$var$setValueM2Array(gl, v) {
    const data = $2d9d8c9fc2282acc$var$flatten(v, this.size, 4);
    gl.uniformMatrix2fv(this.addr, false, data);
}
function $2d9d8c9fc2282acc$var$setValueM3Array(gl, v) {
    const data = $2d9d8c9fc2282acc$var$flatten(v, this.size, 9);
    gl.uniformMatrix3fv(this.addr, false, data);
}
function $2d9d8c9fc2282acc$var$setValueM4Array(gl, v) {
    const data = $2d9d8c9fc2282acc$var$flatten(v, this.size, 16);
    gl.uniformMatrix4fv(this.addr, false, data);
}
// Array of integer / boolean
function $2d9d8c9fc2282acc$var$setValueV1iArray(gl, v) {
    gl.uniform1iv(this.addr, v);
}
// Array of integer / boolean vectors (from flat array)
function $2d9d8c9fc2282acc$var$setValueV2iArray(gl, v) {
    gl.uniform2iv(this.addr, v);
}
function $2d9d8c9fc2282acc$var$setValueV3iArray(gl, v) {
    gl.uniform3iv(this.addr, v);
}
function $2d9d8c9fc2282acc$var$setValueV4iArray(gl, v) {
    gl.uniform4iv(this.addr, v);
}
// Array of unsigned integer
function $2d9d8c9fc2282acc$var$setValueV1uiArray(gl, v) {
    gl.uniform1uiv(this.addr, v);
}
// Array of unsigned integer vectors (from flat array)
function $2d9d8c9fc2282acc$var$setValueV2uiArray(gl, v) {
    gl.uniform2uiv(this.addr, v);
}
function $2d9d8c9fc2282acc$var$setValueV3uiArray(gl, v) {
    gl.uniform3uiv(this.addr, v);
}
function $2d9d8c9fc2282acc$var$setValueV4uiArray(gl, v) {
    gl.uniform4uiv(this.addr, v);
}
// Array of textures (2D / 3D / Cube / 2DArray)
function $2d9d8c9fc2282acc$var$setValueT1Array(gl, v, textures) {
    const n = v.length;
    const units = $2d9d8c9fc2282acc$var$allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i103 = 0; i103 !== n; ++i103)textures.safeSetTexture2D(v[i103] || $2d9d8c9fc2282acc$var$emptyTexture, units[i103]);
}
function $2d9d8c9fc2282acc$var$setValueT3DArray(gl, v, textures) {
    const n = v.length;
    const units = $2d9d8c9fc2282acc$var$allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i104 = 0; i104 !== n; ++i104)textures.setTexture3D(v[i104] || $2d9d8c9fc2282acc$var$emptyTexture3d, units[i104]);
}
function $2d9d8c9fc2282acc$var$setValueT6Array(gl, v, textures) {
    const n = v.length;
    const units = $2d9d8c9fc2282acc$var$allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i105 = 0; i105 !== n; ++i105)textures.safeSetTextureCube(v[i105] || $2d9d8c9fc2282acc$var$emptyCubeTexture, units[i105]);
}
function $2d9d8c9fc2282acc$var$setValueT2DArrayArray(gl, v, textures) {
    const n = v.length;
    const units = $2d9d8c9fc2282acc$var$allocTexUnits(textures, n);
    gl.uniform1iv(this.addr, units);
    for(let i106 = 0; i106 !== n; ++i106)textures.setTexture2DArray(v[i106] || $2d9d8c9fc2282acc$var$emptyTexture2dArray, units[i106]);
}
// Helper to pick the right setter for a pure (bottom-level) array
function $2d9d8c9fc2282acc$var$getPureArraySetter(type) {
    switch(type){
        case 5126:
            return $2d9d8c9fc2282acc$var$setValueV1fArray; // FLOAT
        case 35664:
            return $2d9d8c9fc2282acc$var$setValueV2fArray; // _VEC2
        case 35665:
            return $2d9d8c9fc2282acc$var$setValueV3fArray; // _VEC3
        case 35666:
            return $2d9d8c9fc2282acc$var$setValueV4fArray; // _VEC4
        case 35674:
            return $2d9d8c9fc2282acc$var$setValueM2Array; // _MAT2
        case 35675:
            return $2d9d8c9fc2282acc$var$setValueM3Array; // _MAT3
        case 35676:
            return $2d9d8c9fc2282acc$var$setValueM4Array; // _MAT4
        case 5124:
        case 35670:
            return $2d9d8c9fc2282acc$var$setValueV1iArray; // INT, BOOL
        case 35667:
        case 35671:
            return $2d9d8c9fc2282acc$var$setValueV2iArray; // _VEC2
        case 35668:
        case 35672:
            return $2d9d8c9fc2282acc$var$setValueV3iArray; // _VEC3
        case 35669:
        case 35673:
            return $2d9d8c9fc2282acc$var$setValueV4iArray; // _VEC4
        case 5125:
            return $2d9d8c9fc2282acc$var$setValueV1uiArray; // UINT
        case 36294:
            return $2d9d8c9fc2282acc$var$setValueV2uiArray; // _VEC2
        case 36295:
            return $2d9d8c9fc2282acc$var$setValueV3uiArray; // _VEC3
        case 36296:
            return $2d9d8c9fc2282acc$var$setValueV4uiArray; // _VEC4
        case 35678:
        case 36198:
        case 36298:
        case 36306:
        case 35682:
            return $2d9d8c9fc2282acc$var$setValueT1Array;
        case 35679:
        case 36299:
        case 36307:
            return $2d9d8c9fc2282acc$var$setValueT3DArray;
        case 35680:
        case 36300:
        case 36308:
        case 36293:
            return $2d9d8c9fc2282acc$var$setValueT6Array;
        case 36289:
        case 36303:
        case 36311:
        case 36292:
            return $2d9d8c9fc2282acc$var$setValueT2DArrayArray;
    }
}
// --- Uniform Classes ---
function $2d9d8c9fc2282acc$var$SingleUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.setValue = $2d9d8c9fc2282acc$var$getSingularSetter(activeInfo.type);
// this.path = activeInfo.name; // DEBUG
}
function $2d9d8c9fc2282acc$var$PureArrayUniform(id, activeInfo, addr) {
    this.id = id;
    this.addr = addr;
    this.cache = [];
    this.size = activeInfo.size;
    this.setValue = $2d9d8c9fc2282acc$var$getPureArraySetter(activeInfo.type);
// this.path = activeInfo.name; // DEBUG
}
$2d9d8c9fc2282acc$var$PureArrayUniform.prototype.updateCache = function(data) {
    const cache = this.cache;
    if (data instanceof Float32Array && cache.length !== data.length) this.cache = new Float32Array(data.length);
    $2d9d8c9fc2282acc$var$copyArray(cache, data);
};
function $2d9d8c9fc2282acc$var$StructuredUniform(id) {
    this.id = id;
    this.seq = [];
    this.map = {
    };
}
$2d9d8c9fc2282acc$var$StructuredUniform.prototype.setValue = function(gl, value, textures) {
    const seq = this.seq;
    for(let i107 = 0, n = seq.length; i107 !== n; ++i107){
        const u = seq[i107];
        u.setValue(gl, value[u.id], textures);
    }
};
// --- Top-level ---
// Parser - builds up the property tree from the path strings
const $2d9d8c9fc2282acc$var$RePathPart = /(\w+)(\])?(\[|\.)?/g;
// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.
function $2d9d8c9fc2282acc$var$addUniform(container, uniformObject) {
    container.seq.push(uniformObject);
    container.map[uniformObject.id] = uniformObject;
}
function $2d9d8c9fc2282acc$var$parseUniform(activeInfo, addr, container) {
    const path = activeInfo.name, pathLength = path.length;
    // reset RegExp object, because of the early exit of a previous run
    $2d9d8c9fc2282acc$var$RePathPart.lastIndex = 0;
    while(true){
        const match = $2d9d8c9fc2282acc$var$RePathPart.exec(path), matchEnd = $2d9d8c9fc2282acc$var$RePathPart.lastIndex;
        let id = match[1];
        const idIsIndex = match[2] === ']', subscript = match[3];
        if (idIsIndex) id = id | 0; // convert to integer
        if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {
            // bare name or "pure" bottom-level array "[0]" suffix
            $2d9d8c9fc2282acc$var$addUniform(container, subscript === undefined ? new $2d9d8c9fc2282acc$var$SingleUniform(id, activeInfo, addr) : new $2d9d8c9fc2282acc$var$PureArrayUniform(id, activeInfo, addr));
            break;
        } else {
            // step into inner node / create it in case it doesn't exist
            const map = container.map;
            let next = map[id];
            if (next === undefined) {
                next = new $2d9d8c9fc2282acc$var$StructuredUniform(id);
                $2d9d8c9fc2282acc$var$addUniform(container, next);
            }
            container = next;
        }
    }
}
// Root Container
function $2d9d8c9fc2282acc$var$WebGLUniforms(gl, program) {
    this.seq = [];
    this.map = {
    };
    const n = gl.getProgramParameter(program, 35718);
    for(let i108 = 0; i108 < n; ++i108){
        const info = gl.getActiveUniform(program, i108), addr = gl.getUniformLocation(program, info.name);
        $2d9d8c9fc2282acc$var$parseUniform(info, addr, this);
    }
}
$2d9d8c9fc2282acc$var$WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
    const u = this.map[name];
    if (u !== undefined) u.setValue(gl, value, textures);
};
$2d9d8c9fc2282acc$var$WebGLUniforms.prototype.setOptional = function(gl, object, name) {
    const v = object[name];
    if (v !== undefined) this.setValue(gl, name, v);
};
// Static interface
$2d9d8c9fc2282acc$var$WebGLUniforms.upload = function(gl, seq, values, textures) {
    for(let i109 = 0, n = seq.length; i109 !== n; ++i109){
        const u = seq[i109], v = values[u.id];
        if (v.needsUpdate !== false) // note: always updating when .needsUpdate is undefined
        u.setValue(gl, v.value, textures);
    }
};
$2d9d8c9fc2282acc$var$WebGLUniforms.seqWithValue = function(seq, values) {
    const r = [];
    for(let i110 = 0, n = seq.length; i110 !== n; ++i110){
        const u = seq[i110];
        if (u.id in values) r.push(u);
    }
    return r;
};
function $2d9d8c9fc2282acc$var$WebGLShader(gl, type, string) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, string);
    gl.compileShader(shader);
    return shader;
}
let $2d9d8c9fc2282acc$var$programIdCount = 0;
function $2d9d8c9fc2282acc$var$addLineNumbers(string) {
    const lines = string.split('\n');
    for(let i111 = 0; i111 < lines.length; i111++)lines[i111] = i111 + 1 + ': ' + lines[i111];
    return lines.join('\n');
}
function $2d9d8c9fc2282acc$var$getEncodingComponents(encoding) {
    switch(encoding){
        case $2d9d8c9fc2282acc$export$7207336e4151a112:
            return [
                'Linear',
                '( value )'
            ];
        case $2d9d8c9fc2282acc$export$f32388edbb32674:
            return [
                'sRGB',
                '( value )'
            ];
        default:
            console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);
            return [
                'Linear',
                '( value )'
            ];
    }
}
function $2d9d8c9fc2282acc$var$getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, 35713);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === '') return '';
    // --enable-privileged-webgl-extension
    // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
    return type.toUpperCase() + '\n\n' + errors + '\n\n' + $2d9d8c9fc2282acc$var$addLineNumbers(gl.getShaderSource(shader));
}
function $2d9d8c9fc2282acc$var$getTexelDecodingFunction(functionName, encoding) {
    const components = $2d9d8c9fc2282acc$var$getEncodingComponents(encoding);
    return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';
}
function $2d9d8c9fc2282acc$var$getTexelEncodingFunction(functionName, encoding) {
    const components = $2d9d8c9fc2282acc$var$getEncodingComponents(encoding);
    return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';
}
function $2d9d8c9fc2282acc$var$getToneMappingFunction(functionName, toneMapping) {
    let toneMappingName;
    switch(toneMapping){
        case $2d9d8c9fc2282acc$export$98f52c2a46c598ca:
            toneMappingName = 'Linear';
            break;
        case $2d9d8c9fc2282acc$export$74b25e54b3bcd548:
            toneMappingName = 'Reinhard';
            break;
        case $2d9d8c9fc2282acc$export$932b3dd283d4a366:
            toneMappingName = 'OptimizedCineon';
            break;
        case $2d9d8c9fc2282acc$export$a0d98fe6d7e4af64:
            toneMappingName = 'ACESFilmic';
            break;
        case $2d9d8c9fc2282acc$export$2c7b09c1e9abfb5e:
            toneMappingName = 'Custom';
            break;
        default:
            console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);
            toneMappingName = 'Linear';
    }
    return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
}
function $2d9d8c9fc2282acc$var$generateExtensions(parameters) {
    const chunks = [
        parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '',
        (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
        parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '',
        (parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
    ];
    return chunks.filter($2d9d8c9fc2282acc$var$filterEmptyLine).join('\n');
}
function $2d9d8c9fc2282acc$var$generateDefines(defines) {
    const chunks = [];
    for(const name in defines){
        const value = defines[name];
        if (value === false) continue;
        chunks.push('#define ' + name + ' ' + value);
    }
    return chunks.join('\n');
}
function $2d9d8c9fc2282acc$var$fetchAttributeLocations(gl, program) {
    const attributes = {
    };
    const n = gl.getProgramParameter(program, 35721);
    for(let i112 = 0; i112 < n; i112++){
        const info = gl.getActiveAttrib(program, i112);
        const name = info.name;
        let locationSize = 1;
        if (info.type === 35674) locationSize = 2;
        if (info.type === 35675) locationSize = 3;
        if (info.type === 35676) locationSize = 4;
        // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
        attributes[name] = {
            type: info.type,
            location: gl.getAttribLocation(program, name),
            locationSize: locationSize
        };
    }
    return attributes;
}
function $2d9d8c9fc2282acc$var$filterEmptyLine(string) {
    return string !== '';
}
function $2d9d8c9fc2282acc$var$replaceLightNums(string, parameters) {
    return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function $2d9d8c9fc2282acc$var$replaceClippingPlaneNums(string, parameters) {
    return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
// Resolve Includes
const $2d9d8c9fc2282acc$var$includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function $2d9d8c9fc2282acc$var$resolveIncludes(string) {
    return string.replace($2d9d8c9fc2282acc$var$includePattern, $2d9d8c9fc2282acc$var$includeReplacer);
}
function $2d9d8c9fc2282acc$var$includeReplacer(match, include) {
    const string = $2d9d8c9fc2282acc$export$955f9f2e84c43c8b[include];
    if (string === undefined) throw new Error('Can not resolve #include <' + include + '>');
    return $2d9d8c9fc2282acc$var$resolveIncludes(string);
}
// Unroll Loops
const $2d9d8c9fc2282acc$var$deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
const $2d9d8c9fc2282acc$var$unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function $2d9d8c9fc2282acc$var$unrollLoops(string) {
    return string.replace($2d9d8c9fc2282acc$var$unrollLoopPattern, $2d9d8c9fc2282acc$var$loopReplacer).replace($2d9d8c9fc2282acc$var$deprecatedUnrollLoopPattern, $2d9d8c9fc2282acc$var$deprecatedLoopReplacer);
}
function $2d9d8c9fc2282acc$var$deprecatedLoopReplacer(match, start, end, snippet) {
    console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');
    return $2d9d8c9fc2282acc$var$loopReplacer(match, start, end, snippet);
}
function $2d9d8c9fc2282acc$var$loopReplacer(match, start, end, snippet) {
    let string = '';
    for(let i113 = parseInt(start); i113 < parseInt(end); i113++)string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i113 + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i113);
    return string;
}
//
function $2d9d8c9fc2282acc$var$generatePrecision(parameters) {
    let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
    if (parameters.precision === 'highp') precisionstring += '\n#define HIGH_PRECISION';
    else if (parameters.precision === 'mediump') precisionstring += '\n#define MEDIUM_PRECISION';
    else if (parameters.precision === 'lowp') precisionstring += '\n#define LOW_PRECISION';
    return precisionstring;
}
function $2d9d8c9fc2282acc$var$generateShadowMapTypeDefine(parameters) {
    let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
    if (parameters.shadowMapType === $2d9d8c9fc2282acc$export$5813f879eee7cd88) shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
    else if (parameters.shadowMapType === $2d9d8c9fc2282acc$export$a47c4b43a1be34f0) shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
    else if (parameters.shadowMapType === $2d9d8c9fc2282acc$export$896ae1ade6c829c4) shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
    return shadowMapTypeDefine;
}
function $2d9d8c9fc2282acc$var$generateEnvMapTypeDefine(parameters) {
    let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
    if (parameters.envMap) switch(parameters.envMapMode){
        case $2d9d8c9fc2282acc$export$8759762a6477f2c4:
        case $2d9d8c9fc2282acc$export$dc59f8aed047f61d:
            envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
            break;
        case $2d9d8c9fc2282acc$export$dbf3e70ff37af79:
        case $2d9d8c9fc2282acc$export$76a9f4355364345c:
            envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
            break;
    }
    return envMapTypeDefine;
}
function $2d9d8c9fc2282acc$var$generateEnvMapModeDefine(parameters) {
    let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
    if (parameters.envMap) switch(parameters.envMapMode){
        case $2d9d8c9fc2282acc$export$dc59f8aed047f61d:
        case $2d9d8c9fc2282acc$export$76a9f4355364345c:
            envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
            break;
    }
    return envMapModeDefine;
}
function $2d9d8c9fc2282acc$var$generateEnvMapBlendingDefine(parameters) {
    let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
    if (parameters.envMap) switch(parameters.combine){
        case $2d9d8c9fc2282acc$export$e50ac29801f1774d:
            envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
            break;
        case $2d9d8c9fc2282acc$export$9f9d94f963c85479:
            envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
            break;
        case $2d9d8c9fc2282acc$export$e641dc52bc3494aa:
            envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
            break;
    }
    return envMapBlendingDefine;
}
function $2d9d8c9fc2282acc$var$WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
    // TODO Send this event to Three.js DevTools
    // console.log( 'WebGLProgram', cacheKey );
    const gl = renderer.getContext();
    const defines = parameters.defines;
    let vertexShader = parameters.vertexShader;
    let fragmentShader = parameters.fragmentShader;
    const shadowMapTypeDefine = $2d9d8c9fc2282acc$var$generateShadowMapTypeDefine(parameters);
    const envMapTypeDefine = $2d9d8c9fc2282acc$var$generateEnvMapTypeDefine(parameters);
    const envMapModeDefine = $2d9d8c9fc2282acc$var$generateEnvMapModeDefine(parameters);
    const envMapBlendingDefine = $2d9d8c9fc2282acc$var$generateEnvMapBlendingDefine(parameters);
    const customExtensions = parameters.isWebGL2 ? '' : $2d9d8c9fc2282acc$var$generateExtensions(parameters);
    const customDefines = $2d9d8c9fc2282acc$var$generateDefines(defines);
    const program = gl.createProgram();
    let prefixVertex, prefixFragment;
    let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
    if (parameters.isRawShaderMaterial) {
        prefixVertex = [
            customDefines
        ].filter($2d9d8c9fc2282acc$var$filterEmptyLine).join('\n');
        if (prefixVertex.length > 0) prefixVertex += '\n';
        prefixFragment = [
            customExtensions,
            customDefines
        ].filter($2d9d8c9fc2282acc$var$filterEmptyLine).join('\n');
        if (prefixFragment.length > 0) prefixFragment += '\n';
    } else {
        prefixVertex = [
            $2d9d8c9fc2282acc$var$generatePrecision(parameters),
            '#define SHADER_NAME ' + parameters.shaderName,
            customDefines,
            parameters.instancing ? '#define USE_INSTANCING' : '',
            parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
            parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
            '#define MAX_BONES ' + parameters.maxBones,
            parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
            parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',
            parameters.map ? '#define USE_MAP' : '',
            parameters.envMap ? '#define USE_ENVMAP' : '',
            parameters.envMap ? '#define ' + envMapModeDefine : '',
            parameters.lightMap ? '#define USE_LIGHTMAP' : '',
            parameters.aoMap ? '#define USE_AOMAP' : '',
            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
            parameters.bumpMap ? '#define USE_BUMPMAP' : '',
            parameters.normalMap ? '#define USE_NORMALMAP' : '',
            parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
            parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
            parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
            parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
            parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
            parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
            parameters.specularMap ? '#define USE_SPECULARMAP' : '',
            parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
            parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
            parameters.transmission ? '#define USE_TRANSMISSION' : '',
            parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
            parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
            parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
            parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
            parameters.vertexTangents ? '#define USE_TANGENT' : '',
            parameters.vertexColors ? '#define USE_COLOR' : '',
            parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
            parameters.vertexUvs ? '#define USE_UV' : '',
            parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
            parameters.flatShading ? '#define FLAT_SHADED' : '',
            parameters.skinning ? '#define USE_SKINNING' : '',
            parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
            parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
            parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
            parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_TEXTURE' : '',
            parameters.morphTargets && parameters.isWebGL2 ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
            parameters.flipSided ? '#define FLIP_SIDED' : '',
            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
            parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
            'uniform mat4 modelMatrix;',
            'uniform mat4 modelViewMatrix;',
            'uniform mat4 projectionMatrix;',
            'uniform mat4 viewMatrix;',
            'uniform mat3 normalMatrix;',
            'uniform vec3 cameraPosition;',
            'uniform bool isOrthographic;',
            '#ifdef USE_INSTANCING',
            '	attribute mat4 instanceMatrix;',
            '#endif',
            '#ifdef USE_INSTANCING_COLOR',
            '	attribute vec3 instanceColor;',
            '#endif',
            'attribute vec3 position;',
            'attribute vec3 normal;',
            'attribute vec2 uv;',
            '#ifdef USE_TANGENT',
            '	attribute vec4 tangent;',
            '#endif',
            '#if defined( USE_COLOR_ALPHA )',
            '	attribute vec4 color;',
            '#elif defined( USE_COLOR )',
            '	attribute vec3 color;',
            '#endif',
            '#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',
            '	attribute vec3 morphTarget0;',
            '	attribute vec3 morphTarget1;',
            '	attribute vec3 morphTarget2;',
            '	attribute vec3 morphTarget3;',
            '	#ifdef USE_MORPHNORMALS',
            '		attribute vec3 morphNormal0;',
            '		attribute vec3 morphNormal1;',
            '		attribute vec3 morphNormal2;',
            '		attribute vec3 morphNormal3;',
            '	#else',
            '		attribute vec3 morphTarget4;',
            '		attribute vec3 morphTarget5;',
            '		attribute vec3 morphTarget6;',
            '		attribute vec3 morphTarget7;',
            '	#endif',
            '#endif',
            '#ifdef USE_SKINNING',
            '	attribute vec4 skinIndex;',
            '	attribute vec4 skinWeight;',
            '#endif',
            '\n'
        ].filter($2d9d8c9fc2282acc$var$filterEmptyLine).join('\n');
        prefixFragment = [
            customExtensions,
            $2d9d8c9fc2282acc$var$generatePrecision(parameters),
            '#define SHADER_NAME ' + parameters.shaderName,
            customDefines,
            parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
            parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',
            parameters.map ? '#define USE_MAP' : '',
            parameters.matcap ? '#define USE_MATCAP' : '',
            parameters.envMap ? '#define USE_ENVMAP' : '',
            parameters.envMap ? '#define ' + envMapTypeDefine : '',
            parameters.envMap ? '#define ' + envMapModeDefine : '',
            parameters.envMap ? '#define ' + envMapBlendingDefine : '',
            parameters.lightMap ? '#define USE_LIGHTMAP' : '',
            parameters.aoMap ? '#define USE_AOMAP' : '',
            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
            parameters.bumpMap ? '#define USE_BUMPMAP' : '',
            parameters.normalMap ? '#define USE_NORMALMAP' : '',
            parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
            parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
            parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
            parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
            parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
            parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
            parameters.specularMap ? '#define USE_SPECULARMAP' : '',
            parameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',
            parameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',
            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
            parameters.alphaTest ? '#define USE_ALPHATEST' : '',
            parameters.sheen ? '#define USE_SHEEN' : '',
            parameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',
            parameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',
            parameters.transmission ? '#define USE_TRANSMISSION' : '',
            parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
            parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',
            parameters.vertexTangents ? '#define USE_TANGENT' : '',
            parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
            parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
            parameters.vertexUvs ? '#define USE_UV' : '',
            parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
            parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
            parameters.flatShading ? '#define FLAT_SHADED' : '',
            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
            parameters.flipSided ? '#define FLIP_SIDED' : '',
            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
            parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
            parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
            (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '',
            'uniform mat4 viewMatrix;',
            'uniform vec3 cameraPosition;',
            'uniform bool isOrthographic;',
            parameters.toneMapping !== $2d9d8c9fc2282acc$export$9fcb6b4294603b2 ? '#define TONE_MAPPING' : '',
            parameters.toneMapping !== $2d9d8c9fc2282acc$export$9fcb6b4294603b2 ? $2d9d8c9fc2282acc$export$955f9f2e84c43c8b['tonemapping_pars_fragment'] : '',
            parameters.toneMapping !== $2d9d8c9fc2282acc$export$9fcb6b4294603b2 ? $2d9d8c9fc2282acc$var$getToneMappingFunction('toneMapping', parameters.toneMapping) : '',
            parameters.dithering ? '#define DITHERING' : '',
            parameters.format === $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb ? '#define OPAQUE' : '',
            $2d9d8c9fc2282acc$export$955f9f2e84c43c8b['encodings_pars_fragment'],
            parameters.map ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',
            parameters.matcap ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '',
            parameters.envMap ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '',
            parameters.emissiveMap ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '',
            parameters.specularColorMap ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('specularColorMapTexelToLinear', parameters.specularColorMapEncoding) : '',
            parameters.sheenColorMap ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding) : '',
            parameters.lightMap ? $2d9d8c9fc2282acc$var$getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '',
            $2d9d8c9fc2282acc$var$getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding),
            parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',
            '\n'
        ].filter($2d9d8c9fc2282acc$var$filterEmptyLine).join('\n');
    }
    vertexShader = $2d9d8c9fc2282acc$var$resolveIncludes(vertexShader);
    vertexShader = $2d9d8c9fc2282acc$var$replaceLightNums(vertexShader, parameters);
    vertexShader = $2d9d8c9fc2282acc$var$replaceClippingPlaneNums(vertexShader, parameters);
    fragmentShader = $2d9d8c9fc2282acc$var$resolveIncludes(fragmentShader);
    fragmentShader = $2d9d8c9fc2282acc$var$replaceLightNums(fragmentShader, parameters);
    fragmentShader = $2d9d8c9fc2282acc$var$replaceClippingPlaneNums(fragmentShader, parameters);
    vertexShader = $2d9d8c9fc2282acc$var$unrollLoops(vertexShader);
    fragmentShader = $2d9d8c9fc2282acc$var$unrollLoops(fragmentShader);
    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {
        // GLSL 3.0 conversion for built-in materials and ShaderMaterial
        versionString = '#version 300 es\n';
        prefixVertex = [
            'precision mediump sampler2DArray;',
            '#define attribute in',
            '#define varying out',
            '#define texture2D texture'
        ].join('\n') + '\n' + prefixVertex;
        prefixFragment = [
            '#define varying in',
            parameters.glslVersion === $2d9d8c9fc2282acc$export$f63012db5506e7dd ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
            parameters.glslVersion === $2d9d8c9fc2282acc$export$f63012db5506e7dd ? '' : '#define gl_FragColor pc_fragColor',
            '#define gl_FragDepthEXT gl_FragDepth',
            '#define texture2D texture',
            '#define textureCube texture',
            '#define texture2DProj textureProj',
            '#define texture2DLodEXT textureLod',
            '#define texture2DProjLodEXT textureProjLod',
            '#define textureCubeLodEXT textureLod',
            '#define texture2DGradEXT textureGrad',
            '#define texture2DProjGradEXT textureProjGrad',
            '#define textureCubeGradEXT textureGrad'
        ].join('\n') + '\n' + prefixFragment;
    }
    const vertexGlsl = versionString + prefixVertex + vertexShader;
    const fragmentGlsl = versionString + prefixFragment + fragmentShader;
    // console.log( '*VERTEX*', vertexGlsl );
    // console.log( '*FRAGMENT*', fragmentGlsl );
    const glVertexShader = $2d9d8c9fc2282acc$var$WebGLShader(gl, 35633, vertexGlsl);
    const glFragmentShader = $2d9d8c9fc2282acc$var$WebGLShader(gl, 35632, fragmentGlsl);
    gl.attachShader(program, glVertexShader);
    gl.attachShader(program, glFragmentShader);
    // Force a particular attribute to index 0.
    if (parameters.index0AttributeName !== undefined) gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
    else if (parameters.morphTargets === true) // programs with morphTargets displace position out of attribute 0
    gl.bindAttribLocation(program, 0, 'position');
    gl.linkProgram(program);
    // check for link errors
    if (renderer.debug.checkShaderErrors) {
        const programLog = gl.getProgramInfoLog(program).trim();
        const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
        const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
        let runnable = true;
        let haveDiagnostics = true;
        if (gl.getProgramParameter(program, 35714) === false) {
            runnable = false;
            const vertexErrors = $2d9d8c9fc2282acc$var$getShaderErrors(gl, glVertexShader, 'vertex');
            const fragmentErrors = $2d9d8c9fc2282acc$var$getShaderErrors(gl, glFragmentShader, 'fragment');
            console.error('THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' + 'VALIDATE_STATUS ' + gl.getProgramParameter(program, 35715) + '\n\n' + 'Program Info Log: ' + programLog + '\n' + vertexErrors + '\n' + fragmentErrors);
        } else if (programLog !== '') console.warn('THREE.WebGLProgram: Program Info Log:', programLog);
        else if (vertexLog === '' || fragmentLog === '') haveDiagnostics = false;
        if (haveDiagnostics) this.diagnostics = {
            runnable: runnable,
            programLog: programLog,
            vertexShader: {
                log: vertexLog,
                prefix: prefixVertex
            },
            fragmentShader: {
                log: fragmentLog,
                prefix: prefixFragment
            }
        };
    }
    // Clean up
    // Crashes in iOS9 and iOS10. #18402
    // gl.detachShader( program, glVertexShader );
    // gl.detachShader( program, glFragmentShader );
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    // set up caching for uniform locations
    let cachedUniforms;
    this.getUniforms = function() {
        if (cachedUniforms === undefined) cachedUniforms = new $2d9d8c9fc2282acc$var$WebGLUniforms(gl, program);
        return cachedUniforms;
    };
    // set up caching for attribute locations
    let cachedAttributes;
    this.getAttributes = function() {
        if (cachedAttributes === undefined) cachedAttributes = $2d9d8c9fc2282acc$var$fetchAttributeLocations(gl, program);
        return cachedAttributes;
    };
    // free resource
    this.destroy = function() {
        bindingStates.releaseStatesOfProgram(this);
        gl.deleteProgram(program);
        this.program = undefined;
    };
    //
    this.name = parameters.shaderName;
    this.id = $2d9d8c9fc2282acc$var$programIdCount++;
    this.cacheKey = cacheKey;
    this.usedTimes = 1;
    this.program = program;
    this.vertexShader = glVertexShader;
    this.fragmentShader = glFragmentShader;
    return this;
}
let $2d9d8c9fc2282acc$var$_id = 0;
class $2d9d8c9fc2282acc$var$WebGLShaderCache {
    constructor(){
        this.shaderCache = new Map();
        this.materialCache = new Map();
    }
    update(material) {
        const vertexShader = material.vertexShader;
        const fragmentShader = material.fragmentShader;
        const vertexShaderStage = this._getShaderStage(vertexShader);
        const fragmentShaderStage = this._getShaderStage(fragmentShader);
        const materialShaders = this._getShaderCacheForMaterial(material);
        if (materialShaders.has(vertexShaderStage) === false) {
            materialShaders.add(vertexShaderStage);
            vertexShaderStage.usedTimes++;
        }
        if (materialShaders.has(fragmentShaderStage) === false) {
            materialShaders.add(fragmentShaderStage);
            fragmentShaderStage.usedTimes++;
        }
        return this;
    }
    remove(material) {
        const materialShaders = this.materialCache.get(material);
        for (const shaderStage of materialShaders){
            shaderStage.usedTimes--;
            if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage);
        }
        this.materialCache.delete(material);
        return this;
    }
    getVertexShaderID(material) {
        return this._getShaderStage(material.vertexShader).id;
    }
    getFragmentShaderID(material) {
        return this._getShaderStage(material.fragmentShader).id;
    }
    dispose() {
        this.shaderCache.clear();
        this.materialCache.clear();
    }
    _getShaderCacheForMaterial(material) {
        const cache = this.materialCache;
        if (cache.has(material) === false) cache.set(material, new Set());
        return cache.get(material);
    }
    _getShaderStage(code) {
        const cache = this.shaderCache;
        if (cache.has(code) === false) {
            const stage = new $2d9d8c9fc2282acc$var$WebGLShaderStage();
            cache.set(code, stage);
        }
        return cache.get(code);
    }
}
class $2d9d8c9fc2282acc$var$WebGLShaderStage {
    constructor(){
        this.id = $2d9d8c9fc2282acc$var$_id++;
        this.usedTimes = 0;
    }
}
function $2d9d8c9fc2282acc$var$WebGLPrograms(renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping) {
    const _programLayers = new $2d9d8c9fc2282acc$export$89312ce47c0ca777();
    const _customShaders = new $2d9d8c9fc2282acc$var$WebGLShaderCache();
    const programs = [];
    const isWebGL2 = capabilities.isWebGL2;
    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
    const floatVertexTextures = capabilities.floatVertexTextures;
    const maxVertexUniforms = capabilities.maxVertexUniforms;
    const vertexTextures = capabilities.vertexTextures;
    let precision = capabilities.precision;
    const shaderIDs = {
        MeshDepthMaterial: 'depth',
        MeshDistanceMaterial: 'distanceRGBA',
        MeshNormalMaterial: 'normal',
        MeshBasicMaterial: 'basic',
        MeshLambertMaterial: 'lambert',
        MeshPhongMaterial: 'phong',
        MeshToonMaterial: 'toon',
        MeshStandardMaterial: 'physical',
        MeshPhysicalMaterial: 'physical',
        MeshMatcapMaterial: 'matcap',
        LineBasicMaterial: 'basic',
        LineDashedMaterial: 'dashed',
        PointsMaterial: 'points',
        ShadowMaterial: 'shadow',
        SpriteMaterial: 'sprite'
    };
    function getMaxBones(object) {
        const skeleton = object.skeleton;
        const bones = skeleton.bones;
        if (floatVertexTextures) return 1024;
        else {
            // default for when object is not specified
            // ( for example when prebuilding shader to be used with multiple objects )
            //
            //  - leave some extra space for other uniforms
            //  - limit here is ANGLE's 254 max uniform vectors
            //    (up to 54 should be safe)
            const nVertexUniforms = maxVertexUniforms;
            const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);
            const maxBones = Math.min(nVertexMatrices, bones.length);
            if (maxBones < bones.length) {
                console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');
                return 0;
            }
            return maxBones;
        }
    }
    function getTextureEncodingFromMap(map) {
        let encoding;
        if (map && map.isTexture) encoding = map.encoding;
        else if (map && map.isWebGLRenderTarget) {
            console.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\'t use render targets as textures. Use their .texture property instead.');
            encoding = map.texture.encoding;
        } else encoding = $2d9d8c9fc2282acc$export$7207336e4151a112;
        if (isWebGL2 && map && map.isTexture && map.format === $2d9d8c9fc2282acc$export$3f8bb04b555a363c && map.type === $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10 && map.encoding === $2d9d8c9fc2282acc$export$f32388edbb32674) encoding = $2d9d8c9fc2282acc$export$7207336e4151a112; // disable inline decode for sRGB textures in WebGL 2
        return encoding;
    }
    function getParameters(material, lights, shadows, scene, object) {
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const shaderID = shaderIDs[material.type];
        // heuristics to create shader parameters according to lights in the scene
        // (not to blow over maxLights budget)
        const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;
        if (material.precision !== null) {
            precision = capabilities.getMaxPrecision(material.precision);
            if (precision !== material.precision) console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');
        }
        let vertexShader, fragmentShader;
        let customVertexShaderID, customFragmentShaderID;
        if (shaderID) {
            const shader = $2d9d8c9fc2282acc$export$bee4a7d47f8f5014[shaderID];
            vertexShader = shader.vertexShader;
            fragmentShader = shader.fragmentShader;
        } else {
            vertexShader = material.vertexShader;
            fragmentShader = material.fragmentShader;
            _customShaders.update(material);
            customVertexShaderID = _customShaders.getVertexShaderID(material);
            customFragmentShaderID = _customShaders.getFragmentShaderID(material);
        }
        const currentRenderTarget = renderer.getRenderTarget();
        const useAlphaTest = material.alphaTest > 0;
        const useClearcoat = material.clearcoat > 0;
        const parameters = {
            isWebGL2: isWebGL2,
            shaderID: shaderID,
            shaderName: material.type,
            vertexShader: vertexShader,
            fragmentShader: fragmentShader,
            defines: material.defines,
            customVertexShaderID: customVertexShaderID,
            customFragmentShaderID: customFragmentShaderID,
            isRawShaderMaterial: material.isRawShaderMaterial === true,
            glslVersion: material.glslVersion,
            precision: precision,
            instancing: object.isInstancedMesh === true,
            instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,
            supportsVertexTextures: vertexTextures,
            outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,
            map: !!material.map,
            mapEncoding: getTextureEncodingFromMap(material.map),
            matcap: !!material.matcap,
            matcapEncoding: getTextureEncodingFromMap(material.matcap),
            envMap: !!envMap,
            envMapMode: envMap && envMap.mapping,
            envMapEncoding: getTextureEncodingFromMap(envMap),
            envMapCubeUV: !!envMap && (envMap.mapping === $2d9d8c9fc2282acc$export$dbf3e70ff37af79 || envMap.mapping === $2d9d8c9fc2282acc$export$76a9f4355364345c),
            lightMap: !!material.lightMap,
            lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
            aoMap: !!material.aoMap,
            emissiveMap: !!material.emissiveMap,
            emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
            bumpMap: !!material.bumpMap,
            normalMap: !!material.normalMap,
            objectSpaceNormalMap: material.normalMapType === $2d9d8c9fc2282acc$export$9990ad26f9db5b2c,
            tangentSpaceNormalMap: material.normalMapType === $2d9d8c9fc2282acc$export$2852a58ebdac27b8,
            clearcoat: useClearcoat,
            clearcoatMap: useClearcoat && !!material.clearcoatMap,
            clearcoatRoughnessMap: useClearcoat && !!material.clearcoatRoughnessMap,
            clearcoatNormalMap: useClearcoat && !!material.clearcoatNormalMap,
            displacementMap: !!material.displacementMap,
            roughnessMap: !!material.roughnessMap,
            metalnessMap: !!material.metalnessMap,
            specularMap: !!material.specularMap,
            specularIntensityMap: !!material.specularIntensityMap,
            specularColorMap: !!material.specularColorMap,
            specularColorMapEncoding: getTextureEncodingFromMap(material.specularColorMap),
            alphaMap: !!material.alphaMap,
            alphaTest: useAlphaTest,
            gradientMap: !!material.gradientMap,
            sheen: material.sheen > 0,
            sheenColorMap: !!material.sheenColorMap,
            sheenColorMapEncoding: getTextureEncodingFromMap(material.sheenColorMap),
            sheenRoughnessMap: !!material.sheenRoughnessMap,
            transmission: material.transmission > 0,
            transmissionMap: !!material.transmissionMap,
            thicknessMap: !!material.thicknessMap,
            combine: material.combine,
            vertexTangents: !!material.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,
            vertexColors: material.vertexColors,
            vertexAlphas: material.vertexColors === true && !!object.geometry && !!object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,
            vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || !!material.sheenColorMap || !!material.sheenRoughnessMap,
            uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || material.transmission > 0 || !!material.transmissionMap || !!material.thicknessMap || !!material.specularIntensityMap || !!material.specularColorMap || material.sheen > 0 || !!material.sheenColorMap || !!material.sheenRoughnessMap) && !!material.displacementMap,
            fog: !!fog,
            useFog: material.fog,
            fogExp2: fog && fog.isFogExp2,
            flatShading: !!material.flatShading,
            sizeAttenuation: material.sizeAttenuation,
            logarithmicDepthBuffer: logarithmicDepthBuffer,
            skinning: object.isSkinnedMesh === true && maxBones > 0,
            maxBones: maxBones,
            useVertexTexture: floatVertexTextures,
            morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,
            morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,
            morphTargetsCount: !!object.geometry && !!object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,
            numDirLights: lights.directional.length,
            numPointLights: lights.point.length,
            numSpotLights: lights.spot.length,
            numRectAreaLights: lights.rectArea.length,
            numHemiLights: lights.hemi.length,
            numDirLightShadows: lights.directionalShadowMap.length,
            numPointLightShadows: lights.pointShadowMap.length,
            numSpotLightShadows: lights.spotShadowMap.length,
            numClippingPlanes: clipping.numPlanes,
            numClipIntersection: clipping.numIntersection,
            format: material.format,
            dithering: material.dithering,
            shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
            shadowMapType: renderer.shadowMap.type,
            toneMapping: material.toneMapped ? renderer.toneMapping : $2d9d8c9fc2282acc$export$9fcb6b4294603b2,
            physicallyCorrectLights: renderer.physicallyCorrectLights,
            premultipliedAlpha: material.premultipliedAlpha,
            doubleSided: material.side === $2d9d8c9fc2282acc$export$3b296b6f144d5b03,
            flipSided: material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace,
            depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,
            index0AttributeName: material.index0AttributeName,
            extensionDerivatives: material.extensions && material.extensions.derivatives,
            extensionFragDepth: material.extensions && material.extensions.fragDepth,
            extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
            extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
            rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
            rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
            rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),
            customProgramCacheKey: material.customProgramCacheKey()
        };
        return parameters;
    }
    function getProgramCacheKey(parameters) {
        const array = [];
        if (parameters.shaderID) array.push(parameters.shaderID);
        else {
            array.push(parameters.customVertexShaderID);
            array.push(parameters.customFragmentShaderID);
        }
        if (parameters.defines !== undefined) for(const name in parameters.defines){
            array.push(name);
            array.push(parameters.defines[name]);
        }
        if (parameters.isRawShaderMaterial === false) {
            getProgramCacheKeyParameters(array, parameters);
            getProgramCacheKeyBooleans(array, parameters);
            array.push(renderer.outputEncoding);
        }
        array.push(parameters.customProgramCacheKey);
        return array.join();
    }
    function getProgramCacheKeyParameters(array, parameters) {
        array.push(parameters.precision);
        array.push(parameters.outputEncoding);
        array.push(parameters.mapEncoding);
        array.push(parameters.matcapEncoding);
        array.push(parameters.envMapMode);
        array.push(parameters.envMapEncoding);
        array.push(parameters.lightMapEncoding);
        array.push(parameters.emissiveMapEncoding);
        array.push(parameters.combine);
        array.push(parameters.vertexUvs);
        array.push(parameters.fogExp2);
        array.push(parameters.sizeAttenuation);
        array.push(parameters.maxBones);
        array.push(parameters.morphTargetsCount);
        array.push(parameters.numDirLights);
        array.push(parameters.numPointLights);
        array.push(parameters.numSpotLights);
        array.push(parameters.numHemiLights);
        array.push(parameters.numRectAreaLights);
        array.push(parameters.numDirLightShadows);
        array.push(parameters.numPointLightShadows);
        array.push(parameters.numSpotLightShadows);
        array.push(parameters.shadowMapType);
        array.push(parameters.toneMapping);
        array.push(parameters.numClippingPlanes);
        array.push(parameters.numClipIntersection);
        array.push(parameters.format);
        array.push(parameters.specularColorMapEncoding);
        array.push(parameters.sheenColorMapEncoding);
    }
    function getProgramCacheKeyBooleans(array, parameters) {
        _programLayers.disableAll();
        if (parameters.isWebGL2) _programLayers.enable(0);
        if (parameters.supportsVertexTextures) _programLayers.enable(1);
        if (parameters.instancing) _programLayers.enable(2);
        if (parameters.instancingColor) _programLayers.enable(3);
        if (parameters.map) _programLayers.enable(4);
        if (parameters.matcap) _programLayers.enable(5);
        if (parameters.envMap) _programLayers.enable(6);
        if (parameters.envMapCubeUV) _programLayers.enable(7);
        if (parameters.lightMap) _programLayers.enable(8);
        if (parameters.aoMap) _programLayers.enable(9);
        if (parameters.emissiveMap) _programLayers.enable(10);
        if (parameters.bumpMap) _programLayers.enable(11);
        if (parameters.normalMap) _programLayers.enable(12);
        if (parameters.objectSpaceNormalMap) _programLayers.enable(13);
        if (parameters.tangentSpaceNormalMap) _programLayers.enable(14);
        if (parameters.clearcoat) _programLayers.enable(15);
        if (parameters.clearcoatMap) _programLayers.enable(16);
        if (parameters.clearcoatRoughnessMap) _programLayers.enable(17);
        if (parameters.clearcoatNormalMap) _programLayers.enable(18);
        if (parameters.displacementMap) _programLayers.enable(19);
        if (parameters.specularMap) _programLayers.enable(20);
        if (parameters.roughnessMap) _programLayers.enable(21);
        if (parameters.metalnessMap) _programLayers.enable(22);
        if (parameters.gradientMap) _programLayers.enable(23);
        if (parameters.alphaMap) _programLayers.enable(24);
        if (parameters.alphaTest) _programLayers.enable(25);
        if (parameters.vertexColors) _programLayers.enable(26);
        if (parameters.vertexAlphas) _programLayers.enable(27);
        if (parameters.vertexUvs) _programLayers.enable(28);
        if (parameters.vertexTangents) _programLayers.enable(29);
        if (parameters.uvsVertexOnly) _programLayers.enable(30);
        if (parameters.fog) _programLayers.enable(31);
        array.push(_programLayers.mask);
        _programLayers.disableAll();
        if (parameters.useFog) _programLayers.enable(0);
        if (parameters.flatShading) _programLayers.enable(1);
        if (parameters.logarithmicDepthBuffer) _programLayers.enable(2);
        if (parameters.skinning) _programLayers.enable(3);
        if (parameters.useVertexTexture) _programLayers.enable(4);
        if (parameters.morphTargets) _programLayers.enable(5);
        if (parameters.morphNormals) _programLayers.enable(6);
        if (parameters.premultipliedAlpha) _programLayers.enable(7);
        if (parameters.shadowMapEnabled) _programLayers.enable(8);
        if (parameters.physicallyCorrectLights) _programLayers.enable(9);
        if (parameters.doubleSided) _programLayers.enable(10);
        if (parameters.flipSided) _programLayers.enable(11);
        if (parameters.depthPacking) _programLayers.enable(12);
        if (parameters.dithering) _programLayers.enable(13);
        if (parameters.specularIntensityMap) _programLayers.enable(14);
        if (parameters.specularColorMap) _programLayers.enable(15);
        if (parameters.transmission) _programLayers.enable(16);
        if (parameters.transmissionMap) _programLayers.enable(17);
        if (parameters.thicknessMap) _programLayers.enable(18);
        if (parameters.sheen) _programLayers.enable(19);
        if (parameters.sheenColorMap) _programLayers.enable(20);
        if (parameters.sheenRoughnessMap) _programLayers.enable(21);
        array.push(_programLayers.mask);
    }
    function getUniforms(material) {
        const shaderID = shaderIDs[material.type];
        let uniforms;
        if (shaderID) {
            const shader = $2d9d8c9fc2282acc$export$bee4a7d47f8f5014[shaderID];
            uniforms = $2d9d8c9fc2282acc$export$d8ecdf8615bfea69.clone(shader.uniforms);
        } else uniforms = material.uniforms;
        return uniforms;
    }
    function acquireProgram(parameters, cacheKey) {
        let program;
        // Check if code has been already compiled
        for(let p = 0, pl = programs.length; p < pl; p++){
            const preexistingProgram = programs[p];
            if (preexistingProgram.cacheKey === cacheKey) {
                program = preexistingProgram;
                ++program.usedTimes;
                break;
            }
        }
        if (program === undefined) {
            program = new $2d9d8c9fc2282acc$var$WebGLProgram(renderer, cacheKey, parameters, bindingStates);
            programs.push(program);
        }
        return program;
    }
    function releaseProgram(program) {
        if (--program.usedTimes === 0) {
            // Remove from unordered set
            const i = programs.indexOf(program);
            programs[i] = programs[programs.length - 1];
            programs.pop();
            // Free WebGL resources
            program.destroy();
        }
    }
    function releaseShaderCache(material) {
        _customShaders.remove(material);
    }
    function dispose() {
        _customShaders.dispose();
    }
    return {
        getParameters: getParameters,
        getProgramCacheKey: getProgramCacheKey,
        getUniforms: getUniforms,
        acquireProgram: acquireProgram,
        releaseProgram: releaseProgram,
        releaseShaderCache: releaseShaderCache,
        // Exposed for resource monitoring & error feedback via renderer.info:
        programs: programs,
        dispose: dispose
    };
}
function $2d9d8c9fc2282acc$var$WebGLProperties() {
    let properties = new WeakMap();
    function get(object) {
        let map = properties.get(object);
        if (map === undefined) {
            map = {
            };
            properties.set(object, map);
        }
        return map;
    }
    function remove(object) {
        properties.delete(object);
    }
    function update(object, key, value) {
        properties.get(object)[key] = value;
    }
    function dispose() {
        properties = new WeakMap();
    }
    return {
        get: get,
        remove: remove,
        update: update,
        dispose: dispose
    };
}
function $2d9d8c9fc2282acc$var$painterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.material.id !== b.material.id) return a.material.id - b.material.id;
    else if (a.z !== b.z) return a.z - b.z;
    else return a.id - b.id;
}
function $2d9d8c9fc2282acc$var$reversePainterSortStable(a, b) {
    if (a.groupOrder !== b.groupOrder) return a.groupOrder - b.groupOrder;
    else if (a.renderOrder !== b.renderOrder) return a.renderOrder - b.renderOrder;
    else if (a.z !== b.z) return b.z - a.z;
    else return a.id - b.id;
}
function $2d9d8c9fc2282acc$var$WebGLRenderList() {
    const renderItems = [];
    let renderItemsIndex = 0;
    const opaque = [];
    const transmissive = [];
    const transparent = [];
    function init() {
        renderItemsIndex = 0;
        opaque.length = 0;
        transmissive.length = 0;
        transparent.length = 0;
    }
    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
        let renderItem = renderItems[renderItemsIndex];
        if (renderItem === undefined) {
            renderItem = {
                id: object.id,
                object: object,
                geometry: geometry,
                material: material,
                groupOrder: groupOrder,
                renderOrder: object.renderOrder,
                z: z,
                group: group
            };
            renderItems[renderItemsIndex] = renderItem;
        } else {
            renderItem.id = object.id;
            renderItem.object = object;
            renderItem.geometry = geometry;
            renderItem.material = material;
            renderItem.groupOrder = groupOrder;
            renderItem.renderOrder = object.renderOrder;
            renderItem.z = z;
            renderItem.group = group;
        }
        renderItemsIndex++;
        return renderItem;
    }
    function push(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0) transmissive.push(renderItem);
        else if (material.transparent === true) transparent.push(renderItem);
        else opaque.push(renderItem);
    }
    function unshift(object, geometry, material, groupOrder, z, group) {
        const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
        if (material.transmission > 0) transmissive.unshift(renderItem);
        else if (material.transparent === true) transparent.unshift(renderItem);
        else opaque.unshift(renderItem);
    }
    function sort(customOpaqueSort, customTransparentSort) {
        if (opaque.length > 1) opaque.sort(customOpaqueSort || $2d9d8c9fc2282acc$var$painterSortStable);
        if (transmissive.length > 1) transmissive.sort(customTransparentSort || $2d9d8c9fc2282acc$var$reversePainterSortStable);
        if (transparent.length > 1) transparent.sort(customTransparentSort || $2d9d8c9fc2282acc$var$reversePainterSortStable);
    }
    function finish() {
        // Clear references from inactive renderItems in the list
        for(let i114 = renderItemsIndex, il = renderItems.length; i114 < il; i114++){
            const renderItem = renderItems[i114];
            if (renderItem.id === null) break;
            renderItem.id = null;
            renderItem.object = null;
            renderItem.geometry = null;
            renderItem.material = null;
            renderItem.group = null;
        }
    }
    return {
        opaque: opaque,
        transmissive: transmissive,
        transparent: transparent,
        init: init,
        push: push,
        unshift: unshift,
        finish: finish,
        sort: sort
    };
}
function $2d9d8c9fc2282acc$var$WebGLRenderLists() {
    let lists = new WeakMap();
    function get(scene, renderCallDepth) {
        let list;
        if (lists.has(scene) === false) {
            list = new $2d9d8c9fc2282acc$var$WebGLRenderList();
            lists.set(scene, [
                list
            ]);
        } else if (renderCallDepth >= lists.get(scene).length) {
            list = new $2d9d8c9fc2282acc$var$WebGLRenderList();
            lists.get(scene).push(list);
        } else list = lists.get(scene)[renderCallDepth];
        return list;
    }
    function dispose() {
        lists = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
function $2d9d8c9fc2282acc$var$UniformsCache() {
    const lights = {
    };
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case 'DirectionalLight':
                    uniforms = {
                        direction: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        color: new $2d9d8c9fc2282acc$export$892596cec99bc70e()
                    };
                    break;
                case 'SpotLight':
                    uniforms = {
                        position: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        direction: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        color: new $2d9d8c9fc2282acc$export$892596cec99bc70e(),
                        distance: 0,
                        coneCos: 0,
                        penumbraCos: 0,
                        decay: 0
                    };
                    break;
                case 'PointLight':
                    uniforms = {
                        position: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        color: new $2d9d8c9fc2282acc$export$892596cec99bc70e(),
                        distance: 0,
                        decay: 0
                    };
                    break;
                case 'HemisphereLight':
                    uniforms = {
                        direction: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        skyColor: new $2d9d8c9fc2282acc$export$892596cec99bc70e(),
                        groundColor: new $2d9d8c9fc2282acc$export$892596cec99bc70e()
                    };
                    break;
                case 'RectAreaLight':
                    uniforms = {
                        color: new $2d9d8c9fc2282acc$export$892596cec99bc70e(),
                        position: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        halfWidth: new $2d9d8c9fc2282acc$export$64b5c384219d3699(),
                        halfHeight: new $2d9d8c9fc2282acc$export$64b5c384219d3699()
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
function $2d9d8c9fc2282acc$var$ShadowUniformsCache() {
    const lights = {
    };
    return {
        get: function(light) {
            if (lights[light.id] !== undefined) return lights[light.id];
            let uniforms;
            switch(light.type){
                case 'DirectionalLight':
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()
                    };
                    break;
                case 'SpotLight':
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()
                    };
                    break;
                case 'PointLight':
                    uniforms = {
                        shadowBias: 0,
                        shadowNormalBias: 0,
                        shadowRadius: 1,
                        shadowMapSize: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(),
                        shadowCameraNear: 1,
                        shadowCameraFar: 1000
                    };
                    break;
            }
            lights[light.id] = uniforms;
            return uniforms;
        }
    };
}
let $2d9d8c9fc2282acc$var$nextVersion = 0;
function $2d9d8c9fc2282acc$var$shadowCastingLightsFirst(lightA, lightB) {
    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
}
function $2d9d8c9fc2282acc$var$WebGLLights(extensions, capabilities) {
    const cache = new $2d9d8c9fc2282acc$var$UniformsCache();
    const shadowCache = $2d9d8c9fc2282acc$var$ShadowUniformsCache();
    const state = {
        version: 0,
        hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1
        },
        ambient: [
            0,
            0,
            0
        ],
        probe: [],
        directional: [],
        directionalShadow: [],
        directionalShadowMap: [],
        directionalShadowMatrix: [],
        spot: [],
        spotShadow: [],
        spotShadowMap: [],
        spotShadowMatrix: [],
        rectArea: [],
        rectAreaLTC1: null,
        rectAreaLTC2: null,
        point: [],
        pointShadow: [],
        pointShadowMap: [],
        pointShadowMatrix: [],
        hemi: []
    };
    for(let i115 = 0; i115 < 9; i115++)state.probe.push(new $2d9d8c9fc2282acc$export$64b5c384219d3699());
    const vector3 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
    const matrix4 = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
    const matrix42 = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
    function setup(lights, physicallyCorrectLights) {
        let r = 0, g = 0, b = 0;
        for(let i117 = 0; i117 < 9; i117++)state.probe[i117].set(0, 0, 0);
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        let numDirectionalShadows = 0;
        let numPointShadows = 0;
        let numSpotShadows = 0;
        lights.sort($2d9d8c9fc2282acc$var$shadowCastingLightsFirst);
        // artist-friendly light intensity scaling factor
        const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;
        for(let i116 = 0, l = lights.length; i116 < l; i116++){
            const light = lights[i116];
            const color = light.color;
            const intensity = light.intensity;
            const distance = light.distance;
            const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
            if (light.isAmbientLight) {
                r += color.r * intensity * scaleFactor;
                g += color.g * intensity * scaleFactor;
                b += color.b * intensity * scaleFactor;
            } else if (light.isLightProbe) for(let j = 0; j < 9; j++)state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
            else if (light.isDirectionalLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.directionalShadow[directionalLength] = shadowUniforms;
                    state.directionalShadowMap[directionalLength] = shadowMap;
                    state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
                    numDirectionalShadows++;
                }
                state.directional[directionalLength] = uniforms;
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = cache.get(light);
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);
                uniforms.distance = distance;
                uniforms.coneCos = Math.cos(light.angle);
                uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
                uniforms.decay = light.decay;
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    state.spotShadow[spotLength] = shadowUniforms;
                    state.spotShadowMap[spotLength] = shadowMap;
                    state.spotShadowMatrix[spotLength] = light.shadow.matrix;
                    numSpotShadows++;
                }
                state.spot[spotLength] = uniforms;
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = cache.get(light);
                // (a) intensity is the total visible light emitted
                //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
                // (b) intensity is the brightness of the light
                uniforms.color.copy(color).multiplyScalar(intensity);
                uniforms.halfWidth.set(light.width * 0.5, 0, 0);
                uniforms.halfHeight.set(0, light.height * 0.5, 0);
                state.rectArea[rectAreaLength] = uniforms;
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = cache.get(light);
                uniforms.color.copy(light.color).multiplyScalar(light.intensity * scaleFactor);
                uniforms.distance = light.distance;
                uniforms.decay = light.decay;
                if (light.castShadow) {
                    const shadow = light.shadow;
                    const shadowUniforms = shadowCache.get(light);
                    shadowUniforms.shadowBias = shadow.bias;
                    shadowUniforms.shadowNormalBias = shadow.normalBias;
                    shadowUniforms.shadowRadius = shadow.radius;
                    shadowUniforms.shadowMapSize = shadow.mapSize;
                    shadowUniforms.shadowCameraNear = shadow.camera.near;
                    shadowUniforms.shadowCameraFar = shadow.camera.far;
                    state.pointShadow[pointLength] = shadowUniforms;
                    state.pointShadowMap[pointLength] = shadowMap;
                    state.pointShadowMatrix[pointLength] = light.shadow.matrix;
                    numPointShadows++;
                }
                state.point[pointLength] = uniforms;
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = cache.get(light);
                uniforms.skyColor.copy(light.color).multiplyScalar(intensity * scaleFactor);
                uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity * scaleFactor);
                state.hemi[hemiLength] = uniforms;
                hemiLength++;
            }
        }
        if (rectAreaLength > 0) {
            if (capabilities.isWebGL2) {
                // WebGL 2
                state.rectAreaLTC1 = $2d9d8c9fc2282acc$export$6643083551874bf5.LTC_FLOAT_1;
                state.rectAreaLTC2 = $2d9d8c9fc2282acc$export$6643083551874bf5.LTC_FLOAT_2;
            } else {
                // WebGL 1
                if (extensions.has('OES_texture_float_linear') === true) {
                    state.rectAreaLTC1 = $2d9d8c9fc2282acc$export$6643083551874bf5.LTC_FLOAT_1;
                    state.rectAreaLTC2 = $2d9d8c9fc2282acc$export$6643083551874bf5.LTC_FLOAT_2;
                } else if (extensions.has('OES_texture_half_float_linear') === true) {
                    state.rectAreaLTC1 = $2d9d8c9fc2282acc$export$6643083551874bf5.LTC_HALF_1;
                    state.rectAreaLTC2 = $2d9d8c9fc2282acc$export$6643083551874bf5.LTC_HALF_2;
                } else console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');
            }
        }
        state.ambient[0] = r;
        state.ambient[1] = g;
        state.ambient[2] = b;
        const hash = state.hash;
        if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {
            state.directional.length = directionalLength;
            state.spot.length = spotLength;
            state.rectArea.length = rectAreaLength;
            state.point.length = pointLength;
            state.hemi.length = hemiLength;
            state.directionalShadow.length = numDirectionalShadows;
            state.directionalShadowMap.length = numDirectionalShadows;
            state.pointShadow.length = numPointShadows;
            state.pointShadowMap.length = numPointShadows;
            state.spotShadow.length = numSpotShadows;
            state.spotShadowMap.length = numSpotShadows;
            state.directionalShadowMatrix.length = numDirectionalShadows;
            state.pointShadowMatrix.length = numPointShadows;
            state.spotShadowMatrix.length = numSpotShadows;
            hash.directionalLength = directionalLength;
            hash.pointLength = pointLength;
            hash.spotLength = spotLength;
            hash.rectAreaLength = rectAreaLength;
            hash.hemiLength = hemiLength;
            hash.numDirectionalShadows = numDirectionalShadows;
            hash.numPointShadows = numPointShadows;
            hash.numSpotShadows = numSpotShadows;
            state.version = $2d9d8c9fc2282acc$var$nextVersion++;
        }
    }
    function setupView(lights, camera) {
        let directionalLength = 0;
        let pointLength = 0;
        let spotLength = 0;
        let rectAreaLength = 0;
        let hemiLength = 0;
        const viewMatrix = camera.matrixWorldInverse;
        for(let i118 = 0, l = lights.length; i118 < l; i118++){
            const light = lights[i118];
            if (light.isDirectionalLight) {
                const uniforms = state.directional[directionalLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                directionalLength++;
            } else if (light.isSpotLight) {
                const uniforms = state.spot[spotLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                vector3.setFromMatrixPosition(light.target.matrixWorld);
                uniforms.direction.sub(vector3);
                uniforms.direction.transformDirection(viewMatrix);
                spotLength++;
            } else if (light.isRectAreaLight) {
                const uniforms = state.rectArea[rectAreaLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                // extract local rotation of light to derive width/height half vectors
                matrix42.identity();
                matrix4.copy(light.matrixWorld);
                matrix4.premultiply(viewMatrix);
                matrix42.extractRotation(matrix4);
                uniforms.halfWidth.set(light.width * 0.5, 0, 0);
                uniforms.halfHeight.set(0, light.height * 0.5, 0);
                uniforms.halfWidth.applyMatrix4(matrix42);
                uniforms.halfHeight.applyMatrix4(matrix42);
                rectAreaLength++;
            } else if (light.isPointLight) {
                const uniforms = state.point[pointLength];
                uniforms.position.setFromMatrixPosition(light.matrixWorld);
                uniforms.position.applyMatrix4(viewMatrix);
                pointLength++;
            } else if (light.isHemisphereLight) {
                const uniforms = state.hemi[hemiLength];
                uniforms.direction.setFromMatrixPosition(light.matrixWorld);
                uniforms.direction.transformDirection(viewMatrix);
                uniforms.direction.normalize();
                hemiLength++;
            }
        }
    }
    return {
        setup: setup,
        setupView: setupView,
        state: state
    };
}
function $2d9d8c9fc2282acc$var$WebGLRenderState(extensions, capabilities) {
    const lights = new $2d9d8c9fc2282acc$var$WebGLLights(extensions, capabilities);
    const lightsArray = [];
    const shadowsArray = [];
    function init() {
        lightsArray.length = 0;
        shadowsArray.length = 0;
    }
    function pushLight(light) {
        lightsArray.push(light);
    }
    function pushShadow(shadowLight) {
        shadowsArray.push(shadowLight);
    }
    function setupLights(physicallyCorrectLights) {
        lights.setup(lightsArray, physicallyCorrectLights);
    }
    function setupLightsView(camera) {
        lights.setupView(lightsArray, camera);
    }
    const state = {
        lightsArray: lightsArray,
        shadowsArray: shadowsArray,
        lights: lights
    };
    return {
        init: init,
        state: state,
        setupLights: setupLights,
        setupLightsView: setupLightsView,
        pushLight: pushLight,
        pushShadow: pushShadow
    };
}
function $2d9d8c9fc2282acc$var$WebGLRenderStates(extensions, capabilities) {
    let renderStates = new WeakMap();
    function get(scene, renderCallDepth = 0) {
        let renderState;
        if (renderStates.has(scene) === false) {
            renderState = new $2d9d8c9fc2282acc$var$WebGLRenderState(extensions, capabilities);
            renderStates.set(scene, [
                renderState
            ]);
        } else if (renderCallDepth >= renderStates.get(scene).length) {
            renderState = new $2d9d8c9fc2282acc$var$WebGLRenderState(extensions, capabilities);
            renderStates.get(scene).push(renderState);
        } else renderState = renderStates.get(scene)[renderCallDepth];
        return renderState;
    }
    function dispose() {
        renderStates = new WeakMap();
    }
    return {
        get: get,
        dispose: dispose
    };
}
/**
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */ class $2d9d8c9fc2282acc$export$2698c22ec13825db extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'MeshDepthMaterial';
        this.depthPacking = $2d9d8c9fc2282acc$export$deeb383078690b50;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.depthPacking = source.depthPacking;
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        return this;
    }
}
$2d9d8c9fc2282acc$export$2698c22ec13825db.prototype.isMeshDepthMaterial = true;
/**
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */ class $2d9d8c9fc2282acc$export$33e187ed002f2a19 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'MeshDistanceMaterial';
        this.referencePosition = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        this.nearDistance = 1;
        this.farDistance = 1000;
        this.map = null;
        this.alphaMap = null;
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.fog = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.referencePosition.copy(source.referencePosition);
        this.nearDistance = source.nearDistance;
        this.farDistance = source.farDistance;
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        return this;
    }
}
$2d9d8c9fc2282acc$export$33e187ed002f2a19.prototype.isMeshDistanceMaterial = true;
const $2d9d8c9fc2282acc$var$vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
const $2d9d8c9fc2282acc$var$fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function $2d9d8c9fc2282acc$var$WebGLShadowMap(_renderer, _objects, _capabilities) {
    let _frustum = new $2d9d8c9fc2282acc$export$35efe6f4c85463d2();
    const _shadowMapSize = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), _viewportSize = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), _viewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(), _depthMaterial = new $2d9d8c9fc2282acc$export$2698c22ec13825db({
        depthPacking: $2d9d8c9fc2282acc$export$8f910f4c4f73df11
    }), _distanceMaterial = new $2d9d8c9fc2282acc$export$33e187ed002f2a19(), _materialCache = {
    }, _maxTextureSize = _capabilities.maxTextureSize;
    const shadowSide = {
        0: $2d9d8c9fc2282acc$export$d9f0486e75b5ace,
        1: $2d9d8c9fc2282acc$export$2ede184fc2998901,
        2: $2d9d8c9fc2282acc$export$3b296b6f144d5b03
    };
    const shadowMaterialVertical = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
        defines: {
            VSM_SAMPLES: 8
        },
        uniforms: {
            shadow_pass: {
                value: null
            },
            resolution: {
                value: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()
            },
            radius: {
                value: 4
            }
        },
        vertexShader: $2d9d8c9fc2282acc$var$vertex,
        fragmentShader: $2d9d8c9fc2282acc$var$fragment
    });
    const shadowMaterialHorizontal = shadowMaterialVertical.clone();
    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
    const fullScreenTri = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
    fullScreenTri.setAttribute('position', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(new Float32Array([
        -1,
        -1,
        0.5,
        3,
        -1,
        0.5,
        -1,
        3,
        0.5
    ]), 3));
    const fullScreenMesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(fullScreenTri, shadowMaterialVertical);
    const scope = this;
    this.enabled = false;
    this.autoUpdate = true;
    this.needsUpdate = false;
    this.type = $2d9d8c9fc2282acc$export$5813f879eee7cd88;
    this.render = function(lights, scene, camera) {
        if (scope.enabled === false) return;
        if (scope.autoUpdate === false && scope.needsUpdate === false) return;
        if (lights.length === 0) return;
        const currentRenderTarget = _renderer.getRenderTarget();
        const activeCubeFace = _renderer.getActiveCubeFace();
        const activeMipmapLevel = _renderer.getActiveMipmapLevel();
        const _state = _renderer.state;
        // Set GL state for depth map.
        _state.setBlending($2d9d8c9fc2282acc$export$63b8d6b580fc65ba);
        _state.buffers.color.setClear(1, 1, 1, 1);
        _state.buffers.depth.setTest(true);
        _state.setScissorTest(false);
        // render depth map
        for(let i119 = 0, il = lights.length; i119 < il; i119++){
            const light = lights[i119];
            const shadow = light.shadow;
            if (shadow === undefined) {
                console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
                continue;
            }
            if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
            _shadowMapSize.copy(shadow.mapSize);
            const shadowFrameExtents = shadow.getFrameExtents();
            _shadowMapSize.multiply(shadowFrameExtents);
            _viewportSize.copy(shadow.mapSize);
            if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
                if (_shadowMapSize.x > _maxTextureSize) {
                    _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
                    _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
                    shadow.mapSize.x = _viewportSize.x;
                }
                if (_shadowMapSize.y > _maxTextureSize) {
                    _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
                    _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
                    shadow.mapSize.y = _viewportSize.y;
                }
            }
            if (shadow.map === null && !shadow.isPointLightShadow && this.type === $2d9d8c9fc2282acc$export$896ae1ade6c829c4) {
                const pars = {
                    minFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
                    magFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
                    format: $2d9d8c9fc2282acc$export$3f8bb04b555a363c
                };
                shadow.map = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + '.shadowMap';
                shadow.mapPass = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.camera.updateProjectionMatrix();
            }
            if (shadow.map === null) {
                const pars = {
                    minFilter: $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0,
                    magFilter: $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0,
                    format: $2d9d8c9fc2282acc$export$3f8bb04b555a363c
                };
                shadow.map = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(_shadowMapSize.x, _shadowMapSize.y, pars);
                shadow.map.texture.name = light.name + '.shadowMap';
                shadow.camera.updateProjectionMatrix();
            }
            _renderer.setRenderTarget(shadow.map);
            _renderer.clear();
            const viewportCount = shadow.getViewportCount();
            for(let vp = 0; vp < viewportCount; vp++){
                const viewport = shadow.getViewport(vp);
                _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);
                _state.viewport(_viewport);
                shadow.updateMatrices(light, vp);
                _frustum = shadow.getFrustum();
                renderObject(scene, camera, shadow.camera, light, this.type);
            }
            // do blur pass for VSM
            if (!shadow.isPointLightShadow && this.type === $2d9d8c9fc2282acc$export$896ae1ade6c829c4) VSMPass(shadow, camera);
            shadow.needsUpdate = false;
        }
        scope.needsUpdate = false;
        _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
    };
    function VSMPass(shadow, camera) {
        const geometry = _objects.update(fullScreenMesh);
        if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
            shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
            shadowMaterialVertical.needsUpdate = true;
            shadowMaterialHorizontal.needsUpdate = true;
        }
        // vertical pass
        shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
        shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialVertical.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.mapPass);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
        // horizontal pass
        shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
        shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
        shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
        _renderer.setRenderTarget(shadow.map);
        _renderer.clear();
        _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
    }
    function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
        let result = null;
        const customMaterial = light.isPointLight === true ? object.customDistanceMaterial : object.customDepthMaterial;
        if (customMaterial !== undefined) result = customMaterial;
        else result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
        if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0) {
            // in this case we need a unique material instance reflecting the
            // appropriate state
            const keyA = result.uuid, keyB = material.uuid;
            let materialsForVariant = _materialCache[keyA];
            if (materialsForVariant === undefined) {
                materialsForVariant = {
                };
                _materialCache[keyA] = materialsForVariant;
            }
            let cachedMaterial = materialsForVariant[keyB];
            if (cachedMaterial === undefined) {
                cachedMaterial = result.clone();
                materialsForVariant[keyB] = cachedMaterial;
            }
            result = cachedMaterial;
        }
        result.visible = material.visible;
        result.wireframe = material.wireframe;
        if (type === $2d9d8c9fc2282acc$export$896ae1ade6c829c4) result.side = material.shadowSide !== null ? material.shadowSide : material.side;
        else result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
        result.alphaMap = material.alphaMap;
        result.alphaTest = material.alphaTest;
        result.clipShadows = material.clipShadows;
        result.clippingPlanes = material.clippingPlanes;
        result.clipIntersection = material.clipIntersection;
        result.displacementMap = material.displacementMap;
        result.displacementScale = material.displacementScale;
        result.displacementBias = material.displacementBias;
        result.wireframeLinewidth = material.wireframeLinewidth;
        result.linewidth = material.linewidth;
        if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
            result.referencePosition.setFromMatrixPosition(light.matrixWorld);
            result.nearDistance = shadowCameraNear;
            result.farDistance = shadowCameraFar;
        }
        return result;
    }
    function renderObject(object, camera, shadowCamera, light, type) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible && (object.isMesh || object.isLine || object.isPoints)) {
            if ((object.castShadow || object.receiveShadow && type === $2d9d8c9fc2282acc$export$896ae1ade6c829c4) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                const geometry = _objects.update(object);
                const material = object.material;
                if (Array.isArray(material)) {
                    const groups = geometry.groups;
                    for(let k = 0, kl = groups.length; k < kl; k++){
                        const group = groups[k];
                        const groupMaterial = material[group.materialIndex];
                        if (groupMaterial && groupMaterial.visible) {
                            const depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
                            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                        }
                    }
                } else if (material.visible) {
                    const depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
                    _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);
                }
            }
        }
        const children = object.children;
        for(let i120 = 0, l = children.length; i120 < l; i120++)renderObject(children[i120], camera, shadowCamera, light, type);
    }
}
function $2d9d8c9fc2282acc$var$WebGLState(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function ColorBuffer() {
        let locked = false;
        const color = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
        let currentColorMask = null;
        const currentColorClear = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 0, 0, 0);
        return {
            setMask: function(colorMask) {
                if (currentColorMask !== colorMask && !locked) {
                    gl.colorMask(colorMask, colorMask, colorMask, colorMask);
                    currentColorMask = colorMask;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(r, g, b, a, premultipliedAlpha) {
                if (premultipliedAlpha === true) {
                    r *= a;
                    g *= a;
                    b *= a;
                }
                color.set(r, g, b, a);
                if (currentColorClear.equals(color) === false) {
                    gl.clearColor(r, g, b, a);
                    currentColorClear.copy(color);
                }
            },
            reset: function() {
                locked = false;
                currentColorMask = null;
                currentColorClear.set(-1, 0, 0, 0); // set to invalid state
            }
        };
    }
    function DepthBuffer() {
        let locked = false;
        let currentDepthMask = null;
        let currentDepthFunc = null;
        let currentDepthClear = null;
        return {
            setTest: function(depthTest) {
                if (depthTest) enable(2929);
                else disable(2929);
            },
            setMask: function(depthMask) {
                if (currentDepthMask !== depthMask && !locked) {
                    gl.depthMask(depthMask);
                    currentDepthMask = depthMask;
                }
            },
            setFunc: function(depthFunc) {
                if (currentDepthFunc !== depthFunc) {
                    if (depthFunc) switch(depthFunc){
                        case $2d9d8c9fc2282acc$export$69025ce147cee220:
                            gl.depthFunc(512);
                            break;
                        case $2d9d8c9fc2282acc$export$7182eb52ea3b3f04:
                            gl.depthFunc(519);
                            break;
                        case $2d9d8c9fc2282acc$export$eedccec66ab7ebe:
                            gl.depthFunc(513);
                            break;
                        case $2d9d8c9fc2282acc$export$296f78a0b892f81a:
                            gl.depthFunc(515);
                            break;
                        case $2d9d8c9fc2282acc$export$a60d398fc7b7590e:
                            gl.depthFunc(514);
                            break;
                        case $2d9d8c9fc2282acc$export$7d7234c1240a1fc4:
                            gl.depthFunc(518);
                            break;
                        case $2d9d8c9fc2282acc$export$c5e2c52991f30937:
                            gl.depthFunc(516);
                            break;
                        case $2d9d8c9fc2282acc$export$2f843afa843d8916:
                            gl.depthFunc(517);
                            break;
                        default:
                            gl.depthFunc(515);
                    }
                    else gl.depthFunc(515);
                    currentDepthFunc = depthFunc;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(depth) {
                if (currentDepthClear !== depth) {
                    gl.clearDepth(depth);
                    currentDepthClear = depth;
                }
            },
            reset: function() {
                locked = false;
                currentDepthMask = null;
                currentDepthFunc = null;
                currentDepthClear = null;
            }
        };
    }
    function StencilBuffer() {
        let locked = false;
        let currentStencilMask = null;
        let currentStencilFunc = null;
        let currentStencilRef = null;
        let currentStencilFuncMask = null;
        let currentStencilFail = null;
        let currentStencilZFail = null;
        let currentStencilZPass = null;
        let currentStencilClear = null;
        return {
            setTest: function(stencilTest) {
                if (!locked) {
                    if (stencilTest) enable(2960);
                    else disable(2960);
                }
            },
            setMask: function(stencilMask) {
                if (currentStencilMask !== stencilMask && !locked) {
                    gl.stencilMask(stencilMask);
                    currentStencilMask = stencilMask;
                }
            },
            setFunc: function(stencilFunc, stencilRef, stencilMask) {
                if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
                    gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
                    currentStencilFunc = stencilFunc;
                    currentStencilRef = stencilRef;
                    currentStencilFuncMask = stencilMask;
                }
            },
            setOp: function(stencilFail, stencilZFail, stencilZPass) {
                if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
                    gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
                    currentStencilFail = stencilFail;
                    currentStencilZFail = stencilZFail;
                    currentStencilZPass = stencilZPass;
                }
            },
            setLocked: function(lock) {
                locked = lock;
            },
            setClear: function(stencil) {
                if (currentStencilClear !== stencil) {
                    gl.clearStencil(stencil);
                    currentStencilClear = stencil;
                }
            },
            reset: function() {
                locked = false;
                currentStencilMask = null;
                currentStencilFunc = null;
                currentStencilRef = null;
                currentStencilFuncMask = null;
                currentStencilFail = null;
                currentStencilZFail = null;
                currentStencilZPass = null;
                currentStencilClear = null;
            }
        };
    }
    //
    const colorBuffer = new ColorBuffer();
    const depthBuffer = new DepthBuffer();
    const stencilBuffer = new StencilBuffer();
    let enabledCapabilities = {
    };
    let currentBoundFramebuffers = {
    };
    let currentProgram = null;
    let currentBlendingEnabled = false;
    let currentBlending = null;
    let currentBlendEquation = null;
    let currentBlendSrc = null;
    let currentBlendDst = null;
    let currentBlendEquationAlpha = null;
    let currentBlendSrcAlpha = null;
    let currentBlendDstAlpha = null;
    let currentPremultipledAlpha = false;
    let currentFlipSided = null;
    let currentCullFace = null;
    let currentLineWidth = null;
    let currentPolygonOffsetFactor = null;
    let currentPolygonOffsetUnits = null;
    const maxTextures = gl.getParameter(35661);
    let lineWidthAvailable = false;
    let version = 0;
    const glVersion = gl.getParameter(7938);
    if (glVersion.indexOf('WebGL') !== -1) {
        version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 1;
    } else if (glVersion.indexOf('OpenGL ES') !== -1) {
        version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
        lineWidthAvailable = version >= 2;
    }
    let currentTextureSlot = null;
    let currentBoundTextures = {
    };
    const scissorParam = gl.getParameter(3088);
    const viewportParam = gl.getParameter(2978);
    const currentScissor = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3().fromArray(scissorParam);
    const currentViewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3().fromArray(viewportParam);
    function createTexture(type, target, count) {
        const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.
        const texture = gl.createTexture();
        gl.bindTexture(type, texture);
        gl.texParameteri(type, 10241, 9728);
        gl.texParameteri(type, 10240, 9728);
        for(let i121 = 0; i121 < count; i121++)gl.texImage2D(target + i121, 0, 6408, 1, 1, 0, 6408, 5121, data);
        return texture;
    }
    const emptyTextures = {
    };
    emptyTextures[3553] = createTexture(3553, 3553, 1);
    emptyTextures[34067] = createTexture(34067, 34069, 6);
    // init
    colorBuffer.setClear(0, 0, 0, 1);
    depthBuffer.setClear(1);
    stencilBuffer.setClear(0);
    enable(2929);
    depthBuffer.setFunc($2d9d8c9fc2282acc$export$296f78a0b892f81a);
    setFlipSided(false);
    setCullFace($2d9d8c9fc2282acc$export$b9a7b4fc5cb15f9b);
    enable(2884);
    setBlending($2d9d8c9fc2282acc$export$63b8d6b580fc65ba);
    //
    function enable(id) {
        if (enabledCapabilities[id] !== true) {
            gl.enable(id);
            enabledCapabilities[id] = true;
        }
    }
    function disable(id) {
        if (enabledCapabilities[id] !== false) {
            gl.disable(id);
            enabledCapabilities[id] = false;
        }
    }
    function bindFramebuffer(target, framebuffer) {
        if (currentBoundFramebuffers[target] !== framebuffer) {
            gl.bindFramebuffer(target, framebuffer);
            currentBoundFramebuffers[target] = framebuffer;
            if (isWebGL2) {
                // 36009 is equivalent to 36160
                if (target === 36009) currentBoundFramebuffers[36160] = framebuffer;
                if (target === 36160) currentBoundFramebuffers[36009] = framebuffer;
            }
            return true;
        }
        return false;
    }
    function useProgram(program) {
        if (currentProgram !== program) {
            gl.useProgram(program);
            currentProgram = program;
            return true;
        }
        return false;
    }
    const equationToGL = {
        [$2d9d8c9fc2282acc$export$20183a0484ce21a0]: 32774,
        [$2d9d8c9fc2282acc$export$73e0df5177988548]: 32778,
        [$2d9d8c9fc2282acc$export$28e582859cbec660]: 32779
    };
    if (isWebGL2) {
        equationToGL[$2d9d8c9fc2282acc$export$c8c1508da8d0600c] = 32775;
        equationToGL[$2d9d8c9fc2282acc$export$99948c02fb51055f] = 32776;
    } else {
        const extension = extensions.get('EXT_blend_minmax');
        if (extension !== null) {
            equationToGL[$2d9d8c9fc2282acc$export$c8c1508da8d0600c] = extension.MIN_EXT;
            equationToGL[$2d9d8c9fc2282acc$export$99948c02fb51055f] = extension.MAX_EXT;
        }
    }
    const factorToGL = {
        [$2d9d8c9fc2282acc$export$2110f05edf778d3d]: 0,
        [$2d9d8c9fc2282acc$export$8805bad65e24940e]: 1,
        [$2d9d8c9fc2282acc$export$7fbe15b28d28cf52]: 768,
        [$2d9d8c9fc2282acc$export$d5773124e86cf28c]: 770,
        [$2d9d8c9fc2282acc$export$c05e2a1fc8609506]: 776,
        [$2d9d8c9fc2282acc$export$ef5f2dd8ffac5574]: 774,
        [$2d9d8c9fc2282acc$export$a78aed1ca2a87192]: 772,
        [$2d9d8c9fc2282acc$export$947829af9f2c17f6]: 769,
        [$2d9d8c9fc2282acc$export$11d468cc7f19e971]: 771,
        [$2d9d8c9fc2282acc$export$56b85b2686ab16]: 775,
        [$2d9d8c9fc2282acc$export$5d0fe17fd8773bac]: 773
    };
    function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
        if (blending === $2d9d8c9fc2282acc$export$63b8d6b580fc65ba) {
            if (currentBlendingEnabled === true) {
                disable(3042);
                currentBlendingEnabled = false;
            }
            return;
        }
        if (currentBlendingEnabled === false) {
            enable(3042);
            currentBlendingEnabled = true;
        }
        if (blending !== $2d9d8c9fc2282acc$export$eda4864c68df1fa2) {
            if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                if (currentBlendEquation !== $2d9d8c9fc2282acc$export$20183a0484ce21a0 || currentBlendEquationAlpha !== $2d9d8c9fc2282acc$export$20183a0484ce21a0) {
                    gl.blendEquation(32774);
                    currentBlendEquation = $2d9d8c9fc2282acc$export$20183a0484ce21a0;
                    currentBlendEquationAlpha = $2d9d8c9fc2282acc$export$20183a0484ce21a0;
                }
                if (premultipliedAlpha) switch(blending){
                    case $2d9d8c9fc2282acc$export$5b29a26d96ee6af0:
                        gl.blendFuncSeparate(1, 771, 1, 771);
                        break;
                    case $2d9d8c9fc2282acc$export$777d8f9551c2216b:
                        gl.blendFunc(1, 1);
                        break;
                    case $2d9d8c9fc2282acc$export$cdfa06f868e2e467:
                        gl.blendFuncSeparate(0, 0, 769, 771);
                        break;
                    case $2d9d8c9fc2282acc$export$4138e1c684b46a20:
                        gl.blendFuncSeparate(0, 768, 0, 770);
                        break;
                    default:
                        console.error('THREE.WebGLState: Invalid blending: ', blending);
                        break;
                }
                else switch(blending){
                    case $2d9d8c9fc2282acc$export$5b29a26d96ee6af0:
                        gl.blendFuncSeparate(770, 771, 1, 771);
                        break;
                    case $2d9d8c9fc2282acc$export$777d8f9551c2216b:
                        gl.blendFunc(770, 1);
                        break;
                    case $2d9d8c9fc2282acc$export$cdfa06f868e2e467:
                        gl.blendFunc(0, 769);
                        break;
                    case $2d9d8c9fc2282acc$export$4138e1c684b46a20:
                        gl.blendFunc(0, 768);
                        break;
                    default:
                        console.error('THREE.WebGLState: Invalid blending: ', blending);
                        break;
                }
                currentBlendSrc = null;
                currentBlendDst = null;
                currentBlendSrcAlpha = null;
                currentBlendDstAlpha = null;
                currentBlending = blending;
                currentPremultipledAlpha = premultipliedAlpha;
            }
            return;
        }
        // custom blending
        blendEquationAlpha = blendEquationAlpha || blendEquation;
        blendSrcAlpha = blendSrcAlpha || blendSrc;
        blendDstAlpha = blendDstAlpha || blendDst;
        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
            gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
            currentBlendEquation = blendEquation;
            currentBlendEquationAlpha = blendEquationAlpha;
        }
        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
            gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
            currentBlendSrc = blendSrc;
            currentBlendDst = blendDst;
            currentBlendSrcAlpha = blendSrcAlpha;
            currentBlendDstAlpha = blendDstAlpha;
        }
        currentBlending = blending;
        currentPremultipledAlpha = null;
    }
    function setMaterial(material, frontFaceCW) {
        material.side === $2d9d8c9fc2282acc$export$3b296b6f144d5b03 ? disable(2884) : enable(2884);
        let flipSided = material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace;
        if (frontFaceCW) flipSided = !flipSided;
        setFlipSided(flipSided);
        material.blending === $2d9d8c9fc2282acc$export$5b29a26d96ee6af0 && material.transparent === false ? setBlending($2d9d8c9fc2282acc$export$63b8d6b580fc65ba) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
        depthBuffer.setFunc(material.depthFunc);
        depthBuffer.setTest(material.depthTest);
        depthBuffer.setMask(material.depthWrite);
        colorBuffer.setMask(material.colorWrite);
        const stencilWrite = material.stencilWrite;
        stencilBuffer.setTest(stencilWrite);
        if (stencilWrite) {
            stencilBuffer.setMask(material.stencilWriteMask);
            stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
            stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
        }
        setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
        material.alphaToCoverage === true ? enable(32926) : disable(32926);
    }
    //
    function setFlipSided(flipSided) {
        if (currentFlipSided !== flipSided) {
            if (flipSided) gl.frontFace(2304);
            else gl.frontFace(2305);
            currentFlipSided = flipSided;
        }
    }
    function setCullFace(cullFace) {
        if (cullFace !== $2d9d8c9fc2282acc$export$3237e1f2c1ea1f44) {
            enable(2884);
            if (cullFace !== currentCullFace) {
                if (cullFace === $2d9d8c9fc2282acc$export$b9a7b4fc5cb15f9b) gl.cullFace(1029);
                else if (cullFace === $2d9d8c9fc2282acc$export$b8058bcc7037d3f3) gl.cullFace(1028);
                else gl.cullFace(1032);
            }
        } else disable(2884);
        currentCullFace = cullFace;
    }
    function setLineWidth(width) {
        if (width !== currentLineWidth) {
            if (lineWidthAvailable) gl.lineWidth(width);
            currentLineWidth = width;
        }
    }
    function setPolygonOffset(polygonOffset, factor, units) {
        if (polygonOffset) {
            enable(32823);
            if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
                gl.polygonOffset(factor, units);
                currentPolygonOffsetFactor = factor;
                currentPolygonOffsetUnits = units;
            }
        } else disable(32823);
    }
    function setScissorTest(scissorTest) {
        if (scissorTest) enable(3089);
        else disable(3089);
    }
    // texture
    function activeTexture(webglSlot) {
        if (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;
        if (currentTextureSlot !== webglSlot) {
            gl.activeTexture(webglSlot);
            currentTextureSlot = webglSlot;
        }
    }
    function bindTexture(webglType, webglTexture) {
        if (currentTextureSlot === null) activeTexture();
        let boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture === undefined) {
            boundTexture = {
                type: undefined,
                texture: undefined
            };
            currentBoundTextures[currentTextureSlot] = boundTexture;
        }
        if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
            gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
            boundTexture.type = webglType;
            boundTexture.texture = webglTexture;
        }
    }
    function unbindTexture() {
        const boundTexture = currentBoundTextures[currentTextureSlot];
        if (boundTexture !== undefined && boundTexture.type !== undefined) {
            gl.bindTexture(boundTexture.type, null);
            boundTexture.type = undefined;
            boundTexture.texture = undefined;
        }
    }
    function compressedTexImage2D() {
        try {
            gl.compressedTexImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texSubImage2D() {
        try {
            gl.texSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texSubImage3D() {
        try {
            gl.texSubImage3D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function compressedTexSubImage2D() {
        try {
            gl.compressedTexSubImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texStorage2D() {
        try {
            gl.texStorage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texStorage3D() {
        try {
            gl.texStorage3D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texImage2D() {
        try {
            gl.texImage2D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    function texImage3D() {
        try {
            gl.texImage3D.apply(gl, arguments);
        } catch (error) {
            console.error('THREE.WebGLState:', error);
        }
    }
    //
    function scissor1(scissor) {
        if (currentScissor.equals(scissor) === false) {
            gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);
            currentScissor.copy(scissor);
        }
    }
    function viewport1(viewport) {
        if (currentViewport.equals(viewport) === false) {
            gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);
            currentViewport.copy(viewport);
        }
    }
    //
    function reset() {
        // reset state
        gl.disable(3042);
        gl.disable(2884);
        gl.disable(2929);
        gl.disable(32823);
        gl.disable(3089);
        gl.disable(2960);
        gl.disable(32926);
        gl.blendEquation(32774);
        gl.blendFunc(1, 0);
        gl.blendFuncSeparate(1, 0, 1, 0);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.depthMask(true);
        gl.depthFunc(513);
        gl.clearDepth(1);
        gl.stencilMask(4294967295);
        gl.stencilFunc(519, 0, 4294967295);
        gl.stencilOp(7680, 7680, 7680);
        gl.clearStencil(0);
        gl.cullFace(1029);
        gl.frontFace(2305);
        gl.polygonOffset(0, 0);
        gl.activeTexture(33984);
        gl.bindFramebuffer(36160, null);
        if (isWebGL2 === true) {
            gl.bindFramebuffer(36009, null);
            gl.bindFramebuffer(36008, null);
        }
        gl.useProgram(null);
        gl.lineWidth(1);
        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        // reset internals
        enabledCapabilities = {
        };
        currentTextureSlot = null;
        currentBoundTextures = {
        };
        currentBoundFramebuffers = {
        };
        currentProgram = null;
        currentBlendingEnabled = false;
        currentBlending = null;
        currentBlendEquation = null;
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendEquationAlpha = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentPremultipledAlpha = false;
        currentFlipSided = null;
        currentCullFace = null;
        currentLineWidth = null;
        currentPolygonOffsetFactor = null;
        currentPolygonOffsetUnits = null;
        currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
        currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
        colorBuffer.reset();
        depthBuffer.reset();
        stencilBuffer.reset();
    }
    return {
        buffers: {
            color: colorBuffer,
            depth: depthBuffer,
            stencil: stencilBuffer
        },
        enable: enable,
        disable: disable,
        bindFramebuffer: bindFramebuffer,
        useProgram: useProgram,
        setBlending: setBlending,
        setMaterial: setMaterial,
        setFlipSided: setFlipSided,
        setCullFace: setCullFace,
        setLineWidth: setLineWidth,
        setPolygonOffset: setPolygonOffset,
        setScissorTest: setScissorTest,
        activeTexture: activeTexture,
        bindTexture: bindTexture,
        unbindTexture: unbindTexture,
        compressedTexImage2D: compressedTexImage2D,
        texImage2D: texImage2D,
        texImage3D: texImage3D,
        texStorage2D: texStorage2D,
        texStorage3D: texStorage3D,
        texSubImage2D: texSubImage2D,
        texSubImage3D: texSubImage3D,
        compressedTexSubImage2D: compressedTexSubImage2D,
        scissor: scissor1,
        viewport: viewport1,
        reset: reset
    };
}
function $2d9d8c9fc2282acc$var$WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
    const isWebGL2 = capabilities.isWebGL2;
    const maxTextures = capabilities.maxTextures;
    const maxCubemapSize = capabilities.maxCubemapSize;
    const maxTextureSize = capabilities.maxTextureSize;
    const maxSamples = capabilities.maxSamples;
    const hasMultisampledRenderToTexture = extensions.has('WEBGL_multisampled_render_to_texture');
    const MultisampledRenderToTextureExtension = hasMultisampledRenderToTexture ? extensions.get('WEBGL_multisampled_render_to_texture') : undefined;
    const _videoTextures = new WeakMap();
    let _canvas;
    // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
    // also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
    let useOffscreenCanvas = false;
    try {
        useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;
    } catch (err) {
    // Ignore any errors
    }
    function createCanvas(width, height) {
        // Use OffscreenCanvas when available. Specially needed in web workers
        return useOffscreenCanvas ? new OffscreenCanvas(width, height) : $2d9d8c9fc2282acc$var$createElementNS('canvas');
    }
    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
        let scale = 1;
        // handle case if texture exceeds max size
        if (image.width > maxSize || image.height > maxSize) scale = maxSize / Math.max(image.width, image.height);
        // only perform resize if necessary
        if (scale < 1 || needsPowerOfTwo === true) {
            // only perform resize for certain image types
            if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {
                const floor = needsPowerOfTwo ? $2d9d8c9fc2282acc$var$floorPowerOfTwo : Math.floor;
                const width = floor(scale * image.width);
                const height = floor(scale * image.height);
                if (_canvas === undefined) _canvas = createCanvas(width, height);
                // cube textures can't reuse the same canvas
                const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
                canvas.width = width;
                canvas.height = height;
                const context = canvas.getContext('2d');
                context.drawImage(image, 0, 0, width, height);
                console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');
                return canvas;
            } else {
                if ('data' in image) console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
                return image;
            }
        }
        return image;
    }
    function isPowerOfTwo$1(image) {
        return $2d9d8c9fc2282acc$var$isPowerOfTwo(image.width) && $2d9d8c9fc2282acc$var$isPowerOfTwo(image.height);
    }
    function textureNeedsPowerOfTwo(texture) {
        if (isWebGL2) return false;
        return texture.wrapS !== $2d9d8c9fc2282acc$export$9d9334239a5a5e06 || texture.wrapT !== $2d9d8c9fc2282acc$export$9d9334239a5a5e06 || texture.minFilter !== $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0 && texture.minFilter !== $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
    }
    function textureNeedsGenerateMipmaps(texture, supportsMips) {
        return texture.generateMipmaps && supportsMips && texture.minFilter !== $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0 && texture.minFilter !== $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
    }
    function generateMipmap(target) {
        _gl.generateMipmap(target);
    }
    function getInternalFormat(internalFormatName, glFormat, glType, encoding) {
        if (isWebGL2 === false) return glFormat;
        if (internalFormatName !== null) {
            if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];
            console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
        }
        let internalFormat = glFormat;
        if (glFormat === 6403) {
            if (glType === 5126) internalFormat = 33326;
            if (glType === 5131) internalFormat = 33325;
            if (glType === 5121) internalFormat = 33321;
        }
        if (glFormat === 6407) {
            if (glType === 5126) internalFormat = 34837;
            if (glType === 5131) internalFormat = 34843;
            if (glType === 5121) internalFormat = 32849;
        }
        if (glFormat === 6408) {
            if (glType === 5126) internalFormat = 34836;
            if (glType === 5131) internalFormat = 34842;
            if (glType === 5121) internalFormat = encoding === $2d9d8c9fc2282acc$export$f32388edbb32674 ? 35907 : 32856;
        }
        if (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) extensions.get('EXT_color_buffer_float');
        return internalFormat;
    }
    function getMipLevels(texture, image, supportsMips) {
        if (textureNeedsGenerateMipmaps(texture, supportsMips) === true || texture.isFramebufferTexture && texture.minFilter !== $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0 && texture.minFilter !== $2d9d8c9fc2282acc$export$8a72f490b25c56c8) return Math.log2(Math.max(image.width, image.height)) + 1;
        else if (texture.mipmaps !== undefined && texture.mipmaps.length > 0) // user-defined mipmaps
        return texture.mipmaps.length;
        else if (texture.isCompressedTexture && Array.isArray(texture.image)) return image.mipmaps.length;
        else // texture without mipmaps (only base level)
        return 1;
    }
    // Fallback filters for non-power-of-2 textures
    function filterFallback(f) {
        if (f === $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0 || f === $2d9d8c9fc2282acc$export$d129e38cf6feaa8c || f === $2d9d8c9fc2282acc$export$d2327c1afe5bfdf2) return 9728;
        return 9729;
    }
    //
    function onTextureDispose(event) {
        const texture = event.target;
        texture.removeEventListener('dispose', onTextureDispose);
        deallocateTexture(texture);
        if (texture.isVideoTexture) _videoTextures.delete(texture);
        info.memory.textures--;
    }
    function onRenderTargetDispose(event) {
        const renderTarget = event.target;
        renderTarget.removeEventListener('dispose', onRenderTargetDispose);
        deallocateRenderTarget(renderTarget);
    }
    //
    function deallocateTexture(texture) {
        const textureProperties = properties.get(texture);
        if (textureProperties.__webglInit === undefined) return;
        _gl.deleteTexture(textureProperties.__webglTexture);
        properties.remove(texture);
    }
    function deallocateRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        if (!renderTarget) return;
        if (textureProperties.__webglTexture !== undefined) {
            _gl.deleteTexture(textureProperties.__webglTexture);
            info.memory.textures--;
        }
        if (renderTarget.depthTexture) renderTarget.depthTexture.dispose();
        if (renderTarget.isWebGLCubeRenderTarget) for(let i123 = 0; i123 < 6; i123++){
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i123]);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i123]);
        }
        else {
            _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
            if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
            if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
            if (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);
            if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
        }
        if (renderTarget.isWebGLMultipleRenderTargets) for(let i122 = 0, il = texture.length; i122 < il; i122++){
            const attachmentProperties = properties.get(texture[i122]);
            if (attachmentProperties.__webglTexture) {
                _gl.deleteTexture(attachmentProperties.__webglTexture);
                info.memory.textures--;
            }
            properties.remove(texture[i122]);
        }
        properties.remove(texture);
        properties.remove(renderTarget);
    }
    //
    let textureUnits = 0;
    function resetTextureUnits() {
        textureUnits = 0;
    }
    function allocateTextureUnit() {
        const textureUnit = textureUnits;
        if (textureUnit >= maxTextures) console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);
        textureUnits += 1;
        return textureUnit;
    }
    //
    function setTexture2D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.isVideoTexture) updateVideoTexture(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            const image = texture.image;
            if (image === undefined) console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');
            else if (image.complete === false) console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
            else {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(3553, textureProperties.__webglTexture);
    }
    function setTexture2DArray(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(35866, textureProperties.__webglTexture);
    }
    function setTexture3D(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(32879, textureProperties.__webglTexture);
    }
    function setTextureCube(texture, slot) {
        const textureProperties = properties.get(texture);
        if (texture.version > 0 && textureProperties.__version !== texture.version) {
            uploadCubeTexture(textureProperties, texture, slot);
            return;
        }
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
    }
    const wrappingToGL = {
        [$2d9d8c9fc2282acc$export$533346c8e8dac0f5]: 10497,
        [$2d9d8c9fc2282acc$export$9d9334239a5a5e06]: 33071,
        [$2d9d8c9fc2282acc$export$c7e7c00b14f51a4f]: 33648
    };
    const filterToGL = {
        [$2d9d8c9fc2282acc$export$727aa5ec3fe39bf0]: 9728,
        [$2d9d8c9fc2282acc$export$d129e38cf6feaa8c]: 9984,
        [$2d9d8c9fc2282acc$export$d2327c1afe5bfdf2]: 9986,
        [$2d9d8c9fc2282acc$export$8a72f490b25c56c8]: 9729,
        [$2d9d8c9fc2282acc$export$19a719f377145a13]: 9985,
        [$2d9d8c9fc2282acc$export$5d8599b6a933fb1b]: 9987
    };
    function setTextureParameters(textureType, texture, supportsMips) {
        if (supportsMips) {
            _gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);
            _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);
            if (textureType === 32879 || textureType === 35866) _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);
            _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);
            _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);
        } else {
            _gl.texParameteri(textureType, 10242, 33071);
            _gl.texParameteri(textureType, 10243, 33071);
            if (textureType === 32879 || textureType === 35866) _gl.texParameteri(textureType, 32882, 33071);
            if (texture.wrapS !== $2d9d8c9fc2282acc$export$9d9334239a5a5e06 || texture.wrapT !== $2d9d8c9fc2282acc$export$9d9334239a5a5e06) console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');
            _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));
            _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));
            if (texture.minFilter !== $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0 && texture.minFilter !== $2d9d8c9fc2282acc$export$8a72f490b25c56c8) console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');
        }
        if (extensions.has('EXT_texture_filter_anisotropic') === true) {
            const extension = extensions.get('EXT_texture_filter_anisotropic');
            if (texture.type === $2d9d8c9fc2282acc$export$f6d331659b644596 && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2
            if (isWebGL2 === false && texture.type === $2d9d8c9fc2282acc$export$2697304443f382bc && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only
            if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {
                _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));
                properties.get(texture).__currentAnisotropy = texture.anisotropy;
            }
        }
    }
    function initTexture(textureProperties, texture) {
        if (textureProperties.__webglInit === undefined) {
            textureProperties.__webglInit = true;
            texture.addEventListener('dispose', onTextureDispose);
            textureProperties.__webglTexture = _gl.createTexture();
            info.memory.textures++;
        }
    }
    function uploadTexture(textureProperties, texture, slot) {
        let textureType = 3553;
        if (texture.isDataTexture2DArray) textureType = 35866;
        if (texture.isDataTexture3D) textureType = 32879;
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(textureType, textureProperties.__webglTexture);
        _gl.pixelStorei(37440, texture.flipY);
        _gl.pixelStorei(37441, texture.premultiplyAlpha);
        _gl.pixelStorei(3317, texture.unpackAlignment);
        _gl.pixelStorei(37443, 0);
        const needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;
        const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);
        const supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format);
        let glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        setTextureParameters(textureType, texture, supportsMips);
        let mipmap;
        const mipmaps = texture.mipmaps;
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = textureProperties.__version === undefined;
        const levels = getMipLevels(texture, image, supportsMips);
        if (texture.isDepthTexture) {
            // populate depth texture with dummy data
            glInternalFormat = 6402;
            if (isWebGL2) {
                if (texture.type === $2d9d8c9fc2282acc$export$f6d331659b644596) glInternalFormat = 36012;
                else if (texture.type === $2d9d8c9fc2282acc$export$c3c7fc4518ebba96) glInternalFormat = 33190;
                else if (texture.type === $2d9d8c9fc2282acc$export$6c8ea339bfab1301) glInternalFormat = 35056;
                else glInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D
            } else if (texture.type === $2d9d8c9fc2282acc$export$f6d331659b644596) console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');
            // validation checks for WebGL 1
            if (texture.format === $2d9d8c9fc2282acc$export$c1b6b5136be58045 && glInternalFormat === 6402) // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
            // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
            // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
            {
                if (texture.type !== $2d9d8c9fc2282acc$export$c63dc51868b06a9d && texture.type !== $2d9d8c9fc2282acc$export$c3c7fc4518ebba96) {
                    console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');
                    texture.type = $2d9d8c9fc2282acc$export$c63dc51868b06a9d;
                    glType = utils.convert(texture.type);
                }
            }
            if (texture.format === $2d9d8c9fc2282acc$export$1e113ac2d0905829 && glInternalFormat === 6402) {
                // Depth stencil textures need the DEPTH_STENCIL internal format
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                glInternalFormat = 34041;
                // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
                // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
                // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
                if (texture.type !== $2d9d8c9fc2282acc$export$6c8ea339bfab1301) {
                    console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');
                    texture.type = $2d9d8c9fc2282acc$export$6c8ea339bfab1301;
                    glType = utils.convert(texture.type);
                }
            }
            //
            if (useTexStorage && allocateMemory) state.texStorage2D(3553, 1, glInternalFormat, image.width, image.height);
            else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        } else if (texture.isDataTexture) {
            // use manually created mipmaps if available
            // if there are no manual mipmaps
            // set 0 level mipmap and then use GL to generate other mipmap levels
            if (mipmaps.length > 0 && supportsMips) {
                if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                for(let i124 = 0, il = mipmaps.length; i124 < il; i124++){
                    mipmap = mipmaps[i124];
                    if (useTexStorage) state.texSubImage2D(3553, 0, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                    else state.texImage2D(3553, i124, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
                texture.generateMipmaps = false;
            } else if (useTexStorage) {
                if (allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
                state.texSubImage2D(3553, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            } else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
        } else if (texture.isCompressedTexture) {
            if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
            for(let i125 = 0, il = mipmaps.length; i125 < il; i125++){
                mipmap = mipmaps[i125];
                if (texture.format !== $2d9d8c9fc2282acc$export$3f8bb04b555a363c && texture.format !== $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb) {
                    if (glFormat !== null) {
                        if (useTexStorage) state.compressedTexSubImage2D(3553, i125, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                        else state.compressedTexImage2D(3553, i125, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                    } else console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');
                } else if (useTexStorage) state.texSubImage2D(3553, i125, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                else state.texImage2D(3553, i125, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
        } else if (texture.isDataTexture2DArray) {
            if (useTexStorage) {
                if (allocateMemory) state.texStorage3D(35866, levels, glInternalFormat, image.width, image.height, image.depth);
                state.texSubImage3D(35866, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            } else state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        } else if (texture.isDataTexture3D) {
            if (useTexStorage) {
                if (allocateMemory) state.texStorage3D(32879, levels, glInternalFormat, image.width, image.height, image.depth);
                state.texSubImage3D(32879, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            } else state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        } else if (texture.isFramebufferTexture) {
            if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
            else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
        } else {
            // regular Texture (image, video, canvas)
            // use manually created mipmaps if available
            // if there are no manual mipmaps
            // set 0 level mipmap and then use GL to generate other mipmap levels
            if (mipmaps.length > 0 && supportsMips) {
                if (useTexStorage && allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
                for(let i126 = 0, il = mipmaps.length; i126 < il; i126++){
                    mipmap = mipmaps[i126];
                    if (useTexStorage) state.texSubImage2D(3553, i126, 0, 0, glFormat, glType, mipmap);
                    else state.texImage2D(3553, i126, glInternalFormat, glFormat, glType, mipmap);
                }
                texture.generateMipmaps = false;
            } else if (useTexStorage) {
                if (allocateMemory) state.texStorage2D(3553, levels, glInternalFormat, image.width, image.height);
                state.texSubImage2D(3553, 0, 0, 0, glFormat, glType, image);
            } else state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(textureType);
        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
    }
    function uploadCubeTexture(textureProperties, texture, slot) {
        if (texture.image.length !== 6) return;
        initTexture(textureProperties, texture);
        state.activeTexture(33984 + slot);
        state.bindTexture(34067, textureProperties.__webglTexture);
        _gl.pixelStorei(37440, texture.flipY);
        _gl.pixelStorei(37441, texture.premultiplyAlpha);
        _gl.pixelStorei(3317, texture.unpackAlignment);
        _gl.pixelStorei(37443, 0);
        const isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);
        const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;
        const cubeImage = [];
        for(let i127 = 0; i127 < 6; i127++)if (!isCompressed && !isDataTexture) cubeImage[i127] = resizeImage(texture.image[i127], false, true, maxCubemapSize);
        else cubeImage[i127] = isDataTexture ? texture.image[i127].image : texture.image[i127];
        const image = cubeImage[0], supportsMips = isPowerOfTwo$1(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        const useTexStorage = isWebGL2 && texture.isVideoTexture !== true;
        const allocateMemory = textureProperties.__version === undefined;
        let levels = getMipLevels(texture, image, supportsMips);
        setTextureParameters(34067, texture, supportsMips);
        let mipmaps;
        if (isCompressed) {
            if (useTexStorage && allocateMemory) state.texStorage2D(34067, levels, glInternalFormat, image.width, image.height);
            for(let i128 = 0; i128 < 6; i128++){
                mipmaps = cubeImage[i128].mipmaps;
                for(let j = 0; j < mipmaps.length; j++){
                    const mipmap = mipmaps[j];
                    if (texture.format !== $2d9d8c9fc2282acc$export$3f8bb04b555a363c && texture.format !== $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb) {
                        if (glFormat !== null) {
                            if (useTexStorage) state.compressedTexSubImage2D(34069 + i128, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                            else state.compressedTexImage2D(34069 + i128, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                        } else console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');
                    } else if (useTexStorage) state.texSubImage2D(34069 + i128, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                    else state.texImage2D(34069 + i128, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                }
            }
        } else {
            mipmaps = texture.mipmaps;
            if (useTexStorage && allocateMemory) {
                // TODO: Uniformly handle mipmap definitions
                // Normal textures and compressed cube textures define base level + mips with their mipmap array
                // Uncompressed cube textures use their mipmap array only for mips (no base level)
                if (mipmaps.length > 0) levels++;
                state.texStorage2D(34067, levels, glInternalFormat, cubeImage[0].width, cubeImage[0].height);
            }
            for(let i129 = 0; i129 < 6; i129++)if (isDataTexture) {
                if (useTexStorage) state.texSubImage2D(34069 + i129, 0, 0, 0, cubeImage[i129].width, cubeImage[i129].height, glFormat, glType, cubeImage[i129].data);
                else state.texImage2D(34069 + i129, 0, glInternalFormat, cubeImage[i129].width, cubeImage[i129].height, 0, glFormat, glType, cubeImage[i129].data);
                for(let j = 0; j < mipmaps.length; j++){
                    const mipmap = mipmaps[j];
                    const mipmapImage = mipmap.image[i129].image;
                    if (useTexStorage) state.texSubImage2D(34069 + i129, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                    else state.texImage2D(34069 + i129, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                }
            } else {
                if (useTexStorage) state.texSubImage2D(34069 + i129, 0, 0, 0, glFormat, glType, cubeImage[i129]);
                else state.texImage2D(34069 + i129, 0, glInternalFormat, glFormat, glType, cubeImage[i129]);
                for(let j = 0; j < mipmaps.length; j++){
                    const mipmap = mipmaps[j];
                    if (useTexStorage) state.texSubImage2D(34069 + i129, j + 1, 0, 0, glFormat, glType, mipmap.image[i129]);
                    else state.texImage2D(34069 + i129, j + 1, glInternalFormat, glFormat, glType, mipmap.image[i129]);
                }
            }
        }
        if (textureNeedsGenerateMipmaps(texture, supportsMips)) // We assume images for cube map have the same size.
        generateMipmap(34067);
        textureProperties.__version = texture.version;
        if (texture.onUpdate) texture.onUpdate(texture);
    }
    // Render targets
    // Setup storage for target texture and bind it to correct framebuffer
    function setupFrameBufferTexture(framebuffer, renderTarget, texture, attachment, textureTarget) {
        const glFormat = utils.convert(texture.format);
        const glType = utils.convert(texture.type);
        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
        const renderTargetProperties = properties.get(renderTarget);
        if (!renderTargetProperties.__hasExternalTextures) {
            if (textureTarget === 32879 || textureTarget === 35866) state.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);
            else state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
        }
        state.bindFramebuffer(36160, framebuffer);
        if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0, getRenderTargetSamples(renderTarget));
        else _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);
        state.bindFramebuffer(36160, null);
    }
    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
        _gl.bindRenderbuffer(36161, renderbuffer);
        if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
            let glInternalFormat = 33189;
            if (isMultisample || renderTarget.useRenderToTexture) {
                const depthTexture = renderTarget.depthTexture;
                if (depthTexture && depthTexture.isDepthTexture) {
                    if (depthTexture.type === $2d9d8c9fc2282acc$export$f6d331659b644596) glInternalFormat = 36012;
                    else if (depthTexture.type === $2d9d8c9fc2282acc$export$c3c7fc4518ebba96) glInternalFormat = 33190;
                }
                const samples = getRenderTargetSamples(renderTarget);
                if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                else _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            } else _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
        } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && renderTarget.useRenderbuffer) _gl.renderbufferStorageMultisample(36161, samples, 35056, renderTarget.width, renderTarget.height);
            else if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, 35056, renderTarget.width, renderTarget.height);
            else _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
            _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
        } else {
            // Use the first texture for MRT so far
            const texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[0] : renderTarget.texture;
            const glFormat = utils.convert(texture.format);
            const glType = utils.convert(texture.type);
            const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
            const samples = getRenderTargetSamples(renderTarget);
            if (isMultisample && renderTarget.useRenderbuffer) _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            else if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
            else _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
        }
        _gl.bindRenderbuffer(36161, null);
    }
    // Setup resources for a Depth Texture for a FBO (needs an extension)
    function setupDepthTexture(framebuffer, renderTarget) {
        const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
        if (isCube) throw new Error('Depth Texture with cube render targets is not supported');
        state.bindFramebuffer(36160, framebuffer);
        if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
        // upload an empty depth texture with framebuffer size
        if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
            renderTarget.depthTexture.image.width = renderTarget.width;
            renderTarget.depthTexture.image.height = renderTarget.height;
            renderTarget.depthTexture.needsUpdate = true;
        }
        setTexture2D(renderTarget.depthTexture, 0);
        const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
        const samples = getRenderTargetSamples(renderTarget);
        if (renderTarget.depthTexture.format === $2d9d8c9fc2282acc$export$c1b6b5136be58045) {
            if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
        } else if (renderTarget.depthTexture.format === $2d9d8c9fc2282acc$export$1e113ac2d0905829) {
            if (renderTarget.useRenderToTexture) MultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, webglDepthTexture, 0, samples);
            else _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
        } else throw new Error('Unknown depthTexture format');
    }
    // Setup GL resources for a non-texture depth buffer
    function setupDepthRenderbuffer(renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
            if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');
            setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
        } else if (isCube) {
            renderTargetProperties.__webglDepthbuffer = [];
            for(let i130 = 0; i130 < 6; i130++){
                state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i130]);
                renderTargetProperties.__webglDepthbuffer[i130] = _gl.createRenderbuffer();
                setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i130], renderTarget, false);
            }
        } else {
            state.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);
            renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        }
        state.bindFramebuffer(36160, null);
    }
    // rebind framebuffer with external textures
    function rebindTextures(renderTarget, colorTexture, depthTexture) {
        const renderTargetProperties = properties.get(renderTarget);
        if (colorTexture !== undefined) setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553);
        if (depthTexture !== undefined) setupDepthRenderbuffer(renderTarget);
    }
    // Set up GL resources for the render target
    function setupRenderTarget(renderTarget) {
        const texture = renderTarget.texture;
        const renderTargetProperties = properties.get(renderTarget);
        const textureProperties = properties.get(texture);
        renderTarget.addEventListener('dispose', onRenderTargetDispose);
        if (renderTarget.isWebGLMultipleRenderTargets !== true) {
            if (textureProperties.__webglTexture === undefined) textureProperties.__webglTexture = _gl.createTexture();
            textureProperties.__version = texture.version;
            info.memory.textures++;
        }
        const isCube = renderTarget.isWebGLCubeRenderTarget === true;
        const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;
        const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        // Handles WebGL2 RGBFormat fallback - #18858
        if (isWebGL2 && texture.format === $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb && (texture.type === $2d9d8c9fc2282acc$export$f6d331659b644596 || texture.type === $2d9d8c9fc2282acc$export$2697304443f382bc)) {
            texture.format = $2d9d8c9fc2282acc$export$3f8bb04b555a363c;
            console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');
        }
        // Setup framebuffer
        if (isCube) {
            renderTargetProperties.__webglFramebuffer = [];
            for(let i131 = 0; i131 < 6; i131++)renderTargetProperties.__webglFramebuffer[i131] = _gl.createFramebuffer();
        } else {
            renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
            if (isMultipleRenderTargets) {
                if (capabilities.drawBuffers) {
                    const textures = renderTarget.texture;
                    for(let i132 = 0, il = textures.length; i132 < il; i132++){
                        const attachmentProperties = properties.get(textures[i132]);
                        if (attachmentProperties.__webglTexture === undefined) {
                            attachmentProperties.__webglTexture = _gl.createTexture();
                            info.memory.textures++;
                        }
                    }
                } else console.warn('THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.');
            } else if (renderTarget.useRenderbuffer) {
                if (isWebGL2) {
                    renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
                    renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
                    _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
                    const glFormat = utils.convert(texture.format);
                    const glType = utils.convert(texture.type);
                    const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType, texture.encoding);
                    const samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                    state.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
                    _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);
                    _gl.bindRenderbuffer(36161, null);
                    if (renderTarget.depthBuffer) {
                        renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
                        setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
                    }
                    state.bindFramebuffer(36160, null);
                } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
            }
        }
        // Setup color buffer
        if (isCube) {
            state.bindTexture(34067, textureProperties.__webglTexture);
            setTextureParameters(34067, texture, supportsMips);
            for(let i133 = 0; i133 < 6; i133++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i133], renderTarget, texture, 36064, 34069 + i133);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(34067);
            state.unbindTexture();
        } else if (isMultipleRenderTargets) {
            const textures = renderTarget.texture;
            for(let i134 = 0, il = textures.length; i134 < il; i134++){
                const attachment = textures[i134];
                const attachmentProperties = properties.get(attachment);
                state.bindTexture(3553, attachmentProperties.__webglTexture);
                setTextureParameters(3553, attachment, supportsMips);
                setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i134, 3553);
                if (textureNeedsGenerateMipmaps(attachment, supportsMips)) generateMipmap(3553);
            }
            state.unbindTexture();
        } else {
            let glTextureType = 3553;
            if (isRenderTarget3D) {
                // Render targets containing layers, i.e: Texture 3D and 2d arrays
                if (isWebGL2) {
                    const isTexture3D = texture.isDataTexture3D;
                    glTextureType = isTexture3D ? 32879 : 35866;
                } else console.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');
            }
            state.bindTexture(glTextureType, textureProperties.__webglTexture);
            setTextureParameters(glTextureType, texture, supportsMips);
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType);
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) generateMipmap(glTextureType);
            state.unbindTexture();
        }
        // Setup depth and stencil buffers
        if (renderTarget.depthBuffer) setupDepthRenderbuffer(renderTarget);
    }
    function updateRenderTargetMipmap(renderTarget) {
        const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;
        const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [
            renderTarget.texture
        ];
        for(let i135 = 0, il = textures.length; i135 < il; i135++){
            const texture = textures[i135];
            if (textureNeedsGenerateMipmaps(texture, supportsMips)) {
                const target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
                const webglTexture = properties.get(texture).__webglTexture;
                state.bindTexture(target, webglTexture);
                generateMipmap(target);
                state.unbindTexture();
            }
        }
    }
    function updateMultisampleRenderTarget(renderTarget) {
        if (renderTarget.useRenderbuffer) {
            if (isWebGL2) {
                const width = renderTarget.width;
                const height = renderTarget.height;
                let mask = 16384;
                const invalidationArray = [
                    36064
                ];
                const depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;
                if (renderTarget.depthBuffer) invalidationArray.push(depthStyle);
                if (!renderTarget.ignoreDepthForMultisampleCopy) {
                    if (renderTarget.depthBuffer) mask |= 256;
                    if (renderTarget.stencilBuffer) mask |= 1024;
                }
                const renderTargetProperties = properties.get(renderTarget);
                state.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);
                state.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
                if (renderTarget.ignoreDepthForMultisampleCopy) {
                    _gl.invalidateFramebuffer(36008, [
                        depthStyle
                    ]);
                    _gl.invalidateFramebuffer(36009, [
                        depthStyle
                    ]);
                }
                _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);
                _gl.invalidateFramebuffer(36008, invalidationArray);
                state.bindFramebuffer(36008, null);
                state.bindFramebuffer(36009, renderTargetProperties.__webglMultisampledFramebuffer);
            } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
        }
    }
    function getRenderTargetSamples(renderTarget) {
        return isWebGL2 && (renderTarget.useRenderbuffer || renderTarget.useRenderToTexture) ? Math.min(maxSamples, renderTarget.samples) : 0;
    }
    function updateVideoTexture(texture) {
        const frame = info.render.frame;
        // Check the last frame we updated the VideoTexture
        if (_videoTextures.get(texture) !== frame) {
            _videoTextures.set(texture, frame);
            texture.update();
        }
    }
    // backwards compatibility
    let warnedTexture2D = false;
    let warnedTextureCube = false;
    function safeSetTexture2D(texture, slot) {
        if (texture && texture.isWebGLRenderTarget) {
            if (warnedTexture2D === false) {
                console.warn('THREE.WebGLTextures.safeSetTexture2D: don\'t use render targets as textures. Use their .texture property instead.');
                warnedTexture2D = true;
            }
            texture = texture.texture;
        }
        setTexture2D(texture, slot);
    }
    function safeSetTextureCube(texture, slot) {
        if (texture && texture.isWebGLCubeRenderTarget) {
            if (warnedTextureCube === false) {
                console.warn('THREE.WebGLTextures.safeSetTextureCube: don\'t use cube render targets as textures. Use their .texture property instead.');
                warnedTextureCube = true;
            }
            texture = texture.texture;
        }
        setTextureCube(texture, slot);
    }
    //
    this.allocateTextureUnit = allocateTextureUnit;
    this.resetTextureUnits = resetTextureUnits;
    this.setTexture2D = setTexture2D;
    this.setTexture2DArray = setTexture2DArray;
    this.setTexture3D = setTexture3D;
    this.setTextureCube = setTextureCube;
    this.rebindTextures = rebindTextures;
    this.setupRenderTarget = setupRenderTarget;
    this.updateRenderTargetMipmap = updateRenderTargetMipmap;
    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
    this.setupDepthRenderbuffer = setupDepthRenderbuffer;
    this.setupFrameBufferTexture = setupFrameBufferTexture;
    this.safeSetTexture2D = safeSetTexture2D;
    this.safeSetTextureCube = safeSetTextureCube;
}
function $2d9d8c9fc2282acc$export$ddaebcad857649a8(gl, extensions, capabilities) {
    const isWebGL2 = capabilities.isWebGL2;
    function convert(p) {
        let extension;
        if (p === $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10) return 5121;
        if (p === $2d9d8c9fc2282acc$export$b3969b01faf587f2) return 32819;
        if (p === $2d9d8c9fc2282acc$export$18886f8ae33e90de) return 32820;
        if (p === $2d9d8c9fc2282acc$export$cb1fa50553eb14c4) return 33635;
        if (p === $2d9d8c9fc2282acc$export$545fce0311a9796a) return 5120;
        if (p === $2d9d8c9fc2282acc$export$88572337f312435f) return 5122;
        if (p === $2d9d8c9fc2282acc$export$c63dc51868b06a9d) return 5123;
        if (p === $2d9d8c9fc2282acc$export$5c612977753abe2) return 5124;
        if (p === $2d9d8c9fc2282acc$export$c3c7fc4518ebba96) return 5125;
        if (p === $2d9d8c9fc2282acc$export$f6d331659b644596) return 5126;
        if (p === $2d9d8c9fc2282acc$export$2697304443f382bc) {
            if (isWebGL2) return 5131;
            extension = extensions.get('OES_texture_half_float');
            if (extension !== null) return extension.HALF_FLOAT_OES;
            else return null;
        }
        if (p === $2d9d8c9fc2282acc$export$988473390501ed4b) return 6406;
        if (p === $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb) return 6407;
        if (p === $2d9d8c9fc2282acc$export$3f8bb04b555a363c) return 6408;
        if (p === $2d9d8c9fc2282acc$export$cc09ccbf6d1ed449) return 6409;
        if (p === $2d9d8c9fc2282acc$export$9053a81c4a69c289) return 6410;
        if (p === $2d9d8c9fc2282acc$export$c1b6b5136be58045) return 6402;
        if (p === $2d9d8c9fc2282acc$export$1e113ac2d0905829) return 34041;
        if (p === $2d9d8c9fc2282acc$export$4e041a7967d15c4b) return 6403;
        // WebGL2 formats.
        if (p === $2d9d8c9fc2282acc$export$aa92e870a709d190) return 36244;
        if (p === $2d9d8c9fc2282acc$export$6cdf0b461c7ce8a0) return 33319;
        if (p === $2d9d8c9fc2282acc$export$1ba1c45f9f77d4d7) return 33320;
        if (p === $2d9d8c9fc2282acc$export$d1fd40c11bfa798e) return 36248;
        if (p === $2d9d8c9fc2282acc$export$c200e7d26f592f21) return 36249;
        if (p === $2d9d8c9fc2282acc$export$21d1799c6d552fc0 || p === $2d9d8c9fc2282acc$export$afa304c3e981b668 || p === $2d9d8c9fc2282acc$export$d2a1a68024a3e56c || p === $2d9d8c9fc2282acc$export$9a79c424327dacf9) {
            extension = extensions.get('WEBGL_compressed_texture_s3tc');
            if (extension !== null) {
                if (p === $2d9d8c9fc2282acc$export$21d1799c6d552fc0) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                if (p === $2d9d8c9fc2282acc$export$afa304c3e981b668) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                if (p === $2d9d8c9fc2282acc$export$d2a1a68024a3e56c) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                if (p === $2d9d8c9fc2282acc$export$9a79c424327dacf9) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            } else return null;
        }
        if (p === $2d9d8c9fc2282acc$export$19ada9bbb1af3573 || p === $2d9d8c9fc2282acc$export$d0f0355bb3d948e4 || p === $2d9d8c9fc2282acc$export$b82296714358084c || p === $2d9d8c9fc2282acc$export$b71692456c47b6c3) {
            extension = extensions.get('WEBGL_compressed_texture_pvrtc');
            if (extension !== null) {
                if (p === $2d9d8c9fc2282acc$export$19ada9bbb1af3573) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                if (p === $2d9d8c9fc2282acc$export$d0f0355bb3d948e4) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                if (p === $2d9d8c9fc2282acc$export$b82296714358084c) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                if (p === $2d9d8c9fc2282acc$export$b71692456c47b6c3) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            } else return null;
        }
        if (p === $2d9d8c9fc2282acc$export$6ab91af2d757aee7) {
            extension = extensions.get('WEBGL_compressed_texture_etc1');
            if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;
            else return null;
        }
        if (p === $2d9d8c9fc2282acc$export$7800993ef8106a6a || p === $2d9d8c9fc2282acc$export$23ed8300a860e7d8) {
            extension = extensions.get('WEBGL_compressed_texture_etc');
            if (extension !== null) {
                if (p === $2d9d8c9fc2282acc$export$7800993ef8106a6a) return extension.COMPRESSED_RGB8_ETC2;
                if (p === $2d9d8c9fc2282acc$export$23ed8300a860e7d8) return extension.COMPRESSED_RGBA8_ETC2_EAC;
            }
        }
        if (p === $2d9d8c9fc2282acc$export$dc5570b4a2b92d48 || p === $2d9d8c9fc2282acc$export$68880cd325f8b2fb || p === $2d9d8c9fc2282acc$export$7d2c0be323373d95 || p === $2d9d8c9fc2282acc$export$22b52da301fc3a3e || p === $2d9d8c9fc2282acc$export$c009e2cb4a66485e || p === $2d9d8c9fc2282acc$export$118fff5afa255b63 || p === $2d9d8c9fc2282acc$export$120713c829ae0667 || p === $2d9d8c9fc2282acc$export$c79eeabbf53313e9 || p === $2d9d8c9fc2282acc$export$443cf6567cdd6424 || p === $2d9d8c9fc2282acc$export$6573984fc9840780 || p === $2d9d8c9fc2282acc$export$e7aee563f30091de || p === $2d9d8c9fc2282acc$export$2eb8634622ddeab7 || p === $2d9d8c9fc2282acc$export$202b1ce7b5d25742 || p === $2d9d8c9fc2282acc$export$18ab77abd087e467 || p === $2d9d8c9fc2282acc$export$4487000d1baf578b || p === $2d9d8c9fc2282acc$export$4a1746c7512b1ea1 || p === $2d9d8c9fc2282acc$export$4208debc782f5653 || p === $2d9d8c9fc2282acc$export$82c5f9d3037aaea3 || p === $2d9d8c9fc2282acc$export$64e357a152723eb9 || p === $2d9d8c9fc2282acc$export$1b7711037f5e380e || p === $2d9d8c9fc2282acc$export$eb234716dfb52c31 || p === $2d9d8c9fc2282acc$export$8041d2df79c555f || p === $2d9d8c9fc2282acc$export$27d2c8c0fcc7b83a || p === $2d9d8c9fc2282acc$export$27b9de07b84a1334 || p === $2d9d8c9fc2282acc$export$5c2b31a31ccc15c8 || p === $2d9d8c9fc2282acc$export$5c4d4b335786f8f3 || p === $2d9d8c9fc2282acc$export$e0c50c800e38be11 || p === $2d9d8c9fc2282acc$export$9b0442bae422b2db) {
            extension = extensions.get('WEBGL_compressed_texture_astc');
            if (extension !== null) // TODO Complete?
            return p;
            else return null;
        }
        if (p === $2d9d8c9fc2282acc$export$ce40b115e188bc81) {
            extension = extensions.get('EXT_texture_compression_bptc');
            if (extension !== null) // TODO Complete?
            return p;
            else return null;
        }
        if (p === $2d9d8c9fc2282acc$export$6c8ea339bfab1301) {
            if (isWebGL2) return 34042;
            extension = extensions.get('WEBGL_depth_texture');
            if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;
            else return null;
        }
    }
    return {
        convert: convert
    };
}
class $2d9d8c9fc2282acc$export$56b937d9e5581166 extends $2d9d8c9fc2282acc$export$74e4ae24825f68d7 {
    constructor(array = []){
        super();
        this.cameras = array;
    }
}
$2d9d8c9fc2282acc$export$56b937d9e5581166.prototype.isArrayCamera = true;
class $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.type = 'Group';
    }
}
$2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4.prototype.isGroup = true;
const $2d9d8c9fc2282acc$var$_moveEvent = {
    type: 'move'
};
class $2d9d8c9fc2282acc$var$WebXRController {
    constructor(){
        this._targetRay = null;
        this._grip = null;
        this._hand = null;
    }
    getHandSpace() {
        if (this._hand === null) {
            this._hand = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
            this._hand.matrixAutoUpdate = false;
            this._hand.visible = false;
            this._hand.joints = {
            };
            this._hand.inputState = {
                pinching: false
            };
        }
        return this._hand;
    }
    getTargetRaySpace() {
        if (this._targetRay === null) {
            this._targetRay = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
            this._targetRay.matrixAutoUpdate = false;
            this._targetRay.visible = false;
            this._targetRay.hasLinearVelocity = false;
            this._targetRay.linearVelocity = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            this._targetRay.hasAngularVelocity = false;
            this._targetRay.angularVelocity = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        }
        return this._targetRay;
    }
    getGripSpace() {
        if (this._grip === null) {
            this._grip = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
            this._grip.matrixAutoUpdate = false;
            this._grip.visible = false;
            this._grip.hasLinearVelocity = false;
            this._grip.linearVelocity = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            this._grip.hasAngularVelocity = false;
            this._grip.angularVelocity = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        }
        return this._grip;
    }
    dispatchEvent(event) {
        if (this._targetRay !== null) this._targetRay.dispatchEvent(event);
        if (this._grip !== null) this._grip.dispatchEvent(event);
        if (this._hand !== null) this._hand.dispatchEvent(event);
        return this;
    }
    disconnect(inputSource) {
        this.dispatchEvent({
            type: 'disconnected',
            data: inputSource
        });
        if (this._targetRay !== null) this._targetRay.visible = false;
        if (this._grip !== null) this._grip.visible = false;
        if (this._hand !== null) this._hand.visible = false;
        return this;
    }
    update(inputSource, frame, referenceSpace) {
        let inputPose = null;
        let gripPose = null;
        let handPose = null;
        const targetRay = this._targetRay;
        const grip = this._grip;
        const hand = this._hand;
        if (inputSource && frame.session.visibilityState !== 'visible-blurred') {
            if (targetRay !== null) {
                inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
                if (inputPose !== null) {
                    targetRay.matrix.fromArray(inputPose.transform.matrix);
                    targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
                    if (inputPose.linearVelocity) {
                        targetRay.hasLinearVelocity = true;
                        targetRay.linearVelocity.copy(inputPose.linearVelocity);
                    } else targetRay.hasLinearVelocity = false;
                    if (inputPose.angularVelocity) {
                        targetRay.hasAngularVelocity = true;
                        targetRay.angularVelocity.copy(inputPose.angularVelocity);
                    } else targetRay.hasAngularVelocity = false;
                    this.dispatchEvent($2d9d8c9fc2282acc$var$_moveEvent);
                }
            }
            if (hand && inputSource.hand) {
                handPose = true;
                for (const inputjoint of inputSource.hand.values()){
                    // Update the joints groups with the XRJoint poses
                    const jointPose = frame.getJointPose(inputjoint, referenceSpace);
                    if (hand.joints[inputjoint.jointName] === undefined) {
                        // The transform of this joint will be updated with the joint pose on each frame
                        const joint = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
                        joint.matrixAutoUpdate = false;
                        joint.visible = false;
                        hand.joints[inputjoint.jointName] = joint;
                        // ??
                        hand.add(joint);
                    }
                    const joint = hand.joints[inputjoint.jointName];
                    if (jointPose !== null) {
                        joint.matrix.fromArray(jointPose.transform.matrix);
                        joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
                        joint.jointRadius = jointPose.radius;
                    }
                    joint.visible = jointPose !== null;
                }
                // Custom events
                // Check pinchz
                const indexTip = hand.joints['index-finger-tip'];
                const thumbTip = hand.joints['thumb-tip'];
                const distance = indexTip.position.distanceTo(thumbTip.position);
                const distanceToPinch = 0.02;
                const threshold = 0.005;
                if (hand.inputState.pinching && distance > distanceToPinch + threshold) {
                    hand.inputState.pinching = false;
                    this.dispatchEvent({
                        type: 'pinchend',
                        handedness: inputSource.handedness,
                        target: this
                    });
                } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {
                    hand.inputState.pinching = true;
                    this.dispatchEvent({
                        type: 'pinchstart',
                        handedness: inputSource.handedness,
                        target: this
                    });
                }
            } else if (grip !== null && inputSource.gripSpace) {
                gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
                if (gripPose !== null) {
                    grip.matrix.fromArray(gripPose.transform.matrix);
                    grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
                    if (gripPose.linearVelocity) {
                        grip.hasLinearVelocity = true;
                        grip.linearVelocity.copy(gripPose.linearVelocity);
                    } else grip.hasLinearVelocity = false;
                    if (gripPose.angularVelocity) {
                        grip.hasAngularVelocity = true;
                        grip.angularVelocity.copy(gripPose.angularVelocity);
                    } else grip.hasAngularVelocity = false;
                }
            }
        }
        if (targetRay !== null) targetRay.visible = inputPose !== null;
        if (grip !== null) grip.visible = gripPose !== null;
        if (hand !== null) hand.visible = handPose !== null;
        return this;
    }
}
class $2d9d8c9fc2282acc$export$fc830aa069cc8c2f extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format){
        format = format !== undefined ? format : $2d9d8c9fc2282acc$export$c1b6b5136be58045;
        if (format !== $2d9d8c9fc2282acc$export$c1b6b5136be58045 && format !== $2d9d8c9fc2282acc$export$1e113ac2d0905829) throw new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
        if (type === undefined && format === $2d9d8c9fc2282acc$export$c1b6b5136be58045) type = $2d9d8c9fc2282acc$export$c63dc51868b06a9d;
        if (type === undefined && format === $2d9d8c9fc2282acc$export$1e113ac2d0905829) type = $2d9d8c9fc2282acc$export$6c8ea339bfab1301;
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.image = {
            width: width,
            height: height
        };
        this.magFilter = magFilter !== undefined ? magFilter : $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.minFilter = minFilter !== undefined ? minFilter : $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.flipY = false;
        this.generateMipmaps = false;
    }
}
$2d9d8c9fc2282acc$export$fc830aa069cc8c2f.prototype.isDepthTexture = true;
class $2d9d8c9fc2282acc$var$WebXRManager extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(renderer, gl){
        super();
        const scope = this;
        let session = null;
        let framebufferScaleFactor = 1;
        let referenceSpace = null;
        let referenceSpaceType = 'local-floor';
        const hasMultisampledRenderToTexture = renderer.extensions.has('WEBGL_multisampled_render_to_texture');
        let pose = null;
        let glBinding = null;
        let glProjLayer = null;
        let glBaseLayer = null;
        let isMultisample = false;
        let xrFrame = null;
        const attributes = gl.getContextAttributes();
        let initialRenderTarget = null;
        let newRenderTarget = null;
        const controllers = [];
        const inputSourcesMap = new Map();
        //
        const cameraL1 = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7();
        cameraL1.layers.enable(1);
        cameraL1.viewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
        const cameraR1 = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7();
        cameraR1.layers.enable(2);
        cameraR1.viewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
        const cameras1 = [
            cameraL1,
            cameraR1
        ];
        const cameraVR = new $2d9d8c9fc2282acc$export$56b937d9e5581166();
        cameraVR.layers.enable(1);
        cameraVR.layers.enable(2);
        let _currentDepthNear = null;
        let _currentDepthFar = null;
        //
        this.cameraAutoUpdate = true;
        this.enabled = false;
        this.isPresenting = false;
        this.getController = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new $2d9d8c9fc2282acc$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getTargetRaySpace();
        };
        this.getControllerGrip = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new $2d9d8c9fc2282acc$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getGripSpace();
        };
        this.getHand = function(index) {
            let controller = controllers[index];
            if (controller === undefined) {
                controller = new $2d9d8c9fc2282acc$var$WebXRController();
                controllers[index] = controller;
            }
            return controller.getHandSpace();
        };
        //
        function onSessionEvent(event) {
            const controller = inputSourcesMap.get(event.inputSource);
            if (controller) controller.dispatchEvent({
                type: event.type,
                data: event.inputSource
            });
        }
        function onSessionEnd() {
            inputSourcesMap.forEach(function(controller, inputSource) {
                controller.disconnect(inputSource);
            });
            inputSourcesMap.clear();
            _currentDepthNear = null;
            _currentDepthFar = null;
            // restore framebuffer/rendering state
            renderer.setRenderTarget(initialRenderTarget);
            glBaseLayer = null;
            glProjLayer = null;
            glBinding = null;
            session = null;
            newRenderTarget = null;
            //
            animation.stop();
            scope.isPresenting = false;
            scope.dispatchEvent({
                type: 'sessionend'
            });
        }
        this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value;
            if (scope.isPresenting === true) console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
        };
        this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value;
            if (scope.isPresenting === true) console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
        };
        this.getReferenceSpace = function() {
            return referenceSpace;
        };
        this.getBaseLayer = function() {
            return glProjLayer !== null ? glProjLayer : glBaseLayer;
        };
        this.getBinding = function() {
            return glBinding;
        };
        this.getFrame = function() {
            return xrFrame;
        };
        this.getSession = function() {
            return session;
        };
        this.setSession = async function(value) {
            session = value;
            if (session !== null) {
                initialRenderTarget = renderer.getRenderTarget();
                session.addEventListener('select', onSessionEvent);
                session.addEventListener('selectstart', onSessionEvent);
                session.addEventListener('selectend', onSessionEvent);
                session.addEventListener('squeeze', onSessionEvent);
                session.addEventListener('squeezestart', onSessionEvent);
                session.addEventListener('squeezeend', onSessionEvent);
                session.addEventListener('end', onSessionEnd);
                session.addEventListener('inputsourceschange', onInputSourcesChange);
                if (attributes.xrCompatible !== true) await gl.makeXRCompatible();
                if (session.renderState.layers === undefined || renderer.capabilities.isWebGL2 === false) {
                    const layerInit = {
                        antialias: session.renderState.layers === undefined ? attributes.antialias : true,
                        alpha: attributes.alpha,
                        depth: attributes.depth,
                        stencil: attributes.stencil,
                        framebufferScaleFactor: framebufferScaleFactor
                    };
                    glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
                    session.updateRenderState({
                        baseLayer: glBaseLayer
                    });
                    newRenderTarget = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, {
                        format: $2d9d8c9fc2282acc$export$3f8bb04b555a363c,
                        type: $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10,
                        encoding: renderer.outputEncoding
                    });
                } else {
                    isMultisample = attributes.antialias;
                    let depthFormat = null;
                    let depthType = null;
                    let glDepthFormat = null;
                    if (attributes.depth) {
                        glDepthFormat = attributes.stencil ? 35056 : 33190;
                        depthFormat = attributes.stencil ? $2d9d8c9fc2282acc$export$1e113ac2d0905829 : $2d9d8c9fc2282acc$export$c1b6b5136be58045;
                        depthType = attributes.stencil ? $2d9d8c9fc2282acc$export$6c8ea339bfab1301 : $2d9d8c9fc2282acc$export$c63dc51868b06a9d;
                    }
                    const projectionlayerInit = {
                        colorFormat: attributes.alpha || isMultisample ? 32856 : 32849,
                        depthFormat: glDepthFormat,
                        scaleFactor: framebufferScaleFactor
                    };
                    glBinding = new XRWebGLBinding(session, gl);
                    glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
                    session.updateRenderState({
                        layers: [
                            glProjLayer
                        ]
                    });
                    if (isMultisample) newRenderTarget = new $2d9d8c9fc2282acc$export$cb2022643d3c928d(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                        format: $2d9d8c9fc2282acc$export$3f8bb04b555a363c,
                        type: $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10,
                        depthTexture: new $2d9d8c9fc2282acc$export$fc830aa069cc8c2f(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                        stencilBuffer: attributes.stencil,
                        ignoreDepth: glProjLayer.ignoreDepthValues,
                        useRenderToTexture: hasMultisampledRenderToTexture,
                        encoding: renderer.outputEncoding
                    });
                    else newRenderTarget = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(glProjLayer.textureWidth, glProjLayer.textureHeight, {
                        format: attributes.alpha ? $2d9d8c9fc2282acc$export$3f8bb04b555a363c : $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb,
                        type: $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10,
                        depthTexture: new $2d9d8c9fc2282acc$export$fc830aa069cc8c2f(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat),
                        stencilBuffer: attributes.stencil,
                        ignoreDepth: glProjLayer.ignoreDepthValues,
                        encoding: renderer.outputEncoding
                    });
                }
                // Set foveation to maximum.
                this.setFoveation(1);
                referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
                animation.setContext(session);
                animation.start();
                scope.isPresenting = true;
                scope.dispatchEvent({
                    type: 'sessionstart'
                });
            }
        };
        function onInputSourcesChange(event) {
            const inputSources = session.inputSources;
            // Assign inputSources to available controllers
            for(let i138 = 0; i138 < controllers.length; i138++)inputSourcesMap.set(inputSources[i138], controllers[i138]);
            // Notify disconnected
            for(let i136 = 0; i136 < event.removed.length; i136++){
                const inputSource = event.removed[i136];
                const controller = inputSourcesMap.get(inputSource);
                if (controller) {
                    controller.dispatchEvent({
                        type: 'disconnected',
                        data: inputSource
                    });
                    inputSourcesMap.delete(inputSource);
                }
            }
            // Notify connected
            for(let i137 = 0; i137 < event.added.length; i137++){
                const inputSource = event.added[i137];
                const controller = inputSourcesMap.get(inputSource);
                if (controller) controller.dispatchEvent({
                    type: 'connected',
                    data: inputSource
                });
            }
        }
        //
        const cameraLPos = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const cameraRPos = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        /**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */ function setProjectionFromUnion(camera, cameraL, cameraR) {
            cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);
            cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
            const ipd = cameraLPos.distanceTo(cameraRPos);
            const projL = cameraL.projectionMatrix.elements;
            const projR = cameraR.projectionMatrix.elements;
            // VR systems will have identical far and near planes, and
            // most likely identical top and bottom frustum extents.
            // Use the left camera for these values.
            const near = projL[14] / (projL[10] - 1);
            const far = projL[14] / (projL[10] + 1);
            const topFov = (projL[9] + 1) / projL[5];
            const bottomFov = (projL[9] - 1) / projL[5];
            const leftFov = (projL[8] - 1) / projL[0];
            const rightFov = (projR[8] + 1) / projR[0];
            const left = near * leftFov;
            const right = near * rightFov;
            // Calculate the new camera's position offset from the
            // left camera. xOffset should be roughly half `ipd`.
            const zOffset = ipd / (-leftFov + rightFov);
            const xOffset = zOffset * -leftFov;
            // TODO: Better way to apply this offset?
            cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);
            camera.translateX(xOffset);
            camera.translateZ(zOffset);
            camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
            // Find the union of the frustum values of the cameras and scale
            // the values so that the near plane's position does not change in world space,
            // although must now be relative to the new union camera.
            const near2 = near + zOffset;
            const far2 = far + zOffset;
            const left2 = left - xOffset;
            const right2 = right + (ipd - xOffset);
            const top2 = topFov * far / far2 * near2;
            const bottom2 = bottomFov * far / far2 * near2;
            camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        }
        function updateCamera(camera, parent) {
            if (parent === null) camera.matrixWorld.copy(camera.matrix);
            else camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);
            camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        }
        this.updateCamera = function(camera) {
            if (session === null) return;
            cameraVR.near = cameraR1.near = cameraL1.near = camera.near;
            cameraVR.far = cameraR1.far = cameraL1.far = camera.far;
            if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {
                // Note that the new renderState won't apply until the next frame. See #18320
                session.updateRenderState({
                    depthNear: cameraVR.near,
                    depthFar: cameraVR.far
                });
                _currentDepthNear = cameraVR.near;
                _currentDepthFar = cameraVR.far;
            }
            const parent = camera.parent;
            const cameras = cameraVR.cameras;
            updateCamera(cameraVR, parent);
            for(let i140 = 0; i140 < cameras.length; i140++)updateCamera(cameras[i140], parent);
            cameraVR.matrixWorld.decompose(cameraVR.position, cameraVR.quaternion, cameraVR.scale);
            // update user camera and its children
            camera.position.copy(cameraVR.position);
            camera.quaternion.copy(cameraVR.quaternion);
            camera.scale.copy(cameraVR.scale);
            camera.matrix.copy(cameraVR.matrix);
            camera.matrixWorld.copy(cameraVR.matrixWorld);
            const children = camera.children;
            for(let i139 = 0, l = children.length; i139 < l; i139++)children[i139].updateMatrixWorld(true);
            // update projection matrix for proper view frustum culling
            if (cameras.length === 2) setProjectionFromUnion(cameraVR, cameraL1, cameraR1);
            else // assume single camera setup (AR)
            cameraVR.projectionMatrix.copy(cameraL1.projectionMatrix);
        };
        this.getCamera = function() {
            return cameraVR;
        };
        this.getFoveation = function() {
            if (glProjLayer !== null) return glProjLayer.fixedFoveation;
            if (glBaseLayer !== null) return glBaseLayer.fixedFoveation;
            return undefined;
        };
        this.setFoveation = function(foveation) {
            // 0 = no foveation = full resolution
            // 1 = maximum foveation = the edges render at lower resolution
            if (glProjLayer !== null) glProjLayer.fixedFoveation = foveation;
            if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined) glBaseLayer.fixedFoveation = foveation;
        };
        // Animation Loop
        let onAnimationFrameCallback = null;
        function onAnimationFrame(time, frame) {
            pose = frame.getViewerPose(referenceSpace);
            xrFrame = frame;
            if (pose !== null) {
                const views = pose.views;
                if (glBaseLayer !== null) {
                    renderer.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
                    renderer.setRenderTarget(newRenderTarget);
                }
                let cameraVRNeedsUpdate = false;
                // check if it's necessary to rebuild cameraVR's camera list
                if (views.length !== cameraVR.cameras.length) {
                    cameraVR.cameras.length = 0;
                    cameraVRNeedsUpdate = true;
                }
                for(let i141 = 0; i141 < views.length; i141++){
                    const view = views[i141];
                    let viewport = null;
                    if (glBaseLayer !== null) viewport = glBaseLayer.getViewport(view);
                    else {
                        const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
                        viewport = glSubImage.viewport;
                        // For side-by-side projection, we only produce a single texture for both eyes.
                        if (i141 === 0) {
                            renderer.setRenderTargetTextures(newRenderTarget, glSubImage.colorTexture, glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture);
                            renderer.setRenderTarget(newRenderTarget);
                        }
                    }
                    const camera = cameras1[i141];
                    camera.matrix.fromArray(view.transform.matrix);
                    camera.projectionMatrix.fromArray(view.projectionMatrix);
                    camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);
                    if (i141 === 0) cameraVR.matrix.copy(camera.matrix);
                    if (cameraVRNeedsUpdate === true) cameraVR.cameras.push(camera);
                }
            }
            //
            const inputSources = session.inputSources;
            for(let i142 = 0; i142 < controllers.length; i142++){
                const controller = controllers[i142];
                const inputSource = inputSources[i142];
                controller.update(inputSource, frame, referenceSpace);
            }
            if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);
            xrFrame = null;
        }
        const animation = new $2d9d8c9fc2282acc$var$WebGLAnimation();
        animation.setAnimationLoop(onAnimationFrame);
        this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
        };
        this.dispose = function() {
        };
    }
}
function $2d9d8c9fc2282acc$var$WebGLMaterials(properties) {
    function refreshFogUniforms(uniforms, fog) {
        uniforms.fogColor.value.copy(fog.color);
        if (fog.isFog) {
            uniforms.fogNear.value = fog.near;
            uniforms.fogFar.value = fog.far;
        } else if (fog.isFogExp2) uniforms.fogDensity.value = fog.density;
    }
    function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
        if (material.isMeshBasicMaterial) refreshUniformsCommon(uniforms, material);
        else if (material.isMeshLambertMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsLambert(uniforms, material);
        } else if (material.isMeshToonMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsToon(uniforms, material);
        } else if (material.isMeshPhongMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsPhong(uniforms, material);
        } else if (material.isMeshStandardMaterial) {
            refreshUniformsCommon(uniforms, material);
            if (material.isMeshPhysicalMaterial) refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
            else refreshUniformsStandard(uniforms, material);
        } else if (material.isMeshMatcapMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsMatcap(uniforms, material);
        } else if (material.isMeshDepthMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDepth(uniforms, material);
        } else if (material.isMeshDistanceMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsDistance(uniforms, material);
        } else if (material.isMeshNormalMaterial) {
            refreshUniformsCommon(uniforms, material);
            refreshUniformsNormal(uniforms, material);
        } else if (material.isLineBasicMaterial) {
            refreshUniformsLine(uniforms, material);
            if (material.isLineDashedMaterial) refreshUniformsDash(uniforms, material);
        } else if (material.isPointsMaterial) refreshUniformsPoints(uniforms, material, pixelRatio, height);
        else if (material.isSpriteMaterial) refreshUniformsSprites(uniforms, material);
        else if (material.isShadowMaterial) {
            uniforms.color.value.copy(material.color);
            uniforms.opacity.value = material.opacity;
        } else if (material.isShaderMaterial) material.uniformsNeedUpdate = false; // #15581
    }
    function refreshUniformsCommon(uniforms, material) {
        uniforms.opacity.value = material.opacity;
        if (material.color) uniforms.diffuse.value.copy(material.color);
        if (material.emissive) uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.specularMap) uniforms.specularMap.value = material.specularMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        const envMap = properties.get(material).envMap;
        if (envMap) {
            uniforms.envMap.value = envMap;
            uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
            uniforms.reflectivity.value = material.reflectivity;
            uniforms.ior.value = material.ior;
            uniforms.refractionRatio.value = material.refractionRatio;
        }
        if (material.lightMap) {
            uniforms.lightMap.value = material.lightMap;
            uniforms.lightMapIntensity.value = material.lightMapIntensity;
        }
        if (material.aoMap) {
            uniforms.aoMap.value = material.aoMap;
            uniforms.aoMapIntensity.value = material.aoMapIntensity;
        }
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. specular map
        // 3. displacementMap map
        // 4. normal map
        // 5. bump map
        // 6. roughnessMap map
        // 7. metalnessMap map
        // 8. alphaMap map
        // 9. emissiveMap map
        // 10. clearcoat map
        // 11. clearcoat normal map
        // 12. clearcoat roughnessMap map
        // 13. specular intensity map
        // 14. specular tint map
        // 15. transmission map
        // 16. thickness map
        let uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.specularMap) uvScaleMap = material.specularMap;
        else if (material.displacementMap) uvScaleMap = material.displacementMap;
        else if (material.normalMap) uvScaleMap = material.normalMap;
        else if (material.bumpMap) uvScaleMap = material.bumpMap;
        else if (material.roughnessMap) uvScaleMap = material.roughnessMap;
        else if (material.metalnessMap) uvScaleMap = material.metalnessMap;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        else if (material.emissiveMap) uvScaleMap = material.emissiveMap;
        else if (material.clearcoatMap) uvScaleMap = material.clearcoatMap;
        else if (material.clearcoatNormalMap) uvScaleMap = material.clearcoatNormalMap;
        else if (material.clearcoatRoughnessMap) uvScaleMap = material.clearcoatRoughnessMap;
        else if (material.specularIntensityMap) uvScaleMap = material.specularIntensityMap;
        else if (material.specularColorMap) uvScaleMap = material.specularColorMap;
        else if (material.transmissionMap) uvScaleMap = material.transmissionMap;
        else if (material.thicknessMap) uvScaleMap = material.thicknessMap;
        else if (material.sheenColorMap) uvScaleMap = material.sheenColorMap;
        else if (material.sheenRoughnessMap) uvScaleMap = material.sheenRoughnessMap;
        if (uvScaleMap !== undefined) {
            // backwards compatibility
            if (uvScaleMap.isWebGLRenderTarget) uvScaleMap = uvScaleMap.texture;
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
        // uv repeat and offset setting priorities for uv2
        // 1. ao map
        // 2. light map
        let uv2ScaleMap;
        if (material.aoMap) uv2ScaleMap = material.aoMap;
        else if (material.lightMap) uv2ScaleMap = material.lightMap;
        if (uv2ScaleMap !== undefined) {
            // backwards compatibility
            if (uv2ScaleMap.isWebGLRenderTarget) uv2ScaleMap = uv2ScaleMap.texture;
            if (uv2ScaleMap.matrixAutoUpdate === true) uv2ScaleMap.updateMatrix();
            uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);
        }
    }
    function refreshUniformsLine(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
    }
    function refreshUniformsDash(uniforms, material) {
        uniforms.dashSize.value = material.dashSize;
        uniforms.totalSize.value = material.dashSize + material.gapSize;
        uniforms.scale.value = material.scale;
    }
    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.size.value = material.size * pixelRatio;
        uniforms.scale.value = height * 0.5;
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. alpha map
        let uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        if (uvScaleMap !== undefined) {
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
    }
    function refreshUniformsSprites(uniforms, material) {
        uniforms.diffuse.value.copy(material.color);
        uniforms.opacity.value = material.opacity;
        uniforms.rotation.value = material.rotation;
        if (material.map) uniforms.map.value = material.map;
        if (material.alphaMap) uniforms.alphaMap.value = material.alphaMap;
        if (material.alphaTest > 0) uniforms.alphaTest.value = material.alphaTest;
        // uv repeat and offset setting priorities
        // 1. color map
        // 2. alpha map
        let uvScaleMap;
        if (material.map) uvScaleMap = material.map;
        else if (material.alphaMap) uvScaleMap = material.alphaMap;
        if (uvScaleMap !== undefined) {
            if (uvScaleMap.matrixAutoUpdate === true) uvScaleMap.updateMatrix();
            uniforms.uvTransform.value.copy(uvScaleMap.matrix);
        }
    }
    function refreshUniformsLambert(uniforms, material) {
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
    }
    function refreshUniformsPhong(uniforms, material) {
        uniforms.specular.value.copy(material.specular);
        uniforms.shininess.value = Math.max(material.shininess, 0.0001); // to prevent pow( 0.0, 0.0 )
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsToon(uniforms, material) {
        if (material.gradientMap) uniforms.gradientMap.value = material.gradientMap;
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsStandard(uniforms, material) {
        uniforms.roughness.value = material.roughness;
        uniforms.metalness.value = material.metalness;
        if (material.roughnessMap) uniforms.roughnessMap.value = material.roughnessMap;
        if (material.metalnessMap) uniforms.metalnessMap.value = material.metalnessMap;
        if (material.emissiveMap) uniforms.emissiveMap.value = material.emissiveMap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        const envMap = properties.get(material).envMap;
        if (envMap) //uniforms.envMap.value = material.envMap; // part of uniforms common
        uniforms.envMapIntensity.value = material.envMapIntensity;
    }
    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
        refreshUniformsStandard(uniforms, material);
        uniforms.ior.value = material.ior; // also part of uniforms common
        if (material.sheen > 0) {
            uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
            uniforms.sheenRoughness.value = material.sheenRoughness;
            if (material.sheenColorMap) uniforms.sheenColorMap.value = material.sheenColorMap;
            if (material.sheenRoughnessMap) uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
        }
        if (material.clearcoat > 0) {
            uniforms.clearcoat.value = material.clearcoat;
            uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
            if (material.clearcoatMap) uniforms.clearcoatMap.value = material.clearcoatMap;
            if (material.clearcoatRoughnessMap) uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
            if (material.clearcoatNormalMap) {
                uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
                uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
                if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.clearcoatNormalScale.value.negate();
            }
        }
        if (material.transmission > 0) {
            uniforms.transmission.value = material.transmission;
            uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
            uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
            if (material.transmissionMap) uniforms.transmissionMap.value = material.transmissionMap;
            uniforms.thickness.value = material.thickness;
            if (material.thicknessMap) uniforms.thicknessMap.value = material.thicknessMap;
            uniforms.attenuationDistance.value = material.attenuationDistance;
            uniforms.attenuationColor.value.copy(material.attenuationColor);
        }
        uniforms.specularIntensity.value = material.specularIntensity;
        uniforms.specularColor.value.copy(material.specularColor);
        if (material.specularIntensityMap) uniforms.specularIntensityMap.value = material.specularIntensityMap;
        if (material.specularColorMap) uniforms.specularColorMap.value = material.specularColorMap;
    }
    function refreshUniformsMatcap(uniforms, material) {
        if (material.matcap) uniforms.matcap.value = material.matcap;
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsDepth(uniforms, material) {
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    function refreshUniformsDistance(uniforms, material) {
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
        uniforms.referencePosition.value.copy(material.referencePosition);
        uniforms.nearDistance.value = material.nearDistance;
        uniforms.farDistance.value = material.farDistance;
    }
    function refreshUniformsNormal(uniforms, material) {
        if (material.bumpMap) {
            uniforms.bumpMap.value = material.bumpMap;
            uniforms.bumpScale.value = material.bumpScale;
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.bumpScale.value *= -1;
        }
        if (material.normalMap) {
            uniforms.normalMap.value = material.normalMap;
            uniforms.normalScale.value.copy(material.normalScale);
            if (material.side === $2d9d8c9fc2282acc$export$d9f0486e75b5ace) uniforms.normalScale.value.negate();
        }
        if (material.displacementMap) {
            uniforms.displacementMap.value = material.displacementMap;
            uniforms.displacementScale.value = material.displacementScale;
            uniforms.displacementBias.value = material.displacementBias;
        }
    }
    return {
        refreshFogUniforms: refreshFogUniforms,
        refreshMaterialUniforms: refreshMaterialUniforms
    };
}
function $2d9d8c9fc2282acc$var$createCanvasElement() {
    const canvas = $2d9d8c9fc2282acc$var$createElementNS('canvas');
    canvas.style.display = 'block';
    return canvas;
}
function $2d9d8c9fc2282acc$export$f6cc00ef28d7cf97(parameters1 = {
}) {
    const _canvas = parameters1.canvas !== undefined ? parameters1.canvas : $2d9d8c9fc2282acc$var$createCanvasElement(), _context = parameters1.context !== undefined ? parameters1.context : null, _alpha = parameters1.alpha !== undefined ? parameters1.alpha : false, _depth = parameters1.depth !== undefined ? parameters1.depth : true, _stencil = parameters1.stencil !== undefined ? parameters1.stencil : true, _antialias = parameters1.antialias !== undefined ? parameters1.antialias : false, _premultipliedAlpha = parameters1.premultipliedAlpha !== undefined ? parameters1.premultipliedAlpha : true, _preserveDrawingBuffer = parameters1.preserveDrawingBuffer !== undefined ? parameters1.preserveDrawingBuffer : false, _powerPreference = parameters1.powerPreference !== undefined ? parameters1.powerPreference : 'default', _failIfMajorPerformanceCaveat = parameters1.failIfMajorPerformanceCaveat !== undefined ? parameters1.failIfMajorPerformanceCaveat : false;
    let currentRenderList1 = null;
    let currentRenderState = null;
    // render() can be called from within a callback triggered by another render.
    // We track this so that the nested render call gets its list and state isolated from the parent render call.
    const renderListStack = [];
    const renderStateStack = [];
    // public properties
    this.domElement = _canvas;
    // Debug configuration container
    this.debug = {
        /**
		 * Enables error checking and reporting when shader programs are being compiled
		 * @type {boolean}
		 */ checkShaderErrors: true
    };
    // clearing
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    // scene graph
    this.sortObjects = true;
    // user-defined clipping
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    // physically based shading
    this.outputEncoding = $2d9d8c9fc2282acc$export$7207336e4151a112;
    // physical lights
    this.physicallyCorrectLights = false;
    // tone mapping
    this.toneMapping = $2d9d8c9fc2282acc$export$9fcb6b4294603b2;
    this.toneMappingExposure = 1;
    // internal properties
    const _this = this;
    let _isContextLost = false;
    // internal state cache
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    const _currentViewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
    const _currentScissor = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
    let _currentScissorTest = null;
    //
    let _width = _canvas.width;
    let _height = _canvas.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 0, _width, _height);
    const _scissor = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 0, _width, _height);
    let _scissorTest = false;
    //
    const _currentDrawBuffers = [];
    // frustum
    const _frustum = new $2d9d8c9fc2282acc$export$35efe6f4c85463d2();
    // clipping
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    // transmission
    let _transmissionRenderTarget = null;
    // camera matrices cache
    const _projScreenMatrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
    const _vector3 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
    const _emptyScene = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isScene: true
    };
    function getTargetPixelRatio() {
        return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    // initialize
    let _gl = _context;
    function getContext(contextNames, contextAttributes) {
        for(let i143 = 0; i143 < contextNames.length; i143++){
            const contextName = contextNames[i143];
            const context = _canvas.getContext(contextName, contextAttributes);
            if (context !== null) return context;
        }
        return null;
    }
    try {
        const contextAttributes = {
            alpha: _alpha,
            depth: _depth,
            stencil: _stencil,
            antialias: _antialias,
            premultipliedAlpha: _premultipliedAlpha,
            preserveDrawingBuffer: _preserveDrawingBuffer,
            powerPreference: _powerPreference,
            failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
        };
        // OffscreenCanvas does not have setAttribute, see #22811
        if ('setAttribute' in _canvas) _canvas.setAttribute('data-engine', `three.js r${$2d9d8c9fc2282acc$export$3545e07a80636437}`);
        // event listeners must be registered before WebGL context is created, see #12753
        _canvas.addEventListener('webglcontextlost', onContextLost, false);
        _canvas.addEventListener('webglcontextrestored', onContextRestore, false);
        if (_gl === null) {
            const contextNames = [
                'webgl2',
                'webgl',
                'experimental-webgl'
            ];
            if (_this.isWebGL1Renderer === true) contextNames.shift();
            _gl = getContext(contextNames, contextAttributes);
            if (_gl === null) {
                if (getContext(contextNames)) throw new Error('Error creating WebGL context with your selected attributes.');
                else throw new Error('Error creating WebGL context.');
            }
        }
        // Some experimental-webgl implementations do not have getShaderPrecisionFormat
        if (_gl.getShaderPrecisionFormat === undefined) _gl.getShaderPrecisionFormat = function() {
            return {
                'rangeMin': 1,
                'rangeMax': 1,
                'precision': 1
            };
        };
    } catch (error) {
        console.error('THREE.WebGLRenderer: ' + error.message);
        throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures1, cubemaps, cubeuvmaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping, shadowMap;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates;
    function initGLContext() {
        extensions = new $2d9d8c9fc2282acc$var$WebGLExtensions(_gl);
        capabilities = new $2d9d8c9fc2282acc$var$WebGLCapabilities(_gl, extensions, parameters1);
        extensions.init(capabilities);
        utils = new $2d9d8c9fc2282acc$export$ddaebcad857649a8(_gl, extensions, capabilities);
        state = new $2d9d8c9fc2282acc$var$WebGLState(_gl, extensions, capabilities);
        _currentDrawBuffers[0] = 1029;
        info = new $2d9d8c9fc2282acc$var$WebGLInfo(_gl);
        properties = new $2d9d8c9fc2282acc$var$WebGLProperties();
        textures1 = new $2d9d8c9fc2282acc$var$WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
        cubemaps = new $2d9d8c9fc2282acc$var$WebGLCubeMaps(_this);
        cubeuvmaps = new $2d9d8c9fc2282acc$var$WebGLCubeUVMaps(_this);
        attributes = new $2d9d8c9fc2282acc$var$WebGLAttributes(_gl, capabilities);
        bindingStates = new $2d9d8c9fc2282acc$var$WebGLBindingStates(_gl, extensions, attributes, capabilities);
        geometries = new $2d9d8c9fc2282acc$var$WebGLGeometries(_gl, attributes, info, bindingStates);
        objects = new $2d9d8c9fc2282acc$var$WebGLObjects(_gl, geometries, attributes, info);
        morphtargets = new $2d9d8c9fc2282acc$var$WebGLMorphtargets(_gl, capabilities, textures1);
        clipping = new $2d9d8c9fc2282acc$var$WebGLClipping(properties);
        programCache = new $2d9d8c9fc2282acc$var$WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping);
        materials = new $2d9d8c9fc2282acc$var$WebGLMaterials(properties);
        renderLists = new $2d9d8c9fc2282acc$var$WebGLRenderLists();
        renderStates = new $2d9d8c9fc2282acc$var$WebGLRenderStates(extensions, capabilities);
        background = new $2d9d8c9fc2282acc$var$WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);
        shadowMap = new $2d9d8c9fc2282acc$var$WebGLShadowMap(_this, objects, capabilities);
        bufferRenderer = new $2d9d8c9fc2282acc$var$WebGLBufferRenderer(_gl, extensions, info, capabilities);
        indexedBufferRenderer = new $2d9d8c9fc2282acc$var$WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);
        info.programs = programCache.programs;
        _this.capabilities = capabilities;
        _this.extensions = extensions;
        _this.properties = properties;
        _this.renderLists = renderLists;
        _this.shadowMap = shadowMap;
        _this.state = state;
        _this.info = info;
    }
    initGLContext();
    // xr
    const xr = new $2d9d8c9fc2282acc$var$WebXRManager(_this, _gl);
    this.xr = xr;
    // API
    this.getContext = function() {
        return _gl;
    };
    this.getContextAttributes = function() {
        return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
        const extension = extensions.get('WEBGL_lose_context');
        if (extension) extension.loseContext();
    };
    this.forceContextRestore = function() {
        const extension = extensions.get('WEBGL_lose_context');
        if (extension) extension.restoreContext();
    };
    this.getPixelRatio = function() {
        return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
        if (value === undefined) return;
        _pixelRatio = value;
        this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
        return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle) {
        if (xr.isPresenting) {
            console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
            return;
        }
        _width = width;
        _height = height;
        _canvas.width = Math.floor(width * _pixelRatio);
        _canvas.height = Math.floor(height * _pixelRatio);
        if (updateStyle !== false) {
            _canvas.style.width = width + 'px';
            _canvas.style.height = height + 'px';
        }
        this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
        return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
        _width = width;
        _height = height;
        _pixelRatio = pixelRatio;
        _canvas.width = Math.floor(width * pixelRatio);
        _canvas.height = Math.floor(height * pixelRatio);
        this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
        return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
        return target.copy(_viewport);
    };
    this.setViewport = function(x, y, width, height) {
        if (x.isVector4) _viewport.set(x.x, x.y, x.z, x.w);
        else _viewport.set(x, y, width, height);
        state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissor = function(target) {
        return target.copy(_scissor);
    };
    this.setScissor = function(x, y, width, height) {
        if (x.isVector4) _scissor.set(x.x, x.y, x.z, x.w);
        else _scissor.set(x, y, width, height);
        state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
    };
    this.getScissorTest = function() {
        return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
        state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
        _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
        _transparentSort = method;
    };
    // Clearing
    this.getClearColor = function(target) {
        return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
        background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
        return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
        background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color, depth, stencil) {
        let bits = 0;
        if (color === undefined || color) bits |= 16384;
        if (depth === undefined || depth) bits |= 256;
        if (stencil === undefined || stencil) bits |= 1024;
        _gl.clear(bits);
    };
    this.clearColor = function() {
        this.clear(true, false, false);
    };
    this.clearDepth = function() {
        this.clear(false, true, false);
    };
    this.clearStencil = function() {
        this.clear(false, false, true);
    };
    //
    this.dispose = function() {
        _canvas.removeEventListener('webglcontextlost', onContextLost, false);
        _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);
        renderLists.dispose();
        renderStates.dispose();
        properties.dispose();
        cubemaps.dispose();
        cubeuvmaps.dispose();
        objects.dispose();
        bindingStates.dispose();
        programCache.dispose();
        xr.dispose();
        xr.removeEventListener('sessionstart', onXRSessionStart);
        xr.removeEventListener('sessionend', onXRSessionEnd);
        if (_transmissionRenderTarget) {
            _transmissionRenderTarget.dispose();
            _transmissionRenderTarget = null;
        }
        animation.stop();
    };
    // Events
    function onContextLost(event) {
        event.preventDefault();
        console.log('THREE.WebGLRenderer: Context Lost.');
        _isContextLost = true;
    }
    function onContextRestore() {
        console.log('THREE.WebGLRenderer: Context Restored.');
        _isContextLost = false;
        const infoAutoReset = info.autoReset;
        const shadowMapEnabled = shadowMap.enabled;
        const shadowMapAutoUpdate = shadowMap.autoUpdate;
        const shadowMapNeedsUpdate = shadowMap.needsUpdate;
        const shadowMapType = shadowMap.type;
        initGLContext();
        info.autoReset = infoAutoReset;
        shadowMap.enabled = shadowMapEnabled;
        shadowMap.autoUpdate = shadowMapAutoUpdate;
        shadowMap.needsUpdate = shadowMapNeedsUpdate;
        shadowMap.type = shadowMapType;
    }
    function onMaterialDispose(event) {
        const material = event.target;
        material.removeEventListener('dispose', onMaterialDispose);
        deallocateMaterial(material);
    }
    // Buffer deallocation
    function deallocateMaterial(material) {
        releaseMaterialProgramReferences(material);
        properties.remove(material);
    }
    function releaseMaterialProgramReferences(material) {
        const programs = properties.get(material).programs;
        if (programs !== undefined) {
            programs.forEach(function(program) {
                programCache.releaseProgram(program);
            });
            if (material.isShaderMaterial) programCache.releaseShaderCache(material);
        }
    }
    // Buffer rendering
    this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
        if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)
        const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;
        const program = setProgram(camera, scene, geometry, material, object);
        state.setMaterial(material, frontFaceCW);
        //
        let index = geometry.index;
        const position = geometry.attributes.position;
        //
        if (index === null) {
            if (position === undefined || position.count === 0) return;
        } else if (index.count === 0) return;
        //
        let rangeFactor = 1;
        if (material.wireframe === true) {
            index = geometries.getWireframeAttribute(geometry);
            rangeFactor = 2;
        }
        bindingStates.setup(object, material, program, geometry, index);
        let attribute;
        let renderer = bufferRenderer;
        if (index !== null) {
            attribute = attributes.get(index);
            renderer = indexedBufferRenderer;
            renderer.setIndex(attribute);
        }
        //
        const dataCount = index !== null ? index.count : position.count;
        const rangeStart = geometry.drawRange.start * rangeFactor;
        const rangeCount = geometry.drawRange.count * rangeFactor;
        const groupStart = group !== null ? group.start * rangeFactor : 0;
        const groupCount = group !== null ? group.count * rangeFactor : Infinity;
        const drawStart = Math.max(rangeStart, groupStart);
        const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;
        const drawCount = Math.max(0, drawEnd - drawStart + 1);
        if (drawCount === 0) return;
        //
        if (object.isMesh) {
            if (material.wireframe === true) {
                state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
                renderer.setMode(1);
            } else renderer.setMode(4);
        } else if (object.isLine) {
            let lineWidth = material.linewidth;
            if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material
            state.setLineWidth(lineWidth * getTargetPixelRatio());
            if (object.isLineSegments) renderer.setMode(1);
            else if (object.isLineLoop) renderer.setMode(2);
            else renderer.setMode(3);
        } else if (object.isPoints) renderer.setMode(0);
        else if (object.isSprite) renderer.setMode(4);
        if (object.isInstancedMesh) renderer.renderInstances(drawStart, drawCount, object.count);
        else if (geometry.isInstancedBufferGeometry) {
            const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
            renderer.renderInstances(drawStart, drawCount, instanceCount);
        } else renderer.render(drawStart, drawCount);
    };
    // Compile
    this.compile = function(scene, camera) {
        currentRenderState = renderStates.get(scene);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        scene.traverseVisible(function(object) {
            if (object.isLight && object.layers.test(camera.layers)) {
                currentRenderState.pushLight(object);
                if (object.castShadow) currentRenderState.pushShadow(object);
            }
        });
        currentRenderState.setupLights(_this.physicallyCorrectLights);
        scene.traverse(function(object) {
            const material = object.material;
            if (material) {
                if (Array.isArray(material)) for(let i144 = 0; i144 < material.length; i144++){
                    const material2 = material[i144];
                    getProgram(material2, scene, object);
                }
                else getProgram(material, scene, object);
            }
        });
        renderStateStack.pop();
        currentRenderState = null;
    };
    // Animation Loop
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time) {
        if (onAnimationFrameCallback) onAnimationFrameCallback(time);
    }
    function onXRSessionStart() {
        animation.stop();
    }
    function onXRSessionEnd() {
        animation.start();
    }
    const animation = new $2d9d8c9fc2282acc$var$WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof window !== 'undefined') animation.setContext(window);
    this.setAnimationLoop = function(callback) {
        onAnimationFrameCallback = callback;
        xr.setAnimationLoop(callback);
        callback === null ? animation.stop() : animation.start();
    };
    xr.addEventListener('sessionstart', onXRSessionStart);
    xr.addEventListener('sessionend', onXRSessionEnd);
    // Rendering
    this.render = function(scene, camera) {
        if (camera !== undefined && camera.isCamera !== true) {
            console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
            return;
        }
        if (_isContextLost === true) return;
        // update scene graph
        if (scene.autoUpdate === true) scene.updateMatrixWorld();
        // update camera matrices and frustum
        if (camera.parent === null) camera.updateMatrixWorld();
        if (xr.enabled === true && xr.isPresenting === true) {
            if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);
            camera = xr.getCamera(); // use XR camera for rendering
        }
        //
        if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);
        currentRenderState = renderStates.get(scene, renderStateStack.length);
        currentRenderState.init();
        renderStateStack.push(currentRenderState);
        _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        _frustum.setFromProjectionMatrix(_projScreenMatrix);
        _localClippingEnabled = this.localClippingEnabled;
        _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);
        currentRenderList1 = renderLists.get(scene, renderListStack.length);
        currentRenderList1.init();
        renderListStack.push(currentRenderList1);
        projectObject(scene, camera, 0, _this.sortObjects);
        currentRenderList1.finish();
        if (_this.sortObjects === true) currentRenderList1.sort(_opaqueSort, _transparentSort);
        //
        if (_clippingEnabled === true) clipping.beginShadows();
        const shadowsArray = currentRenderState.state.shadowsArray;
        shadowMap.render(shadowsArray, scene, camera);
        if (_clippingEnabled === true) clipping.endShadows();
        //
        if (this.info.autoReset === true) this.info.reset();
        //
        background.render(currentRenderList1, scene);
        // render scene
        currentRenderState.setupLights(_this.physicallyCorrectLights);
        if (camera.isArrayCamera) {
            const cameras = camera.cameras;
            for(let i145 = 0, l = cameras.length; i145 < l; i145++){
                const camera2 = cameras[i145];
                renderScene(currentRenderList1, scene, camera2, camera2.viewport);
            }
        } else renderScene(currentRenderList1, scene, camera);
        //
        if (_currentRenderTarget !== null) {
            // resolve multisample renderbuffers to a single-sample texture if necessary
            textures1.updateMultisampleRenderTarget(_currentRenderTarget);
            // Generate mipmap if we're using any kind of mipmap filtering
            textures1.updateRenderTargetMipmap(_currentRenderTarget);
        }
        //
        if (scene.isScene === true) scene.onAfterRender(_this, scene, camera);
        // Ensure depth buffer writing is enabled so it can be cleared on next render
        state.buffers.depth.setTest(true);
        state.buffers.depth.setMask(true);
        state.buffers.color.setMask(true);
        state.setPolygonOffset(false);
        // _gl.finish();
        bindingStates.resetDefaultState();
        _currentMaterialId = -1;
        _currentCamera = null;
        renderStateStack.pop();
        if (renderStateStack.length > 0) currentRenderState = renderStateStack[renderStateStack.length - 1];
        else currentRenderState = null;
        renderListStack.pop();
        if (renderListStack.length > 0) currentRenderList1 = renderListStack[renderListStack.length - 1];
        else currentRenderList1 = null;
    };
    function projectObject(object, camera, groupOrder, sortObjects) {
        if (object.visible === false) return;
        const visible = object.layers.test(camera.layers);
        if (visible) {
            if (object.isGroup) groupOrder = object.renderOrder;
            else if (object.isLOD) {
                if (object.autoUpdate === true) object.update(camera);
            } else if (object.isLight) {
                currentRenderState.pushLight(object);
                if (object.castShadow) currentRenderState.pushShadow(object);
            } else if (object.isSprite) {
                if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                    if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                    const geometry = objects.update(object);
                    const material = object.material;
                    if (material.visible) currentRenderList1.push(object, geometry, material, groupOrder, _vector3.z, null);
                }
            } else if (object.isMesh || object.isLine || object.isPoints) {
                if (object.isSkinnedMesh) // update skeleton only once in a frame
                {
                    if (object.skeleton.frame !== info.render.frame) {
                        object.skeleton.update();
                        object.skeleton.frame = info.render.frame;
                    }
                }
                if (!object.frustumCulled || _frustum.intersectsObject(object)) {
                    if (sortObjects) _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                    const geometry = objects.update(object);
                    const material = object.material;
                    if (Array.isArray(material)) {
                        const groups = geometry.groups;
                        for(let i146 = 0, l = groups.length; i146 < l; i146++){
                            const group = groups[i146];
                            const groupMaterial = material[group.materialIndex];
                            if (groupMaterial && groupMaterial.visible) currentRenderList1.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);
                        }
                    } else if (material.visible) currentRenderList1.push(object, geometry, material, groupOrder, _vector3.z, null);
                }
            }
        }
        const children = object.children;
        for(let i147 = 0, l = children.length; i147 < l; i147++)projectObject(children[i147], camera, groupOrder, sortObjects);
    }
    function renderScene(currentRenderList, scene, camera, viewport) {
        const opaqueObjects = currentRenderList.opaque;
        const transmissiveObjects = currentRenderList.transmissive;
        const transparentObjects = currentRenderList.transparent;
        currentRenderState.setupLightsView(camera);
        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, scene, camera);
        if (viewport) state.viewport(_currentViewport.copy(viewport));
        if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);
        if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene, camera);
        if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera);
    }
    function renderTransmissionPass(opaqueObjects, scene, camera) {
        if (_transmissionRenderTarget === null) {
            const needsAntialias = _antialias === true && capabilities.isWebGL2 === true;
            const renderTargetType = needsAntialias ? $2d9d8c9fc2282acc$export$cb2022643d3c928d : $2d9d8c9fc2282acc$export$3c052beb2e51e23f;
            _transmissionRenderTarget = new renderTargetType(1024, 1024, {
                generateMipmaps: true,
                type: utils.convert($2d9d8c9fc2282acc$export$2697304443f382bc) !== null ? $2d9d8c9fc2282acc$export$2697304443f382bc : $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10,
                minFilter: $2d9d8c9fc2282acc$export$5d8599b6a933fb1b,
                magFilter: $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0,
                wrapS: $2d9d8c9fc2282acc$export$9d9334239a5a5e06,
                wrapT: $2d9d8c9fc2282acc$export$9d9334239a5a5e06,
                useRenderToTexture: extensions.has('WEBGL_multisampled_render_to_texture')
            });
        }
        const currentRenderTarget = _this.getRenderTarget();
        _this.setRenderTarget(_transmissionRenderTarget);
        _this.clear();
        // Turn off the features which can affect the frag color for opaque objects pass.
        // Otherwise they are applied twice in opaque objects pass and transmission objects pass.
        const currentToneMapping = _this.toneMapping;
        _this.toneMapping = $2d9d8c9fc2282acc$export$9fcb6b4294603b2;
        renderObjects(opaqueObjects, scene, camera);
        _this.toneMapping = currentToneMapping;
        textures1.updateMultisampleRenderTarget(_transmissionRenderTarget);
        textures1.updateRenderTargetMipmap(_transmissionRenderTarget);
        _this.setRenderTarget(currentRenderTarget);
    }
    function renderObjects(renderList, scene, camera) {
        const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;
        for(let i148 = 0, l = renderList.length; i148 < l; i148++){
            const renderItem = renderList[i148];
            const object = renderItem.object;
            const geometry = renderItem.geometry;
            const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
            const group = renderItem.group;
            if (object.layers.test(camera.layers)) renderObject(object, scene, camera, geometry, material, group);
        }
    }
    function renderObject(object, scene, camera, geometry, material, group) {
        object.onBeforeRender(_this, scene, camera, geometry, material, group);
        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);
        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);
        material.onBeforeRender(_this, scene, camera, geometry, object, group);
        if (material.transparent === true && material.side === $2d9d8c9fc2282acc$export$3b296b6f144d5b03) {
            material.side = $2d9d8c9fc2282acc$export$d9f0486e75b5ace;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = $2d9d8c9fc2282acc$export$2ede184fc2998901;
            material.needsUpdate = true;
            _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            material.side = $2d9d8c9fc2282acc$export$3b296b6f144d5b03;
        } else _this.renderBufferDirect(camera, scene, geometry, material, object, group);
        object.onAfterRender(_this, scene, camera, geometry, material, group);
    }
    function getProgram(material, scene, object) {
        if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        const shadowsArray = currentRenderState.state.shadowsArray;
        const lightsStateVersion = lights.state.version;
        const parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);
        const programCacheKey = programCache.getProgramCacheKey(parameters);
        let programs = materialProperties.programs;
        // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change
        materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
        materialProperties.fog = scene.fog;
        materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
        if (programs === undefined) {
            // new material
            material.addEventListener('dispose', onMaterialDispose);
            programs = new Map();
            materialProperties.programs = programs;
        }
        let program = programs.get(programCacheKey);
        if (program !== undefined) // early out if program and light state is identical
        {
            if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
                updateCommonMaterialProperties(material, parameters);
                return program;
            }
        } else {
            parameters.uniforms = programCache.getUniforms(material);
            material.onBuild(object, parameters, _this);
            material.onBeforeCompile(parameters, _this);
            program = programCache.acquireProgram(parameters, programCacheKey);
            programs.set(programCacheKey, program);
            materialProperties.uniforms = parameters.uniforms;
        }
        const uniforms = materialProperties.uniforms;
        if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) uniforms.clippingPlanes = clipping.uniform;
        updateCommonMaterialProperties(material, parameters);
        // store the light setup it was created for
        materialProperties.needsLights = materialNeedsLights(material);
        materialProperties.lightsStateVersion = lightsStateVersion;
        if (materialProperties.needsLights) {
            // wire up the material to this renderer's lighting state
            uniforms.ambientLightColor.value = lights.state.ambient;
            uniforms.lightProbe.value = lights.state.probe;
            uniforms.directionalLights.value = lights.state.directional;
            uniforms.directionalLightShadows.value = lights.state.directionalShadow;
            uniforms.spotLights.value = lights.state.spot;
            uniforms.spotLightShadows.value = lights.state.spotShadow;
            uniforms.rectAreaLights.value = lights.state.rectArea;
            uniforms.ltc_1.value = lights.state.rectAreaLTC1;
            uniforms.ltc_2.value = lights.state.rectAreaLTC2;
            uniforms.pointLights.value = lights.state.point;
            uniforms.pointLightShadows.value = lights.state.pointShadow;
            uniforms.hemisphereLights.value = lights.state.hemi;
            uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
            uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
            uniforms.spotShadowMap.value = lights.state.spotShadowMap;
            uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
            uniforms.pointShadowMap.value = lights.state.pointShadowMap;
            uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
        // TODO (abelnation): add area lights shadow info to uniforms
        }
        const progUniforms = program.getUniforms();
        const uniformsList = $2d9d8c9fc2282acc$var$WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
        materialProperties.currentProgram = program;
        materialProperties.uniformsList = uniformsList;
        return program;
    }
    function updateCommonMaterialProperties(material, parameters) {
        const materialProperties = properties.get(material);
        materialProperties.outputEncoding = parameters.outputEncoding;
        materialProperties.instancing = parameters.instancing;
        materialProperties.skinning = parameters.skinning;
        materialProperties.morphTargets = parameters.morphTargets;
        materialProperties.morphNormals = parameters.morphNormals;
        materialProperties.morphTargetsCount = parameters.morphTargetsCount;
        materialProperties.numClippingPlanes = parameters.numClippingPlanes;
        materialProperties.numIntersection = parameters.numClipIntersection;
        materialProperties.vertexAlphas = parameters.vertexAlphas;
        materialProperties.vertexTangents = parameters.vertexTangents;
        materialProperties.toneMapping = parameters.toneMapping;
    }
    function setProgram(camera, scene, geometry, material, object) {
        if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...
        textures1.resetTextureUnits();
        const fog = scene.fog;
        const environment = material.isMeshStandardMaterial ? scene.environment : null;
        const encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;
        const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
        const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
        const vertexTangents = !!material.normalMap && !!geometry.attributes.tangent;
        const morphTargets = !!geometry.morphAttributes.position;
        const morphNormals = !!geometry.morphAttributes.normal;
        const morphTargetsCount = !!geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;
        const toneMapping = material.toneMapped ? _this.toneMapping : $2d9d8c9fc2282acc$export$9fcb6b4294603b2;
        const materialProperties = properties.get(material);
        const lights = currentRenderState.state.lights;
        if (_clippingEnabled === true) {
            if (_localClippingEnabled === true || camera !== _currentCamera) {
                const useCache = camera === _currentCamera && material.id === _currentMaterialId;
                // we might want to call this function with some ClippingGroup
                // object instead of the material, once it becomes feasible
                // (#8465, #8379)
                clipping.setState(material, camera, useCache);
            }
        }
        //
        let needsProgramChange = false;
        if (material.version === materialProperties.__version) {
            if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) needsProgramChange = true;
            else if (materialProperties.outputEncoding !== encoding) needsProgramChange = true;
            else if (object.isInstancedMesh && materialProperties.instancing === false) needsProgramChange = true;
            else if (!object.isInstancedMesh && materialProperties.instancing === true) needsProgramChange = true;
            else if (object.isSkinnedMesh && materialProperties.skinning === false) needsProgramChange = true;
            else if (!object.isSkinnedMesh && materialProperties.skinning === true) needsProgramChange = true;
            else if (materialProperties.envMap !== envMap) needsProgramChange = true;
            else if (material.fog && materialProperties.fog !== fog) needsProgramChange = true;
            else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) needsProgramChange = true;
            else if (materialProperties.vertexAlphas !== vertexAlphas) needsProgramChange = true;
            else if (materialProperties.vertexTangents !== vertexTangents) needsProgramChange = true;
            else if (materialProperties.morphTargets !== morphTargets) needsProgramChange = true;
            else if (materialProperties.morphNormals !== morphNormals) needsProgramChange = true;
            else if (materialProperties.toneMapping !== toneMapping) needsProgramChange = true;
            else if (capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount) needsProgramChange = true;
        } else {
            needsProgramChange = true;
            materialProperties.__version = material.version;
        }
        //
        let program = materialProperties.currentProgram;
        if (needsProgramChange === true) program = getProgram(material, scene, object);
        let refreshProgram = false;
        let refreshMaterial = false;
        let refreshLights = false;
        const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
        if (state.useProgram(program.program)) {
            refreshProgram = true;
            refreshMaterial = true;
            refreshLights = true;
        }
        if (material.id !== _currentMaterialId) {
            _currentMaterialId = material.id;
            refreshMaterial = true;
        }
        if (refreshProgram || _currentCamera !== camera) {
            p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);
            if (capabilities.logarithmicDepthBuffer) p_uniforms.setValue(_gl, 'logDepthBufFC', 2 / (Math.log(camera.far + 1) / Math.LN2));
            if (_currentCamera !== camera) {
                _currentCamera = camera;
                // lighting uniforms depend on the camera so enforce an update
                // now, in case this material supports lights - or later, when
                // the next material that does gets activated:
                refreshMaterial = true; // set to true on material change
                refreshLights = true; // remains set until update done
            }
            // load material specific uniforms
            // (shader material also gets them for the sake of genericity)
            if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
                const uCamPos = p_uniforms.map.cameraPosition;
                if (uCamPos !== undefined) uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
            }
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);
            if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || object.isSkinnedMesh) p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
        }
        // skinning and morph target uniforms must be set even if material didn't change
        // auto-setting of texture unit for bone and morph texture must go before other textures
        // otherwise textures used for skinning and morphing can take over texture units reserved for other material textures
        if (object.isSkinnedMesh) {
            p_uniforms.setOptional(_gl, object, 'bindMatrix');
            p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
            const skeleton = object.skeleton;
            if (skeleton) {
                if (capabilities.floatVertexTextures) {
                    if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
                    p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures1);
                    p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
                } else p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
            }
        }
        if (!!geometry && (geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined)) morphtargets.update(object, geometry, material, program);
        if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {
            materialProperties.receiveShadow = object.receiveShadow;
            p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);
        }
        if (refreshMaterial) {
            p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);
            if (materialProperties.needsLights) // the current material requires lighting info
            // note: all lighting uniforms are always set correctly
            // they simply reference the renderer's state for their
            // values
            //
            // use the current material's .needsUpdate flags to set
            // the GL state when required
            markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
            // refresh uniforms common to several materials
            if (fog && material.fog) materials.refreshFogUniforms(m_uniforms, fog);
            materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget);
            $2d9d8c9fc2282acc$var$WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures1);
        }
        if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
            $2d9d8c9fc2282acc$var$WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures1);
            material.uniformsNeedUpdate = false;
        }
        if (material.isSpriteMaterial) p_uniforms.setValue(_gl, 'center', object.center);
        // common matrices
        p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);
        p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);
        p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);
        return program;
    }
    // If uniforms are marked as clean, they don't need to be loaded to the GPU.
    function markUniformsLightsNeedsUpdate(uniforms, value) {
        uniforms.ambientLightColor.needsUpdate = value;
        uniforms.lightProbe.needsUpdate = value;
        uniforms.directionalLights.needsUpdate = value;
        uniforms.directionalLightShadows.needsUpdate = value;
        uniforms.pointLights.needsUpdate = value;
        uniforms.pointLightShadows.needsUpdate = value;
        uniforms.spotLights.needsUpdate = value;
        uniforms.spotLightShadows.needsUpdate = value;
        uniforms.rectAreaLights.needsUpdate = value;
        uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
        return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.getActiveCubeFace = function() {
        return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
        return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
        return _currentRenderTarget;
    };
    this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
        properties.get(renderTarget.texture).__webglTexture = colorTexture;
        properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__hasExternalTextures = true;
        if (renderTargetProperties.__hasExternalTextures) {
            renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;
            if (!renderTargetProperties.__autoAllocateDepthBuffer) // The multisample_render_to_texture extension doesn't work properly if there
            // are midframe flushes and an external depth buffer. Disable use of the extension.
            {
                if (renderTarget.useRenderToTexture) {
                    console.warn('render-to-texture extension was disabled because an external texture was provided');
                    renderTarget.useRenderToTexture = false;
                    renderTarget.useRenderbuffer = true;
                }
            }
        }
    };
    this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
        const renderTargetProperties = properties.get(renderTarget);
        renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
        renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
        _currentRenderTarget = renderTarget;
        _currentActiveCubeFace = activeCubeFace;
        _currentActiveMipmapLevel = activeMipmapLevel;
        let useDefaultFramebuffer = true;
        if (renderTarget) {
            const renderTargetProperties = properties.get(renderTarget);
            if (renderTargetProperties.__useDefaultFramebuffer !== undefined) {
                // We need to make sure to rebind the framebuffer.
                state.bindFramebuffer(36160, null);
                useDefaultFramebuffer = false;
            } else if (renderTargetProperties.__webglFramebuffer === undefined) textures1.setupRenderTarget(renderTarget);
            else if (renderTargetProperties.__hasExternalTextures) // Color and depth texture must be rebound in order for the swapchain to update.
            textures1.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
        }
        let framebuffer = null;
        let isCube = false;
        let isRenderTarget3D = false;
        if (renderTarget) {
            const texture = renderTarget.texture;
            if (texture.isDataTexture3D || texture.isDataTexture2DArray) isRenderTarget3D = true;
            const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget) {
                framebuffer = __webglFramebuffer[activeCubeFace];
                isCube = true;
            } else if (renderTarget.useRenderbuffer) framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
            else framebuffer = __webglFramebuffer;
            _currentViewport.copy(renderTarget.viewport);
            _currentScissor.copy(renderTarget.scissor);
            _currentScissorTest = renderTarget.scissorTest;
        } else {
            _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();
            _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
            _currentScissorTest = _scissorTest;
        }
        const framebufferBound = state.bindFramebuffer(36160, framebuffer);
        if (framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer) {
            let needsUpdate = false;
            if (renderTarget) {
                if (renderTarget.isWebGLMultipleRenderTargets) {
                    const textures = renderTarget.texture;
                    if (_currentDrawBuffers.length !== textures.length || _currentDrawBuffers[0] !== 36064) {
                        for(let i149 = 0, il = textures.length; i149 < il; i149++)_currentDrawBuffers[i149] = 36064 + i149;
                        _currentDrawBuffers.length = textures.length;
                        needsUpdate = true;
                    }
                } else if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== 36064) {
                    _currentDrawBuffers[0] = 36064;
                    _currentDrawBuffers.length = 1;
                    needsUpdate = true;
                }
            } else if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== 1029) {
                _currentDrawBuffers[0] = 1029;
                _currentDrawBuffers.length = 1;
                needsUpdate = true;
            }
            if (needsUpdate) {
                if (capabilities.isWebGL2) _gl.drawBuffers(_currentDrawBuffers);
                else extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);
            }
        }
        state.viewport(_currentViewport);
        state.scissor(_currentScissor);
        state.setScissorTest(_currentScissorTest);
        if (isCube) {
            const textureProperties = properties.get(renderTarget.texture);
            _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
        } else if (isRenderTarget3D) {
            const textureProperties = properties.get(renderTarget.texture);
            const layer = activeCubeFace || 0;
            _gl.framebufferTextureLayer(36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
        }
        _currentMaterialId = -1; // reset current material to ensure correct uniform bindings
    };
    this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
        if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
            return;
        }
        let framebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) framebuffer = framebuffer[activeCubeFaceIndex];
        if (framebuffer) {
            state.bindFramebuffer(36160, framebuffer);
            try {
                const texture = renderTarget.texture;
                const textureFormat = texture.format;
                const textureType = texture.type;
                if (textureFormat !== $2d9d8c9fc2282acc$export$3f8bb04b555a363c && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
                    return;
                }
                const halfFloatSupportedByExt = textureType === $2d9d8c9fc2282acc$export$2697304443f382bc && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));
                if (textureType !== $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10 && utils.convert(textureType) !== _gl.getParameter(35738) && !(textureType === $2d9d8c9fc2282acc$export$f6d331659b644596 && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && !halfFloatSupportedByExt) {
                    console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
                    return;
                }
                if (_gl.checkFramebufferStatus(36160) === 36053) // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
                {
                    if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);
                } else console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');
            } finally{
                // restore framebuffer of current render target if necessary
                const framebuffer = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
                state.bindFramebuffer(36160, framebuffer);
            }
        }
    };
    this.copyFramebufferToTexture = function(position, texture, level = 0) {
        if (texture.isFramebufferTexture !== true) {
            console.error('THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.');
            return;
        }
        const levelScale = Math.pow(2, -level);
        const width = Math.floor(texture.image.width * levelScale);
        const height = Math.floor(texture.image.height * levelScale);
        textures1.setTexture2D(texture, 0);
        _gl.copyTexSubImage2D(3553, level, 0, 0, position.x, position.y, width, height);
        state.unbindTexture();
    };
    this.copyTextureToTexture = function(position, srcTexture, dstTexture, level = 0) {
        const width = srcTexture.image.width;
        const height = srcTexture.image.height;
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        textures1.setTexture2D(dstTexture, 0);
        // As another texture upload may have changed pixelStorei
        // parameters, make sure they are correct for the dstTexture
        _gl.pixelStorei(37440, dstTexture.flipY);
        _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(3317, dstTexture.unpackAlignment);
        if (srcTexture.isDataTexture) _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);
        else if (srcTexture.isCompressedTexture) _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);
        else _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);
        // Generate mipmaps only when copying level 0
        if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);
        state.unbindTexture();
    };
    this.copyTextureToTexture3D = function(sourceBox, position, srcTexture, dstTexture, level = 0) {
        if (_this.isWebGL1Renderer) {
            console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');
            return;
        }
        const width = sourceBox.max.x - sourceBox.min.x + 1;
        const height = sourceBox.max.y - sourceBox.min.y + 1;
        const depth = sourceBox.max.z - sourceBox.min.z + 1;
        const glFormat = utils.convert(dstTexture.format);
        const glType = utils.convert(dstTexture.type);
        let glTarget;
        if (dstTexture.isDataTexture3D) {
            textures1.setTexture3D(dstTexture, 0);
            glTarget = 32879;
        } else if (dstTexture.isDataTexture2DArray) {
            textures1.setTexture2DArray(dstTexture, 0);
            glTarget = 35866;
        } else {
            console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');
            return;
        }
        _gl.pixelStorei(37440, dstTexture.flipY);
        _gl.pixelStorei(37441, dstTexture.premultiplyAlpha);
        _gl.pixelStorei(3317, dstTexture.unpackAlignment);
        const unpackRowLen = _gl.getParameter(3314);
        const unpackImageHeight = _gl.getParameter(32878);
        const unpackSkipPixels = _gl.getParameter(3316);
        const unpackSkipRows = _gl.getParameter(3315);
        const unpackSkipImages = _gl.getParameter(32877);
        const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[0] : srcTexture.image;
        _gl.pixelStorei(3314, image.width);
        _gl.pixelStorei(32878, image.height);
        _gl.pixelStorei(3316, sourceBox.min.x);
        _gl.pixelStorei(3315, sourceBox.min.y);
        _gl.pixelStorei(32877, sourceBox.min.z);
        if (srcTexture.isDataTexture || srcTexture.isDataTexture3D) _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data);
        else if (srcTexture.isCompressedTexture) {
            console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.');
            _gl.compressedTexSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data);
        } else _gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image);
        _gl.pixelStorei(3314, unpackRowLen);
        _gl.pixelStorei(32878, unpackImageHeight);
        _gl.pixelStorei(3316, unpackSkipPixels);
        _gl.pixelStorei(3315, unpackSkipRows);
        _gl.pixelStorei(32877, unpackSkipImages);
        // Generate mipmaps only when copying level 0
        if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
        state.unbindTexture();
    };
    this.initTexture = function(texture) {
        textures1.setTexture2D(texture, 0);
        state.unbindTexture();
    };
    this.resetState = function() {
        _currentActiveCubeFace = 0;
        _currentActiveMipmapLevel = 0;
        _currentRenderTarget = null;
        state.reset();
        bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== 'undefined') __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
        detail: this
    }));
}
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.isWebGLRenderer = true;
class $2d9d8c9fc2282acc$export$a2f65229194348f9 extends $2d9d8c9fc2282acc$export$f6cc00ef28d7cf97 {
}
$2d9d8c9fc2282acc$export$a2f65229194348f9.prototype.isWebGL1Renderer = true;
class $2d9d8c9fc2282acc$export$6f1519f023b8d0f6 {
    constructor(color, density = 0.00025){
        this.name = '';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color);
        this.density = density;
    }
    clone() {
        return new $2d9d8c9fc2282acc$export$6f1519f023b8d0f6(this.color, this.density);
    }
    toJSON() {
        return {
            type: 'FogExp2',
            color: this.color.getHex(),
            density: this.density
        };
    }
}
$2d9d8c9fc2282acc$export$6f1519f023b8d0f6.prototype.isFogExp2 = true;
class $2d9d8c9fc2282acc$export$3c890837b09508d4 {
    constructor(color, near = 1, far = 1000){
        this.name = '';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color);
        this.near = near;
        this.far = far;
    }
    clone() {
        return new $2d9d8c9fc2282acc$export$3c890837b09508d4(this.color, this.near, this.far);
    }
    toJSON() {
        return {
            type: 'Fog',
            color: this.color.getHex(),
            near: this.near,
            far: this.far
        };
    }
}
$2d9d8c9fc2282acc$export$3c890837b09508d4.prototype.isFog = true;
class $2d9d8c9fc2282acc$export$38af1803e3442a7f extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.type = 'Scene';
        this.background = null;
        this.environment = null;
        this.fog = null;
        this.overrideMaterial = null;
        this.autoUpdate = true; // checked by the renderer
        if (typeof __THREE_DEVTOOLS__ !== 'undefined') __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
            detail: this
        }));
    }
    copy(source, recursive) {
        super.copy(source, recursive);
        if (source.background !== null) this.background = source.background.clone();
        if (source.environment !== null) this.environment = source.environment.clone();
        if (source.fog !== null) this.fog = source.fog.clone();
        if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
        this.autoUpdate = source.autoUpdate;
        this.matrixAutoUpdate = source.matrixAutoUpdate;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.fog !== null) data.object.fog = this.fog.toJSON();
        return data;
    }
}
$2d9d8c9fc2282acc$export$38af1803e3442a7f.prototype.isScene = true;
class $2d9d8c9fc2282acc$export$3d5cd879f108f53f {
    constructor(array, stride){
        this.array = array;
        this.stride = stride;
        this.count = array !== undefined ? array.length / stride : 0;
        this.usage = $2d9d8c9fc2282acc$export$763e8360f4d7f77d;
        this.updateRange = {
            offset: 0,
            count: -1
        };
        this.version = 0;
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
    }
    onUploadCallback() {
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setUsage(value) {
        this.usage = value;
        return this;
    }
    copy(source) {
        this.array = new source.array.constructor(source.array);
        this.count = source.count;
        this.stride = source.stride;
        this.usage = source.usage;
        return this;
    }
    copyAt(index1, attribute, index2) {
        index1 *= this.stride;
        index2 *= attribute.stride;
        for(let i150 = 0, l = this.stride; i150 < l; i150++)this.array[index1 + i150] = attribute.array[index2 + i150];
        return this;
    }
    set(value, offset = 0) {
        this.array.set(value, offset);
        return this;
    }
    clone(data) {
        if (data.arrayBuffers === undefined) data.arrayBuffers = {
        };
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = $2d9d8c9fc2282acc$var$generateUUID();
        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
        const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
        const ib = new this.constructor(array, this.stride);
        ib.setUsage(this.usage);
        return ib;
    }
    onUpload(callback) {
        this.onUploadCallback = callback;
        return this;
    }
    toJSON(data) {
        if (data.arrayBuffers === undefined) data.arrayBuffers = {
        };
        // generate UUID for array buffer if necessary
        if (this.array.buffer._uuid === undefined) this.array.buffer._uuid = $2d9d8c9fc2282acc$var$generateUUID();
        if (data.arrayBuffers[this.array.buffer._uuid] === undefined) data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));
        //
        return {
            uuid: this.uuid,
            buffer: this.array.buffer._uuid,
            type: this.array.constructor.name,
            stride: this.stride
        };
    }
}
$2d9d8c9fc2282acc$export$3d5cd879f108f53f.prototype.isInterleavedBuffer = true;
const $2d9d8c9fc2282acc$var$_vector$6 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$920b6d07334599c7 {
    constructor(interleavedBuffer, itemSize, offset, normalized = false){
        this.name = '';
        this.data = interleavedBuffer;
        this.itemSize = itemSize;
        this.offset = offset;
        this.normalized = normalized === true;
    }
    get count() {
        return this.data.count;
    }
    get array() {
        return this.data.array;
    }
    set needsUpdate(value) {
        this.data.needsUpdate = value;
    }
    applyMatrix4(m) {
        for(let i151 = 0, l = this.data.count; i151 < l; i151++){
            $2d9d8c9fc2282acc$var$_vector$6.x = this.getX(i151);
            $2d9d8c9fc2282acc$var$_vector$6.y = this.getY(i151);
            $2d9d8c9fc2282acc$var$_vector$6.z = this.getZ(i151);
            $2d9d8c9fc2282acc$var$_vector$6.applyMatrix4(m);
            this.setXYZ(i151, $2d9d8c9fc2282acc$var$_vector$6.x, $2d9d8c9fc2282acc$var$_vector$6.y, $2d9d8c9fc2282acc$var$_vector$6.z);
        }
        return this;
    }
    applyNormalMatrix(m) {
        for(let i152 = 0, l = this.count; i152 < l; i152++){
            $2d9d8c9fc2282acc$var$_vector$6.x = this.getX(i152);
            $2d9d8c9fc2282acc$var$_vector$6.y = this.getY(i152);
            $2d9d8c9fc2282acc$var$_vector$6.z = this.getZ(i152);
            $2d9d8c9fc2282acc$var$_vector$6.applyNormalMatrix(m);
            this.setXYZ(i152, $2d9d8c9fc2282acc$var$_vector$6.x, $2d9d8c9fc2282acc$var$_vector$6.y, $2d9d8c9fc2282acc$var$_vector$6.z);
        }
        return this;
    }
    transformDirection(m) {
        for(let i153 = 0, l = this.count; i153 < l; i153++){
            $2d9d8c9fc2282acc$var$_vector$6.x = this.getX(i153);
            $2d9d8c9fc2282acc$var$_vector$6.y = this.getY(i153);
            $2d9d8c9fc2282acc$var$_vector$6.z = this.getZ(i153);
            $2d9d8c9fc2282acc$var$_vector$6.transformDirection(m);
            this.setXYZ(i153, $2d9d8c9fc2282acc$var$_vector$6.x, $2d9d8c9fc2282acc$var$_vector$6.y, $2d9d8c9fc2282acc$var$_vector$6.z);
        }
        return this;
    }
    setX(index, x) {
        this.data.array[index * this.data.stride + this.offset] = x;
        return this;
    }
    setY(index, y) {
        this.data.array[index * this.data.stride + this.offset + 1] = y;
        return this;
    }
    setZ(index, z) {
        this.data.array[index * this.data.stride + this.offset + 2] = z;
        return this;
    }
    setW(index, w) {
        this.data.array[index * this.data.stride + this.offset + 3] = w;
        return this;
    }
    getX(index) {
        return this.data.array[index * this.data.stride + this.offset];
    }
    getY(index) {
        return this.data.array[index * this.data.stride + this.offset + 1];
    }
    getZ(index) {
        return this.data.array[index * this.data.stride + this.offset + 2];
    }
    getW(index) {
        return this.data.array[index * this.data.stride + this.offset + 3];
    }
    setXY(index, x, y) {
        index = index * this.data.stride + this.offset;
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        return this;
    }
    setXYZ(index, x, y, z) {
        index = index * this.data.stride + this.offset;
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        return this;
    }
    setXYZW(index, x, y, z, w) {
        index = index * this.data.stride + this.offset;
        this.data.array[index + 0] = x;
        this.data.array[index + 1] = y;
        this.data.array[index + 2] = z;
        this.data.array[index + 3] = w;
        return this;
    }
    clone(data) {
        if (data === undefined) {
            console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');
            const array = [];
            for(let i154 = 0; i154 < this.count; i154++){
                const index = i154 * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            return new $2d9d8c9fc2282acc$export$8dea267bd6bde117(new this.array.constructor(array), this.itemSize, this.normalized);
        } else {
            if (data.interleavedBuffers === undefined) data.interleavedBuffers = {
            };
            if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
            return new $2d9d8c9fc2282acc$export$920b6d07334599c7(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
        }
    }
    toJSON(data) {
        if (data === undefined) {
            console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');
            const array = [];
            for(let i155 = 0; i155 < this.count; i155++){
                const index = i155 * this.data.stride + this.offset;
                for(let j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            }
            // deinterleave data and save it as an ordinary buffer attribute for now
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: array,
                normalized: this.normalized
            };
        } else {
            // save as true interlaved attribtue
            if (data.interleavedBuffers === undefined) data.interleavedBuffers = {
            };
            if (data.interleavedBuffers[this.data.uuid] === undefined) data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
            return {
                isInterleavedBufferAttribute: true,
                itemSize: this.itemSize,
                data: this.data.uuid,
                offset: this.offset,
                normalized: this.normalized
            };
        }
    }
}
$2d9d8c9fc2282acc$export$920b6d07334599c7.prototype.isInterleavedBufferAttribute = true;
/**
 * parameters = {
 *  color: <hex>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *  rotation: <float>,
 *  sizeAttenuation: <bool>
 * }
 */ class $2d9d8c9fc2282acc$export$5ec7dd1c6994bf8e extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'SpriteMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215);
        this.map = null;
        this.alphaMap = null;
        this.rotation = 0;
        this.sizeAttenuation = true;
        this.transparent = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.rotation = source.rotation;
        this.sizeAttenuation = source.sizeAttenuation;
        return this;
    }
}
$2d9d8c9fc2282acc$export$5ec7dd1c6994bf8e.prototype.isSpriteMaterial = true;
let $2d9d8c9fc2282acc$var$_geometry;
const $2d9d8c9fc2282acc$var$_intersectPoint = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_worldScale = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_mvPosition = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_alignedPosition = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_rotatedPosition = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_viewWorldMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_vA = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vB = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_vC = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_uvA = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_uvB = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
const $2d9d8c9fc2282acc$var$_uvC = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
class $2d9d8c9fc2282acc$export$3075603db8e6204c extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(material){
        super();
        this.type = 'Sprite';
        if ($2d9d8c9fc2282acc$var$_geometry === undefined) {
            $2d9d8c9fc2282acc$var$_geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
            const float32Array = new Float32Array([
                -0.5,
                -0.5,
                0,
                0,
                0,
                0.5,
                -0.5,
                0,
                1,
                0,
                0.5,
                0.5,
                0,
                1,
                1,
                -0.5,
                0.5,
                0,
                0,
                1
            ]);
            const interleavedBuffer = new $2d9d8c9fc2282acc$export$3d5cd879f108f53f(float32Array, 5);
            $2d9d8c9fc2282acc$var$_geometry.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]);
            $2d9d8c9fc2282acc$var$_geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$920b6d07334599c7(interleavedBuffer, 3, 0, false));
            $2d9d8c9fc2282acc$var$_geometry.setAttribute('uv', new $2d9d8c9fc2282acc$export$920b6d07334599c7(interleavedBuffer, 2, 3, false));
        }
        this.geometry = $2d9d8c9fc2282acc$var$_geometry;
        this.material = material !== undefined ? material : new $2d9d8c9fc2282acc$export$5ec7dd1c6994bf8e();
        this.center = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0.5, 0.5);
    }
    raycast(raycaster, intersects) {
        if (raycaster.camera === null) console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.');
        $2d9d8c9fc2282acc$var$_worldScale.setFromMatrixScale(this.matrixWorld);
        $2d9d8c9fc2282acc$var$_viewWorldMatrix.copy(raycaster.camera.matrixWorld);
        this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);
        $2d9d8c9fc2282acc$var$_mvPosition.setFromMatrixPosition(this.modelViewMatrix);
        if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) $2d9d8c9fc2282acc$var$_worldScale.multiplyScalar(-$2d9d8c9fc2282acc$var$_mvPosition.z);
        const rotation = this.material.rotation;
        let sin, cos;
        if (rotation !== 0) {
            cos = Math.cos(rotation);
            sin = Math.sin(rotation);
        }
        const center = this.center;
        $2d9d8c9fc2282acc$var$transformVertex($2d9d8c9fc2282acc$var$_vA.set(-0.5, -0.5, 0), $2d9d8c9fc2282acc$var$_mvPosition, center, $2d9d8c9fc2282acc$var$_worldScale, sin, cos);
        $2d9d8c9fc2282acc$var$transformVertex($2d9d8c9fc2282acc$var$_vB.set(0.5, -0.5, 0), $2d9d8c9fc2282acc$var$_mvPosition, center, $2d9d8c9fc2282acc$var$_worldScale, sin, cos);
        $2d9d8c9fc2282acc$var$transformVertex($2d9d8c9fc2282acc$var$_vC.set(0.5, 0.5, 0), $2d9d8c9fc2282acc$var$_mvPosition, center, $2d9d8c9fc2282acc$var$_worldScale, sin, cos);
        $2d9d8c9fc2282acc$var$_uvA.set(0, 0);
        $2d9d8c9fc2282acc$var$_uvB.set(1, 0);
        $2d9d8c9fc2282acc$var$_uvC.set(1, 1);
        // check first triangle
        let intersect = raycaster.ray.intersectTriangle($2d9d8c9fc2282acc$var$_vA, $2d9d8c9fc2282acc$var$_vB, $2d9d8c9fc2282acc$var$_vC, false, $2d9d8c9fc2282acc$var$_intersectPoint);
        if (intersect === null) {
            // check second triangle
            $2d9d8c9fc2282acc$var$transformVertex($2d9d8c9fc2282acc$var$_vB.set(-0.5, 0.5, 0), $2d9d8c9fc2282acc$var$_mvPosition, center, $2d9d8c9fc2282acc$var$_worldScale, sin, cos);
            $2d9d8c9fc2282acc$var$_uvB.set(0, 1);
            intersect = raycaster.ray.intersectTriangle($2d9d8c9fc2282acc$var$_vA, $2d9d8c9fc2282acc$var$_vC, $2d9d8c9fc2282acc$var$_vB, false, $2d9d8c9fc2282acc$var$_intersectPoint);
            if (intersect === null) return;
        }
        const distance = raycaster.ray.origin.distanceTo($2d9d8c9fc2282acc$var$_intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            point: $2d9d8c9fc2282acc$var$_intersectPoint.clone(),
            uv: $2d9d8c9fc2282acc$export$5a465592bfe74b48.getUV($2d9d8c9fc2282acc$var$_intersectPoint, $2d9d8c9fc2282acc$var$_vA, $2d9d8c9fc2282acc$var$_vB, $2d9d8c9fc2282acc$var$_vC, $2d9d8c9fc2282acc$var$_uvA, $2d9d8c9fc2282acc$var$_uvB, $2d9d8c9fc2282acc$var$_uvC, new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()),
            face: null,
            object: this
        });
    }
    copy(source) {
        super.copy(source);
        if (source.center !== undefined) this.center.copy(source.center);
        this.material = source.material;
        return this;
    }
}
$2d9d8c9fc2282acc$export$3075603db8e6204c.prototype.isSprite = true;
function $2d9d8c9fc2282acc$var$transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
    // compute position in camera space
    $2d9d8c9fc2282acc$var$_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale);
    // to check if rotation is not zero
    if (sin !== undefined) {
        $2d9d8c9fc2282acc$var$_rotatedPosition.x = cos * $2d9d8c9fc2282acc$var$_alignedPosition.x - sin * $2d9d8c9fc2282acc$var$_alignedPosition.y;
        $2d9d8c9fc2282acc$var$_rotatedPosition.y = sin * $2d9d8c9fc2282acc$var$_alignedPosition.x + cos * $2d9d8c9fc2282acc$var$_alignedPosition.y;
    } else $2d9d8c9fc2282acc$var$_rotatedPosition.copy($2d9d8c9fc2282acc$var$_alignedPosition);
    vertexPosition.copy(mvPosition);
    vertexPosition.x += $2d9d8c9fc2282acc$var$_rotatedPosition.x;
    vertexPosition.y += $2d9d8c9fc2282acc$var$_rotatedPosition.y;
    // transform to world space
    vertexPosition.applyMatrix4($2d9d8c9fc2282acc$var$_viewWorldMatrix);
}
const $2d9d8c9fc2282acc$var$_v1$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v2$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$112e7237be0c5f30 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this._currentLevel = 0;
        this.type = 'LOD';
        Object.defineProperties(this, {
            levels: {
                enumerable: true,
                value: []
            },
            isLOD: {
                value: true
            }
        });
        this.autoUpdate = true;
    }
    copy(source) {
        super.copy(source, false);
        const levels = source.levels;
        for(let i156 = 0, l = levels.length; i156 < l; i156++){
            const level = levels[i156];
            this.addLevel(level.object.clone(), level.distance);
        }
        this.autoUpdate = source.autoUpdate;
        return this;
    }
    addLevel(object, distance = 0) {
        distance = Math.abs(distance);
        const levels = this.levels;
        let l;
        for(l = 0; l < levels.length; l++){
            if (distance < levels[l].distance) break;
        }
        levels.splice(l, 0, {
            distance: distance,
            object: object
        });
        this.add(object);
        return this;
    }
    getCurrentLevel() {
        return this._currentLevel;
    }
    getObjectForDistance(distance) {
        const levels = this.levels;
        if (levels.length > 0) {
            let i157, l;
            for(i157 = 1, l = levels.length; i157 < l; i157++){
                if (distance < levels[i157].distance) break;
            }
            return levels[i157 - 1].object;
        }
        return null;
    }
    raycast(raycaster, intersects) {
        const levels = this.levels;
        if (levels.length > 0) {
            $2d9d8c9fc2282acc$var$_v1$2.setFromMatrixPosition(this.matrixWorld);
            const distance = raycaster.ray.origin.distanceTo($2d9d8c9fc2282acc$var$_v1$2);
            this.getObjectForDistance(distance).raycast(raycaster, intersects);
        }
    }
    update(camera) {
        const levels = this.levels;
        if (levels.length > 1) {
            $2d9d8c9fc2282acc$var$_v1$2.setFromMatrixPosition(camera.matrixWorld);
            $2d9d8c9fc2282acc$var$_v2$1.setFromMatrixPosition(this.matrixWorld);
            const distance = $2d9d8c9fc2282acc$var$_v1$2.distanceTo($2d9d8c9fc2282acc$var$_v2$1) / camera.zoom;
            levels[0].object.visible = true;
            let i158, l;
            for(i158 = 1, l = levels.length; i158 < l; i158++){
                if (distance >= levels[i158].distance) {
                    levels[i158 - 1].object.visible = false;
                    levels[i158].object.visible = true;
                } else break;
            }
            this._currentLevel = i158 - 1;
            for(; i158 < l; i158++)levels[i158].object.visible = false;
        }
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        if (this.autoUpdate === false) data.object.autoUpdate = false;
        data.object.levels = [];
        const levels = this.levels;
        for(let i159 = 0, l = levels.length; i159 < l; i159++){
            const level = levels[i159];
            data.object.levels.push({
                object: level.object.uuid,
                distance: level.distance
            });
        }
        return data;
    }
}
const $2d9d8c9fc2282acc$var$_basePosition = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_skinIndex = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
const $2d9d8c9fc2282acc$var$_skinWeight = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
const $2d9d8c9fc2282acc$var$_vector$5 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_matrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
class $2d9d8c9fc2282acc$export$b303577035157ecf extends $2d9d8c9fc2282acc$export$e176487c05830cc5 {
    constructor(geometry, material){
        super(geometry, material);
        this.type = 'SkinnedMesh';
        this.bindMode = 'attached';
        this.bindMatrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        this.bindMatrixInverse = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
    }
    copy(source) {
        super.copy(source);
        this.bindMode = source.bindMode;
        this.bindMatrix.copy(source.bindMatrix);
        this.bindMatrixInverse.copy(source.bindMatrixInverse);
        this.skeleton = source.skeleton;
        return this;
    }
    bind(skeleton, bindMatrix) {
        this.skeleton = skeleton;
        if (bindMatrix === undefined) {
            this.updateMatrixWorld(true);
            this.skeleton.calculateInverses();
            bindMatrix = this.matrixWorld;
        }
        this.bindMatrix.copy(bindMatrix);
        this.bindMatrixInverse.copy(bindMatrix).invert();
    }
    pose() {
        this.skeleton.pose();
    }
    normalizeSkinWeights() {
        const vector = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
        const skinWeight = this.geometry.attributes.skinWeight;
        for(let i160 = 0, l = skinWeight.count; i160 < l; i160++){
            vector.x = skinWeight.getX(i160);
            vector.y = skinWeight.getY(i160);
            vector.z = skinWeight.getZ(i160);
            vector.w = skinWeight.getW(i160);
            const scale = 1 / vector.manhattanLength();
            if (scale !== Infinity) vector.multiplyScalar(scale);
            else vector.set(1, 0, 0, 0); // do something reasonable
            skinWeight.setXYZW(i160, vector.x, vector.y, vector.z, vector.w);
        }
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.bindMode === 'attached') this.bindMatrixInverse.copy(this.matrixWorld).invert();
        else if (this.bindMode === 'detached') this.bindMatrixInverse.copy(this.bindMatrix).invert();
        else console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
    }
    boneTransform(index, target) {
        const skeleton = this.skeleton;
        const geometry = this.geometry;
        $2d9d8c9fc2282acc$var$_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);
        $2d9d8c9fc2282acc$var$_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);
        $2d9d8c9fc2282acc$var$_basePosition.copy(target).applyMatrix4(this.bindMatrix);
        target.set(0, 0, 0);
        for(let i161 = 0; i161 < 4; i161++){
            const weight = $2d9d8c9fc2282acc$var$_skinWeight.getComponent(i161);
            if (weight !== 0) {
                const boneIndex = $2d9d8c9fc2282acc$var$_skinIndex.getComponent(i161);
                $2d9d8c9fc2282acc$var$_matrix.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);
                target.addScaledVector($2d9d8c9fc2282acc$var$_vector$5.copy($2d9d8c9fc2282acc$var$_basePosition).applyMatrix4($2d9d8c9fc2282acc$var$_matrix), weight);
            }
        }
        return target.applyMatrix4(this.bindMatrixInverse);
    }
}
$2d9d8c9fc2282acc$export$b303577035157ecf.prototype.isSkinnedMesh = true;
class $2d9d8c9fc2282acc$export$b127726e56765aa4 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.type = 'Bone';
    }
}
$2d9d8c9fc2282acc$export$b127726e56765aa4.prototype.isBone = true;
class $2d9d8c9fc2282acc$export$b691f601014eabe1 extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0, minFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0, anisotropy, encoding){
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        this.image = {
            data: data,
            width: width,
            height: height
        };
        this.magFilter = magFilter;
        this.minFilter = minFilter;
        this.generateMipmaps = false;
        this.flipY = false;
        this.unpackAlignment = 1;
    }
}
$2d9d8c9fc2282acc$export$b691f601014eabe1.prototype.isDataTexture = true;
const $2d9d8c9fc2282acc$var$_offsetMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_identityMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
class $2d9d8c9fc2282acc$export$8f31e4c4a37b8e9c {
    constructor(bones = [], boneInverses = []){
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        this.bones = bones.slice(0);
        this.boneInverses = boneInverses;
        this.boneMatrices = null;
        this.boneTexture = null;
        this.boneTextureSize = 0;
        this.frame = -1;
        this.init();
    }
    init() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        this.boneMatrices = new Float32Array(bones.length * 16);
        // calculate inverse bone matrices if necessary
        if (boneInverses.length === 0) this.calculateInverses();
        else // handle special case
        if (bones.length !== boneInverses.length) {
            console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');
            this.boneInverses = [];
            for(let i162 = 0, il = this.bones.length; i162 < il; i162++)this.boneInverses.push(new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5());
        }
    }
    calculateInverses() {
        this.boneInverses.length = 0;
        for(let i163 = 0, il = this.bones.length; i163 < il; i163++){
            const inverse = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
            if (this.bones[i163]) inverse.copy(this.bones[i163].matrixWorld).invert();
            this.boneInverses.push(inverse);
        }
    }
    pose() {
        // recover the bind-time world matrices
        for(let i165 = 0, il = this.bones.length; i165 < il; i165++){
            const bone = this.bones[i165];
            if (bone) bone.matrixWorld.copy(this.boneInverses[i165]).invert();
        }
        // compute the local matrices, positions, rotations and scales
        for(let i164 = 0, il6 = this.bones.length; i164 < il6; i164++){
            const bone = this.bones[i164];
            if (bone) {
                if (bone.parent && bone.parent.isBone) {
                    bone.matrix.copy(bone.parent.matrixWorld).invert();
                    bone.matrix.multiply(bone.matrixWorld);
                } else bone.matrix.copy(bone.matrixWorld);
                bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);
            }
        }
    }
    update() {
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        const boneMatrices = this.boneMatrices;
        const boneTexture = this.boneTexture;
        // flatten bone matrices to array
        for(let i166 = 0, il = bones.length; i166 < il; i166++){
            // compute the offset between the current and the original transform
            const matrix = bones[i166] ? bones[i166].matrixWorld : $2d9d8c9fc2282acc$var$_identityMatrix;
            $2d9d8c9fc2282acc$var$_offsetMatrix.multiplyMatrices(matrix, boneInverses[i166]);
            $2d9d8c9fc2282acc$var$_offsetMatrix.toArray(boneMatrices, i166 * 16);
        }
        if (boneTexture !== null) boneTexture.needsUpdate = true;
    }
    clone() {
        return new $2d9d8c9fc2282acc$export$8f31e4c4a37b8e9c(this.bones, this.boneInverses);
    }
    computeBoneTexture() {
        // layout (1 matrix = 4 pixels)
        //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
        //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
        //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
        //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
        //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
        let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix
        size = $2d9d8c9fc2282acc$var$ceilPowerOfTwo(size);
        size = Math.max(size, 4);
        const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel
        boneMatrices.set(this.boneMatrices); // copy current values
        const boneTexture = new $2d9d8c9fc2282acc$export$b691f601014eabe1(boneMatrices, size, size, $2d9d8c9fc2282acc$export$3f8bb04b555a363c, $2d9d8c9fc2282acc$export$f6d331659b644596);
        boneTexture.needsUpdate = true;
        this.boneMatrices = boneMatrices;
        this.boneTexture = boneTexture;
        this.boneTextureSize = size;
        return this;
    }
    getBoneByName(name) {
        for(let i167 = 0, il = this.bones.length; i167 < il; i167++){
            const bone = this.bones[i167];
            if (bone.name === name) return bone;
        }
        return undefined;
    }
    dispose() {
        if (this.boneTexture !== null) {
            this.boneTexture.dispose();
            this.boneTexture = null;
        }
    }
    fromJSON(json, bones) {
        this.uuid = json.uuid;
        for(let i168 = 0, l = json.bones.length; i168 < l; i168++){
            const uuid = json.bones[i168];
            let bone = bones[uuid];
            if (bone === undefined) {
                console.warn('THREE.Skeleton: No bone found with UUID:', uuid);
                bone = new $2d9d8c9fc2282acc$export$b127726e56765aa4();
            }
            this.bones.push(bone);
            this.boneInverses.push(new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5().fromArray(json.boneInverses[i168]));
        }
        this.init();
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.5,
                type: 'Skeleton',
                generator: 'Skeleton.toJSON'
            },
            bones: [],
            boneInverses: []
        };
        data.uuid = this.uuid;
        const bones = this.bones;
        const boneInverses = this.boneInverses;
        for(let i169 = 0, l = bones.length; i169 < l; i169++){
            const bone = bones[i169];
            data.bones.push(bone.uuid);
            const boneInverse = boneInverses[i169];
            data.boneInverses.push(boneInverse.toArray());
        }
        return data;
    }
}
class $2d9d8c9fc2282acc$export$32ea87a8b54d744a extends $2d9d8c9fc2282acc$export$8dea267bd6bde117 {
    constructor(array, itemSize, normalized, meshPerAttribute = 1){
        if (typeof normalized === 'number') {
            meshPerAttribute = normalized;
            normalized = false;
            console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');
        }
        super(array, itemSize, normalized);
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.meshPerAttribute = this.meshPerAttribute;
        data.isInstancedBufferAttribute = true;
        return data;
    }
}
$2d9d8c9fc2282acc$export$32ea87a8b54d744a.prototype.isInstancedBufferAttribute = true;
const $2d9d8c9fc2282acc$var$_instanceLocalMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_instanceWorldMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_instanceIntersects = [];
const $2d9d8c9fc2282acc$var$_mesh = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$e176487c05830cc5();
class $2d9d8c9fc2282acc$export$f3c979c331175ad7 extends $2d9d8c9fc2282acc$export$e176487c05830cc5 {
    constructor(geometry, material, count){
        super(geometry, material);
        this.instanceMatrix = new $2d9d8c9fc2282acc$export$32ea87a8b54d744a(new Float32Array(count * 16), 16);
        this.instanceColor = null;
        this.count = count;
        this.frustumCulled = false;
    }
    copy(source) {
        super.copy(source);
        this.instanceMatrix.copy(source.instanceMatrix);
        if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();
        this.count = source.count;
        return this;
    }
    getColorAt(index, color) {
        color.fromArray(this.instanceColor.array, index * 3);
    }
    getMatrixAt(index, matrix) {
        matrix.fromArray(this.instanceMatrix.array, index * 16);
    }
    raycast(raycaster, intersects) {
        const matrixWorld = this.matrixWorld;
        const raycastTimes = this.count;
        $2d9d8c9fc2282acc$var$_mesh.geometry = this.geometry;
        $2d9d8c9fc2282acc$var$_mesh.material = this.material;
        if ($2d9d8c9fc2282acc$var$_mesh.material === undefined) return;
        for(let instanceId = 0; instanceId < raycastTimes; instanceId++){
            // calculate the world matrix for each instance
            this.getMatrixAt(instanceId, $2d9d8c9fc2282acc$var$_instanceLocalMatrix);
            $2d9d8c9fc2282acc$var$_instanceWorldMatrix.multiplyMatrices(matrixWorld, $2d9d8c9fc2282acc$var$_instanceLocalMatrix);
            // the mesh represents this single instance
            $2d9d8c9fc2282acc$var$_mesh.matrixWorld = $2d9d8c9fc2282acc$var$_instanceWorldMatrix;
            $2d9d8c9fc2282acc$var$_mesh.raycast(raycaster, $2d9d8c9fc2282acc$var$_instanceIntersects);
            // process the result of raycast
            for(let i170 = 0, l = $2d9d8c9fc2282acc$var$_instanceIntersects.length; i170 < l; i170++){
                const intersect = $2d9d8c9fc2282acc$var$_instanceIntersects[i170];
                intersect.instanceId = instanceId;
                intersect.object = this;
                intersects.push(intersect);
            }
            $2d9d8c9fc2282acc$var$_instanceIntersects.length = 0;
        }
    }
    setColorAt(index, color) {
        if (this.instanceColor === null) this.instanceColor = new $2d9d8c9fc2282acc$export$32ea87a8b54d744a(new Float32Array(this.instanceMatrix.count * 3), 3);
        color.toArray(this.instanceColor.array, index * 3);
    }
    setMatrixAt(index, matrix) {
        matrix.toArray(this.instanceMatrix.array, index * 16);
    }
    updateMorphTargets() {
    }
    dispose() {
        this.dispatchEvent({
            type: 'dispose'
        });
    }
}
$2d9d8c9fc2282acc$export$f3c979c331175ad7.prototype.isInstancedMesh = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */ class $2d9d8c9fc2282acc$export$fbaaa33907730a0c extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'LineBasicMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215);
        this.linewidth = 1;
        this.linecap = 'round';
        this.linejoin = 'round';
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.linewidth = source.linewidth;
        this.linecap = source.linecap;
        this.linejoin = source.linejoin;
        return this;
    }
}
$2d9d8c9fc2282acc$export$fbaaa33907730a0c.prototype.isLineBasicMaterial = true;
const $2d9d8c9fc2282acc$var$_start$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_end$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_inverseMatrix$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_ray$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$a186db52eed6d40e();
const $2d9d8c9fc2282acc$var$_sphere$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$805e8b72413ccaba();
class $2d9d8c9fc2282acc$export$17d680238e50603e extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959(), material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c()){
        super();
        this.type = 'Line';
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source) {
        super.copy(source);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
    }
    computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            // we assume non-indexed geometry
            if (geometry.index === null) {
                const positionAttribute = geometry.attributes.position;
                const lineDistances = [
                    0
                ];
                for(let i171 = 1, l = positionAttribute.count; i171 < l; i171++){
                    $2d9d8c9fc2282acc$var$_start$1.fromBufferAttribute(positionAttribute, i171 - 1);
                    $2d9d8c9fc2282acc$var$_end$1.fromBufferAttribute(positionAttribute, i171);
                    lineDistances[i171] = lineDistances[i171 - 1];
                    lineDistances[i171] += $2d9d8c9fc2282acc$var$_start$1.distanceTo($2d9d8c9fc2282acc$var$_end$1);
                }
                geometry.setAttribute('lineDistance', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(lineDistances, 1));
            } else console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        } else if (geometry.isGeometry) console.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        return this;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Line.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $2d9d8c9fc2282acc$var$_sphere$1.copy(geometry.boundingSphere);
        $2d9d8c9fc2282acc$var$_sphere$1.applyMatrix4(matrixWorld);
        $2d9d8c9fc2282acc$var$_sphere$1.radius += threshold;
        if (raycaster.ray.intersectsSphere($2d9d8c9fc2282acc$var$_sphere$1) === false) return;
        //
        $2d9d8c9fc2282acc$var$_inverseMatrix$1.copy(matrixWorld).invert();
        $2d9d8c9fc2282acc$var$_ray$1.copy(raycaster.ray).applyMatrix4($2d9d8c9fc2282acc$var$_inverseMatrix$1);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        const vStart = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const vEnd = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const interSegment = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const interRay = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const step = this.isLineSegments ? 2 : 1;
        if (geometry.isBufferGeometry) {
            const index = geometry.index;
            const attributes = geometry.attributes;
            const positionAttribute = attributes.position;
            if (index !== null) {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(index.count, drawRange.start + drawRange.count);
                for(let i172 = start, l = end - 1; i172 < l; i172 += step){
                    const a = index.getX(i172);
                    const b = index.getX(i172 + 1);
                    vStart.fromBufferAttribute(positionAttribute, a);
                    vEnd.fromBufferAttribute(positionAttribute, b);
                    const distSq = $2d9d8c9fc2282acc$var$_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                    if (distSq > localThresholdSq) continue;
                    interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                    const distance = raycaster.ray.origin.distanceTo(interRay);
                    if (distance < raycaster.near || distance > raycaster.far) continue;
                    intersects.push({
                        distance: distance,
                        // What do we want? intersection point on the ray or on the segment??
                        // point: raycaster.ray.at( distance ),
                        point: interSegment.clone().applyMatrix4(this.matrixWorld),
                        index: i172,
                        face: null,
                        faceIndex: null,
                        object: this
                    });
                }
            } else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
                for(let i173 = start, l = end - 1; i173 < l; i173 += step){
                    vStart.fromBufferAttribute(positionAttribute, i173);
                    vEnd.fromBufferAttribute(positionAttribute, i173 + 1);
                    const distSq = $2d9d8c9fc2282acc$var$_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);
                    if (distSq > localThresholdSq) continue;
                    interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation
                    const distance = raycaster.ray.origin.distanceTo(interRay);
                    if (distance < raycaster.near || distance > raycaster.far) continue;
                    intersects.push({
                        distance: distance,
                        // What do we want? intersection point on the ray or on the segment??
                        // point: raycaster.ray.at( distance ),
                        point: interSegment.clone().applyMatrix4(this.matrixWorld),
                        index: i173,
                        face: null,
                        faceIndex: null,
                        object: this
                    });
                }
            }
        } else if (geometry.isGeometry) console.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            const morphAttributes = geometry.morphAttributes;
            const keys = Object.keys(morphAttributes);
            if (keys.length > 0) {
                const morphAttribute = morphAttributes[keys[0]];
                if (morphAttribute !== undefined) {
                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {
                    };
                    for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                        const name = morphAttribute[m].name || String(m);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[name] = m;
                    }
                }
            }
        } else {
            const morphTargets = geometry.morphTargets;
            if (morphTargets !== undefined && morphTargets.length > 0) console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
    }
}
$2d9d8c9fc2282acc$export$17d680238e50603e.prototype.isLine = true;
const $2d9d8c9fc2282acc$var$_start = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_end = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 extends $2d9d8c9fc2282acc$export$17d680238e50603e {
    constructor(geometry, material){
        super(geometry, material);
        this.type = 'LineSegments';
    }
    computeLineDistances() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            // we assume non-indexed geometry
            if (geometry.index === null) {
                const positionAttribute = geometry.attributes.position;
                const lineDistances = [];
                for(let i174 = 0, l = positionAttribute.count; i174 < l; i174 += 2){
                    $2d9d8c9fc2282acc$var$_start.fromBufferAttribute(positionAttribute, i174);
                    $2d9d8c9fc2282acc$var$_end.fromBufferAttribute(positionAttribute, i174 + 1);
                    lineDistances[i174] = i174 === 0 ? 0 : lineDistances[i174 - 1];
                    lineDistances[i174 + 1] = lineDistances[i174] + $2d9d8c9fc2282acc$var$_start.distanceTo($2d9d8c9fc2282acc$var$_end);
                }
                geometry.setAttribute('lineDistance', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(lineDistances, 1));
            } else console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
        } else if (geometry.isGeometry) console.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
        return this;
    }
}
$2d9d8c9fc2282acc$export$ff1ed10fedfdd604.prototype.isLineSegments = true;
class $2d9d8c9fc2282acc$export$f85a24d745e4f17d extends $2d9d8c9fc2282acc$export$17d680238e50603e {
    constructor(geometry, material){
        super(geometry, material);
        this.type = 'LineLoop';
    }
}
$2d9d8c9fc2282acc$export$f85a24d745e4f17d.prototype.isLineLoop = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 *
 * }
 */ class $2d9d8c9fc2282acc$export$a178c45366ce5d6b extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'PointsMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215);
        this.map = null;
        this.alphaMap = null;
        this.size = 1;
        this.sizeAttenuation = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.alphaMap = source.alphaMap;
        this.size = source.size;
        this.sizeAttenuation = source.sizeAttenuation;
        return this;
    }
}
$2d9d8c9fc2282acc$export$a178c45366ce5d6b.prototype.isPointsMaterial = true;
const $2d9d8c9fc2282acc$var$_inverseMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_ray = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$a186db52eed6d40e();
const $2d9d8c9fc2282acc$var$_sphere = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$805e8b72413ccaba();
const $2d9d8c9fc2282acc$var$_position$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$1c787534cb11aa3e extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959(), material = new $2d9d8c9fc2282acc$export$a178c45366ce5d6b()){
        super();
        this.type = 'Points';
        this.geometry = geometry;
        this.material = material;
        this.updateMorphTargets();
    }
    copy(source) {
        super.copy(source);
        this.material = source.material;
        this.geometry = source.geometry;
        return this;
    }
    raycast(raycaster, intersects) {
        const geometry = this.geometry;
        const matrixWorld = this.matrixWorld;
        const threshold = raycaster.params.Points.threshold;
        const drawRange = geometry.drawRange;
        // Checking boundingSphere distance to ray
        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
        $2d9d8c9fc2282acc$var$_sphere.copy(geometry.boundingSphere);
        $2d9d8c9fc2282acc$var$_sphere.applyMatrix4(matrixWorld);
        $2d9d8c9fc2282acc$var$_sphere.radius += threshold;
        if (raycaster.ray.intersectsSphere($2d9d8c9fc2282acc$var$_sphere) === false) return;
        //
        $2d9d8c9fc2282acc$var$_inverseMatrix.copy(matrixWorld).invert();
        $2d9d8c9fc2282acc$var$_ray.copy(raycaster.ray).applyMatrix4($2d9d8c9fc2282acc$var$_inverseMatrix);
        const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);
        const localThresholdSq = localThreshold * localThreshold;
        if (geometry.isBufferGeometry) {
            const index = geometry.index;
            const attributes = geometry.attributes;
            const positionAttribute = attributes.position;
            if (index !== null) {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(index.count, drawRange.start + drawRange.count);
                for(let i175 = start, il = end; i175 < il; i175++){
                    const a = index.getX(i175);
                    $2d9d8c9fc2282acc$var$_position$2.fromBufferAttribute(positionAttribute, a);
                    $2d9d8c9fc2282acc$var$testPoint($2d9d8c9fc2282acc$var$_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
                }
            } else {
                const start = Math.max(0, drawRange.start);
                const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
                for(let i176 = start, l = end; i176 < l; i176++){
                    $2d9d8c9fc2282acc$var$_position$2.fromBufferAttribute(positionAttribute, i176);
                    $2d9d8c9fc2282acc$var$testPoint($2d9d8c9fc2282acc$var$_position$2, i176, localThresholdSq, matrixWorld, raycaster, intersects, this);
                }
            }
        } else console.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
    }
    updateMorphTargets() {
        const geometry = this.geometry;
        if (geometry.isBufferGeometry) {
            const morphAttributes = geometry.morphAttributes;
            const keys = Object.keys(morphAttributes);
            if (keys.length > 0) {
                const morphAttribute = morphAttributes[keys[0]];
                if (morphAttribute !== undefined) {
                    this.morphTargetInfluences = [];
                    this.morphTargetDictionary = {
                    };
                    for(let m = 0, ml = morphAttribute.length; m < ml; m++){
                        const name = morphAttribute[m].name || String(m);
                        this.morphTargetInfluences.push(0);
                        this.morphTargetDictionary[name] = m;
                    }
                }
            }
        } else {
            const morphTargets = geometry.morphTargets;
            if (morphTargets !== undefined && morphTargets.length > 0) console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
        }
    }
}
$2d9d8c9fc2282acc$export$1c787534cb11aa3e.prototype.isPoints = true;
function $2d9d8c9fc2282acc$var$testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
    const rayPointDistanceSq = $2d9d8c9fc2282acc$var$_ray.distanceSqToPoint(point);
    if (rayPointDistanceSq < localThresholdSq) {
        const intersectPoint = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        $2d9d8c9fc2282acc$var$_ray.closestPointToPoint(point, intersectPoint);
        intersectPoint.applyMatrix4(matrixWorld);
        const distance = raycaster.ray.origin.distanceTo(intersectPoint);
        if (distance < raycaster.near || distance > raycaster.far) return;
        intersects.push({
            distance: distance,
            distanceToRay: Math.sqrt(rayPointDistanceSq),
            point: intersectPoint,
            index: index,
            face: null,
            object: object
        });
    }
}
class $2d9d8c9fc2282acc$export$6e09d1edf8d5a25c extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy){
        super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.format = format !== undefined ? format : $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb;
        this.minFilter = minFilter !== undefined ? minFilter : $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
        this.magFilter = magFilter !== undefined ? magFilter : $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
        this.generateMipmaps = false;
        const scope = this;
        function updateVideo() {
            scope.needsUpdate = true;
            video.requestVideoFrameCallback(updateVideo);
        }
        if ('requestVideoFrameCallback' in video) video.requestVideoFrameCallback(updateVideo);
    }
    clone() {
        return new this.constructor(this.image).copy(this);
    }
    update() {
        const video = this.image;
        const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;
        if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) this.needsUpdate = true;
    }
}
$2d9d8c9fc2282acc$export$6e09d1edf8d5a25c.prototype.isVideoTexture = true;
class $2d9d8c9fc2282acc$export$9270d786f73ce6fe extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(width, height, format){
        super({
            width: width,
            height: height
        });
        this.format = format;
        this.magFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.minFilter = $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0;
        this.generateMipmaps = false;
        this.needsUpdate = true;
    }
}
$2d9d8c9fc2282acc$export$9270d786f73ce6fe.prototype.isFramebufferTexture = true;
class $2d9d8c9fc2282acc$export$3466bac9141a5cc4 extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding){
        super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);
        this.image = {
            width: width,
            height: height
        };
        this.mipmaps = mipmaps;
        // no flipping for cube textures
        // (also flipping doesn't work for compressed textures )
        this.flipY = false;
        // can't generate mipmaps for compressed textures
        // mips must be embedded in DDS files
        this.generateMipmaps = false;
    }
}
$2d9d8c9fc2282acc$export$3466bac9141a5cc4.prototype.isCompressedTexture = true;
class $2d9d8c9fc2282acc$export$f7189e49152d1c13 extends $2d9d8c9fc2282acc$export$5431306cf43de24a {
    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy){
        super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
        this.needsUpdate = true;
    }
}
$2d9d8c9fc2282acc$export$f7189e49152d1c13.prototype.isCanvasTexture = true;
class $2d9d8c9fc2282acc$export$3f74fe60decf7462 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = 'CircleGeometry';
        this.parameters = {
            radius: radius,
            segments: segments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        segments = Math.max(3, segments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const uv = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        // center point
        vertices.push(0, 0, 0);
        normals.push(0, 0, 1);
        uvs.push(0.5, 0.5);
        for(let s = 0, i178 = 3; s <= segments; s++, i178 += 3){
            const segment = thetaStart + s / segments * thetaLength;
            // vertex
            vertex.x = radius * Math.cos(segment);
            vertex.y = radius * Math.sin(segment);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            normals.push(0, 0, 1);
            // uvs
            uv.x = (vertices[i178] / radius + 1) / 2;
            uv.y = (vertices[i178 + 1] / radius + 1) / 2;
            uvs.push(uv.x, uv.y);
        }
        // indices
        for(let i177 = 1; i177 <= segments; i177++)indices.push(i177, i177 + 1, 0);
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$3f74fe60decf7462(data.radius, data.segments, data.thetaStart, data.thetaLength);
    }
}
class $2d9d8c9fc2282acc$export$d4345c83207d7c68 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = 'CylinderGeometry';
        this.parameters = {
            radiusTop: radiusTop,
            radiusBottom: radiusBottom,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        const scope = this;
        radialSegments = Math.floor(radialSegments);
        heightSegments = Math.floor(heightSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let index = 0;
        const indexArray = [];
        const halfHeight = height / 2;
        let groupStart = 0;
        // generate geometry
        generateTorso();
        if (openEnded === false) {
            if (radiusTop > 0) generateCap(true);
            if (radiusBottom > 0) generateCap(false);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
        function generateTorso() {
            const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            let groupCount = 0;
            // this will be used to calculate the normal
            const slope = (radiusBottom - radiusTop) / height;
            // generate vertices, normals and uvs
            for(let y = 0; y <= heightSegments; y++){
                const indexRow = [];
                const v = y / heightSegments;
                // calculate the radius of the current row
                const radius = v * (radiusBottom - radiusTop) + radiusTop;
                for(let x = 0; x <= radialSegments; x++){
                    const u = x / radialSegments;
                    const theta = u * thetaLength + thetaStart;
                    const sinTheta = Math.sin(theta);
                    const cosTheta = Math.cos(theta);
                    // vertex
                    vertex.x = radius * sinTheta;
                    vertex.y = -v * height + halfHeight;
                    vertex.z = radius * cosTheta;
                    vertices.push(vertex.x, vertex.y, vertex.z);
                    // normal
                    normal.set(sinTheta, slope, cosTheta).normalize();
                    normals.push(normal.x, normal.y, normal.z);
                    // uv
                    uvs.push(u, 1 - v);
                    // save index of vertex in respective row
                    indexRow.push(index++);
                }
                // now save vertices of the row in our index array
                indexArray.push(indexRow);
            }
            // generate indices
            for(let x = 0; x < radialSegments; x++)for(let y1 = 0; y1 < heightSegments; y1++){
                // we use the index array to access the correct indices
                const a = indexArray[y1][x];
                const b = indexArray[y1 + 1][x];
                const c = indexArray[y1 + 1][x + 1];
                const d = indexArray[y1][x + 1];
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
                // update group counter
                groupCount += 6;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, 0);
            // calculate new start value for groups
            groupStart += groupCount;
        }
        function generateCap(top) {
            // save the index of the first center vertex
            const centerIndexStart = index;
            const uv = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
            const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            let groupCount = 0;
            const radius = top === true ? radiusTop : radiusBottom;
            const sign = top === true ? 1 : -1;
            // first we generate the center vertex data of the cap.
            // because the geometry needs one set of uvs per face,
            // we must generate a center vertex per face/segment
            for(let x = 1; x <= radialSegments; x++){
                // vertex
                vertices.push(0, halfHeight * sign, 0);
                // normal
                normals.push(0, sign, 0);
                // uv
                uvs.push(0.5, 0.5);
                // increase index
                index++;
            }
            // save the index of the last center vertex
            const centerIndexEnd = index;
            // now we generate the surrounding vertices, normals and uvs
            for(let x1 = 0; x1 <= radialSegments; x1++){
                const u = x1 / radialSegments;
                const theta = u * thetaLength + thetaStart;
                const cosTheta = Math.cos(theta);
                const sinTheta = Math.sin(theta);
                // vertex
                vertex.x = radius * sinTheta;
                vertex.y = halfHeight * sign;
                vertex.z = radius * cosTheta;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, sign, 0);
                // uv
                uv.x = cosTheta * 0.5 + 0.5;
                uv.y = sinTheta * 0.5 * sign + 0.5;
                uvs.push(uv.x, uv.y);
                // increase index
                index++;
            }
            // generate indices
            for(let x2 = 0; x2 < radialSegments; x2++){
                const c = centerIndexStart + x2;
                const i179 = centerIndexEnd + x2;
                if (top === true) // face top
                indices.push(i179, i179 + 1, c);
                else // face bottom
                indices.push(i179 + 1, i179, c);
                groupCount += 3;
            }
            // add a group to the geometry. this will ensure multi material support
            scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
            // calculate new start value for groups
            groupStart += groupCount;
        }
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$d4345c83207d7c68(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
}
class $2d9d8c9fc2282acc$export$59d971120dc8b6e7 extends $2d9d8c9fc2282acc$export$d4345c83207d7c68 {
    constructor(radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2){
        super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
        this.type = 'ConeGeometry';
        this.parameters = {
            radius: radius,
            height: height,
            radialSegments: radialSegments,
            heightSegments: heightSegments,
            openEnded: openEnded,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$59d971120dc8b6e7(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
    }
}
class $2d9d8c9fc2282acc$export$38789b531813345c extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(vertices = [], indices = [], radius1 = 1, detail1 = 0){
        super();
        this.type = 'PolyhedronGeometry';
        this.parameters = {
            vertices: vertices,
            indices: indices,
            radius: radius1,
            detail: detail1
        };
        // default buffer data
        const vertexBuffer = [];
        const uvBuffer = [];
        // the subdivision creates the vertex buffer data
        subdivide(detail1);
        // all vertices should lie on a conceptual sphere with a given radius
        applyRadius(radius1);
        // finally, create the uv data
        generateUVs();
        // build non-indexed geometry
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertexBuffer, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertexBuffer.slice(), 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvBuffer, 2));
        if (detail1 === 0) this.computeVertexNormals(); // flat normals
        else this.normalizeNormals(); // smooth normals
        // helper functions
        function subdivide(detail) {
            const a = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const b = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const c = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            // iterate over all faces and apply a subdivison with the given detail value
            for(let i180 = 0; i180 < indices.length; i180 += 3){
                // get the vertices of the face
                getVertexByIndex(indices[i180 + 0], a);
                getVertexByIndex(indices[i180 + 1], b);
                getVertexByIndex(indices[i180 + 2], c);
                // perform subdivision
                subdivideFace(a, b, c, detail);
            }
        }
        function subdivideFace(a, b, c, detail) {
            const cols = detail + 1;
            // we use this multidimensional array as a data structure for creating the subdivision
            const v = [];
            // construct all of the vertices for this subdivision
            for(let i182 = 0; i182 <= cols; i182++){
                v[i182] = [];
                const aj = a.clone().lerp(c, i182 / cols);
                const bj = b.clone().lerp(c, i182 / cols);
                const rows = cols - i182;
                for(let j = 0; j <= rows; j++)if (j === 0 && i182 === cols) v[i182][j] = aj;
                else v[i182][j] = aj.clone().lerp(bj, j / rows);
            }
            // construct all of the faces
            for(let i181 = 0; i181 < cols; i181++)for(let j = 0; j < 2 * (cols - i181) - 1; j++){
                const k = Math.floor(j / 2);
                if (j % 2 === 0) {
                    pushVertex(v[i181][k + 1]);
                    pushVertex(v[i181 + 1][k]);
                    pushVertex(v[i181][k]);
                } else {
                    pushVertex(v[i181][k + 1]);
                    pushVertex(v[i181 + 1][k + 1]);
                    pushVertex(v[i181 + 1][k]);
                }
            }
        }
        function applyRadius(radius) {
            const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            // iterate over the entire buffer and apply the radius to each vertex
            for(let i183 = 0; i183 < vertexBuffer.length; i183 += 3){
                vertex.x = vertexBuffer[i183 + 0];
                vertex.y = vertexBuffer[i183 + 1];
                vertex.z = vertexBuffer[i183 + 2];
                vertex.normalize().multiplyScalar(radius);
                vertexBuffer[i183 + 0] = vertex.x;
                vertexBuffer[i183 + 1] = vertex.y;
                vertexBuffer[i183 + 2] = vertex.z;
            }
        }
        function generateUVs() {
            const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            for(let i184 = 0; i184 < vertexBuffer.length; i184 += 3){
                vertex.x = vertexBuffer[i184 + 0];
                vertex.y = vertexBuffer[i184 + 1];
                vertex.z = vertexBuffer[i184 + 2];
                const u = azimuth1(vertex) / 2 / Math.PI + 0.5;
                const v = inclination(vertex) / Math.PI + 0.5;
                uvBuffer.push(u, 1 - v);
            }
            correctUVs();
            correctSeam();
        }
        function correctSeam() {
            // handle case when face straddles the seam, see #3269
            for(let i185 = 0; i185 < uvBuffer.length; i185 += 6){
                // uv data of a single face
                const x0 = uvBuffer[i185 + 0];
                const x1 = uvBuffer[i185 + 2];
                const x2 = uvBuffer[i185 + 4];
                const max = Math.max(x0, x1, x2);
                const min = Math.min(x0, x1, x2);
                // 0.9 is somewhat arbitrary
                if (max > 0.9 && min < 0.1) {
                    if (x0 < 0.2) uvBuffer[i185 + 0] += 1;
                    if (x1 < 0.2) uvBuffer[i185 + 2] += 1;
                    if (x2 < 0.2) uvBuffer[i185 + 4] += 1;
                }
            }
        }
        function pushVertex(vertex) {
            vertexBuffer.push(vertex.x, vertex.y, vertex.z);
        }
        function getVertexByIndex(index, vertex) {
            const stride = index * 3;
            vertex.x = vertices[stride + 0];
            vertex.y = vertices[stride + 1];
            vertex.z = vertices[stride + 2];
        }
        function correctUVs() {
            const a = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const b = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const c = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const centroid = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const uvA = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
            const uvB = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
            const uvC = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
            for(let i186 = 0, j = 0; i186 < vertexBuffer.length; i186 += 9, j += 6){
                a.set(vertexBuffer[i186 + 0], vertexBuffer[i186 + 1], vertexBuffer[i186 + 2]);
                b.set(vertexBuffer[i186 + 3], vertexBuffer[i186 + 4], vertexBuffer[i186 + 5]);
                c.set(vertexBuffer[i186 + 6], vertexBuffer[i186 + 7], vertexBuffer[i186 + 8]);
                uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);
                uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);
                uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);
                centroid.copy(a).add(b).add(c).divideScalar(3);
                const azi = azimuth1(centroid);
                correctUV(uvA, j + 0, a, azi);
                correctUV(uvB, j + 2, b, azi);
                correctUV(uvC, j + 4, c, azi);
            }
        }
        function correctUV(uv, stride, vector, azimuth) {
            if (azimuth < 0 && uv.x === 1) uvBuffer[stride] = uv.x - 1;
            if (vector.x === 0 && vector.z === 0) uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;
        }
        // Angle around the Y axis, counter-clockwise when looking from above.
        function azimuth1(vector) {
            return Math.atan2(vector.z, -vector.x);
        }
        // Angle above the XZ plane.
        function inclination(vector) {
            return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
        }
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$38789b531813345c(data.vertices, data.indices, data.radius, data.details);
    }
}
class $2d9d8c9fc2282acc$export$37cd4e52cce48c4c extends $2d9d8c9fc2282acc$export$38789b531813345c {
    constructor(radius = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const r = 1 / t;
        const vertices = [
            // (±1, ±1, ±1)
            -1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            1,
            1,
            1,
            // (0, ±1/φ, ±φ)
            0,
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            // (±1/φ, ±φ, 0)
            -r,
            -t,
            0,
            -r,
            t,
            0,
            r,
            -t,
            0,
            r,
            t,
            0,
            // (±φ, 0, ±1/φ)
            -t,
            0,
            -r,
            t,
            0,
            -r,
            -t,
            0,
            r,
            t,
            0,
            r
        ];
        const indices = [
            3,
            11,
            7,
            3,
            7,
            15,
            3,
            15,
            13,
            7,
            19,
            17,
            7,
            17,
            6,
            7,
            6,
            15,
            17,
            4,
            8,
            17,
            8,
            10,
            17,
            10,
            6,
            8,
            0,
            16,
            8,
            16,
            2,
            8,
            2,
            10,
            0,
            12,
            1,
            0,
            1,
            18,
            0,
            18,
            16,
            6,
            10,
            2,
            6,
            2,
            13,
            6,
            13,
            15,
            2,
            16,
            18,
            2,
            18,
            3,
            2,
            3,
            13,
            18,
            1,
            9,
            18,
            9,
            11,
            18,
            11,
            3,
            4,
            14,
            12,
            4,
            12,
            0,
            4,
            0,
            8,
            11,
            9,
            5,
            11,
            5,
            19,
            11,
            19,
            7,
            19,
            5,
            14,
            19,
            14,
            4,
            19,
            4,
            17,
            1,
            12,
            14,
            1,
            14,
            5,
            1,
            5,
            9
        ];
        super(vertices, indices, radius, detail);
        this.type = 'DodecahedronGeometry';
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$37cd4e52cce48c4c(data.radius, data.detail);
    }
}
const $2d9d8c9fc2282acc$var$_v0 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v1$1 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_triangle = new $2d9d8c9fc2282acc$export$5a465592bfe74b48();
class $2d9d8c9fc2282acc$export$4730b1542707547f extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(geometry = null, thresholdAngle = 1){
        super();
        this.type = 'EdgesGeometry';
        this.parameters = {
            geometry: geometry,
            thresholdAngle: thresholdAngle
        };
        if (geometry !== null) {
            const precisionPoints = 4;
            const precision = Math.pow(10, precisionPoints);
            const thresholdDot = Math.cos($2d9d8c9fc2282acc$var$DEG2RAD * thresholdAngle);
            const indexAttr = geometry.getIndex();
            const positionAttr = geometry.getAttribute('position');
            const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
            const indexArr = [
                0,
                0,
                0
            ];
            const vertKeys = [
                'a',
                'b',
                'c'
            ];
            const hashes = new Array(3);
            const edgeData = {
            };
            const vertices = [];
            for(let i187 = 0; i187 < indexCount; i187 += 3){
                if (indexAttr) {
                    indexArr[0] = indexAttr.getX(i187);
                    indexArr[1] = indexAttr.getX(i187 + 1);
                    indexArr[2] = indexAttr.getX(i187 + 2);
                } else {
                    indexArr[0] = i187;
                    indexArr[1] = i187 + 1;
                    indexArr[2] = i187 + 2;
                }
                const { a: a , b: b , c: c  } = $2d9d8c9fc2282acc$var$_triangle;
                a.fromBufferAttribute(positionAttr, indexArr[0]);
                b.fromBufferAttribute(positionAttr, indexArr[1]);
                c.fromBufferAttribute(positionAttr, indexArr[2]);
                $2d9d8c9fc2282acc$var$_triangle.getNormal($2d9d8c9fc2282acc$var$_normal);
                // create hashes for the edge from the vertices
                hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(a.z * precision)}`;
                hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
                hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(c.z * precision)}`;
                // skip degenerate triangles
                if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) continue;
                // iterate over every edge
                for(let j = 0; j < 3; j++){
                    // get the first and next vertex making up the edge
                    const jNext = (j + 1) % 3;
                    const vecHash0 = hashes[j];
                    const vecHash1 = hashes[jNext];
                    const v0 = $2d9d8c9fc2282acc$var$_triangle[vertKeys[j]];
                    const v1 = $2d9d8c9fc2282acc$var$_triangle[vertKeys[jNext]];
                    const hash = `${vecHash0}_${vecHash1}`;
                    const reverseHash = `${vecHash1}_${vecHash0}`;
                    if (reverseHash in edgeData && edgeData[reverseHash]) {
                        // if we found a sibling edge add it into the vertex array if
                        // it meets the angle threshold and delete the edge from the map.
                        if ($2d9d8c9fc2282acc$var$_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
                            vertices.push(v0.x, v0.y, v0.z);
                            vertices.push(v1.x, v1.y, v1.z);
                        }
                        edgeData[reverseHash] = null;
                    } else if (!(hash in edgeData)) // if we've already got an edge here then skip adding a new one
                    edgeData[hash] = {
                        index0: indexArr[j],
                        index1: indexArr[jNext],
                        normal: $2d9d8c9fc2282acc$var$_normal.clone()
                    };
                }
            }
            // iterate over all remaining, unmatched edges and add them to the vertex array
            for(const key in edgeData)if (edgeData[key]) {
                const { index0: index0 , index1: index1  } = edgeData[key];
                $2d9d8c9fc2282acc$var$_v0.fromBufferAttribute(positionAttr, index0);
                $2d9d8c9fc2282acc$var$_v1$1.fromBufferAttribute(positionAttr, index1);
                vertices.push($2d9d8c9fc2282acc$var$_v0.x, $2d9d8c9fc2282acc$var$_v0.y, $2d9d8c9fc2282acc$var$_v0.z);
                vertices.push($2d9d8c9fc2282acc$var$_v1$1.x, $2d9d8c9fc2282acc$var$_v1$1.y, $2d9d8c9fc2282acc$var$_v1$1.z);
            }
            this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        }
    }
}
/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/ class $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(){
        this.type = 'Curve';
        this.arcLengthDivisions = 200;
    }
    // Virtual base class method to overwrite and implement in subclasses
    //	- t [0 .. 1]
    getPoint() {
        console.warn('THREE.Curve: .getPoint() not implemented.');
        return null;
    }
    // Get point at relative position in curve according to arc length
    // - u [0 .. 1]
    getPointAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getPoint(t, optionalTarget);
    }
    // Get sequence of points using getPoint( t )
    getPoints(divisions = 5) {
        const points = [];
        for(let d = 0; d <= divisions; d++)points.push(this.getPoint(d / divisions));
        return points;
    }
    // Get sequence of points using getPointAt( u )
    getSpacedPoints(divisions = 5) {
        const points = [];
        for(let d = 0; d <= divisions; d++)points.push(this.getPointAt(d / divisions));
        return points;
    }
    // Get total curve arc length
    getLength() {
        const lengths = this.getLengths();
        return lengths[lengths.length - 1];
    }
    // Get list of cumulative segment lengths
    getLengths(divisions = this.arcLengthDivisions) {
        if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) return this.cacheArcLengths;
        this.needsUpdate = false;
        const cache = [];
        let current, last = this.getPoint(0);
        let sum = 0;
        cache.push(0);
        for(let p = 1; p <= divisions; p++){
            current = this.getPoint(p / divisions);
            sum += current.distanceTo(last);
            cache.push(sum);
            last = current;
        }
        this.cacheArcLengths = cache;
        return cache; // { sums: cache, sum: sum }; Sum is in the last element.
    }
    updateArcLengths() {
        this.needsUpdate = true;
        this.getLengths();
    }
    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
    getUtoTmapping(u, distance) {
        const arcLengths = this.getLengths();
        let i188 = 0;
        const il = arcLengths.length;
        let targetArcLength; // The targeted u distance value to get
        if (distance) targetArcLength = distance;
        else targetArcLength = u * arcLengths[il - 1];
        // binary search for the index with largest value smaller than target u distance
        let low = 0, high = il - 1, comparison;
        while(low <= high){
            i188 = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
            comparison = arcLengths[i188] - targetArcLength;
            if (comparison < 0) low = i188 + 1;
            else if (comparison > 0) high = i188 - 1;
            else {
                high = i188;
                break;
            // DONE
            }
        }
        i188 = high;
        if (arcLengths[i188] === targetArcLength) return i188 / (il - 1);
        // we could get finer grain at lengths, or use simple interpolation between two points
        const lengthBefore = arcLengths[i188];
        const lengthAfter = arcLengths[i188 + 1];
        const segmentLength = lengthAfter - lengthBefore;
        // determine where we are between the 'before' and 'after' points
        const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
        // add that fractional amount to t
        const t = (i188 + segmentFraction) / (il - 1);
        return t;
    }
    // Returns a unit vector tangent at t
    // In case any sub curve does not implement its tangent derivation,
    // 2 points a small delta apart will be used to find its gradient
    // which seems to give a reasonable approximation
    getTangent(t, optionalTarget) {
        const delta = 0.0001;
        let t1 = t - delta;
        let t2 = t + delta;
        // Capping in case of danger
        if (t1 < 0) t1 = 0;
        if (t2 > 1) t2 = 1;
        const pt1 = this.getPoint(t1);
        const pt2 = this.getPoint(t2);
        const tangent = optionalTarget || (pt1.isVector2 ? new $2d9d8c9fc2282acc$export$c977b3e384af9ae1() : new $2d9d8c9fc2282acc$export$64b5c384219d3699());
        tangent.copy(pt2).sub(pt1).normalize();
        return tangent;
    }
    getTangentAt(u, optionalTarget) {
        const t = this.getUtoTmapping(u);
        return this.getTangent(t, optionalTarget);
    }
    computeFrenetFrames(segments, closed) {
        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const tangents = [];
        const normals = [];
        const binormals = [];
        const vec = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const mat = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        // compute the tangent vectors for each segment on the curve
        for(let i190 = 0; i190 <= segments; i190++){
            const u = i190 / segments;
            tangents[i190] = this.getTangentAt(u, new $2d9d8c9fc2282acc$export$64b5c384219d3699());
        }
        // select an initial normal vector perpendicular to the first tangent vector,
        // and in the direction of the minimum tangent xyz component
        normals[0] = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        binormals[0] = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        let min = Number.MAX_VALUE;
        const tx = Math.abs(tangents[0].x);
        const ty = Math.abs(tangents[0].y);
        const tz = Math.abs(tangents[0].z);
        if (tx <= min) {
            min = tx;
            normal.set(1, 0, 0);
        }
        if (ty <= min) {
            min = ty;
            normal.set(0, 1, 0);
        }
        if (tz <= min) normal.set(0, 0, 1);
        vec.crossVectors(tangents[0], normal).normalize();
        normals[0].crossVectors(tangents[0], vec);
        binormals[0].crossVectors(tangents[0], normals[0]);
        // compute the slowly-varying normal and binormal vectors for each segment on the curve
        for(let i189 = 1; i189 <= segments; i189++){
            normals[i189] = normals[i189 - 1].clone();
            binormals[i189] = binormals[i189 - 1].clone();
            vec.crossVectors(tangents[i189 - 1], tangents[i189]);
            if (vec.length() > Number.EPSILON) {
                vec.normalize();
                const theta = Math.acos($2d9d8c9fc2282acc$var$clamp(tangents[i189 - 1].dot(tangents[i189]), -1, 1)); // clamp for floating pt errors
                normals[i189].applyMatrix4(mat.makeRotationAxis(vec, theta));
            }
            binormals[i189].crossVectors(tangents[i189], normals[i189]);
        }
        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
        if (closed === true) {
            let theta = Math.acos($2d9d8c9fc2282acc$var$clamp(normals[0].dot(normals[segments]), -1, 1));
            theta /= segments;
            if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) theta = -theta;
            for(let i191 = 1; i191 <= segments; i191++){
                // twist a little...
                normals[i191].applyMatrix4(mat.makeRotationAxis(tangents[i191], theta * i191));
                binormals[i191].crossVectors(tangents[i191], normals[i191]);
            }
        }
        return {
            tangents: tangents,
            normals: normals,
            binormals: binormals
        };
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(source) {
        this.arcLengthDivisions = source.arcLengthDivisions;
        return this;
    }
    toJSON() {
        const data = {
            metadata: {
                version: 4.5,
                type: 'Curve',
                generator: 'Curve.toJSON'
            }
        };
        data.arcLengthDivisions = this.arcLengthDivisions;
        data.type = this.type;
        return data;
    }
    fromJSON(json) {
        this.arcLengthDivisions = json.arcLengthDivisions;
        return this;
    }
}
class $2d9d8c9fc2282acc$export$3f87a931616cde04 extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0){
        super();
        this.type = 'EllipseCurve';
        this.aX = aX;
        this.aY = aY;
        this.xRadius = xRadius;
        this.yRadius = yRadius;
        this.aStartAngle = aStartAngle;
        this.aEndAngle = aEndAngle;
        this.aClockwise = aClockwise;
        this.aRotation = aRotation;
    }
    getPoint(t, optionalTarget) {
        const point = optionalTarget || new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        const twoPi = Math.PI * 2;
        let deltaAngle = this.aEndAngle - this.aStartAngle;
        const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
        // ensures that deltaAngle is 0 .. 2 PI
        while(deltaAngle < 0)deltaAngle += twoPi;
        while(deltaAngle > twoPi)deltaAngle -= twoPi;
        if (deltaAngle < Number.EPSILON) {
            if (samePoints) deltaAngle = 0;
            else deltaAngle = twoPi;
        }
        if (this.aClockwise === true && !samePoints) {
            if (deltaAngle === twoPi) deltaAngle = -twoPi;
            else deltaAngle = deltaAngle - twoPi;
        }
        const angle = this.aStartAngle + t * deltaAngle;
        let x = this.aX + this.xRadius * Math.cos(angle);
        let y = this.aY + this.yRadius * Math.sin(angle);
        if (this.aRotation !== 0) {
            const cos = Math.cos(this.aRotation);
            const sin = Math.sin(this.aRotation);
            const tx = x - this.aX;
            const ty = y - this.aY;
            // Rotate the point about the center of the ellipse.
            x = tx * cos - ty * sin + this.aX;
            y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
    }
    copy(source) {
        super.copy(source);
        this.aX = source.aX;
        this.aY = source.aY;
        this.xRadius = source.xRadius;
        this.yRadius = source.yRadius;
        this.aStartAngle = source.aStartAngle;
        this.aEndAngle = source.aEndAngle;
        this.aClockwise = source.aClockwise;
        this.aRotation = source.aRotation;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.aX = this.aX;
        data.aY = this.aY;
        data.xRadius = this.xRadius;
        data.yRadius = this.yRadius;
        data.aStartAngle = this.aStartAngle;
        data.aEndAngle = this.aEndAngle;
        data.aClockwise = this.aClockwise;
        data.aRotation = this.aRotation;
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.aX = json.aX;
        this.aY = json.aY;
        this.xRadius = json.xRadius;
        this.yRadius = json.yRadius;
        this.aStartAngle = json.aStartAngle;
        this.aEndAngle = json.aEndAngle;
        this.aClockwise = json.aClockwise;
        this.aRotation = json.aRotation;
        return this;
    }
}
$2d9d8c9fc2282acc$export$3f87a931616cde04.prototype.isEllipseCurve = true;
class $2d9d8c9fc2282acc$export$b1eedc9aab6300e8 extends $2d9d8c9fc2282acc$export$3f87a931616cde04 {
    constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise){
        super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        this.type = 'ArcCurve';
    }
}
$2d9d8c9fc2282acc$export$b1eedc9aab6300e8.prototype.isArcCurve = true;
/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */ /*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/ function $2d9d8c9fc2282acc$var$CubicPoly() {
    let c0 = 0, c1 = 0, c2 = 0, c3 = 0;
    /*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */ function init(x0, x1, t0, t1) {
        c0 = x0;
        c1 = t0;
        c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;
        c3 = 2 * x0 - 2 * x1 + t0 + t1;
    }
    return {
        initCatmullRom: function(x0, x1, x2, x3, tension) {
            init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
        },
        initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
            // compute tangents when parameterized in [t1,t2]
            let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;
            let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
            // rescale tangents for parametrization in [0,1]
            t1 *= dt1;
            t2 *= dt1;
            init(x1, x2, t1, t2);
        },
        calc: function(t) {
            const t2 = t * t;
            const t3 = t2 * t;
            return c0 + c1 * t + c2 * t2 + c3 * t3;
        }
    };
}
//
const $2d9d8c9fc2282acc$var$tmp = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$px = new $2d9d8c9fc2282acc$var$CubicPoly(), $2d9d8c9fc2282acc$var$py = new $2d9d8c9fc2282acc$var$CubicPoly(), $2d9d8c9fc2282acc$var$pz = new $2d9d8c9fc2282acc$var$CubicPoly();
class $2d9d8c9fc2282acc$export$b9146b27c24b744c extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5){
        super();
        this.type = 'CatmullRomCurve3';
        this.points = points;
        this.closed = closed;
        this.curveType = curveType;
        this.tension = tension;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$64b5c384219d3699()) {
        const point = optionalTarget;
        const points = this.points;
        const l = points.length;
        const p = (l - (this.closed ? 0 : 1)) * t;
        let intPoint = Math.floor(p);
        let weight = p - intPoint;
        if (this.closed) intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;
        else if (weight === 0 && intPoint === l - 1) {
            intPoint = l - 2;
            weight = 1;
        }
        let p0, p3; // 4 points (p1 & p2 defined below)
        if (this.closed || intPoint > 0) p0 = points[(intPoint - 1) % l];
        else {
            // extrapolate first point
            $2d9d8c9fc2282acc$var$tmp.subVectors(points[0], points[1]).add(points[0]);
            p0 = $2d9d8c9fc2282acc$var$tmp;
        }
        const p1 = points[intPoint % l];
        const p2 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l) p3 = points[(intPoint + 2) % l];
        else {
            // extrapolate last point
            $2d9d8c9fc2282acc$var$tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);
            p3 = $2d9d8c9fc2282acc$var$tmp;
        }
        if (this.curveType === 'centripetal' || this.curveType === 'chordal') {
            // init Centripetal / Chordal Catmull-Rom
            const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
            let dt0 = Math.pow(p0.distanceToSquared(p1), pow);
            let dt1 = Math.pow(p1.distanceToSquared(p2), pow);
            let dt2 = Math.pow(p2.distanceToSquared(p3), pow);
            // safety check for repeated points
            if (dt1 < 0.0001) dt1 = 1;
            if (dt0 < 0.0001) dt0 = dt1;
            if (dt2 < 0.0001) dt2 = dt1;
            $2d9d8c9fc2282acc$var$px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);
            $2d9d8c9fc2282acc$var$py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);
            $2d9d8c9fc2282acc$var$pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
        } else if (this.curveType === 'catmullrom') {
            $2d9d8c9fc2282acc$var$px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);
            $2d9d8c9fc2282acc$var$py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);
            $2d9d8c9fc2282acc$var$pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);
        }
        point.set($2d9d8c9fc2282acc$var$px.calc(weight), $2d9d8c9fc2282acc$var$py.calc(weight), $2d9d8c9fc2282acc$var$pz.calc(weight));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.points = [];
        for(let i192 = 0, l = source.points.length; i192 < l; i192++){
            const point = source.points[i192];
            this.points.push(point.clone());
        }
        this.closed = source.closed;
        this.curveType = source.curveType;
        this.tension = source.tension;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i193 = 0, l = this.points.length; i193 < l; i193++){
            const point = this.points[i193];
            data.points.push(point.toArray());
        }
        data.closed = this.closed;
        data.curveType = this.curveType;
        data.tension = this.tension;
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for(let i194 = 0, l = json.points.length; i194 < l; i194++){
            const point = json.points[i194];
            this.points.push(new $2d9d8c9fc2282acc$export$64b5c384219d3699().fromArray(point));
        }
        this.closed = json.closed;
        this.curveType = json.curveType;
        this.tension = json.tension;
        return this;
    }
}
$2d9d8c9fc2282acc$export$b9146b27c24b744c.prototype.isCatmullRomCurve3 = true;
/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */ function $2d9d8c9fc2282acc$var$CatmullRom(t, p0, p1, p2, p3) {
    const v0 = (p2 - p0) * 0.5;
    const v1 = (p3 - p1) * 0.5;
    const t2 = t * t;
    const t3 = t * t2;
    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
}
//
function $2d9d8c9fc2282acc$var$QuadraticBezierP0(t, p) {
    const k = 1 - t;
    return k * k * p;
}
function $2d9d8c9fc2282acc$var$QuadraticBezierP1(t, p) {
    return 2 * (1 - t) * t * p;
}
function $2d9d8c9fc2282acc$var$QuadraticBezierP2(t, p) {
    return t * t * p;
}
function $2d9d8c9fc2282acc$var$QuadraticBezier(t, p0, p1, p2) {
    return $2d9d8c9fc2282acc$var$QuadraticBezierP0(t, p0) + $2d9d8c9fc2282acc$var$QuadraticBezierP1(t, p1) + $2d9d8c9fc2282acc$var$QuadraticBezierP2(t, p2);
}
//
function $2d9d8c9fc2282acc$var$CubicBezierP0(t, p) {
    const k = 1 - t;
    return k * k * k * p;
}
function $2d9d8c9fc2282acc$var$CubicBezierP1(t, p) {
    const k = 1 - t;
    return 3 * k * k * t * p;
}
function $2d9d8c9fc2282acc$var$CubicBezierP2(t, p) {
    return 3 * (1 - t) * t * t * p;
}
function $2d9d8c9fc2282acc$var$CubicBezierP3(t, p) {
    return t * t * t * p;
}
function $2d9d8c9fc2282acc$var$CubicBezier(t, p0, p1, p2, p3) {
    return $2d9d8c9fc2282acc$var$CubicBezierP0(t, p0) + $2d9d8c9fc2282acc$var$CubicBezierP1(t, p1) + $2d9d8c9fc2282acc$var$CubicBezierP2(t, p2) + $2d9d8c9fc2282acc$var$CubicBezierP3(t, p3);
}
class $2d9d8c9fc2282acc$export$e36650d36468bb39 extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), v1 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), v2 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), v3 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()){
        super();
        this.type = 'CubicBezierCurve';
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set($2d9d8c9fc2282acc$var$CubicBezier(t, v0.x, v1.x, v2.x, v3.x), $2d9d8c9fc2282acc$var$CubicBezier(t, v0.y, v1.y, v2.y, v3.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
    }
}
$2d9d8c9fc2282acc$export$e36650d36468bb39.prototype.isCubicBezierCurve = true;
class $2d9d8c9fc2282acc$export$13d5f1c9525f246c extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), v1 = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), v2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), v3 = new $2d9d8c9fc2282acc$export$64b5c384219d3699()){
        super();
        this.type = 'CubicBezierCurve3';
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$64b5c384219d3699()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        point.set($2d9d8c9fc2282acc$var$CubicBezier(t, v0.x, v1.x, v2.x, v3.x), $2d9d8c9fc2282acc$var$CubicBezier(t, v0.y, v1.y, v2.y, v3.y), $2d9d8c9fc2282acc$var$CubicBezier(t, v0.z, v1.z, v2.z, v3.z));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        this.v3.copy(source.v3);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        data.v3 = this.v3.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        this.v3.fromArray(json.v3);
        return this;
    }
}
$2d9d8c9fc2282acc$export$13d5f1c9525f246c.prototype.isCubicBezierCurve3 = true;
class $2d9d8c9fc2282acc$export$ab2e07e76531a47e extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(v1 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), v2 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()){
        super();
        this.type = 'LineCurve';
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        if (t === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }
    getTangent(t, optionalTarget) {
        const tangent = optionalTarget || new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        tangent.copy(this.v2).sub(this.v1).normalize();
        return tangent;
    }
    copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
$2d9d8c9fc2282acc$export$ab2e07e76531a47e.prototype.isLineCurve = true;
class $2d9d8c9fc2282acc$export$1fdfd9d9cf487600 extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(v1 = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), v2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699()){
        super();
        this.type = 'LineCurve3';
        this.isLineCurve3 = true;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$64b5c384219d3699()) {
        const point = optionalTarget;
        if (t === 1) point.copy(this.v2);
        else {
            point.copy(this.v2).sub(this.v1);
            point.multiplyScalar(t).add(this.v1);
        }
        return point;
    }
    // Line curve is linear, so we can overwrite default getPointAt
    getPointAt(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }
    copy(source) {
        super.copy(source);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
class $2d9d8c9fc2282acc$export$5938c4ee491a43ad extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), v1 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(), v2 = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()){
        super();
        this.type = 'QuadraticBezierCurve';
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set($2d9d8c9fc2282acc$var$QuadraticBezier(t, v0.x, v1.x, v2.x), $2d9d8c9fc2282acc$var$QuadraticBezier(t, v0.y, v1.y, v2.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
$2d9d8c9fc2282acc$export$5938c4ee491a43ad.prototype.isQuadraticBezierCurve = true;
class $2d9d8c9fc2282acc$export$bf3f4c7e459f90fc extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(v0 = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), v1 = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), v2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699()){
        super();
        this.type = 'QuadraticBezierCurve3';
        this.v0 = v0;
        this.v1 = v1;
        this.v2 = v2;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$64b5c384219d3699()) {
        const point = optionalTarget;
        const v0 = this.v0, v1 = this.v1, v2 = this.v2;
        point.set($2d9d8c9fc2282acc$var$QuadraticBezier(t, v0.x, v1.x, v2.x), $2d9d8c9fc2282acc$var$QuadraticBezier(t, v0.y, v1.y, v2.y), $2d9d8c9fc2282acc$var$QuadraticBezier(t, v0.z, v1.z, v2.z));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.v0.copy(source.v0);
        this.v1.copy(source.v1);
        this.v2.copy(source.v2);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.v0 = this.v0.toArray();
        data.v1 = this.v1.toArray();
        data.v2 = this.v2.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.v0.fromArray(json.v0);
        this.v1.fromArray(json.v1);
        this.v2.fromArray(json.v2);
        return this;
    }
}
$2d9d8c9fc2282acc$export$bf3f4c7e459f90fc.prototype.isQuadraticBezierCurve3 = true;
class $2d9d8c9fc2282acc$export$d3bdd77da77afc1b extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(points = []){
        super();
        this.type = 'SplineCurve';
        this.points = points;
    }
    getPoint(t, optionalTarget = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()) {
        const point = optionalTarget;
        const points = this.points;
        const p = (points.length - 1) * t;
        const intPoint = Math.floor(p);
        const weight = p - intPoint;
        const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];
        const p1 = points[intPoint];
        const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
        const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        point.set($2d9d8c9fc2282acc$var$CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), $2d9d8c9fc2282acc$var$CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));
        return point;
    }
    copy(source) {
        super.copy(source);
        this.points = [];
        for(let i195 = 0, l = source.points.length; i195 < l; i195++){
            const point = source.points[i195];
            this.points.push(point.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.points = [];
        for(let i196 = 0, l = this.points.length; i196 < l; i196++){
            const point = this.points[i196];
            data.points.push(point.toArray());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.points = [];
        for(let i197 = 0, l = json.points.length; i197 < l; i197++){
            const point = json.points[i197];
            this.points.push(new $2d9d8c9fc2282acc$export$c977b3e384af9ae1().fromArray(point));
        }
        return this;
    }
}
$2d9d8c9fc2282acc$export$d3bdd77da77afc1b.prototype.isSplineCurve = true;
var $2d9d8c9fc2282acc$var$Curves = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcCurve: $2d9d8c9fc2282acc$export$b1eedc9aab6300e8,
    CatmullRomCurve3: $2d9d8c9fc2282acc$export$b9146b27c24b744c,
    CubicBezierCurve: $2d9d8c9fc2282acc$export$e36650d36468bb39,
    CubicBezierCurve3: $2d9d8c9fc2282acc$export$13d5f1c9525f246c,
    EllipseCurve: $2d9d8c9fc2282acc$export$3f87a931616cde04,
    LineCurve: $2d9d8c9fc2282acc$export$ab2e07e76531a47e,
    LineCurve3: $2d9d8c9fc2282acc$export$1fdfd9d9cf487600,
    QuadraticBezierCurve: $2d9d8c9fc2282acc$export$5938c4ee491a43ad,
    QuadraticBezierCurve3: $2d9d8c9fc2282acc$export$bf3f4c7e459f90fc,
    SplineCurve: $2d9d8c9fc2282acc$export$d3bdd77da77afc1b
});
/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/ class $2d9d8c9fc2282acc$export$4aaf9b66af1bbf2c extends $2d9d8c9fc2282acc$export$b0e83c3ef8d2db1 {
    constructor(){
        super();
        this.type = 'CurvePath';
        this.curves = [];
        this.autoClose = false; // Automatically closes the path
    }
    add(curve) {
        this.curves.push(curve);
    }
    closePath() {
        // Add a line curve if start and end of lines are not connected
        const startPoint = this.curves[0].getPoint(0);
        const endPoint = this.curves[this.curves.length - 1].getPoint(1);
        if (!startPoint.equals(endPoint)) this.curves.push(new $2d9d8c9fc2282acc$export$ab2e07e76531a47e(endPoint, startPoint));
    }
    // To get accurate point with reference to
    // entire path distance at time t,
    // following has to be done:
    // 1. Length of each sub path have to be known
    // 2. Locate and identify type of curve
    // 3. Get t for the curve
    // 4. Return curve.getPointAt(t')
    getPoint(t, optionalTarget) {
        const d = t * this.getLength();
        const curveLengths = this.getCurveLengths();
        let i198 = 0;
        // To think about boundaries points.
        while(i198 < curveLengths.length){
            if (curveLengths[i198] >= d) {
                const diff = curveLengths[i198] - d;
                const curve = this.curves[i198];
                const segmentLength = curve.getLength();
                const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
                return curve.getPointAt(u, optionalTarget);
            }
            i198++;
        }
        return null;
    // loop where sum != 0, sum > d , sum+1 <d
    }
    // We cannot use the default THREE.Curve getPoint() with getLength() because in
    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
    // getPoint() depends on getLength
    getLength() {
        const lens = this.getCurveLengths();
        return lens[lens.length - 1];
    }
    // cacheLengths must be recalculated.
    updateArcLengths() {
        this.needsUpdate = true;
        this.cacheLengths = null;
        this.getCurveLengths();
    }
    // Compute lengths and cache them
    // We cannot overwrite getLengths() because UtoT mapping uses it.
    getCurveLengths() {
        // We use cache values if curves and cache array are same length
        if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
        // Get length of sub-curve
        // Push sums into cached array
        const lengths = [];
        let sums = 0;
        for(let i199 = 0, l = this.curves.length; i199 < l; i199++){
            sums += this.curves[i199].getLength();
            lengths.push(sums);
        }
        this.cacheLengths = lengths;
        return lengths;
    }
    getSpacedPoints(divisions = 40) {
        const points = [];
        for(let i200 = 0; i200 <= divisions; i200++)points.push(this.getPoint(i200 / divisions));
        if (this.autoClose) points.push(points[0]);
        return points;
    }
    getPoints(divisions = 12) {
        const points = [];
        let last;
        for(let i201 = 0, curves = this.curves; i201 < curves.length; i201++){
            const curve = curves[i201];
            const resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;
            const pts = curve.getPoints(resolution);
            for(let j = 0; j < pts.length; j++){
                const point = pts[j];
                if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates
                points.push(point);
                last = point;
            }
        }
        if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) points.push(points[0]);
        return points;
    }
    copy(source) {
        super.copy(source);
        this.curves = [];
        for(let i202 = 0, l = source.curves.length; i202 < l; i202++){
            const curve = source.curves[i202];
            this.curves.push(curve.clone());
        }
        this.autoClose = source.autoClose;
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.autoClose = this.autoClose;
        data.curves = [];
        for(let i203 = 0, l = this.curves.length; i203 < l; i203++){
            const curve = this.curves[i203];
            data.curves.push(curve.toJSON());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.autoClose = json.autoClose;
        this.curves = [];
        for(let i204 = 0, l = json.curves.length; i204 < l; i204++){
            const curve = json.curves[i204];
            this.curves.push(new $2d9d8c9fc2282acc$var$Curves[curve.type]().fromJSON(curve));
        }
        return this;
    }
}
class $2d9d8c9fc2282acc$export$4b2950bdac9b6ee9 extends $2d9d8c9fc2282acc$export$4aaf9b66af1bbf2c {
    constructor(points){
        super();
        this.type = 'Path';
        this.currentPoint = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        if (points) this.setFromPoints(points);
    }
    setFromPoints(points) {
        this.moveTo(points[0].x, points[0].y);
        for(let i205 = 1, l = points.length; i205 < l; i205++)this.lineTo(points[i205].x, points[i205].y);
        return this;
    }
    moveTo(x, y) {
        this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?
        return this;
    }
    lineTo(x, y) {
        const curve = new $2d9d8c9fc2282acc$export$ab2e07e76531a47e(this.currentPoint.clone(), new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(x, y));
        this.curves.push(curve);
        this.currentPoint.set(x, y);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
        const curve = new $2d9d8c9fc2282acc$export$5938c4ee491a43ad(this.currentPoint.clone(), new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(aCPx, aCPy), new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(aX, aY));
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        const curve = new $2d9d8c9fc2282acc$export$e36650d36468bb39(this.currentPoint.clone(), new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(aCP1x, aCP1y), new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(aCP2x, aCP2y), new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(aX, aY));
        this.curves.push(curve);
        this.currentPoint.set(aX, aY);
        return this;
    }
    splineThru(pts /*Array of Vector*/ ) {
        const npts = [
            this.currentPoint.clone()
        ].concat(pts);
        const curve = new $2d9d8c9fc2282acc$export$d3bdd77da77afc1b(npts);
        this.curves.push(curve);
        this.currentPoint.copy(pts[pts.length - 1]);
        return this;
    }
    arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
    }
    absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
        return this;
    }
    ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const x0 = this.currentPoint.x;
        const y0 = this.currentPoint.y;
        this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        return this;
    }
    absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        const curve = new $2d9d8c9fc2282acc$export$3f87a931616cde04(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
        if (this.curves.length > 0) {
            // if a previous curve is present, attempt to join
            const firstPoint = curve.getPoint(0);
            if (!firstPoint.equals(this.currentPoint)) this.lineTo(firstPoint.x, firstPoint.y);
        }
        this.curves.push(curve);
        const lastPoint = curve.getPoint(1);
        this.currentPoint.copy(lastPoint);
        return this;
    }
    copy(source) {
        super.copy(source);
        this.currentPoint.copy(source.currentPoint);
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.currentPoint = this.currentPoint.toArray();
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.currentPoint.fromArray(json.currentPoint);
        return this;
    }
}
class $2d9d8c9fc2282acc$export$6428a7f2611ef1fa extends $2d9d8c9fc2282acc$export$4b2950bdac9b6ee9 {
    constructor(points){
        super(points);
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        this.type = 'Shape';
        this.holes = [];
    }
    getPointsHoles(divisions) {
        const holesPts = [];
        for(let i206 = 0, l = this.holes.length; i206 < l; i206++)holesPts[i206] = this.holes[i206].getPoints(divisions);
        return holesPts;
    }
    // get points of shape and holes (keypoints based on segments parameter)
    extractPoints(divisions) {
        return {
            shape: this.getPoints(divisions),
            holes: this.getPointsHoles(divisions)
        };
    }
    copy(source) {
        super.copy(source);
        this.holes = [];
        for(let i207 = 0, l = source.holes.length; i207 < l; i207++){
            const hole = source.holes[i207];
            this.holes.push(hole.clone());
        }
        return this;
    }
    toJSON() {
        const data = super.toJSON();
        data.uuid = this.uuid;
        data.holes = [];
        for(let i208 = 0, l = this.holes.length; i208 < l; i208++){
            const hole = this.holes[i208];
            data.holes.push(hole.toJSON());
        }
        return data;
    }
    fromJSON(json) {
        super.fromJSON(json);
        this.uuid = json.uuid;
        this.holes = [];
        for(let i209 = 0, l = json.holes.length; i209 < l; i209++){
            const hole = json.holes[i209];
            this.holes.push(new $2d9d8c9fc2282acc$export$4b2950bdac9b6ee9().fromJSON(hole));
        }
        return this;
    }
}
/**
 * Port from https://github.com/mapbox/earcut (v2.2.2)
 */ const $2d9d8c9fc2282acc$var$Earcut = {
    triangulate: function(data, holeIndices, dim = 2) {
        const hasHoles = holeIndices && holeIndices.length;
        const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        let outerNode = $2d9d8c9fc2282acc$var$linkedList(data, 0, outerLen, dim, true);
        const triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev) return triangles;
        let minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles) outerNode = $2d9d8c9fc2282acc$var$eliminateHoles(data, holeIndices, outerNode, dim);
        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
        if (data.length > 80 * dim) {
            minX = maxX = data[0];
            minY = maxY = data[1];
            for(let i210 = dim; i210 < outerLen; i210 += dim){
                x = data[i210];
                y = data[i210 + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
            }
            // minX, minY and invSize are later used to transform coords into integers for z-order calculation
            invSize = Math.max(maxX - minX, maxY - minY);
            invSize = invSize !== 0 ? 1 / invSize : 0;
        }
        $2d9d8c9fc2282acc$var$earcutLinked(outerNode, triangles, dim, minX, minY, invSize);
        return triangles;
    }
};
// create a circular doubly linked list from polygon points in the specified winding order
function $2d9d8c9fc2282acc$var$linkedList(data, start, end, dim, clockwise) {
    let i211, last;
    if (clockwise === $2d9d8c9fc2282acc$var$signedArea(data, start, end, dim) > 0) for(i211 = start; i211 < end; i211 += dim)last = $2d9d8c9fc2282acc$var$insertNode(i211, data[i211], data[i211 + 1], last);
    else for(i211 = end - dim; i211 >= start; i211 -= dim)last = $2d9d8c9fc2282acc$var$insertNode(i211, data[i211], data[i211 + 1], last);
    if (last && $2d9d8c9fc2282acc$var$equals(last, last.next)) {
        $2d9d8c9fc2282acc$var$removeNode(last);
        last = last.next;
    }
    return last;
}
// eliminate colinear or duplicate points
function $2d9d8c9fc2282acc$var$filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;
    let p = start, again;
    do {
        again = false;
        if (!p.steiner && ($2d9d8c9fc2282acc$var$equals(p, p.next) || $2d9d8c9fc2282acc$var$area(p.prev, p, p.next) === 0)) {
            $2d9d8c9fc2282acc$var$removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;
        } else p = p.next;
    }while (again || p !== end)
    return end;
}
// main ear slicing loop which triangulates a polygon (given as a linked list)
function $2d9d8c9fc2282acc$var$earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;
    // interlink polygon nodes in z-order
    if (!pass && invSize) $2d9d8c9fc2282acc$var$indexCurve(ear, minX, minY, invSize);
    let stop = ear, prev, next;
    // iterate through ears, slicing them one by one
    while(ear.prev !== ear.next){
        prev = ear.prev;
        next = ear.next;
        if (invSize ? $2d9d8c9fc2282acc$var$isEarHashed(ear, minX, minY, invSize) : $2d9d8c9fc2282acc$var$isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);
            $2d9d8c9fc2282acc$var$removeNode(ear);
            // skipping the next vertex leads to less sliver triangles
            ear = next.next;
            stop = next.next;
            continue;
        }
        ear = next;
        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) $2d9d8c9fc2282acc$var$earcutLinked($2d9d8c9fc2282acc$var$filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            else if (pass === 1) {
                ear = $2d9d8c9fc2282acc$var$cureLocalIntersections($2d9d8c9fc2282acc$var$filterPoints(ear), triangles, dim);
                $2d9d8c9fc2282acc$var$earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) $2d9d8c9fc2282acc$var$splitEarcut(ear, triangles, dim, minX, minY, invSize);
            break;
        }
    }
}
// check whether a polygon node forms a valid ear with adjacent nodes
function $2d9d8c9fc2282acc$var$isEar(ear) {
    const a = ear.prev, b = ear, c = ear.next;
    if ($2d9d8c9fc2282acc$var$area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // now make sure we don't have other points inside the potential ear
    let p = ear.next.next;
    while(p !== ear.prev){
        if ($2d9d8c9fc2282acc$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && $2d9d8c9fc2282acc$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }
    return true;
}
function $2d9d8c9fc2282acc$var$isEarHashed(ear, minX, minY, invSize) {
    const a = ear.prev, b = ear, c = ear.next;
    if ($2d9d8c9fc2282acc$var$area(a, b, c) >= 0) return false; // reflex, can't be an ear
    // triangle bbox; min & max are calculated like this for speed
    const minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x, minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y, maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x, maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
    // z-order range for the current triangle bbox;
    const minZ = $2d9d8c9fc2282acc$var$zOrder(minTX, minTY, minX, minY, invSize), maxZ = $2d9d8c9fc2282acc$var$zOrder(maxTX, maxTY, minX, minY, invSize);
    let p = ear.prevZ, n = ear.nextZ;
    // look for points inside the triangle in both directions
    while(p && p.z >= minZ && n && n.z <= maxZ){
        if (p !== ear.prev && p !== ear.next && $2d9d8c9fc2282acc$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && $2d9d8c9fc2282acc$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
        if (n !== ear.prev && n !== ear.next && $2d9d8c9fc2282acc$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && $2d9d8c9fc2282acc$var$area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    // look for remaining points in decreasing z-order
    while(p && p.z >= minZ){
        if (p !== ear.prev && p !== ear.next && $2d9d8c9fc2282acc$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && $2d9d8c9fc2282acc$var$area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }
    // look for remaining points in increasing z-order
    while(n && n.z <= maxZ){
        if (n !== ear.prev && n !== ear.next && $2d9d8c9fc2282acc$var$pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && $2d9d8c9fc2282acc$var$area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }
    return true;
}
// go through all polygon nodes and cure small local self-intersections
function $2d9d8c9fc2282acc$var$cureLocalIntersections(start, triangles, dim) {
    let p = start;
    do {
        const a = p.prev, b = p.next.next;
        if (!$2d9d8c9fc2282acc$var$equals(a, b) && $2d9d8c9fc2282acc$var$intersects(a, p, p.next, b) && $2d9d8c9fc2282acc$var$locallyInside(a, b) && $2d9d8c9fc2282acc$var$locallyInside(b, a)) {
            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);
            // remove two nodes involved
            $2d9d8c9fc2282acc$var$removeNode(p);
            $2d9d8c9fc2282acc$var$removeNode(p.next);
            p = start = b;
        }
        p = p.next;
    }while (p !== start)
    return $2d9d8c9fc2282acc$var$filterPoints(p);
}
// try splitting polygon into two and triangulate them independently
function $2d9d8c9fc2282acc$var$splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    let a = start;
    do {
        let b = a.next.next;
        while(b !== a.prev){
            if (a.i !== b.i && $2d9d8c9fc2282acc$var$isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                let c = $2d9d8c9fc2282acc$var$splitPolygon(a, b);
                // filter colinear points around the cuts
                a = $2d9d8c9fc2282acc$var$filterPoints(a, a.next);
                c = $2d9d8c9fc2282acc$var$filterPoints(c, c.next);
                // run earcut on each half
                $2d9d8c9fc2282acc$var$earcutLinked(a, triangles, dim, minX, minY, invSize);
                $2d9d8c9fc2282acc$var$earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    }while (a !== start)
}
// link every hole into the outer loop, producing a single-ring polygon without holes
function $2d9d8c9fc2282acc$var$eliminateHoles(data, holeIndices, outerNode, dim) {
    const queue = [];
    let i212, len, start, end, list;
    for(i212 = 0, len = holeIndices.length; i212 < len; i212++){
        start = holeIndices[i212] * dim;
        end = i212 < len - 1 ? holeIndices[i212 + 1] * dim : data.length;
        list = $2d9d8c9fc2282acc$var$linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push($2d9d8c9fc2282acc$var$getLeftmost(list));
    }
    queue.sort($2d9d8c9fc2282acc$var$compareX);
    // process holes from left to right
    for(i212 = 0; i212 < queue.length; i212++){
        $2d9d8c9fc2282acc$var$eliminateHole(queue[i212], outerNode);
        outerNode = $2d9d8c9fc2282acc$var$filterPoints(outerNode, outerNode.next);
    }
    return outerNode;
}
function $2d9d8c9fc2282acc$var$compareX(a, b) {
    return a.x - b.x;
}
// find a bridge between vertices that connects hole with an outer ring and and link it
function $2d9d8c9fc2282acc$var$eliminateHole(hole, outerNode) {
    outerNode = $2d9d8c9fc2282acc$var$findHoleBridge(hole, outerNode);
    if (outerNode) {
        const b = $2d9d8c9fc2282acc$var$splitPolygon(outerNode, hole);
        // filter collinear points around the cuts
        $2d9d8c9fc2282acc$var$filterPoints(outerNode, outerNode.next);
        $2d9d8c9fc2282acc$var$filterPoints(b, b.next);
    }
}
// David Eberly's algorithm for finding a bridge between hole and outer polygon
function $2d9d8c9fc2282acc$var$findHoleBridge(hole, outerNode) {
    let p = outerNode;
    const hx = hole.x;
    const hy = hole.y;
    let qx = -Infinity, m;
    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    }while (p !== outerNode)
    if (!m) return null;
    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint
    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point
    const stop = m, mx = m.x, my = m.y;
    let tanMin = Infinity, tan;
    p = m;
    do {
        if (hx >= p.x && p.x >= mx && hx !== p.x && $2d9d8c9fc2282acc$var$pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential
            if ($2d9d8c9fc2282acc$var$locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && $2d9d8c9fc2282acc$var$sectorContainsSector(m, p)))) {
                m = p;
                tanMin = tan;
            }
        }
        p = p.next;
    }while (p !== stop)
    return m;
}
// whether sector in vertex m contains sector in vertex p in the same coordinates
function $2d9d8c9fc2282acc$var$sectorContainsSector(m, p) {
    return $2d9d8c9fc2282acc$var$area(m.prev, m, p.prev) < 0 && $2d9d8c9fc2282acc$var$area(p.next, m, m.next) < 0;
}
// interlink polygon nodes in z-order
function $2d9d8c9fc2282acc$var$indexCurve(start, minX, minY, invSize) {
    let p = start;
    do {
        if (p.z === null) p.z = $2d9d8c9fc2282acc$var$zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    }while (p !== start)
    p.prevZ.nextZ = null;
    p.prevZ = null;
    $2d9d8c9fc2282acc$var$sortLinked(p);
}
// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function $2d9d8c9fc2282acc$var$sortLinked(list) {
    let i213, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;
        while(p){
            numMerges++;
            q = p;
            pSize = 0;
            for(i213 = 0; i213 < inSize; i213++){
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;
            while(pSize > 0 || qSize > 0 && q){
                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }
                if (tail) tail.nextZ = e;
                else list = e;
                e.prevZ = tail;
                tail = e;
            }
            p = q;
        }
        tail.nextZ = null;
        inSize *= 2;
    }while (numMerges > 1)
    return list;
}
// z-order of a point given coords and inverse of the longer side of data bbox
function $2d9d8c9fc2282acc$var$zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;
    x = (x | x << 8) & 16711935;
    x = (x | x << 4) & 252645135;
    x = (x | x << 2) & 858993459;
    x = (x | x << 1) & 1431655765;
    y = (y | y << 8) & 16711935;
    y = (y | y << 4) & 252645135;
    y = (y | y << 2) & 858993459;
    y = (y | y << 1) & 1431655765;
    return x | y << 1;
}
// find the leftmost node of a polygon ring
function $2d9d8c9fc2282acc$var$getLeftmost(start) {
    let p = start, leftmost = start;
    do {
        if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;
        p = p.next;
    }while (p !== start)
    return leftmost;
}
// check if a point lies within a convex triangle
function $2d9d8c9fc2282acc$var$pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}
// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function $2d9d8c9fc2282acc$var$isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !$2d9d8c9fc2282acc$var$intersectsPolygon(a, b) && ($2d9d8c9fc2282acc$var$locallyInside(a, b) && $2d9d8c9fc2282acc$var$locallyInside(b, a) && $2d9d8c9fc2282acc$var$middleInside(a, b) && ($2d9d8c9fc2282acc$var$area(a.prev, a, b.prev) || $2d9d8c9fc2282acc$var$area(a, b.prev, b)) || $2d9d8c9fc2282acc$var$equals(a, b) && $2d9d8c9fc2282acc$var$area(a.prev, a, a.next) > 0 && $2d9d8c9fc2282acc$var$area(b.prev, b, b.next) > 0); // special zero-length case
}
// signed area of a triangle
function $2d9d8c9fc2282acc$var$area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}
// check if two points are equal
function $2d9d8c9fc2282acc$var$equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}
// check if two segments intersect
function $2d9d8c9fc2282acc$var$intersects(p1, q1, p2, q2) {
    const o1 = $2d9d8c9fc2282acc$var$sign($2d9d8c9fc2282acc$var$area(p1, q1, p2));
    const o2 = $2d9d8c9fc2282acc$var$sign($2d9d8c9fc2282acc$var$area(p1, q1, q2));
    const o3 = $2d9d8c9fc2282acc$var$sign($2d9d8c9fc2282acc$var$area(p2, q2, p1));
    const o4 = $2d9d8c9fc2282acc$var$sign($2d9d8c9fc2282acc$var$area(p2, q2, q1));
    if (o1 !== o2 && o3 !== o4) return true; // general case
    if (o1 === 0 && $2d9d8c9fc2282acc$var$onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
    if (o2 === 0 && $2d9d8c9fc2282acc$var$onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
    if (o3 === 0 && $2d9d8c9fc2282acc$var$onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
    if (o4 === 0 && $2d9d8c9fc2282acc$var$onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2
    return false;
}
// for collinear points p, q, r, check if point q lies on segment pr
function $2d9d8c9fc2282acc$var$onSegment(p, q, r) {
    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function $2d9d8c9fc2282acc$var$sign(num) {
    return num > 0 ? 1 : num < 0 ? -1 : 0;
}
// check if a polygon diagonal intersects any polygon segments
function $2d9d8c9fc2282acc$var$intersectsPolygon(a, b) {
    let p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && $2d9d8c9fc2282acc$var$intersects(p, p.next, a, b)) return true;
        p = p.next;
    }while (p !== a)
    return false;
}
// check if a polygon diagonal is locally inside the polygon
function $2d9d8c9fc2282acc$var$locallyInside(a, b) {
    return $2d9d8c9fc2282acc$var$area(a.prev, a, a.next) < 0 ? $2d9d8c9fc2282acc$var$area(a, b, a.next) >= 0 && $2d9d8c9fc2282acc$var$area(a, a.prev, b) >= 0 : $2d9d8c9fc2282acc$var$area(a, b, a.prev) < 0 || $2d9d8c9fc2282acc$var$area(a, a.next, b) < 0;
}
// check if the middle point of a polygon diagonal is inside the polygon
function $2d9d8c9fc2282acc$var$middleInside(a, b) {
    let p = a, inside = false;
    const px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
    do {
        if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;
        p = p.next;
    }while (p !== a)
    return inside;
}
// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function $2d9d8c9fc2282acc$var$splitPolygon(a, b) {
    const a2 = new $2d9d8c9fc2282acc$var$Node(a.i, a.x, a.y), b2 = new $2d9d8c9fc2282acc$var$Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
    a.next = b;
    b.prev = a;
    a2.next = an;
    an.prev = a2;
    b2.next = a2;
    a2.prev = b2;
    bp.next = b2;
    b2.prev = bp;
    return b2;
}
// create a node and optionally link it with previous one (in a circular doubly linked list)
function $2d9d8c9fc2282acc$var$insertNode(i214, x, y, last) {
    const p = new $2d9d8c9fc2282acc$var$Node(i214, x, y);
    if (!last) {
        p.prev = p;
        p.next = p;
    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}
function $2d9d8c9fc2282acc$var$removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;
    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}
function $2d9d8c9fc2282acc$var$Node(i215, x, y) {
    // vertex index in coordinates array
    this.i = i215;
    // vertex coordinates
    this.x = x;
    this.y = y;
    // previous and next vertex nodes in a polygon ring
    this.prev = null;
    this.next = null;
    // z-order curve value
    this.z = null;
    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;
    // indicates whether this is a steiner point
    this.steiner = false;
}
function $2d9d8c9fc2282acc$var$signedArea(data, start, end, dim) {
    let sum = 0;
    for(let i216 = start, j = end - dim; i216 < end; i216 += dim){
        sum += (data[j] - data[i216]) * (data[i216 + 1] + data[j + 1]);
        j = i216;
    }
    return sum;
}
class $2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8 {
    // calculate area of the contour polygon
    static area(contour) {
        const n = contour.length;
        let a = 0;
        for(let p = n - 1, q = 0; q < n; p = q++)a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
        return a * 0.5;
    }
    static isClockWise(pts) {
        return $2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.area(pts) < 0;
    }
    static triangulateShape(contour, holes) {
        const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
        const holeIndices = []; // array of hole indices
        const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
        $2d9d8c9fc2282acc$var$removeDupEndPts(contour);
        $2d9d8c9fc2282acc$var$addContour(vertices, contour);
        //
        let holeIndex = contour.length;
        holes.forEach($2d9d8c9fc2282acc$var$removeDupEndPts);
        for(let i218 = 0; i218 < holes.length; i218++){
            holeIndices.push(holeIndex);
            holeIndex += holes[i218].length;
            $2d9d8c9fc2282acc$var$addContour(vertices, holes[i218]);
        }
        //
        const triangles = $2d9d8c9fc2282acc$var$Earcut.triangulate(vertices, holeIndices);
        //
        for(let i217 = 0; i217 < triangles.length; i217 += 3)faces.push(triangles.slice(i217, i217 + 3));
        return faces;
    }
}
function $2d9d8c9fc2282acc$var$removeDupEndPts(points) {
    const l = points.length;
    if (l > 2 && points[l - 1].equals(points[0])) points.pop();
}
function $2d9d8c9fc2282acc$var$addContour(vertices, contour) {
    for(let i219 = 0; i219 < contour.length; i219++){
        vertices.push(contour[i219].x);
        vertices.push(contour[i219].y);
    }
}
/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */ class $2d9d8c9fc2282acc$export$91836d01b9f75a58 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(shapes = new $2d9d8c9fc2282acc$export$6428a7f2611ef1fa([
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0.5, 0.5),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(-0.5, 0.5),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(-0.5, -0.5),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0.5, -0.5)
    ]), options = {
    }){
        super();
        this.type = 'ExtrudeGeometry';
        this.parameters = {
            shapes: shapes,
            options: options
        };
        shapes = Array.isArray(shapes) ? shapes : [
            shapes
        ];
        const scope = this;
        const verticesArray = [];
        const uvArray = [];
        for(let i220 = 0, l = shapes.length; i220 < l; i220++){
            const shape = shapes[i220];
            addShape(shape);
        }
        // build geometry
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(verticesArray, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvArray, 2));
        this.computeVertexNormals();
        // functions
        function addShape(shape) {
            const placeholder = [];
            // options
            const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
            const steps = options.steps !== undefined ? options.steps : 1;
            let depth = options.depth !== undefined ? options.depth : 1;
            let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
            let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
            let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
            let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
            let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
            const extrudePath = options.extrudePath;
            const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : $2d9d8c9fc2282acc$var$WorldUVGenerator;
            // deprecated options
            if (options.amount !== undefined) {
                console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');
                depth = options.amount;
            }
            //
            let extrudePts, extrudeByPath = false;
            let splineTube, binormal, normal, position2;
            if (extrudePath) {
                extrudePts = extrudePath.getSpacedPoints(steps);
                extrudeByPath = true;
                bevelEnabled = false; // bevels not supported for path extrusion
                // SETUP TNB variables
                // TODO1 - have a .isClosed in spline?
                splineTube = extrudePath.computeFrenetFrames(steps, false);
                // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
                binormal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
                normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
                position2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            }
            // Safeguards if bevels are not enabled
            if (!bevelEnabled) {
                bevelSegments = 0;
                bevelThickness = 0;
                bevelSize = 0;
                bevelOffset = 0;
            }
            // Variables initialization
            const shapePoints = shape.extractPoints(curveSegments);
            let vertices = shapePoints.shape;
            const holes = shapePoints.holes;
            const reverse = !$2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.isClockWise(vertices);
            if (reverse) {
                vertices = vertices.reverse();
                // Maybe we should also check if holes are in the opposite direction, just to be safe ...
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    if ($2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.isClockWise(ahole)) holes[h] = ahole.reverse();
                }
            }
            const faces = $2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.triangulateShape(vertices, holes);
            /* Vertices */ const contour1 = vertices; // vertices has all points but contour has only points of circumference
            for(let h2 = 0, hl2 = holes.length; h2 < hl2; h2++){
                const ahole = holes[h2];
                vertices = vertices.concat(ahole);
            }
            function scalePt2(pt, vec, size) {
                if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');
                return vec.clone().multiplyScalar(size).add(pt);
            }
            const vlen = vertices.length, flen = faces.length;
            // Find directions for point movement
            function getBevelVec(inPt, inPrev, inNext) {
                // computes for inPt the corresponding point inPt' on a new contour
                //   shifted by 1 unit (length of normalized vector) to the left
                // if we walk along contour clockwise, this new contour is outside the old one
                //
                // inPt' is the intersection of the two lines parallel to the two
                //  adjacent edges of inPt at a distance of 1 unit on the left side.
                let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
                // good reading for geometry algorithms (here: line-line intersection)
                // http://geomalgorithms.com/a05-_intersect-1.html
                const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
                const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
                const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                // check for collinear edges
                const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
                if (Math.abs(collinear0) > Number.EPSILON) {
                    // not collinear
                    // length of vectors for normalizing
                    const v_prev_len = Math.sqrt(v_prev_lensq);
                    const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
                    // shift adjacent points by unit vectors to the left
                    const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
                    const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
                    const ptNextShift_x = inNext.x - v_next_y / v_next_len;
                    const ptNextShift_y = inNext.y + v_next_x / v_next_len;
                    // scaling factor for v_prev to intersection point
                    const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
                    // vector from inPt to intersection point
                    v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
                    v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
                    // Don't normalize!, otherwise sharp corners become ugly
                    //  but prevent crazy spikes
                    const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
                    if (v_trans_lensq <= 2) return new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(v_trans_x, v_trans_y);
                    else shrink_by = Math.sqrt(v_trans_lensq / 2);
                } else {
                    // handle special case of collinear edges
                    let direction_eq = false; // assumes: opposite
                    if (v_prev_x > Number.EPSILON) {
                        if (v_next_x > Number.EPSILON) direction_eq = true;
                    } else {
                        if (v_prev_x < -Number.EPSILON) {
                            if (v_next_x < -Number.EPSILON) direction_eq = true;
                        } else if (Math.sign(v_prev_y) === Math.sign(v_next_y)) direction_eq = true;
                    }
                    if (direction_eq) {
                        // console.log("Warning: lines are a straight sequence");
                        v_trans_x = -v_prev_y;
                        v_trans_y = v_prev_x;
                        shrink_by = Math.sqrt(v_prev_lensq);
                    } else {
                        // console.log("Warning: lines are a straight spike");
                        v_trans_x = v_prev_x;
                        v_trans_y = v_prev_y;
                        shrink_by = Math.sqrt(v_prev_lensq / 2);
                    }
                }
                return new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(v_trans_x / shrink_by, v_trans_y / shrink_by);
            }
            const contourMovements = [];
            for(let i223 = 0, il = contour1.length, j1 = il - 1, k1 = i223 + 1; i223 < il; i223++, j1++, k1++){
                if (j1 === il) j1 = 0;
                if (k1 === il) k1 = 0;
                //  (j)---(i)---(k)
                // console.log('i,j,k', i, j , k)
                contourMovements[i223] = getBevelVec(contour1[i223], contour1[j1], contour1[k1]);
            }
            const holesMovements = [];
            let oneHoleMovements, verticesMovements = contourMovements.concat();
            for(let h1 = 0, hl1 = holes.length; h1 < hl1; h1++){
                const ahole = holes[h1];
                oneHoleMovements = [];
                for(let i224 = 0, il = ahole.length, j = il - 1, k = i224 + 1; i224 < il; i224++, j++, k++){
                    if (j === il) j = 0;
                    if (k === il) k = 0;
                    //  (j)---(i)---(k)
                    oneHoleMovements[i224] = getBevelVec(ahole[i224], ahole[j], ahole[k]);
                }
                holesMovements.push(oneHoleMovements);
                verticesMovements = verticesMovements.concat(oneHoleMovements);
            }
            // Loop bevelSegments, 1 for the front, 1 for the back
            for(let b2 = 0; b2 < bevelSegments; b2++){
                //for ( b = bevelSegments; b > 0; b -- ) {
                const t = b2 / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i225 = 0, il = contour1.length; i225 < il; i225++){
                    const vert = scalePt2(contour1[i225], contourMovements[i225], bs);
                    v(vert.x, vert.y, -z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i226 = 0, il = ahole.length; i226 < il; i226++){
                        const vert = scalePt2(ahole[i226], oneHoleMovements[i226], bs);
                        v(vert.x, vert.y, -z);
                    }
                }
            }
            const bs = bevelSize + bevelOffset;
            // Back facing vertices
            for(let i221 = 0; i221 < vlen; i221++){
                const vert = bevelEnabled ? scalePt2(vertices[i221], verticesMovements[i221], bs) : vertices[i221];
                if (!extrudeByPath) v(vert.x, vert.y, 0);
                else {
                    // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
                    normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[0]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add stepped vertices...
            // Including front facing vertices
            for(let s1 = 1; s1 <= steps; s1++)for(let i222 = 0; i222 < vlen; i222++){
                const vert = bevelEnabled ? scalePt2(vertices[i222], verticesMovements[i222], bs) : vertices[i222];
                if (!extrudeByPath) v(vert.x, vert.y, depth / steps * s1);
                else {
                    // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
                    normal.copy(splineTube.normals[s1]).multiplyScalar(vert.x);
                    binormal.copy(splineTube.binormals[s1]).multiplyScalar(vert.y);
                    position2.copy(extrudePts[s1]).add(normal).add(binormal);
                    v(position2.x, position2.y, position2.z);
                }
            }
            // Add bevel segments planes
            //for ( b = 1; b <= bevelSegments; b ++ ) {
            for(let b1 = bevelSegments - 1; b1 >= 0; b1--){
                const t = b1 / bevelSegments;
                const z = bevelThickness * Math.cos(t * Math.PI / 2);
                const bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset;
                // contract shape
                for(let i227 = 0, il = contour1.length; i227 < il; i227++){
                    const vert = scalePt2(contour1[i227], contourMovements[i227], bs);
                    v(vert.x, vert.y, depth + z);
                }
                // expand holes
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    oneHoleMovements = holesMovements[h];
                    for(let i228 = 0, il = ahole.length; i228 < il; i228++){
                        const vert = scalePt2(ahole[i228], oneHoleMovements[i228], bs);
                        if (!extrudeByPath) v(vert.x, vert.y, depth + z);
                        else v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);
                    }
                }
            }
            /* Faces */ // Top and bottom faces
            buildLidFaces();
            // Sides faces
            buildSideFaces();
            /////  Internal functions
            function buildLidFaces() {
                const start = verticesArray.length / 3;
                if (bevelEnabled) {
                    let layer = 0; // steps + 1
                    let offset = vlen * layer;
                    // Bottom faces
                    for(let i230 = 0; i230 < flen; i230++){
                        const face = faces[i230];
                        f3(face[2] + offset, face[1] + offset, face[0] + offset);
                    }
                    layer = steps + bevelSegments * 2;
                    offset = vlen * layer;
                    // Top faces
                    for(let i229 = 0; i229 < flen; i229++){
                        const face = faces[i229];
                        f3(face[0] + offset, face[1] + offset, face[2] + offset);
                    }
                } else {
                    // Bottom faces
                    for(let i232 = 0; i232 < flen; i232++){
                        const face = faces[i232];
                        f3(face[2], face[1], face[0]);
                    }
                    // Top faces
                    for(let i231 = 0; i231 < flen; i231++){
                        const face = faces[i231];
                        f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
                    }
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 0);
            }
            // Create faces for the z-sides of the shape
            function buildSideFaces() {
                const start = verticesArray.length / 3;
                let layeroffset = 0;
                sidewalls(contour1, layeroffset);
                layeroffset += contour1.length;
                for(let h = 0, hl = holes.length; h < hl; h++){
                    const ahole = holes[h];
                    sidewalls(ahole, layeroffset);
                    //, true
                    layeroffset += ahole.length;
                }
                scope.addGroup(start, verticesArray.length / 3 - start, 1);
            }
            function sidewalls(contour, layeroffset) {
                let i233 = contour.length;
                while(--i233 >= 0){
                    const j = i233;
                    let k = i233 - 1;
                    if (k < 0) k = contour.length - 1;
                    //console.log('b', i,j, i-1, k,vertices.length);
                    for(let s = 0, sl = steps + bevelSegments * 2; s < sl; s++){
                        const slen1 = vlen * s;
                        const slen2 = vlen * (s + 1);
                        const a = layeroffset + j + slen1, b = layeroffset + k + slen1, c = layeroffset + k + slen2, d = layeroffset + j + slen2;
                        f4(a, b, c, d);
                    }
                }
            }
            function v(x, y, z) {
                placeholder.push(x);
                placeholder.push(y);
                placeholder.push(z);
            }
            function f3(a, b, c) {
                addVertex(a);
                addVertex(b);
                addVertex(c);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[2]);
            }
            function f4(a, b, c, d) {
                addVertex(a);
                addVertex(b);
                addVertex(d);
                addVertex(b);
                addVertex(c);
                addVertex(d);
                const nextIndex = verticesArray.length / 3;
                const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                addUV(uvs[0]);
                addUV(uvs[1]);
                addUV(uvs[3]);
                addUV(uvs[1]);
                addUV(uvs[2]);
                addUV(uvs[3]);
            }
            function addVertex(index) {
                verticesArray.push(placeholder[index * 3 + 0]);
                verticesArray.push(placeholder[index * 3 + 1]);
                verticesArray.push(placeholder[index * 3 + 2]);
            }
            function addUV(vector2) {
                uvArray.push(vector2.x);
                uvArray.push(vector2.y);
            }
        }
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        const options = this.parameters.options;
        return $2d9d8c9fc2282acc$var$toJSON$1(shapes, options, data);
    }
    static fromJSON(data, shapes) {
        const geometryShapes = [];
        for(let j = 0, jl = data.shapes.length; j < jl; j++){
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
        }
        const extrudePath = data.options.extrudePath;
        if (extrudePath !== undefined) data.options.extrudePath = new $2d9d8c9fc2282acc$var$Curves[extrudePath.type]().fromJSON(extrudePath);
        return new $2d9d8c9fc2282acc$export$91836d01b9f75a58(geometryShapes, data.options);
    }
}
const $2d9d8c9fc2282acc$var$WorldUVGenerator = {
    generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        return [
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(a_x, a_y),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(b_x, b_y),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(c_x, c_y)
        ];
    },
    generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
        const a_x = vertices[indexA * 3];
        const a_y = vertices[indexA * 3 + 1];
        const a_z = vertices[indexA * 3 + 2];
        const b_x = vertices[indexB * 3];
        const b_y = vertices[indexB * 3 + 1];
        const b_z = vertices[indexB * 3 + 2];
        const c_x = vertices[indexC * 3];
        const c_y = vertices[indexC * 3 + 1];
        const c_z = vertices[indexC * 3 + 2];
        const d_x = vertices[indexD * 3];
        const d_y = vertices[indexD * 3 + 1];
        const d_z = vertices[indexD * 3 + 2];
        if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) return [
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(a_x, 1 - a_z),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(b_x, 1 - b_z),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(c_x, 1 - c_z),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(d_x, 1 - d_z)
        ];
        else return [
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(a_y, 1 - a_z),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(b_y, 1 - b_z),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(c_y, 1 - c_z),
            new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(d_y, 1 - d_z)
        ];
    }
};
function $2d9d8c9fc2282acc$var$toJSON$1(shapes, options, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i234 = 0, l = shapes.length; i234 < l; i234++){
        const shape = shapes[i234];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();
    return data;
}
class $2d9d8c9fc2282acc$export$731fd4feef063ea2 extends $2d9d8c9fc2282acc$export$38789b531813345c {
    constructor(radius = 1, detail = 0){
        const t = (1 + Math.sqrt(5)) / 2;
        const vertices = [
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            0,
            0,
            -1,
            t,
            0,
            1,
            t,
            0,
            -1,
            -t,
            0,
            1,
            -t,
            t,
            0,
            -1,
            t,
            0,
            1,
            -t,
            0,
            -1,
            -t,
            0,
            1
        ];
        const indices = [
            0,
            11,
            5,
            0,
            5,
            1,
            0,
            1,
            7,
            0,
            7,
            10,
            0,
            10,
            11,
            1,
            5,
            9,
            5,
            11,
            4,
            11,
            10,
            2,
            10,
            7,
            6,
            7,
            1,
            8,
            3,
            9,
            4,
            3,
            4,
            2,
            3,
            2,
            6,
            3,
            6,
            8,
            3,
            8,
            9,
            4,
            9,
            5,
            2,
            4,
            11,
            6,
            2,
            10,
            8,
            6,
            7,
            9,
            8,
            1
        ];
        super(vertices, indices, radius, detail);
        this.type = 'IcosahedronGeometry';
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$731fd4feef063ea2(data.radius, data.detail);
    }
}
class $2d9d8c9fc2282acc$export$dc3e1273c1dd9240 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(points = [
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0, 0.5),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0.5, 0),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0, -0.5)
    ], segments = 12, phiStart = 0, phiLength = Math.PI * 2){
        super();
        this.type = 'LatheGeometry';
        this.parameters = {
            points: points,
            segments: segments,
            phiStart: phiStart,
            phiLength: phiLength
        };
        segments = Math.floor(segments);
        // clamp phiLength so it's in range of [ 0, 2PI ]
        phiLength = $2d9d8c9fc2282acc$var$clamp(phiLength, 0, Math.PI * 2);
        // buffers
        const indices = [];
        const vertices = [];
        const uvs = [];
        const initNormals = [];
        const normals = [];
        // helper variables
        const inverseSegments = 1 / segments;
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const uv = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const curNormal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const prevNormal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        let dx = 0;
        let dy = 0;
        // pre-compute normals for initial "meridian"
        for(let j = 0; j <= points.length - 1; j++)switch(j){
            case 0:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1;
                normal.y = -dx;
                normal.z = dy * 0;
                prevNormal.copy(normal);
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                break;
            case points.length - 1:
                initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
                break;
            default:
                dx = points[j + 1].x - points[j].x;
                dy = points[j + 1].y - points[j].y;
                normal.x = dy * 1;
                normal.y = -dx;
                normal.z = dy * 0;
                curNormal.copy(normal);
                normal.x += prevNormal.x;
                normal.y += prevNormal.y;
                normal.z += prevNormal.z;
                normal.normalize();
                initNormals.push(normal.x, normal.y, normal.z);
                prevNormal.copy(curNormal);
        }
        // generate vertices, uvs and normals
        for(let i236 = 0; i236 <= segments; i236++){
            const phi = phiStart + i236 * inverseSegments * phiLength;
            const sin = Math.sin(phi);
            const cos = Math.cos(phi);
            for(let j = 0; j <= points.length - 1; j++){
                // vertex
                vertex.x = points[j].x * sin;
                vertex.y = points[j].y;
                vertex.z = points[j].x * cos;
                vertices.push(vertex.x, vertex.y, vertex.z);
                // uv
                uv.x = i236 / segments;
                uv.y = j / (points.length - 1);
                uvs.push(uv.x, uv.y);
                // normal
                const x = initNormals[3 * j + 0] * sin;
                const y = initNormals[3 * j + 1];
                const z = initNormals[3 * j + 0] * cos;
                normals.push(x, y, z);
            }
        }
        // indices
        for(let i235 = 0; i235 < segments; i235++)for(let j2 = 0; j2 < points.length - 1; j2++){
            const base = j2 + i235 * points.length;
            const a = base;
            const b = base + points.length;
            const c = base + points.length + 1;
            const d = base + 1;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$dc3e1273c1dd9240(data.points, data.segments, data.phiStart, data.phiLength);
    }
}
class $2d9d8c9fc2282acc$export$8e05fc91596f4752 extends $2d9d8c9fc2282acc$export$38789b531813345c {
    constructor(radius = 1, detail = 0){
        const vertices = [
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1,
            0,
            0,
            0,
            1,
            0,
            0,
            -1
        ];
        const indices = [
            0,
            2,
            4,
            0,
            4,
            3,
            0,
            3,
            5,
            0,
            5,
            2,
            1,
            2,
            5,
            1,
            5,
            3,
            1,
            3,
            4,
            1,
            4,
            2
        ];
        super(vertices, indices, radius, detail);
        this.type = 'OctahedronGeometry';
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$8e05fc91596f4752(data.radius, data.detail);
    }
}
class $2d9d8c9fc2282acc$export$ee8b85b34b7d9cad extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2){
        super();
        this.type = 'RingGeometry';
        this.parameters = {
            innerRadius: innerRadius,
            outerRadius: outerRadius,
            thetaSegments: thetaSegments,
            phiSegments: phiSegments,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        thetaSegments = Math.max(3, thetaSegments);
        phiSegments = Math.max(1, phiSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // some helper variables
        let radius = innerRadius;
        const radiusStep = (outerRadius - innerRadius) / phiSegments;
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const uv = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        // generate vertices, normals and uvs
        for(let j = 0; j <= phiSegments; j++){
            for(let i237 = 0; i237 <= thetaSegments; i237++){
                // values are generate from the inside of the ring to the outside
                const segment = thetaStart + i237 / thetaSegments * thetaLength;
                // vertex
                vertex.x = radius * Math.cos(segment);
                vertex.y = radius * Math.sin(segment);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normals.push(0, 0, 1);
                // uv
                uv.x = (vertex.x / outerRadius + 1) / 2;
                uv.y = (vertex.y / outerRadius + 1) / 2;
                uvs.push(uv.x, uv.y);
            }
            // increase the radius for next row of vertices
            radius += radiusStep;
        }
        // indices
        for(let j3 = 0; j3 < phiSegments; j3++){
            const thetaSegmentLevel = j3 * (thetaSegments + 1);
            for(let i238 = 0; i238 < thetaSegments; i238++){
                const segment = i238 + thetaSegmentLevel;
                const a = segment;
                const b = segment + thetaSegments + 1;
                const c = segment + thetaSegments + 2;
                const d = segment + 1;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$ee8b85b34b7d9cad(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
    }
}
class $2d9d8c9fc2282acc$export$233afc324766bed8 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(shapes = new $2d9d8c9fc2282acc$export$6428a7f2611ef1fa([
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0, 0.5),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(-0.5, -0.5),
        new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(0.5, -0.5)
    ]), curveSegments = 12){
        super();
        this.type = 'ShapeGeometry';
        this.parameters = {
            shapes: shapes,
            curveSegments: curveSegments
        };
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        let groupStart = 0;
        let groupCount = 0;
        // allow single and array values for "shapes" parameter
        if (Array.isArray(shapes) === false) addShape(shapes);
        else for(let i239 = 0; i239 < shapes.length; i239++){
            addShape(shapes[i239]);
            this.addGroup(groupStart, groupCount, i239); // enables MultiMaterial support
            groupStart += groupCount;
            groupCount = 0;
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
        // helper functions
        function addShape(shape) {
            const indexOffset = vertices.length / 3;
            const points = shape.extractPoints(curveSegments);
            let shapeVertices = points.shape;
            const shapeHoles = points.holes;
            // check direction of vertices
            if ($2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.isClockWise(shapeVertices) === false) shapeVertices = shapeVertices.reverse();
            for(let i243 = 0, l = shapeHoles.length; i243 < l; i243++){
                const shapeHole = shapeHoles[i243];
                if ($2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.isClockWise(shapeHole) === true) shapeHoles[i243] = shapeHole.reverse();
            }
            const faces = $2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.triangulateShape(shapeVertices, shapeHoles);
            // join vertices of inner and outer paths to a single array
            for(let i240 = 0, l3 = shapeHoles.length; i240 < l3; i240++){
                const shapeHole = shapeHoles[i240];
                shapeVertices = shapeVertices.concat(shapeHole);
            }
            // vertices, normals, uvs
            for(let i241 = 0, l4 = shapeVertices.length; i241 < l4; i241++){
                const vertex = shapeVertices[i241];
                vertices.push(vertex.x, vertex.y, 0);
                normals.push(0, 0, 1);
                uvs.push(vertex.x, vertex.y); // world uvs
            }
            // incides
            for(let i242 = 0, l5 = faces.length; i242 < l5; i242++){
                const face = faces[i242];
                const a = face[0] + indexOffset;
                const b = face[1] + indexOffset;
                const c = face[2] + indexOffset;
                indices.push(a, b, c);
                groupCount += 3;
            }
        }
    }
    toJSON() {
        const data = super.toJSON();
        const shapes = this.parameters.shapes;
        return $2d9d8c9fc2282acc$var$toJSON(shapes, data);
    }
    static fromJSON(data, shapes) {
        const geometryShapes = [];
        for(let j = 0, jl = data.shapes.length; j < jl; j++){
            const shape = shapes[data.shapes[j]];
            geometryShapes.push(shape);
        }
        return new $2d9d8c9fc2282acc$export$233afc324766bed8(geometryShapes, data.curveSegments);
    }
}
function $2d9d8c9fc2282acc$var$toJSON(shapes, data) {
    data.shapes = [];
    if (Array.isArray(shapes)) for(let i244 = 0, l = shapes.length; i244 < l; i244++){
        const shape = shapes[i244];
        data.shapes.push(shape.uuid);
    }
    else data.shapes.push(shapes.uuid);
    return data;
}
class $2d9d8c9fc2282acc$export$d5d06a966fec4192 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI){
        super();
        this.type = 'SphereGeometry';
        this.parameters = {
            radius: radius,
            widthSegments: widthSegments,
            heightSegments: heightSegments,
            phiStart: phiStart,
            phiLength: phiLength,
            thetaStart: thetaStart,
            thetaLength: thetaLength
        };
        widthSegments = Math.max(3, Math.floor(widthSegments));
        heightSegments = Math.max(2, Math.floor(heightSegments));
        const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
        let index = 0;
        const grid = [];
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // generate vertices, normals and uvs
        for(let iy = 0; iy <= heightSegments; iy++){
            const verticesRow = [];
            const v = iy / heightSegments;
            // special case for the poles
            let uOffset = 0;
            if (iy == 0 && thetaStart == 0) uOffset = 0.5 / widthSegments;
            else if (iy == heightSegments && thetaEnd == Math.PI) uOffset = -0.5 / widthSegments;
            for(let ix = 0; ix <= widthSegments; ix++){
                const u = ix / widthSegments;
                // vertex
                vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
                vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal
                normal.copy(vertex).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(u + uOffset, 1 - v);
                verticesRow.push(index++);
            }
            grid.push(verticesRow);
        }
        // indices
        for(let iy3 = 0; iy3 < heightSegments; iy3++)for(let ix = 0; ix < widthSegments; ix++){
            const a = grid[iy3][ix + 1];
            const b = grid[iy3][ix];
            const c = grid[iy3 + 1][ix];
            const d = grid[iy3 + 1][ix + 1];
            if (iy3 !== 0 || thetaStart > 0) indices.push(a, b, d);
            if (iy3 !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$d5d06a966fec4192(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
    }
}
class $2d9d8c9fc2282acc$export$369e08f62a796c65 extends $2d9d8c9fc2282acc$export$38789b531813345c {
    constructor(radius = 1, detail = 0){
        const vertices = [
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            1,
            -1,
            1,
            -1,
            -1
        ];
        const indices = [
            2,
            1,
            0,
            0,
            3,
            2,
            1,
            3,
            0,
            2,
            3,
            1
        ];
        super(vertices, indices, radius, detail);
        this.type = 'TetrahedronGeometry';
        this.parameters = {
            radius: radius,
            detail: detail
        };
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$369e08f62a796c65(data.radius, data.detail);
    }
}
class $2d9d8c9fc2282acc$export$19d55f905fa4f2cb extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2){
        super();
        this.type = 'TorusGeometry';
        this.parameters = {
            radius: radius,
            tube: tube,
            radialSegments: radialSegments,
            tubularSegments: tubularSegments,
            arc: arc
        };
        radialSegments = Math.floor(radialSegments);
        tubularSegments = Math.floor(tubularSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const center = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        // generate vertices, normals and uvs
        for(let j = 0; j <= radialSegments; j++)for(let i246 = 0; i246 <= tubularSegments; i246++){
            const u = i246 / tubularSegments * arc;
            const v = j / radialSegments * Math.PI * 2;
            // vertex
            vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);
            vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);
            vertex.z = tube * Math.sin(v);
            vertices.push(vertex.x, vertex.y, vertex.z);
            // normal
            center.x = radius * Math.cos(u);
            center.y = radius * Math.sin(u);
            normal.subVectors(vertex, center).normalize();
            normals.push(normal.x, normal.y, normal.z);
            // uv
            uvs.push(i246 / tubularSegments);
            uvs.push(j / radialSegments);
        }
        // generate indices
        for(let j4 = 1; j4 <= radialSegments; j4++)for(let i245 = 1; i245 <= tubularSegments; i245++){
            // indices
            const a = (tubularSegments + 1) * j4 + i245 - 1;
            const b = (tubularSegments + 1) * (j4 - 1) + i245 - 1;
            const c = (tubularSegments + 1) * (j4 - 1) + i245;
            const d = (tubularSegments + 1) * j4 + i245;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$19d55f905fa4f2cb(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
    }
}
class $2d9d8c9fc2282acc$export$2b32466f4274fe5c extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(radius2 = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p1 = 2, q1 = 3){
        super();
        this.type = 'TorusKnotGeometry';
        this.parameters = {
            radius: radius2,
            tube: tube,
            tubularSegments: tubularSegments,
            radialSegments: radialSegments,
            p: p1,
            q: q1
        };
        tubularSegments = Math.floor(tubularSegments);
        radialSegments = Math.floor(radialSegments);
        // buffers
        const indices = [];
        const vertices = [];
        const normals = [];
        const uvs = [];
        // helper variables
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const P1 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const P2 = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const B = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const T = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const N = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        // generate vertices, normals and uvs
        for(let i248 = 0; i248 <= tubularSegments; ++i248){
            // the radian "u" is used to calculate the position on the torus curve of the current tubular segement
            const u = i248 / tubularSegments * p1 * Math.PI * 2;
            // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
            // these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
            calculatePositionOnCurve(u, p1, q1, radius2, P1);
            calculatePositionOnCurve(u + 0.01, p1, q1, radius2, P2);
            // calculate orthonormal basis
            T.subVectors(P2, P1);
            N.addVectors(P2, P1);
            B.crossVectors(T, N);
            N.crossVectors(B, T);
            // normalize B, N. T can be ignored, we don't use it
            B.normalize();
            N.normalize();
            for(let j = 0; j <= radialSegments; ++j){
                // now calculate the vertices. they are nothing more than an extrusion of the torus curve.
                // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
                const v = j / radialSegments * Math.PI * 2;
                const cx = -tube * Math.cos(v);
                const cy = tube * Math.sin(v);
                // now calculate the final vertex position.
                // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
                vertex.x = P1.x + (cx * N.x + cy * B.x);
                vertex.y = P1.y + (cx * N.y + cy * B.y);
                vertex.z = P1.z + (cx * N.z + cy * B.z);
                vertices.push(vertex.x, vertex.y, vertex.z);
                // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
                normal.subVectors(vertex, P1).normalize();
                normals.push(normal.x, normal.y, normal.z);
                // uv
                uvs.push(i248 / tubularSegments);
                uvs.push(j / radialSegments);
            }
        }
        // generate indices
        for(let j = 1; j <= tubularSegments; j++)for(let i247 = 1; i247 <= radialSegments; i247++){
            // indices
            const a = (radialSegments + 1) * (j - 1) + (i247 - 1);
            const b = (radialSegments + 1) * j + (i247 - 1);
            const c = (radialSegments + 1) * j + i247;
            const d = (radialSegments + 1) * (j - 1) + i247;
            // faces
            indices.push(a, b, d);
            indices.push(b, c, d);
        }
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
        // this function calculates the current position on the torus curve
        function calculatePositionOnCurve(u, p, q, radius, position) {
            const cu = Math.cos(u);
            const su = Math.sin(u);
            const quOverP = q / p * u;
            const cs = Math.cos(quOverP);
            position.x = radius * (2 + cs) * 0.5 * cu;
            position.y = radius * (2 + cs) * su * 0.5;
            position.z = radius * Math.sin(quOverP) * 0.5;
        }
    }
    static fromJSON(data) {
        return new $2d9d8c9fc2282acc$export$2b32466f4274fe5c(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
    }
}
class $2d9d8c9fc2282acc$export$d97a193ce44e691b extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(path = new $2d9d8c9fc2282acc$export$bf3f4c7e459f90fc(new $2d9d8c9fc2282acc$export$64b5c384219d3699(-1, -1, 0), new $2d9d8c9fc2282acc$export$64b5c384219d3699(-1, 1, 0), new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false){
        super();
        this.type = 'TubeGeometry';
        this.parameters = {
            path: path,
            tubularSegments: tubularSegments,
            radius: radius,
            radialSegments: radialSegments,
            closed: closed
        };
        const frames = path.computeFrenetFrames(tubularSegments, closed);
        // expose internals
        this.tangents = frames.tangents;
        this.normals = frames.normals;
        this.binormals = frames.binormals;
        // helper variables
        const vertex = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const uv = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        let P = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        // buffer
        const vertices = [];
        const normals = [];
        const uvs = [];
        const indices = [];
        // create buffer data
        generateBufferData();
        // build geometry
        this.setIndex(indices);
        this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        this.setAttribute('normal', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(normals, 3));
        this.setAttribute('uv', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvs, 2));
        // functions
        function generateBufferData() {
            for(let i249 = 0; i249 < tubularSegments; i249++)generateSegment(i249);
            // if the geometry is not closed, generate the last row of vertices and normals
            // at the regular position on the given path
            //
            // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
            generateSegment(closed === false ? tubularSegments : 0);
            // uvs are generated in a separate function.
            // this makes it easy compute correct values for closed geometries
            generateUVs();
            // finally create faces
            generateIndices();
        }
        function generateSegment(i250) {
            // we use getPointAt to sample evenly distributed points from the given path
            P = path.getPointAt(i250 / tubularSegments, P);
            // retrieve corresponding normal and binormal
            const N = frames.normals[i250];
            const B = frames.binormals[i250];
            // generate normals and vertices for the current segment
            for(let j = 0; j <= radialSegments; j++){
                const v = j / radialSegments * Math.PI * 2;
                const sin = Math.sin(v);
                const cos = -Math.cos(v);
                // normal
                normal.x = cos * N.x + sin * B.x;
                normal.y = cos * N.y + sin * B.y;
                normal.z = cos * N.z + sin * B.z;
                normal.normalize();
                normals.push(normal.x, normal.y, normal.z);
                // vertex
                vertex.x = P.x + radius * normal.x;
                vertex.y = P.y + radius * normal.y;
                vertex.z = P.z + radius * normal.z;
                vertices.push(vertex.x, vertex.y, vertex.z);
            }
        }
        function generateIndices() {
            for(let j = 1; j <= tubularSegments; j++)for(let i251 = 1; i251 <= radialSegments; i251++){
                const a = (radialSegments + 1) * (j - 1) + (i251 - 1);
                const b = (radialSegments + 1) * j + (i251 - 1);
                const c = (radialSegments + 1) * j + i251;
                const d = (radialSegments + 1) * (j - 1) + i251;
                // faces
                indices.push(a, b, d);
                indices.push(b, c, d);
            }
        }
        function generateUVs() {
            for(let i252 = 0; i252 <= tubularSegments; i252++)for(let j = 0; j <= radialSegments; j++){
                uv.x = i252 / tubularSegments;
                uv.y = j / radialSegments;
                uvs.push(uv.x, uv.y);
            }
        }
    }
    toJSON() {
        const data = super.toJSON();
        data.path = this.parameters.path.toJSON();
        return data;
    }
    static fromJSON(data) {
        // This only works for built-in curves (e.g. CatmullRomCurve3).
        // User defined curves or instances of CurvePath will not be deserialized.
        return new $2d9d8c9fc2282acc$export$d97a193ce44e691b(new $2d9d8c9fc2282acc$var$Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
    }
}
class $2d9d8c9fc2282acc$export$4b739da06d24892b extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(geometry = null){
        super();
        this.type = 'WireframeGeometry';
        this.parameters = {
            geometry: geometry
        };
        if (geometry !== null) {
            // buffer
            const vertices = [];
            const edges = new Set();
            // helper variables
            const start = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            const end = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            if (geometry.index !== null) {
                // indexed BufferGeometry
                const position = geometry.attributes.position;
                const indices = geometry.index;
                let groups = geometry.groups;
                if (groups.length === 0) groups = [
                    {
                        start: 0,
                        count: indices.count,
                        materialIndex: 0
                    }
                ];
                // create a data structure that contains all eges without duplicates
                for(let o = 0, ol = groups.length; o < ol; ++o){
                    const group = groups[o];
                    const groupStart = group.start;
                    const groupCount = group.count;
                    for(let i253 = groupStart, l = groupStart + groupCount; i253 < l; i253 += 3)for(let j = 0; j < 3; j++){
                        const index1 = indices.getX(i253 + j);
                        const index2 = indices.getX(i253 + (j + 1) % 3);
                        start.fromBufferAttribute(position, index1);
                        end.fromBufferAttribute(position, index2);
                        if ($2d9d8c9fc2282acc$var$isUniqueEdge(start, end, edges) === true) {
                            vertices.push(start.x, start.y, start.z);
                            vertices.push(end.x, end.y, end.z);
                        }
                    }
                }
            } else {
                // non-indexed BufferGeometry
                const position = geometry.attributes.position;
                for(let i254 = 0, l = position.count / 3; i254 < l; i254++)for(let j = 0; j < 3; j++){
                    // three edges per triangle, an edge is represented as (index1, index2)
                    // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
                    const index1 = 3 * i254 + j;
                    const index2 = 3 * i254 + (j + 1) % 3;
                    start.fromBufferAttribute(position, index1);
                    end.fromBufferAttribute(position, index2);
                    if ($2d9d8c9fc2282acc$var$isUniqueEdge(start, end, edges) === true) {
                        vertices.push(start.x, start.y, start.z);
                        vertices.push(end.x, end.y, end.z);
                    }
                }
            }
            // build geometry
            this.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        }
    }
}
function $2d9d8c9fc2282acc$var$isUniqueEdge(start, end, edges) {
    const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
    const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge
    if (edges.has(hash1) === true || edges.has(hash2) === true) return false;
    else {
        edges.add(hash1, hash2);
        return true;
    }
}
var $2d9d8c9fc2282acc$var$Geometries = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BoxGeometry: $2d9d8c9fc2282acc$export$ab3456a079aa7d80,
    BoxBufferGeometry: $2d9d8c9fc2282acc$export$ab3456a079aa7d80,
    CircleGeometry: $2d9d8c9fc2282acc$export$3f74fe60decf7462,
    CircleBufferGeometry: $2d9d8c9fc2282acc$export$3f74fe60decf7462,
    ConeGeometry: $2d9d8c9fc2282acc$export$59d971120dc8b6e7,
    ConeBufferGeometry: $2d9d8c9fc2282acc$export$59d971120dc8b6e7,
    CylinderGeometry: $2d9d8c9fc2282acc$export$d4345c83207d7c68,
    CylinderBufferGeometry: $2d9d8c9fc2282acc$export$d4345c83207d7c68,
    DodecahedronGeometry: $2d9d8c9fc2282acc$export$37cd4e52cce48c4c,
    DodecahedronBufferGeometry: $2d9d8c9fc2282acc$export$37cd4e52cce48c4c,
    EdgesGeometry: $2d9d8c9fc2282acc$export$4730b1542707547f,
    ExtrudeGeometry: $2d9d8c9fc2282acc$export$91836d01b9f75a58,
    ExtrudeBufferGeometry: $2d9d8c9fc2282acc$export$91836d01b9f75a58,
    IcosahedronGeometry: $2d9d8c9fc2282acc$export$731fd4feef063ea2,
    IcosahedronBufferGeometry: $2d9d8c9fc2282acc$export$731fd4feef063ea2,
    LatheGeometry: $2d9d8c9fc2282acc$export$dc3e1273c1dd9240,
    LatheBufferGeometry: $2d9d8c9fc2282acc$export$dc3e1273c1dd9240,
    OctahedronGeometry: $2d9d8c9fc2282acc$export$8e05fc91596f4752,
    OctahedronBufferGeometry: $2d9d8c9fc2282acc$export$8e05fc91596f4752,
    PlaneGeometry: $2d9d8c9fc2282acc$export$e789a11a194ca4e0,
    PlaneBufferGeometry: $2d9d8c9fc2282acc$export$e789a11a194ca4e0,
    PolyhedronGeometry: $2d9d8c9fc2282acc$export$38789b531813345c,
    PolyhedronBufferGeometry: $2d9d8c9fc2282acc$export$38789b531813345c,
    RingGeometry: $2d9d8c9fc2282acc$export$ee8b85b34b7d9cad,
    RingBufferGeometry: $2d9d8c9fc2282acc$export$ee8b85b34b7d9cad,
    ShapeGeometry: $2d9d8c9fc2282acc$export$233afc324766bed8,
    ShapeBufferGeometry: $2d9d8c9fc2282acc$export$233afc324766bed8,
    SphereGeometry: $2d9d8c9fc2282acc$export$d5d06a966fec4192,
    SphereBufferGeometry: $2d9d8c9fc2282acc$export$d5d06a966fec4192,
    TetrahedronGeometry: $2d9d8c9fc2282acc$export$369e08f62a796c65,
    TetrahedronBufferGeometry: $2d9d8c9fc2282acc$export$369e08f62a796c65,
    TorusGeometry: $2d9d8c9fc2282acc$export$19d55f905fa4f2cb,
    TorusBufferGeometry: $2d9d8c9fc2282acc$export$19d55f905fa4f2cb,
    TorusKnotGeometry: $2d9d8c9fc2282acc$export$2b32466f4274fe5c,
    TorusKnotBufferGeometry: $2d9d8c9fc2282acc$export$2b32466f4274fe5c,
    TubeGeometry: $2d9d8c9fc2282acc$export$d97a193ce44e691b,
    TubeBufferGeometry: $2d9d8c9fc2282acc$export$d97a193ce44e691b,
    WireframeGeometry: $2d9d8c9fc2282acc$export$4b739da06d24892b
});
/**
 * parameters = {
 *  color: <THREE.Color>
 * }
 */ class $2d9d8c9fc2282acc$export$e8564da406055a3 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'ShadowMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
        this.transparent = true;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        return this;
    }
}
$2d9d8c9fc2282acc$export$e8564da406055a3.prototype.isShadowMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */ class $2d9d8c9fc2282acc$export$f2980790215acccd extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.defines = {
            'STANDARD': ''
        };
        this.type = 'MeshStandardMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215); // diffuse
        this.roughness = 1;
        this.metalness = 0;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $2d9d8c9fc2282acc$export$2852a58ebdac27b8;
        this.normalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.roughnessMap = null;
        this.metalnessMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.envMapIntensity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.flatShading = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            'STANDARD': ''
        };
        this.color.copy(source.color);
        this.roughness = source.roughness;
        this.metalness = source.metalness;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.roughnessMap = source.roughnessMap;
        this.metalnessMap = source.metalnessMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.envMapIntensity = source.envMapIntensity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        return this;
    }
}
$2d9d8c9fc2282acc$export$f2980790215acccd.prototype.isMeshStandardMaterial = true;
/**
 * parameters = {
 *  clearcoat: <float>,
 *  clearcoatMap: new THREE.Texture( <Image> ),
 *  clearcoatRoughness: <float>,
 *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),
 *  clearcoatNormalScale: <Vector2>,
 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
 *
 *  ior: <float>,
 *  reflectivity: <float>,
 *
 *  sheen: <float>,
 *  sheenColor: <Color>,
 *  sheenColorMap: new THREE.Texture( <Image> ),
 *  sheenRoughness: <float>,
 *  sheenRoughnessMap: new THREE.Texture( <Image> ),
 *
 *  transmission: <float>,
 *  transmissionMap: new THREE.Texture( <Image> ),
 *
 *  thickness: <float>,
 *  thicknessMap: new THREE.Texture( <Image> ),
 *  attenuationDistance: <float>,
 *  attenuationColor: <Color>,
 *
 *  specularIntensity: <float>,
 *  specularIntensityMap: new THREE.Texture( <Image> ),
 *  specularColor: <Color>,
 *  specularColorMap: new THREE.Texture( <Image> )
 * }
 */ class $2d9d8c9fc2282acc$export$28d04986c4269c9f extends $2d9d8c9fc2282acc$export$f2980790215acccd {
    constructor(parameters){
        super();
        this.defines = {
            'STANDARD': '',
            'PHYSICAL': ''
        };
        this.type = 'MeshPhysicalMaterial';
        this.clearcoatMap = null;
        this.clearcoatRoughness = 0;
        this.clearcoatRoughnessMap = null;
        this.clearcoatNormalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.clearcoatNormalMap = null;
        this.ior = 1.5;
        Object.defineProperty(this, 'reflectivity', {
            get: function() {
                return $2d9d8c9fc2282acc$var$clamp(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
            },
            set: function(reflectivity) {
                this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
            }
        });
        this.sheenColor = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
        this.sheenColorMap = null;
        this.sheenRoughness = 1;
        this.sheenRoughnessMap = null;
        this.transmissionMap = null;
        this.thickness = 0;
        this.thicknessMap = null;
        this.attenuationDistance = 0;
        this.attenuationColor = new $2d9d8c9fc2282acc$export$892596cec99bc70e(1, 1, 1);
        this.specularIntensity = 1;
        this.specularIntensityMap = null;
        this.specularColor = new $2d9d8c9fc2282acc$export$892596cec99bc70e(1, 1, 1);
        this.specularColorMap = null;
        this._sheen = 0;
        this._clearcoat = 0;
        this._transmission = 0;
        this.setValues(parameters);
    }
    get sheen() {
        return this._sheen;
    }
    set sheen(value) {
        if (this._sheen > 0 !== value > 0) this.version++;
        this._sheen = value;
    }
    get clearcoat() {
        return this._clearcoat;
    }
    set clearcoat(value) {
        if (this._clearcoat > 0 !== value > 0) this.version++;
        this._clearcoat = value;
    }
    get transmission() {
        return this._transmission;
    }
    set transmission(value) {
        if (this._transmission > 0 !== value > 0) this.version++;
        this._transmission = value;
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            'STANDARD': '',
            'PHYSICAL': ''
        };
        this.clearcoat = source.clearcoat;
        this.clearcoatMap = source.clearcoatMap;
        this.clearcoatRoughness = source.clearcoatRoughness;
        this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
        this.clearcoatNormalMap = source.clearcoatNormalMap;
        this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
        this.ior = source.ior;
        this.sheen = source.sheen;
        this.sheenColor.copy(source.sheenColor);
        this.sheenColorMap = source.sheenColorMap;
        this.sheenRoughness = source.sheenRoughness;
        this.sheenRoughnessMap = source.sheenRoughnessMap;
        this.transmission = source.transmission;
        this.transmissionMap = source.transmissionMap;
        this.thickness = source.thickness;
        this.thicknessMap = source.thicknessMap;
        this.attenuationDistance = source.attenuationDistance;
        this.attenuationColor.copy(source.attenuationColor);
        this.specularIntensity = source.specularIntensity;
        this.specularIntensityMap = source.specularIntensityMap;
        this.specularColor.copy(source.specularColor);
        this.specularColorMap = source.specularColorMap;
        return this;
    }
}
$2d9d8c9fc2282acc$export$28d04986c4269c9f.prototype.isMeshPhysicalMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.MultiplyOperation,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  flatShading: <bool>
 * }
 */ class $2d9d8c9fc2282acc$export$24c72f71cbaf0678 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'MeshPhongMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215); // diffuse
        this.specular = new $2d9d8c9fc2282acc$export$892596cec99bc70e(1118481);
        this.shininess = 30;
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $2d9d8c9fc2282acc$export$2852a58ebdac27b8;
        this.normalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = $2d9d8c9fc2282acc$export$e50ac29801f1774d;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.flatShading = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.specular.copy(source.specular);
        this.shininess = source.shininess;
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        this.flatShading = source.flatShading;
        return this;
    }
}
$2d9d8c9fc2282acc$export$24c72f71cbaf0678.prototype.isMeshPhongMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *
 *  map: new THREE.Texture( <Image> ),
 *  gradientMap: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */ class $2d9d8c9fc2282acc$export$df893cf97e765622 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.defines = {
            'TOON': ''
        };
        this.type = 'MeshToonMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215);
        this.map = null;
        this.gradientMap = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $2d9d8c9fc2282acc$export$2852a58ebdac27b8;
        this.normalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.gradientMap = source.gradientMap;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        return this;
    }
}
$2d9d8c9fc2282acc$export$df893cf97e765622.prototype.isMeshToonMaterial = true;
/**
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  flatShading: <bool>
 * }
 */ class $2d9d8c9fc2282acc$export$bfe8c0a091f41ae7 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'MeshNormalMaterial';
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $2d9d8c9fc2282acc$export$2852a58ebdac27b8;
        this.normalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.fog = false;
        this.flatShading = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.flatShading = source.flatShading;
        return this;
    }
}
$2d9d8c9fc2282acc$export$bfe8c0a091f41ae7.prototype.isMeshNormalMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 * }
 */ class $2d9d8c9fc2282acc$export$5023a9a8114806b8 extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.type = 'MeshLambertMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215); // diffuse
        this.map = null;
        this.lightMap = null;
        this.lightMapIntensity = 1;
        this.aoMap = null;
        this.aoMapIntensity = 1;
        this.emissive = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0);
        this.emissiveIntensity = 1;
        this.emissiveMap = null;
        this.specularMap = null;
        this.alphaMap = null;
        this.envMap = null;
        this.combine = $2d9d8c9fc2282acc$export$e50ac29801f1774d;
        this.reflectivity = 1;
        this.refractionRatio = 0.98;
        this.wireframe = false;
        this.wireframeLinewidth = 1;
        this.wireframeLinecap = 'round';
        this.wireframeLinejoin = 'round';
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.map = source.map;
        this.lightMap = source.lightMap;
        this.lightMapIntensity = source.lightMapIntensity;
        this.aoMap = source.aoMap;
        this.aoMapIntensity = source.aoMapIntensity;
        this.emissive.copy(source.emissive);
        this.emissiveMap = source.emissiveMap;
        this.emissiveIntensity = source.emissiveIntensity;
        this.specularMap = source.specularMap;
        this.alphaMap = source.alphaMap;
        this.envMap = source.envMap;
        this.combine = source.combine;
        this.reflectivity = source.reflectivity;
        this.refractionRatio = source.refractionRatio;
        this.wireframe = source.wireframe;
        this.wireframeLinewidth = source.wireframeLinewidth;
        this.wireframeLinecap = source.wireframeLinecap;
        this.wireframeLinejoin = source.wireframeLinejoin;
        return this;
    }
}
$2d9d8c9fc2282acc$export$5023a9a8114806b8.prototype.isMeshLambertMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  matcap: new THREE.Texture( <Image> ),
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalMapType: THREE.TangentSpaceNormalMap,
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  flatShading: <bool>
 * }
 */ class $2d9d8c9fc2282acc$export$6f5fef6235ec12ee extends $2d9d8c9fc2282acc$export$a2d8b23205c25948 {
    constructor(parameters){
        super();
        this.defines = {
            'MATCAP': ''
        };
        this.type = 'MeshMatcapMaterial';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215); // diffuse
        this.matcap = null;
        this.map = null;
        this.bumpMap = null;
        this.bumpScale = 1;
        this.normalMap = null;
        this.normalMapType = $2d9d8c9fc2282acc$export$2852a58ebdac27b8;
        this.normalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this.displacementMap = null;
        this.displacementScale = 1;
        this.displacementBias = 0;
        this.alphaMap = null;
        this.flatShading = false;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.defines = {
            'MATCAP': ''
        };
        this.color.copy(source.color);
        this.matcap = source.matcap;
        this.map = source.map;
        this.bumpMap = source.bumpMap;
        this.bumpScale = source.bumpScale;
        this.normalMap = source.normalMap;
        this.normalMapType = source.normalMapType;
        this.normalScale.copy(source.normalScale);
        this.displacementMap = source.displacementMap;
        this.displacementScale = source.displacementScale;
        this.displacementBias = source.displacementBias;
        this.alphaMap = source.alphaMap;
        this.flatShading = source.flatShading;
        return this;
    }
}
$2d9d8c9fc2282acc$export$6f5fef6235ec12ee.prototype.isMeshMatcapMaterial = true;
/**
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */ class $2d9d8c9fc2282acc$export$327886a3efaeaebe extends $2d9d8c9fc2282acc$export$fbaaa33907730a0c {
    constructor(parameters){
        super();
        this.type = 'LineDashedMaterial';
        this.scale = 1;
        this.dashSize = 3;
        this.gapSize = 1;
        this.setValues(parameters);
    }
    copy(source) {
        super.copy(source);
        this.scale = source.scale;
        this.dashSize = source.dashSize;
        this.gapSize = source.gapSize;
        return this;
    }
}
$2d9d8c9fc2282acc$export$327886a3efaeaebe.prototype.isLineDashedMaterial = true;
var $2d9d8c9fc2282acc$var$Materials = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ShadowMaterial: $2d9d8c9fc2282acc$export$e8564da406055a3,
    SpriteMaterial: $2d9d8c9fc2282acc$export$5ec7dd1c6994bf8e,
    RawShaderMaterial: $2d9d8c9fc2282acc$export$21c421a2e1df9d22,
    ShaderMaterial: $2d9d8c9fc2282acc$export$83c7d75d550a8b0d,
    PointsMaterial: $2d9d8c9fc2282acc$export$a178c45366ce5d6b,
    MeshPhysicalMaterial: $2d9d8c9fc2282acc$export$28d04986c4269c9f,
    MeshStandardMaterial: $2d9d8c9fc2282acc$export$f2980790215acccd,
    MeshPhongMaterial: $2d9d8c9fc2282acc$export$24c72f71cbaf0678,
    MeshToonMaterial: $2d9d8c9fc2282acc$export$df893cf97e765622,
    MeshNormalMaterial: $2d9d8c9fc2282acc$export$bfe8c0a091f41ae7,
    MeshLambertMaterial: $2d9d8c9fc2282acc$export$5023a9a8114806b8,
    MeshDepthMaterial: $2d9d8c9fc2282acc$export$2698c22ec13825db,
    MeshDistanceMaterial: $2d9d8c9fc2282acc$export$33e187ed002f2a19,
    MeshBasicMaterial: $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5,
    MeshMatcapMaterial: $2d9d8c9fc2282acc$export$6f5fef6235ec12ee,
    LineDashedMaterial: $2d9d8c9fc2282acc$export$327886a3efaeaebe,
    LineBasicMaterial: $2d9d8c9fc2282acc$export$fbaaa33907730a0c,
    Material: $2d9d8c9fc2282acc$export$a2d8b23205c25948
});
const $2d9d8c9fc2282acc$export$7ee8caa573e71ad1 = {
    // same as Array.prototype.slice, but also works on typed arrays
    arraySlice: function(array, from, to) {
        if ($2d9d8c9fc2282acc$export$7ee8caa573e71ad1.isTypedArray(array)) // in ios9 array.subarray(from, undefined) will return empty array
        // but array.subarray(from) or array.subarray(from, len) is correct
        return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));
        return array.slice(from, to);
    },
    // converts an array to a specific type
    convertArray: function(array, type, forceClone) {
        if (!array || !forceClone && array.constructor === type) return array;
        if (typeof type.BYTES_PER_ELEMENT === 'number') return new type(array); // create typed array
        return Array.prototype.slice.call(array); // create Array
    },
    isTypedArray: function(object) {
        return ArrayBuffer.isView(object) && !(object instanceof DataView);
    },
    // returns an array by which times and values can be sorted
    getKeyframeOrder: function(times) {
        function compareTime(i, j) {
            return times[i] - times[j];
        }
        const n = times.length;
        const result = new Array(n);
        for(let i255 = 0; i255 !== n; ++i255)result[i255] = i255;
        result.sort(compareTime);
        return result;
    },
    // uses the array previously returned by 'getKeyframeOrder' to sort data
    sortedArray: function(values, stride, order) {
        const nValues = values.length;
        const result = new values.constructor(nValues);
        for(let i256 = 0, dstOffset = 0; dstOffset !== nValues; ++i256){
            const srcOffset = order[i256] * stride;
            for(let j = 0; j !== stride; ++j)result[dstOffset++] = values[srcOffset + j];
        }
        return result;
    },
    // function for parsing AOS keyframe formats
    flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
        let i = 1, key = jsonKeys[0];
        while(key !== undefined && key[valuePropertyName] === undefined)key = jsonKeys[i++];
        if (key === undefined) return; // no data
        let value = key[valuePropertyName];
        if (value === undefined) return; // no data
        if (Array.isArray(value)) do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                values.push.apply(values, value); // push all elements
            }
            key = jsonKeys[i++];
        }while (key !== undefined)
        else if (value.toArray !== undefined) // ...assume THREE.Math-ish
        do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                value.toArray(values, values.length);
            }
            key = jsonKeys[i++];
        }while (key !== undefined)
        else // otherwise push as-is
        do {
            value = key[valuePropertyName];
            if (value !== undefined) {
                times.push(key.time);
                values.push(value);
            }
            key = jsonKeys[i++];
        }while (key !== undefined)
    },
    subclip: function(sourceClip, name, startFrame, endFrame, fps = 30) {
        const clip = sourceClip.clone();
        clip.name = name;
        const tracks = [];
        for(let i259 = 0; i259 < clip.tracks.length; ++i259){
            const track = clip.tracks[i259];
            const valueSize = track.getValueSize();
            const times = [];
            const values = [];
            for(let j = 0; j < track.times.length; ++j){
                const frame = track.times[j] * fps;
                if (frame < startFrame || frame >= endFrame) continue;
                times.push(track.times[j]);
                for(let k = 0; k < valueSize; ++k)values.push(track.values[j * valueSize + k]);
            }
            if (times.length === 0) continue;
            track.times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.convertArray(times, track.times.constructor);
            track.values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.convertArray(values, track.values.constructor);
            tracks.push(track);
        }
        clip.tracks = tracks;
        // find minimum .times value across all tracks in the trimmed clip
        let minStartTime = Infinity;
        for(let i257 = 0; i257 < clip.tracks.length; ++i257)if (minStartTime > clip.tracks[i257].times[0]) minStartTime = clip.tracks[i257].times[0];
        // shift all tracks such that clip begins at t=0
        for(let i258 = 0; i258 < clip.tracks.length; ++i258)clip.tracks[i258].shift(-1 * minStartTime);
        clip.resetDuration();
        return clip;
    },
    makeClipAdditive: function(targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30) {
        if (fps <= 0) fps = 30;
        const numTracks = referenceClip.tracks.length;
        const referenceTime = referenceFrame / fps;
        // Make each track's values relative to the values at the reference frame
        for(let i260 = 0; i260 < numTracks; ++i260){
            const referenceTrack = referenceClip.tracks[i260];
            const referenceTrackType = referenceTrack.ValueTypeName;
            // Skip this track if it's non-numeric
            if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue;
            // Find the track in the target clip whose name and type matches the reference track
            const targetTrack = targetClip.tracks.find(function(track) {
                return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
            });
            if (targetTrack === undefined) continue;
            let referenceOffset = 0;
            const referenceValueSize = referenceTrack.getValueSize();
            if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) referenceOffset = referenceValueSize / 3;
            let targetOffset = 0;
            const targetValueSize = targetTrack.getValueSize();
            if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) targetOffset = targetValueSize / 3;
            const lastIndex = referenceTrack.times.length - 1;
            let referenceValue;
            // Find the value to subtract out of the track
            if (referenceTime <= referenceTrack.times[0]) {
                // Reference frame is earlier than the first keyframe, so just use the first keyframe
                const startIndex = referenceOffset;
                const endIndex = referenceValueSize - referenceOffset;
                referenceValue = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(referenceTrack.values, startIndex, endIndex);
            } else if (referenceTime >= referenceTrack.times[lastIndex]) {
                // Reference frame is after the last keyframe, so just use the last keyframe
                const startIndex = lastIndex * referenceValueSize + referenceOffset;
                const endIndex = startIndex + referenceValueSize - referenceOffset;
                referenceValue = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(referenceTrack.values, startIndex, endIndex);
            } else {
                // Interpolate to the reference value
                const interpolant = referenceTrack.createInterpolant();
                const startIndex = referenceOffset;
                const endIndex = referenceValueSize - referenceOffset;
                interpolant.evaluate(referenceTime);
                referenceValue = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(interpolant.resultBuffer, startIndex, endIndex);
            }
            // Conjugate the quaternion
            if (referenceTrackType === 'quaternion') {
                const referenceQuat = new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3().fromArray(referenceValue).normalize().conjugate();
                referenceQuat.toArray(referenceValue);
            }
            // Subtract the reference value from all of the track values
            const numTimes = targetTrack.times.length;
            for(let j = 0; j < numTimes; ++j){
                const valueStart = j * targetValueSize + targetOffset;
                if (referenceTrackType === 'quaternion') // Multiply the conjugate for quaternion track types
                $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
                else {
                    const valueEnd = targetValueSize - targetOffset * 2;
                    // Subtract each value for all other numeric track types
                    for(let k = 0; k < valueEnd; ++k)targetTrack.values[valueStart + k] -= referenceValue[k];
                }
            }
        }
        targetClip.blendMode = $2d9d8c9fc2282acc$export$d875e029ef558d3;
        return targetClip;
    }
};
/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 */ class $2d9d8c9fc2282acc$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        this.parameterPositions = parameterPositions;
        this._cachedIndex = 0;
        this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);
        this.sampleValues = sampleValues;
        this.valueSize = sampleSize;
        this.settings = null;
        this.DefaultSettings_ = {
        };
    }
    evaluate(t) {
        const pp = this.parameterPositions;
        let i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
        validate_interval: {
            seek: {
                let right;
                linear_scan: {
                    //- See http://jsperf.com/comparison-to-undefined/3
                    //- slower code:
                    //-
                    //- 				if ( t >= t1 || t1 === undefined ) {
                    forward_scan: if (!(t < t1)) {
                        for(let giveUpAt = i1 + 2;;){
                            if (t1 === undefined) {
                                if (t < t0) break forward_scan;
                                // after end
                                i1 = pp.length;
                                this._cachedIndex = i1;
                                return this.afterEnd_(i1 - 1, t, t0);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t0 = t1;
                            t1 = pp[++i1];
                            if (t < t1) break seek;
                        }
                        // prepare binary search on the right side of the index
                        right = pp.length;
                        break linear_scan;
                    }
                    //- slower code:
                    //-					if ( t < t0 || t0 === undefined ) {
                    if (!(t >= t0)) {
                        // looping?
                        const t1global = pp[1];
                        if (t < t1global) {
                            i1 = 2; // + 1, using the scan for the details
                            t0 = t1global;
                        }
                        // linear reverse scan
                        for(let giveUpAt = i1 - 2;;){
                            if (t0 === undefined) {
                                // before start
                                this._cachedIndex = 0;
                                return this.beforeStart_(0, t, t1);
                            }
                            if (i1 === giveUpAt) break; // this loop
                            t1 = t0;
                            t0 = pp[--i1 - 1];
                            if (t >= t0) break seek;
                        }
                        // prepare binary search on the left side of the index
                        right = i1;
                        i1 = 0;
                        break linear_scan;
                    }
                    break validate_interval;
                } // linear scan
                // binary search
                while(i1 < right){
                    const mid = i1 + right >>> 1;
                    if (t < pp[mid]) right = mid;
                    else i1 = mid + 1;
                }
                t1 = pp[i1];
                t0 = pp[i1 - 1];
                // check boundary cases, again
                if (t0 === undefined) {
                    this._cachedIndex = 0;
                    return this.beforeStart_(0, t, t1);
                }
                if (t1 === undefined) {
                    i1 = pp.length;
                    this._cachedIndex = i1;
                    return this.afterEnd_(i1 - 1, t0, t);
                }
            } // seek
            this._cachedIndex = i1;
            this.intervalChanged_(i1, t0, t1);
        } // validate_interval
        return this.interpolate_(i1, t0, t, t1);
    }
    getSettings_() {
        return this.settings || this.DefaultSettings_;
    }
    copySampleValue_(index) {
        // copies a sample value to the result buffer
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride;
        for(let i261 = 0; i261 !== stride; ++i261)result[i261] = values[offset + i261];
        return result;
    }
    // Template methods for derived classes:
    interpolate_() {
        throw new Error('call to abstract method');
    // implementations shall return this.resultBuffer
    }
    intervalChanged_() {
    // empty
    }
}
// ALIAS DEFINITIONS
$2d9d8c9fc2282acc$export$b558baee9c0f72d3.prototype.beforeStart_ = $2d9d8c9fc2282acc$export$b558baee9c0f72d3.prototype.copySampleValue_;
$2d9d8c9fc2282acc$export$b558baee9c0f72d3.prototype.afterEnd_ = $2d9d8c9fc2282acc$export$b558baee9c0f72d3.prototype.copySampleValue_;
/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 */ class $2d9d8c9fc2282acc$export$3646682e7a3959 extends $2d9d8c9fc2282acc$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
        this._weightPrev = -0;
        this._offsetPrev = -0;
        this._weightNext = -0;
        this._offsetNext = -0;
        this.DefaultSettings_ = {
            endingStart: $2d9d8c9fc2282acc$export$7f795934b84ab523,
            endingEnd: $2d9d8c9fc2282acc$export$7f795934b84ab523
        };
    }
    intervalChanged_(i1, t0, t1) {
        const pp = this.parameterPositions;
        let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
        if (tPrev === undefined) switch(this.getSettings_().endingStart){
            case $2d9d8c9fc2282acc$export$24a4ccb5099273b5:
                // f'(t0) = 0
                iPrev = i1;
                tPrev = 2 * t0 - t1;
                break;
            case $2d9d8c9fc2282acc$export$8e8c3ecdcd8e1fee:
                // use the other end of the curve
                iPrev = pp.length - 2;
                tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                break;
            default:
                // f''(t0) = 0 a.k.a. Natural Spline
                iPrev = i1;
                tPrev = t1;
        }
        if (tNext === undefined) switch(this.getSettings_().endingEnd){
            case $2d9d8c9fc2282acc$export$24a4ccb5099273b5:
                // f'(tN) = 0
                iNext = i1;
                tNext = 2 * t1 - t0;
                break;
            case $2d9d8c9fc2282acc$export$8e8c3ecdcd8e1fee:
                // use the other end of the curve
                iNext = 1;
                tNext = t1 + pp[1] - pp[0];
                break;
            default:
                // f''(tN) = 0, a.k.a. Natural Spline
                iNext = i1 - 1;
                tNext = t0;
        }
        const halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
        this._weightPrev = halfDt / (t0 - tPrev);
        this._weightNext = halfDt / (tNext - t1);
        this._offsetPrev = iPrev * stride;
        this._offsetNext = iNext * stride;
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p;
        // evaluate polynomials
        const sP = -wP * ppp + 2 * wP * pp - wP * p;
        const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;
        const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;
        const sN = wN * ppp - wN * pp;
        // combine data linearly
        for(let i262 = 0; i262 !== stride; ++i262)result[i262] = sP * values[oP + i262] + s0 * values[o0 + i262] + s1 * values[o1 + i262] + sN * values[oN + i262];
        return result;
    }
}
class $2d9d8c9fc2282acc$export$a8e6009059f51e1a extends $2d9d8c9fc2282acc$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1;
        for(let i263 = 0; i263 !== stride; ++i263)result[i263] = values[offset0 + i263] * weight0 + values[offset1 + i263] * weight1;
        return result;
    }
}
/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 */ class $2d9d8c9fc2282acc$export$fb9758ef7ef8d5cc extends $2d9d8c9fc2282acc$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1 /*, t0, t, t1 */ ) {
        return this.copySampleValue_(i1 - 1);
    }
}
class $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
    constructor(name, times, values, interpolation){
        if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');
        if (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);
        this.name = name;
        this.times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.convertArray(times, this.TimeBufferType);
        this.values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.convertArray(values, this.ValueBufferType);
        this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    // Serialization (in static context, because of constructor invocation
    // and automatic invocation of .toJSON):
    static toJSON(track) {
        const trackType = track.constructor;
        let json;
        // derived classes can define a static toJSON method
        if (trackType.toJSON !== this.toJSON) json = trackType.toJSON(track);
        else {
            // by default, we assume the data can be serialized as-is
            json = {
                'name': track.name,
                'times': $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.convertArray(track.times, Array),
                'values': $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.convertArray(track.values, Array)
            };
            const interpolation = track.getInterpolation();
            if (interpolation !== track.DefaultInterpolation) json.interpolation = interpolation;
        }
        json.type = track.ValueTypeName; // mandatory
        return json;
    }
    InterpolantFactoryMethodDiscrete(result) {
        return new $2d9d8c9fc2282acc$export$fb9758ef7ef8d5cc(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodLinear(result) {
        return new $2d9d8c9fc2282acc$export$a8e6009059f51e1a(this.times, this.values, this.getValueSize(), result);
    }
    InterpolantFactoryMethodSmooth(result) {
        return new $2d9d8c9fc2282acc$export$3646682e7a3959(this.times, this.values, this.getValueSize(), result);
    }
    setInterpolation(interpolation) {
        let factoryMethod;
        switch(interpolation){
            case $2d9d8c9fc2282acc$export$995b32462a65e855:
                factoryMethod = this.InterpolantFactoryMethodDiscrete;
                break;
            case $2d9d8c9fc2282acc$export$30fac1aace31cf4d:
                factoryMethod = this.InterpolantFactoryMethodLinear;
                break;
            case $2d9d8c9fc2282acc$export$198b11ff4c72bb30:
                factoryMethod = this.InterpolantFactoryMethodSmooth;
                break;
        }
        if (factoryMethod === undefined) {
            const message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;
            if (this.createInterpolant === undefined) {
                // fall back to default, unless the default itself is messed up
                if (interpolation !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                else throw new Error(message); // fatal, in this case
            }
            console.warn('THREE.KeyframeTrack:', message);
            return this;
        }
        this.createInterpolant = factoryMethod;
        return this;
    }
    getInterpolation() {
        switch(this.createInterpolant){
            case this.InterpolantFactoryMethodDiscrete:
                return $2d9d8c9fc2282acc$export$995b32462a65e855;
            case this.InterpolantFactoryMethodLinear:
                return $2d9d8c9fc2282acc$export$30fac1aace31cf4d;
            case this.InterpolantFactoryMethodSmooth:
                return $2d9d8c9fc2282acc$export$198b11ff4c72bb30;
        }
    }
    getValueSize() {
        return this.values.length / this.times.length;
    }
    // move all keyframes either forwards or backwards in time
    shift(timeOffset) {
        if (timeOffset !== 0) {
            const times = this.times;
            for(let i264 = 0, n = times.length; i264 !== n; ++i264)times[i264] += timeOffset;
        }
        return this;
    }
    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
    scale(timeScale) {
        if (timeScale !== 1) {
            const times = this.times;
            for(let i265 = 0, n = times.length; i265 !== n; ++i265)times[i265] *= timeScale;
        }
        return this;
    }
    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
    trim(startTime, endTime) {
        const times = this.times, nKeys = times.length;
        let from = 0, to = nKeys - 1;
        while(from !== nKeys && times[from] < startTime)++from;
        while(to !== -1 && times[to] > endTime)--to;
        ++to; // inclusive -> exclusive bound
        if (from !== 0 || to !== nKeys) {
            // empty tracks are forbidden, so keep at least one keyframe
            if (from >= to) {
                to = Math.max(to, 1);
                from = to - 1;
            }
            const stride = this.getValueSize();
            this.times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(times, from, to);
            this.values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(this.values, from * stride, to * stride);
        }
        return this;
    }
    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
    validate() {
        let valid = true;
        const valueSize = this.getValueSize();
        if (valueSize - Math.floor(valueSize) !== 0) {
            console.error('THREE.KeyframeTrack: Invalid value size in track.', this);
            valid = false;
        }
        const times = this.times, values = this.values, nKeys = times.length;
        if (nKeys === 0) {
            console.error('THREE.KeyframeTrack: Track is empty.', this);
            valid = false;
        }
        let prevTime = null;
        for(let i266 = 0; i266 !== nKeys; i266++){
            const currTime = times[i266];
            if (typeof currTime === 'number' && isNaN(currTime)) {
                console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i266, currTime);
                valid = false;
                break;
            }
            if (prevTime !== null && prevTime > currTime) {
                console.error('THREE.KeyframeTrack: Out of order keys.', this, i266, currTime, prevTime);
                valid = false;
                break;
            }
            prevTime = currTime;
        }
        if (values !== undefined) {
            if ($2d9d8c9fc2282acc$export$7ee8caa573e71ad1.isTypedArray(values)) for(let i267 = 0, n = values.length; i267 !== n; ++i267){
                const value = values[i267];
                if (isNaN(value)) {
                    console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i267, value);
                    valid = false;
                    break;
                }
            }
        }
        return valid;
    }
    // removes equivalent sequential keys as common in morph target sequences
    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
    optimize() {
        // times or values may be shared with other tracks, so overwriting is unsafe
        const times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(this.times), values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === $2d9d8c9fc2282acc$export$198b11ff4c72bb30, lastIndex = times.length - 1;
        let writeIndex = 1;
        for(let i268 = 1; i268 < lastIndex; ++i268){
            let keep = false;
            const time = times[i268];
            const timeNext = times[i268 + 1];
            // remove adjacent keyframes scheduled at the same time
            if (time !== timeNext && (i268 !== 1 || time !== times[0])) {
                if (!smoothInterpolation) {
                    // remove unnecessary keyframes same as their neighbors
                    const offset = i268 * stride, offsetP = offset - stride, offsetN = offset + stride;
                    for(let j = 0; j !== stride; ++j){
                        const value = values[offset + j];
                        if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                            keep = true;
                            break;
                        }
                    }
                } else keep = true;
            }
            // in-place compaction
            if (keep) {
                if (i268 !== writeIndex) {
                    times[writeIndex] = times[i268];
                    const readOffset = i268 * stride, writeOffset = writeIndex * stride;
                    for(let j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
                }
                ++writeIndex;
            }
        }
        // flush last keyframe (compaction looks ahead)
        if (lastIndex > 0) {
            times[writeIndex] = times[lastIndex];
            for(let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++j)values[writeOffset + j] = values[readOffset + j];
            ++writeIndex;
        }
        if (writeIndex !== times.length) {
            this.times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(times, 0, writeIndex);
            this.values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(values, 0, writeIndex * stride);
        } else {
            this.times = times;
            this.values = values;
        }
        return this;
    }
    clone() {
        const times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(this.times, 0);
        const values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.arraySlice(this.values, 0);
        const TypedKeyframeTrack = this.constructor;
        const track = new TypedKeyframeTrack(this.name, times, values);
        // Interpolant argument to constructor is not saved, so copy the factory method directly.
        track.createInterpolant = this.createInterpolant;
        return track;
    }
}
$2d9d8c9fc2282acc$export$b0e479f45b7006d6.prototype.TimeBufferType = Float32Array;
$2d9d8c9fc2282acc$export$b0e479f45b7006d6.prototype.ValueBufferType = Float32Array;
$2d9d8c9fc2282acc$export$b0e479f45b7006d6.prototype.DefaultInterpolation = $2d9d8c9fc2282acc$export$30fac1aace31cf4d;
/**
 * A Track of Boolean keyframe values.
 */ class $2d9d8c9fc2282acc$export$d3a344b98cf0b775 extends $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
}
$2d9d8c9fc2282acc$export$d3a344b98cf0b775.prototype.ValueTypeName = 'bool';
$2d9d8c9fc2282acc$export$d3a344b98cf0b775.prototype.ValueBufferType = Array;
$2d9d8c9fc2282acc$export$d3a344b98cf0b775.prototype.DefaultInterpolation = $2d9d8c9fc2282acc$export$995b32462a65e855;
$2d9d8c9fc2282acc$export$d3a344b98cf0b775.prototype.InterpolantFactoryMethodLinear = undefined;
$2d9d8c9fc2282acc$export$d3a344b98cf0b775.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of keyframe values that represent color.
 */ class $2d9d8c9fc2282acc$export$83444c5d885347d8 extends $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
}
$2d9d8c9fc2282acc$export$83444c5d885347d8.prototype.ValueTypeName = 'color';
/**
 * A Track of numeric keyframe values.
 */ class $2d9d8c9fc2282acc$export$d45f0d1a4d9a9314 extends $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
}
$2d9d8c9fc2282acc$export$d45f0d1a4d9a9314.prototype.ValueTypeName = 'number';
/**
 * Spherical linear unit quaternion interpolant.
 */ class $2d9d8c9fc2282acc$export$2db1cfb7923d931e extends $2d9d8c9fc2282acc$export$b558baee9c0f72d3 {
    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer){
        super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    interpolate_(i1, t0, t, t1) {
        const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0);
        let offset = i1 * stride;
        for(let end = offset + stride; offset !== end; offset += 4)$2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
        return result;
    }
}
/**
 * A Track of quaternion keyframe values.
 */ class $2d9d8c9fc2282acc$export$b8043f12b5aafbd7 extends $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
    InterpolantFactoryMethodLinear(result) {
        return new $2d9d8c9fc2282acc$export$2db1cfb7923d931e(this.times, this.values, this.getValueSize(), result);
    }
}
$2d9d8c9fc2282acc$export$b8043f12b5aafbd7.prototype.ValueTypeName = 'quaternion';
// ValueBufferType is inherited
$2d9d8c9fc2282acc$export$b8043f12b5aafbd7.prototype.DefaultInterpolation = $2d9d8c9fc2282acc$export$30fac1aace31cf4d;
$2d9d8c9fc2282acc$export$b8043f12b5aafbd7.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track that interpolates Strings
 */ class $2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd extends $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
}
$2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd.prototype.ValueTypeName = 'string';
$2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd.prototype.ValueBufferType = Array;
$2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd.prototype.DefaultInterpolation = $2d9d8c9fc2282acc$export$995b32462a65e855;
$2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd.prototype.InterpolantFactoryMethodLinear = undefined;
$2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd.prototype.InterpolantFactoryMethodSmooth = undefined;
/**
 * A Track of vectored keyframe values.
 */ class $2d9d8c9fc2282acc$export$5ce2dcb4cc9f2bff extends $2d9d8c9fc2282acc$export$b0e479f45b7006d6 {
}
$2d9d8c9fc2282acc$export$5ce2dcb4cc9f2bff.prototype.ValueTypeName = 'vector';
class $2d9d8c9fc2282acc$export$d942c706bf23829c {
    constructor(name, duration = -1, tracks, blendMode = $2d9d8c9fc2282acc$export$bcfbbdcf8de7f8cd){
        this.name = name;
        this.tracks = tracks;
        this.duration = duration;
        this.blendMode = blendMode;
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        // this means it should figure out its duration by scanning the tracks
        if (this.duration < 0) this.resetDuration();
    }
    static parse(json) {
        const tracks = [], jsonTracks = json.tracks, frameTime = 1 / (json.fps || 1);
        for(let i269 = 0, n = jsonTracks.length; i269 !== n; ++i269)tracks.push($2d9d8c9fc2282acc$var$parseKeyframeTrack(jsonTracks[i269]).scale(frameTime));
        const clip = new this(json.name, json.duration, tracks, json.blendMode);
        clip.uuid = json.uuid;
        return clip;
    }
    static toJSON(clip) {
        const tracks = [], clipTracks = clip.tracks;
        const json = {
            'name': clip.name,
            'duration': clip.duration,
            'tracks': tracks,
            'uuid': clip.uuid,
            'blendMode': clip.blendMode
        };
        for(let i270 = 0, n = clipTracks.length; i270 !== n; ++i270)tracks.push($2d9d8c9fc2282acc$export$b0e479f45b7006d6.toJSON(clipTracks[i270]));
        return json;
    }
    static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {
        const numMorphTargets = morphTargetSequence.length;
        const tracks = [];
        for(let i271 = 0; i271 < numMorphTargets; i271++){
            let times = [];
            let values = [];
            times.push((i271 + numMorphTargets - 1) % numMorphTargets, i271, (i271 + 1) % numMorphTargets);
            values.push(0, 1, 0);
            const order = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.getKeyframeOrder(times);
            times = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.sortedArray(times, 1, order);
            values = $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.sortedArray(values, 1, order);
            // if there is a key at the first frame, duplicate it as the
            // last frame as well for perfect loop.
            if (!noLoop && times[0] === 0) {
                times.push(numMorphTargets);
                values.push(values[0]);
            }
            tracks.push(new $2d9d8c9fc2282acc$export$d45f0d1a4d9a9314('.morphTargetInfluences[' + morphTargetSequence[i271].name + ']', times, values).scale(1 / fps));
        }
        return new this(name, -1, tracks);
    }
    static findByName(objectOrClipArray, name) {
        let clipArray = objectOrClipArray;
        if (!Array.isArray(objectOrClipArray)) {
            const o = objectOrClipArray;
            clipArray = o.geometry && o.geometry.animations || o.animations;
        }
        for(let i272 = 0; i272 < clipArray.length; i272++){
            if (clipArray[i272].name === name) return clipArray[i272];
        }
        return null;
    }
    static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {
        const animationToMorphTargets = {
        };
        // tested with https://regex101.com/ on trick sequences
        // such flamingo_flyA_003, flamingo_run1_003, crdeath0059
        const pattern = /^([\w-]*?)([\d]+)$/;
        // sort morph target names into animation groups based
        // patterns like Walk_001, Walk_002, Run_001, Run_002
        for(let i273 = 0, il = morphTargets.length; i273 < il; i273++){
            const morphTarget = morphTargets[i273];
            const parts = morphTarget.name.match(pattern);
            if (parts && parts.length > 1) {
                const name = parts[1];
                let animationMorphTargets = animationToMorphTargets[name];
                if (!animationMorphTargets) animationToMorphTargets[name] = animationMorphTargets = [];
                animationMorphTargets.push(morphTarget);
            }
        }
        const clips = [];
        for(const name in animationToMorphTargets)clips.push(this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));
        return clips;
    }
    // parse the animation.hierarchy format
    static parseAnimation(animation, bones) {
        if (!animation) {
            console.error('THREE.AnimationClip: No animation in JSONLoader data.');
            return null;
        }
        const addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
            // only return track if there are actually keys.
            if (animationKeys.length !== 0) {
                const times = [];
                const values = [];
                $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.flattenJSON(animationKeys, times, values, propertyName);
                // empty keys are filtered out, so check again
                if (times.length !== 0) destTracks.push(new trackType(trackName, times, values));
            }
        };
        const tracks = [];
        const clipName = animation.name || 'default';
        const fps = animation.fps || 30;
        const blendMode = animation.blendMode;
        // automatic length determination in AnimationClip.
        let duration = animation.length || -1;
        const hierarchyTracks = animation.hierarchy || [];
        for(let h = 0; h < hierarchyTracks.length; h++){
            const animationKeys = hierarchyTracks[h].keys;
            // skip empty tracks
            if (!animationKeys || animationKeys.length === 0) continue;
            // process morph targets
            if (animationKeys[0].morphTargets) {
                // figure out all morph targets used in this track
                const morphTargetNames = {
                };
                let k;
                for(k = 0; k < animationKeys.length; k++){
                    if (animationKeys[k].morphTargets) for(let m = 0; m < animationKeys[k].morphTargets.length; m++)morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                }
                // create a track for each morph target with all zero
                // morphTargetInfluences except for the keys in which
                // the morphTarget is named.
                for(const morphTargetName in morphTargetNames){
                    const times = [];
                    const values = [];
                    for(let m = 0; m !== animationKeys[k].morphTargets.length; ++m){
                        const animationKey = animationKeys[k];
                        times.push(animationKey.time);
                        values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                    }
                    tracks.push(new $2d9d8c9fc2282acc$export$d45f0d1a4d9a9314('.morphTargetInfluence[' + morphTargetName + ']', times, values));
                }
                duration = morphTargetNames.length * (fps || 1);
            } else {
                // ...assume skeletal animation
                const boneName = '.bones[' + bones[h].name + ']';
                addNonemptyTrack($2d9d8c9fc2282acc$export$5ce2dcb4cc9f2bff, boneName + '.position', animationKeys, 'pos', tracks);
                addNonemptyTrack($2d9d8c9fc2282acc$export$b8043f12b5aafbd7, boneName + '.quaternion', animationKeys, 'rot', tracks);
                addNonemptyTrack($2d9d8c9fc2282acc$export$5ce2dcb4cc9f2bff, boneName + '.scale', animationKeys, 'scl', tracks);
            }
        }
        if (tracks.length === 0) return null;
        const clip = new this(clipName, duration, tracks, blendMode);
        return clip;
    }
    resetDuration() {
        const tracks = this.tracks;
        let duration = 0;
        for(let i274 = 0, n = tracks.length; i274 !== n; ++i274){
            const track = this.tracks[i274];
            duration = Math.max(duration, track.times[track.times.length - 1]);
        }
        this.duration = duration;
        return this;
    }
    trim() {
        for(let i275 = 0; i275 < this.tracks.length; i275++)this.tracks[i275].trim(0, this.duration);
        return this;
    }
    validate() {
        let valid = true;
        for(let i276 = 0; i276 < this.tracks.length; i276++)valid = valid && this.tracks[i276].validate();
        return valid;
    }
    optimize() {
        for(let i277 = 0; i277 < this.tracks.length; i277++)this.tracks[i277].optimize();
        return this;
    }
    clone() {
        const tracks = [];
        for(let i278 = 0; i278 < this.tracks.length; i278++)tracks.push(this.tracks[i278].clone());
        return new this.constructor(this.name, this.duration, tracks, this.blendMode);
    }
    toJSON() {
        return this.constructor.toJSON(this);
    }
}
function $2d9d8c9fc2282acc$var$getTrackTypeForValueTypeName(typeName) {
    switch(typeName.toLowerCase()){
        case 'scalar':
        case 'double':
        case 'float':
        case 'number':
        case 'integer':
            return $2d9d8c9fc2282acc$export$d45f0d1a4d9a9314;
        case 'vector':
        case 'vector2':
        case 'vector3':
        case 'vector4':
            return $2d9d8c9fc2282acc$export$5ce2dcb4cc9f2bff;
        case 'color':
            return $2d9d8c9fc2282acc$export$83444c5d885347d8;
        case 'quaternion':
            return $2d9d8c9fc2282acc$export$b8043f12b5aafbd7;
        case 'bool':
        case 'boolean':
            return $2d9d8c9fc2282acc$export$d3a344b98cf0b775;
        case 'string':
            return $2d9d8c9fc2282acc$export$6ce41d4f3a8df9cd;
    }
    throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
}
function $2d9d8c9fc2282acc$var$parseKeyframeTrack(json) {
    if (json.type === undefined) throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');
    const trackType = $2d9d8c9fc2282acc$var$getTrackTypeForValueTypeName(json.type);
    if (json.times === undefined) {
        const times = [], values = [];
        $2d9d8c9fc2282acc$export$7ee8caa573e71ad1.flattenJSON(json.keys, times, values, 'value');
        json.times = times;
        json.values = values;
    }
    // derived classes can define a static parse method
    if (trackType.parse !== undefined) return trackType.parse(json);
    else // by default, we assume a constructor compatible with the base
    return new trackType(json.name, json.times, json.values, json.interpolation);
}
const $2d9d8c9fc2282acc$export$94affb487e701bf2 = {
    enabled: false,
    files: {
    },
    add: function(key, file) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Adding key:', key );
        this.files[key] = file;
    },
    get: function(key) {
        if (this.enabled === false) return;
        // console.log( 'THREE.Cache', 'Checking key:', key );
        return this.files[key];
    },
    remove: function(key) {
        delete this.files[key];
    },
    clear: function() {
        this.files = {
        };
    }
};
class $2d9d8c9fc2282acc$export$99cc795e99919eed {
    constructor(onLoad, onProgress, onError){
        const scope = this;
        let isLoading = false;
        let itemsLoaded = 0;
        let itemsTotal = 0;
        let urlModifier = undefined;
        const handlers = [];
        // Refer to #5689 for the reason why we don't set .onStart
        // in the constructor
        this.onStart = undefined;
        this.onLoad = onLoad;
        this.onProgress = onProgress;
        this.onError = onError;
        this.itemStart = function(url) {
            itemsTotal++;
            if (isLoading === false) {
                if (scope.onStart !== undefined) scope.onStart(url, itemsLoaded, itemsTotal);
            }
            isLoading = true;
        };
        this.itemEnd = function(url) {
            itemsLoaded++;
            if (scope.onProgress !== undefined) scope.onProgress(url, itemsLoaded, itemsTotal);
            if (itemsLoaded === itemsTotal) {
                isLoading = false;
                if (scope.onLoad !== undefined) scope.onLoad();
            }
        };
        this.itemError = function(url) {
            if (scope.onError !== undefined) scope.onError(url);
        };
        this.resolveURL = function(url) {
            if (urlModifier) return urlModifier(url);
            return url;
        };
        this.setURLModifier = function(transform) {
            urlModifier = transform;
            return this;
        };
        this.addHandler = function(regex, loader) {
            handlers.push(regex, loader);
            return this;
        };
        this.removeHandler = function(regex) {
            const index = handlers.indexOf(regex);
            if (index !== -1) handlers.splice(index, 2);
            return this;
        };
        this.getHandler = function(file) {
            for(let i279 = 0, l = handlers.length; i279 < l; i279 += 2){
                const regex = handlers[i279];
                const loader = handlers[i279 + 1];
                if (regex.global) regex.lastIndex = 0; // see #17920
                if (regex.test(file)) return loader;
            }
            return null;
        };
    }
}
const $2d9d8c9fc2282acc$export$b033c3f9a95c6a16 = new $2d9d8c9fc2282acc$export$99cc795e99919eed();
class $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        this.manager = manager !== undefined ? manager : $2d9d8c9fc2282acc$export$b033c3f9a95c6a16;
        this.crossOrigin = 'anonymous';
        this.withCredentials = false;
        this.path = '';
        this.resourcePath = '';
        this.requestHeader = {
        };
    }
    load() {
    }
    loadAsync(url, onProgress) {
        const scope = this;
        return new Promise(function(resolve, reject) {
            scope.load(url, resolve, onProgress, reject);
        });
    }
    parse() {
    }
    setCrossOrigin(crossOrigin) {
        this.crossOrigin = crossOrigin;
        return this;
    }
    setWithCredentials(value) {
        this.withCredentials = value;
        return this;
    }
    setPath(path) {
        this.path = path;
        return this;
    }
    setResourcePath(resourcePath) {
        this.resourcePath = resourcePath;
        return this;
    }
    setRequestHeader(requestHeader) {
        this.requestHeader = requestHeader;
        return this;
    }
}
const $2d9d8c9fc2282acc$var$loading = {
};
class $2d9d8c9fc2282acc$export$98435a25b5cf7b2b extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        if (url === undefined) url = '';
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const cached = $2d9d8c9fc2282acc$export$94affb487e701bf2.get(url);
        if (cached !== undefined) {
            this.manager.itemStart(url);
            setTimeout(()=>{
                if (onLoad) onLoad(cached);
                this.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        // Check if request is duplicate
        if ($2d9d8c9fc2282acc$var$loading[url] !== undefined) {
            $2d9d8c9fc2282acc$var$loading[url].push({
                onLoad: onLoad,
                onProgress: onProgress,
                onError: onError
            });
            return;
        }
        // Initialise array for duplicate requests
        $2d9d8c9fc2282acc$var$loading[url] = [];
        $2d9d8c9fc2282acc$var$loading[url].push({
            onLoad: onLoad,
            onProgress: onProgress,
            onError: onError
        });
        // create request
        const req = new Request(url, {
            headers: new Headers(this.requestHeader),
            credentials: this.withCredentials ? 'include' : 'same-origin'
        });
        // start the fetch
        fetch(req).then((response)=>{
            if (response.status === 200 || response.status === 0) {
                // Some browsers return HTTP Status 0 when using non-http protocol
                // e.g. 'file://' or 'data://'. Handle as success.
                if (response.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.');
                if (typeof ReadableStream === 'undefined' || response.body.getReader === undefined) return response;
                const callbacks = $2d9d8c9fc2282acc$var$loading[url];
                const reader = response.body.getReader();
                const contentLength = response.headers.get('Content-Length');
                const total = contentLength ? parseInt(contentLength) : 0;
                const lengthComputable = total !== 0;
                let loaded = 0;
                // periodically read data into the new stream tracking while download progress
                const stream = new ReadableStream({
                    start (controller) {
                        readData();
                        function readData() {
                            reader.read().then(({ done: done , value: value  })=>{
                                if (done) controller.close();
                                else {
                                    loaded += value.byteLength;
                                    const event = new ProgressEvent('progress', {
                                        lengthComputable: lengthComputable,
                                        loaded: loaded,
                                        total: total
                                    });
                                    for(let i280 = 0, il = callbacks.length; i280 < il; i280++){
                                        const callback = callbacks[i280];
                                        if (callback.onProgress) callback.onProgress(event);
                                    }
                                    controller.enqueue(value);
                                    readData();
                                }
                            });
                        }
                    }
                });
                return new Response(stream);
            } else throw Error(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`);
        }).then((response)=>{
            switch(this.responseType){
                case 'arraybuffer':
                    return response.arrayBuffer();
                case 'blob':
                    return response.blob();
                case 'document':
                    return response.text().then((text)=>{
                        const parser = new DOMParser();
                        return parser.parseFromString(text, this.mimeType);
                    });
                case 'json':
                    return response.json();
                default:
                    return response.text();
            }
        }).then((data)=>{
            // Add to cache only on HTTP success, so that we do not cache
            // error response bodies as proper responses to requests.
            $2d9d8c9fc2282acc$export$94affb487e701bf2.add(url, data);
            const callbacks = $2d9d8c9fc2282acc$var$loading[url];
            delete $2d9d8c9fc2282acc$var$loading[url];
            for(let i281 = 0, il = callbacks.length; i281 < il; i281++){
                const callback = callbacks[i281];
                if (callback.onLoad) callback.onLoad(data);
            }
        }).catch((err)=>{
            // Abort errors and other errors are handled the same
            const callbacks = $2d9d8c9fc2282acc$var$loading[url];
            if (callbacks === undefined) {
                // When onLoad was called and url was deleted in `loading`
                this.manager.itemError(url);
                throw err;
            }
            delete $2d9d8c9fc2282acc$var$loading[url];
            for(let i282 = 0, il = callbacks.length; i282 < il; i282++){
                const callback = callbacks[i282];
                if (callback.onError) callback.onError(err);
            }
            this.manager.itemError(url);
        }).finally(()=>{
            this.manager.itemEnd(url);
        });
        this.manager.itemStart(url);
    }
    setResponseType(value) {
        this.responseType = value;
        return this;
    }
    setMimeType(value) {
        this.mimeType = value;
        return this;
    }
}
class $2d9d8c9fc2282acc$export$29711c7e14f61db extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const animations = [];
        for(let i283 = 0; i283 < json.length; i283++){
            const clip = $2d9d8c9fc2282acc$export$d942c706bf23829c.parse(json[i283]);
            animations.push(clip);
        }
        return animations;
    }
}
/**
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class $2d9d8c9fc2282acc$export$bd73ce947a280350 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const images = [];
        const texture = new $2d9d8c9fc2282acc$export$3466bac9141a5cc4();
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setResponseType('arraybuffer');
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(url[i], function(buffer) {
                const texDatas = scope.parse(buffer, true);
                images[i] = {
                    width: texDatas.width,
                    height: texDatas.height,
                    format: texDatas.format,
                    mipmaps: texDatas.mipmaps
                };
                loaded += 1;
                if (loaded === 6) {
                    if (texDatas.mipmapCount === 1) texture.minFilter = $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
                    texture.image = images;
                    texture.format = texDatas.format;
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }
            }, onProgress, onError);
        }
        if (Array.isArray(url)) for(let i284 = 0, il = url.length; i284 < il; ++i284)loadTexture(i284);
        else // compressed cubemap texture stored in a single DDS file
        loader.load(url, function(buffer) {
            const texDatas = scope.parse(buffer, true);
            if (texDatas.isCubemap) {
                const faces = texDatas.mipmaps.length / texDatas.mipmapCount;
                for(let f = 0; f < faces; f++){
                    images[f] = {
                        mipmaps: []
                    };
                    for(let i285 = 0; i285 < texDatas.mipmapCount; i285++){
                        images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i285]);
                        images[f].format = texDatas.format;
                        images[f].width = texDatas.width;
                        images[f].height = texDatas.height;
                    }
                }
                texture.image = images;
            } else {
                texture.image.width = texDatas.width;
                texture.image.height = texDatas.height;
                texture.mipmaps = texDatas.mipmaps;
            }
            if (texDatas.mipmapCount === 1) texture.minFilter = $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
            texture.format = texDatas.format;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture);
        }, onProgress, onError);
        return texture;
    }
}
class $2d9d8c9fc2282acc$export$8905ce1c7a2464a1 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = $2d9d8c9fc2282acc$export$94affb487e701bf2.get(url);
        if (cached !== undefined) {
            scope.manager.itemStart(url);
            setTimeout(function() {
                if (onLoad) onLoad(cached);
                scope.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        const image = $2d9d8c9fc2282acc$var$createElementNS('img');
        function onImageLoad() {
            removeEventListeners();
            $2d9d8c9fc2282acc$export$94affb487e701bf2.add(url, this);
            if (onLoad) onLoad(this);
            scope.manager.itemEnd(url);
        }
        function onImageError(event) {
            removeEventListeners();
            if (onError) onError(event);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
        }
        function removeEventListeners() {
            image.removeEventListener('load', onImageLoad, false);
            image.removeEventListener('error', onImageError, false);
        }
        image.addEventListener('load', onImageLoad, false);
        image.addEventListener('error', onImageError, false);
        if (url.substr(0, 5) !== 'data:') {
            if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;
        }
        scope.manager.itemStart(url);
        image.src = url;
        return image;
    }
}
class $2d9d8c9fc2282acc$export$2ec114afc2cf6308 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(urls, onLoad, onProgress, onError) {
        const texture = new $2d9d8c9fc2282acc$export$ee2e5a18258a4049();
        const loader = new $2d9d8c9fc2282acc$export$8905ce1c7a2464a1(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        let loaded = 0;
        function loadTexture(i) {
            loader.load(urls[i], function(image) {
                texture.images[i] = image;
                loaded++;
                if (loaded === 6) {
                    texture.needsUpdate = true;
                    if (onLoad) onLoad(texture);
                }
            }, undefined, onError);
        }
        for(let i286 = 0; i286 < urls.length; ++i286)loadTexture(i286);
        return texture;
    }
}
/**
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 *
 * Sub classes have to implement the parse() method which will be used in load().
 */ class $2d9d8c9fc2282acc$export$792d8a18f2c55855 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const texture = new $2d9d8c9fc2282acc$export$b691f601014eabe1();
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setResponseType('arraybuffer');
        loader.setRequestHeader(this.requestHeader);
        loader.setPath(this.path);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(buffer) {
            const texData = scope.parse(buffer);
            if (!texData) return;
            if (texData.image !== undefined) texture.image = texData.image;
            else if (texData.data !== undefined) {
                texture.image.width = texData.width;
                texture.image.height = texData.height;
                texture.image.data = texData.data;
            }
            texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : $2d9d8c9fc2282acc$export$9d9334239a5a5e06;
            texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : $2d9d8c9fc2282acc$export$9d9334239a5a5e06;
            texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
            texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
            texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
            if (texData.encoding !== undefined) texture.encoding = texData.encoding;
            if (texData.flipY !== undefined) texture.flipY = texData.flipY;
            if (texData.format !== undefined) texture.format = texData.format;
            if (texData.type !== undefined) texture.type = texData.type;
            if (texData.mipmaps !== undefined) {
                texture.mipmaps = texData.mipmaps;
                texture.minFilter = $2d9d8c9fc2282acc$export$5d8599b6a933fb1b; // presumably...
            }
            if (texData.mipmapCount === 1) texture.minFilter = $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
            if (texData.generateMipmaps !== undefined) texture.generateMipmaps = texData.generateMipmaps;
            texture.needsUpdate = true;
            if (onLoad) onLoad(texture, texData);
        }, onProgress, onError);
        return texture;
    }
}
class $2d9d8c9fc2282acc$export$fd1bfc71f64c538c extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const texture = new $2d9d8c9fc2282acc$export$5431306cf43de24a();
        const loader = new $2d9d8c9fc2282acc$export$8905ce1c7a2464a1(this.manager);
        loader.setCrossOrigin(this.crossOrigin);
        loader.setPath(this.path);
        loader.load(url, function(image) {
            texture.image = image;
            texture.needsUpdate = true;
            if (onLoad !== undefined) onLoad(texture);
        }, onProgress, onError);
        return texture;
    }
}
class $2d9d8c9fc2282acc$export$6ecadb6ed240d696 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(color, intensity = 1){
        super();
        this.type = 'Light';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color);
        this.intensity = intensity;
    }
    dispose() {
    // Empty here in base class; some subclasses override.
    }
    copy(source) {
        super.copy(source);
        this.color.copy(source.color);
        this.intensity = source.intensity;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.color = this.color.getHex();
        data.object.intensity = this.intensity;
        if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();
        if (this.distance !== undefined) data.object.distance = this.distance;
        if (this.angle !== undefined) data.object.angle = this.angle;
        if (this.decay !== undefined) data.object.decay = this.decay;
        if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;
        if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();
        return data;
    }
}
$2d9d8c9fc2282acc$export$6ecadb6ed240d696.prototype.isLight = true;
class $2d9d8c9fc2282acc$export$8d474f55edbb9624 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(skyColor, groundColor, intensity){
        super(skyColor, intensity);
        this.type = 'HemisphereLight';
        this.position.copy($2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultUp);
        this.updateMatrix();
        this.groundColor = new $2d9d8c9fc2282acc$export$892596cec99bc70e(groundColor);
    }
    copy(source) {
        $2d9d8c9fc2282acc$export$6ecadb6ed240d696.prototype.copy.call(this, source);
        this.groundColor.copy(source.groundColor);
        return this;
    }
}
$2d9d8c9fc2282acc$export$8d474f55edbb9624.prototype.isHemisphereLight = true;
const $2d9d8c9fc2282acc$var$_projScreenMatrix$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_lightPositionWorld$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_lookTarget$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$var$LightShadow {
    constructor(camera){
        this.camera = camera;
        this.bias = 0;
        this.normalBias = 0;
        this.radius = 1;
        this.blurSamples = 8;
        this.mapSize = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(512, 512);
        this.map = null;
        this.mapPass = null;
        this.matrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        this.autoUpdate = true;
        this.needsUpdate = false;
        this._frustum = new $2d9d8c9fc2282acc$export$35efe6f4c85463d2();
        this._frameExtents = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(1, 1);
        this._viewportCount = 1;
        this._viewports = [
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 0, 1, 1)
        ];
    }
    getViewportCount() {
        return this._viewportCount;
    }
    getFrustum() {
        return this._frustum;
    }
    updateMatrices(light) {
        const shadowCamera = this.camera;
        const shadowMatrix = this.matrix;
        $2d9d8c9fc2282acc$var$_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
        shadowCamera.position.copy($2d9d8c9fc2282acc$var$_lightPositionWorld$1);
        $2d9d8c9fc2282acc$var$_lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
        shadowCamera.lookAt($2d9d8c9fc2282acc$var$_lookTarget$1);
        shadowCamera.updateMatrixWorld();
        $2d9d8c9fc2282acc$var$_projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix($2d9d8c9fc2282acc$var$_projScreenMatrix$1);
        shadowMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
        shadowMatrix.multiply(shadowCamera.projectionMatrix);
        shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
    }
    getViewport(viewportIndex) {
        return this._viewports[viewportIndex];
    }
    getFrameExtents() {
        return this._frameExtents;
    }
    dispose() {
        if (this.map) this.map.dispose();
        if (this.mapPass) this.mapPass.dispose();
    }
    copy(source) {
        this.camera = source.camera.clone();
        this.bias = source.bias;
        this.radius = source.radius;
        this.mapSize.copy(source.mapSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        const object = {
        };
        if (this.bias !== 0) object.bias = this.bias;
        if (this.normalBias !== 0) object.normalBias = this.normalBias;
        if (this.radius !== 1) object.radius = this.radius;
        if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();
        object.camera = this.camera.toJSON(false).object;
        delete object.camera.matrix;
        return object;
    }
}
class $2d9d8c9fc2282acc$var$SpotLightShadow extends $2d9d8c9fc2282acc$var$LightShadow {
    constructor(){
        super(new $2d9d8c9fc2282acc$export$74e4ae24825f68d7(50, 1, 0.5, 500));
        this.focus = 1;
    }
    updateMatrices(light) {
        const camera = this.camera;
        const fov = $2d9d8c9fc2282acc$var$RAD2DEG * 2 * light.angle * this.focus;
        const aspect = this.mapSize.width / this.mapSize.height;
        const far = light.distance || camera.far;
        if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {
            camera.fov = fov;
            camera.aspect = aspect;
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        super.updateMatrices(light);
    }
    copy(source) {
        super.copy(source);
        this.focus = source.focus;
        return this;
    }
}
$2d9d8c9fc2282acc$var$SpotLightShadow.prototype.isSpotLightShadow = true;
class $2d9d8c9fc2282acc$export$81495cbb73897362 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1){
        super(color, intensity);
        this.type = 'SpotLight';
        this.position.copy($2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultUp);
        this.updateMatrix();
        this.target = new $2d9d8c9fc2282acc$export$e4dd07dff30cc924();
        this.distance = distance;
        this.angle = angle;
        this.penumbra = penumbra;
        this.decay = decay; // for physically correct lights, should be 2.
        this.shadow = new $2d9d8c9fc2282acc$var$SpotLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)
        return this.intensity * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / Math.PI;
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source) {
        super.copy(source);
        this.distance = source.distance;
        this.angle = source.angle;
        this.penumbra = source.penumbra;
        this.decay = source.decay;
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
    }
}
$2d9d8c9fc2282acc$export$81495cbb73897362.prototype.isSpotLight = true;
const $2d9d8c9fc2282acc$var$_projScreenMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_lightPositionWorld = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_lookTarget = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$var$PointLightShadow extends $2d9d8c9fc2282acc$var$LightShadow {
    constructor(){
        super(new $2d9d8c9fc2282acc$export$74e4ae24825f68d7(90, 1, 0.5, 500));
        this._frameExtents = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(4, 2);
        this._viewportCount = 6;
        this._viewports = [
            // These viewports map a cube-map onto a 2D texture with the
            // following orientation:
            //
            //  xzXZ
            //   y Y
            //
            // X - Positive x direction
            // x - Negative x direction
            // Y - Positive y direction
            // y - Negative y direction
            // Z - Positive z direction
            // z - Negative z direction
            // positive X
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(2, 1, 1, 1),
            // negative X
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(0, 1, 1, 1),
            // positive Z
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(3, 1, 1, 1),
            // negative Z
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(1, 1, 1, 1),
            // positive Y
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(3, 0, 1, 1),
            // negative Y
            new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3(1, 0, 1, 1)
        ];
        this._cubeDirections = [
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(1, 0, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(-1, 0, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 1),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, -1),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, -1, 0)
        ];
        this._cubeUps = [
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 1, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 1),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, -1)
        ];
    }
    updateMatrices(light, viewportIndex = 0) {
        const camera = this.camera;
        const shadowMatrix = this.matrix;
        const far = light.distance || camera.far;
        if (far !== camera.far) {
            camera.far = far;
            camera.updateProjectionMatrix();
        }
        $2d9d8c9fc2282acc$var$_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);
        camera.position.copy($2d9d8c9fc2282acc$var$_lightPositionWorld);
        $2d9d8c9fc2282acc$var$_lookTarget.copy(camera.position);
        $2d9d8c9fc2282acc$var$_lookTarget.add(this._cubeDirections[viewportIndex]);
        camera.up.copy(this._cubeUps[viewportIndex]);
        camera.lookAt($2d9d8c9fc2282acc$var$_lookTarget);
        camera.updateMatrixWorld();
        shadowMatrix.makeTranslation(-$2d9d8c9fc2282acc$var$_lightPositionWorld.x, -$2d9d8c9fc2282acc$var$_lightPositionWorld.y, -$2d9d8c9fc2282acc$var$_lightPositionWorld.z);
        $2d9d8c9fc2282acc$var$_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);
        this._frustum.setFromProjectionMatrix($2d9d8c9fc2282acc$var$_projScreenMatrix);
    }
}
$2d9d8c9fc2282acc$var$PointLightShadow.prototype.isPointLightShadow = true;
class $2d9d8c9fc2282acc$export$4c9c1cb3f0b6f455 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(color, intensity, distance = 0, decay = 1){
        super(color, intensity);
        this.type = 'PointLight';
        this.distance = distance;
        this.decay = decay; // for physically correct lights, should be 2.
        this.shadow = new $2d9d8c9fc2282acc$var$PointLightShadow();
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in candela)
        // for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)
        return this.intensity * 4 * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in candela) from the desired luminous power (in lumens)
        this.intensity = power / (4 * Math.PI);
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source) {
        super.copy(source);
        this.distance = source.distance;
        this.decay = source.decay;
        this.shadow = source.shadow.clone();
        return this;
    }
}
$2d9d8c9fc2282acc$export$4c9c1cb3f0b6f455.prototype.isPointLight = true;
class $2d9d8c9fc2282acc$var$DirectionalLightShadow extends $2d9d8c9fc2282acc$var$LightShadow {
    constructor(){
        super(new $2d9d8c9fc2282acc$export$9ebf355ee4ed261b(-5, 5, 5, -5, 0.5, 500));
    }
}
$2d9d8c9fc2282acc$var$DirectionalLightShadow.prototype.isDirectionalLightShadow = true;
class $2d9d8c9fc2282acc$export$3fea33cc9972c868 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(color, intensity){
        super(color, intensity);
        this.type = 'DirectionalLight';
        this.position.copy($2d9d8c9fc2282acc$export$e4dd07dff30cc924.DefaultUp);
        this.updateMatrix();
        this.target = new $2d9d8c9fc2282acc$export$e4dd07dff30cc924();
        this.shadow = new $2d9d8c9fc2282acc$var$DirectionalLightShadow();
    }
    dispose() {
        this.shadow.dispose();
    }
    copy(source) {
        super.copy(source);
        this.target = source.target.clone();
        this.shadow = source.shadow.clone();
        return this;
    }
}
$2d9d8c9fc2282acc$export$3fea33cc9972c868.prototype.isDirectionalLight = true;
class $2d9d8c9fc2282acc$export$af279bfef9ec2c96 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(color, intensity){
        super(color, intensity);
        this.type = 'AmbientLight';
    }
}
$2d9d8c9fc2282acc$export$af279bfef9ec2c96.prototype.isAmbientLight = true;
class $2d9d8c9fc2282acc$export$61db2d908bbd2429 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(color, intensity, width = 10, height = 10){
        super(color, intensity);
        this.type = 'RectAreaLight';
        this.width = width;
        this.height = height;
    }
    get power() {
        // compute the light's luminous power (in lumens) from its intensity (in nits)
        return this.intensity * this.width * this.height * Math.PI;
    }
    set power(power) {
        // set the light's intensity (in nits) from the desired luminous power (in lumens)
        this.intensity = power / (this.width * this.height * Math.PI);
    }
    copy(source) {
        super.copy(source);
        this.width = source.width;
        this.height = source.height;
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.width = this.width;
        data.object.height = this.height;
        return data;
    }
}
$2d9d8c9fc2282acc$export$61db2d908bbd2429.prototype.isRectAreaLight = true;
/**
 * Primary reference:
 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
 *
 * Secondary reference:
 *   https://www.ppsloan.org/publications/StupidSH36.pdf
 */ // 3-band SH defined by 9 coefficients
class $2d9d8c9fc2282acc$export$ba61ce607e1f405a {
    constructor(){
        this.coefficients = [];
        for(let i287 = 0; i287 < 9; i287++)this.coefficients.push(new $2d9d8c9fc2282acc$export$64b5c384219d3699());
    }
    set(coefficients) {
        for(let i288 = 0; i288 < 9; i288++)this.coefficients[i288].copy(coefficients[i288]);
        return this;
    }
    zero() {
        for(let i289 = 0; i289 < 9; i289++)this.coefficients[i289].set(0, 0, 0);
        return this;
    }
    // get the radiance in the direction of the normal
    // target is a Vector3
    getAt(normal, target) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target.copy(coeff[0]).multiplyScalar(0.282095);
        // band 1
        target.addScaledVector(coeff[1], 0.488603 * y);
        target.addScaledVector(coeff[2], 0.488603 * z);
        target.addScaledVector(coeff[3], 0.488603 * x);
        // band 2
        target.addScaledVector(coeff[4], 1.092548 * (x * y));
        target.addScaledVector(coeff[5], 1.092548 * (y * z));
        target.addScaledVector(coeff[6], 0.315392 * (3 * z * z - 1));
        target.addScaledVector(coeff[7], 1.092548 * (x * z));
        target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));
        return target;
    }
    // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
    // target is a Vector3
    // https://graphics.stanford.edu/papers/envmap/envmap.pdf
    getIrradianceAt(normal, target) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        const coeff = this.coefficients;
        // band 0
        target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095
        // band 1
        target.addScaledVector(coeff[1], 1.023328 * y); // ( 2 * π / 3 ) * 0.488603
        target.addScaledVector(coeff[2], 1.023328 * z);
        target.addScaledVector(coeff[3], 1.023328 * x);
        // band 2
        target.addScaledVector(coeff[4], 0.858086 * x * y); // ( π / 4 ) * 1.092548
        target.addScaledVector(coeff[5], 0.858086 * y * z);
        target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3
        target.addScaledVector(coeff[7], 0.858086 * x * z);
        target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274
        return target;
    }
    add(sh) {
        for(let i290 = 0; i290 < 9; i290++)this.coefficients[i290].add(sh.coefficients[i290]);
        return this;
    }
    addScaledSH(sh, s) {
        for(let i291 = 0; i291 < 9; i291++)this.coefficients[i291].addScaledVector(sh.coefficients[i291], s);
        return this;
    }
    scale(s) {
        for(let i292 = 0; i292 < 9; i292++)this.coefficients[i292].multiplyScalar(s);
        return this;
    }
    lerp(sh, alpha) {
        for(let i293 = 0; i293 < 9; i293++)this.coefficients[i293].lerp(sh.coefficients[i293], alpha);
        return this;
    }
    equals(sh) {
        for(let i294 = 0; i294 < 9; i294++){
            if (!this.coefficients[i294].equals(sh.coefficients[i294])) return false;
        }
        return true;
    }
    copy(sh) {
        return this.set(sh.coefficients);
    }
    clone() {
        return new this.constructor().copy(this);
    }
    fromArray(array, offset = 0) {
        const coefficients = this.coefficients;
        for(let i295 = 0; i295 < 9; i295++)coefficients[i295].fromArray(array, offset + i295 * 3);
        return this;
    }
    toArray(array = [], offset = 0) {
        const coefficients = this.coefficients;
        for(let i296 = 0; i296 < 9; i296++)coefficients[i296].toArray(array, offset + i296 * 3);
        return array;
    }
    // evaluate the basis functions
    // shBasis is an Array[ 9 ]
    static getBasisAt(normal, shBasis) {
        // normal is assumed to be unit length
        const x = normal.x, y = normal.y, z = normal.z;
        // band 0
        shBasis[0] = 0.282095;
        // band 1
        shBasis[1] = 0.488603 * y;
        shBasis[2] = 0.488603 * z;
        shBasis[3] = 0.488603 * x;
        // band 2
        shBasis[4] = 1.092548 * x * y;
        shBasis[5] = 1.092548 * y * z;
        shBasis[6] = 0.315392 * (3 * z * z - 1);
        shBasis[7] = 1.092548 * x * z;
        shBasis[8] = 0.546274 * (x * x - y * y);
    }
}
$2d9d8c9fc2282acc$export$ba61ce607e1f405a.prototype.isSphericalHarmonics3 = true;
class $2d9d8c9fc2282acc$export$e7ef036e309b38d2 extends $2d9d8c9fc2282acc$export$6ecadb6ed240d696 {
    constructor(sh = new $2d9d8c9fc2282acc$export$ba61ce607e1f405a(), intensity = 1){
        super(undefined, intensity);
        this.sh = sh;
    }
    copy(source) {
        super.copy(source);
        this.sh.copy(source.sh);
        return this;
    }
    fromJSON(json) {
        this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();
        this.sh.fromArray(json.sh);
        return this;
    }
    toJSON(meta) {
        const data = super.toJSON(meta);
        data.object.sh = this.sh.toArray();
        return data;
    }
}
$2d9d8c9fc2282acc$export$e7ef036e309b38d2.prototype.isLightProbe = true;
class $2d9d8c9fc2282acc$export$3bd6d323353dcf96 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
        this.textures = {
        };
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json) {
        const textures = this.textures;
        function getTexture(name) {
            if (textures[name] === undefined) console.warn('THREE.MaterialLoader: Undefined texture', name);
            return textures[name];
        }
        const material = new $2d9d8c9fc2282acc$var$Materials[json.type]();
        if (json.uuid !== undefined) material.uuid = json.uuid;
        if (json.name !== undefined) material.name = json.name;
        if (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);
        if (json.roughness !== undefined) material.roughness = json.roughness;
        if (json.metalness !== undefined) material.metalness = json.metalness;
        if (json.sheen !== undefined) material.sheen = json.sheen;
        if (json.sheenColor !== undefined) material.sheenColor = new $2d9d8c9fc2282acc$export$892596cec99bc70e().setHex(json.sheenColor);
        if (json.sheenRoughness !== undefined) material.sheenRoughness = json.sheenRoughness;
        if (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);
        if (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);
        if (json.specularIntensity !== undefined) material.specularIntensity = json.specularIntensity;
        if (json.specularColor !== undefined && material.specularColor !== undefined) material.specularColor.setHex(json.specularColor);
        if (json.shininess !== undefined) material.shininess = json.shininess;
        if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;
        if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;
        if (json.transmission !== undefined) material.transmission = json.transmission;
        if (json.thickness !== undefined) material.thickness = json.thickness;
        if (json.attenuationDistance !== undefined) material.attenuationDistance = json.attenuationDistance;
        if (json.attenuationColor !== undefined && material.attenuationColor !== undefined) material.attenuationColor.setHex(json.attenuationColor);
        if (json.fog !== undefined) material.fog = json.fog;
        if (json.flatShading !== undefined) material.flatShading = json.flatShading;
        if (json.blending !== undefined) material.blending = json.blending;
        if (json.combine !== undefined) material.combine = json.combine;
        if (json.side !== undefined) material.side = json.side;
        if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;
        if (json.opacity !== undefined) material.opacity = json.opacity;
        if (json.format !== undefined) material.format = json.format;
        if (json.transparent !== undefined) material.transparent = json.transparent;
        if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;
        if (json.depthTest !== undefined) material.depthTest = json.depthTest;
        if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;
        if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;
        if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;
        if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;
        if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;
        if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;
        if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;
        if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;
        if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;
        if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;
        if (json.wireframe !== undefined) material.wireframe = json.wireframe;
        if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;
        if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;
        if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;
        if (json.rotation !== undefined) material.rotation = json.rotation;
        if (json.linewidth !== 1) material.linewidth = json.linewidth;
        if (json.dashSize !== undefined) material.dashSize = json.dashSize;
        if (json.gapSize !== undefined) material.gapSize = json.gapSize;
        if (json.scale !== undefined) material.scale = json.scale;
        if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;
        if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;
        if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;
        if (json.dithering !== undefined) material.dithering = json.dithering;
        if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;
        if (json.premultipliedAlpha !== undefined) material.premultipliedAlpha = json.premultipliedAlpha;
        if (json.visible !== undefined) material.visible = json.visible;
        if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;
        if (json.userData !== undefined) material.userData = json.userData;
        if (json.vertexColors !== undefined) {
            if (typeof json.vertexColors === 'number') material.vertexColors = json.vertexColors > 0 ? true : false;
            else material.vertexColors = json.vertexColors;
        }
        // Shader Material
        if (json.uniforms !== undefined) for(const name4 in json.uniforms){
            const uniform = json.uniforms[name4];
            material.uniforms[name4] = {
            };
            switch(uniform.type){
                case 't':
                    material.uniforms[name4].value = getTexture(uniform.value);
                    break;
                case 'c':
                    material.uniforms[name4].value = new $2d9d8c9fc2282acc$export$892596cec99bc70e().setHex(uniform.value);
                    break;
                case 'v2':
                    material.uniforms[name4].value = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1().fromArray(uniform.value);
                    break;
                case 'v3':
                    material.uniforms[name4].value = new $2d9d8c9fc2282acc$export$64b5c384219d3699().fromArray(uniform.value);
                    break;
                case 'v4':
                    material.uniforms[name4].value = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3().fromArray(uniform.value);
                    break;
                case 'm3':
                    material.uniforms[name4].value = new $2d9d8c9fc2282acc$export$8ff26dafa08918().fromArray(uniform.value);
                    break;
                case 'm4':
                    material.uniforms[name4].value = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5().fromArray(uniform.value);
                    break;
                default:
                    material.uniforms[name4].value = uniform.value;
            }
        }
        if (json.defines !== undefined) material.defines = json.defines;
        if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;
        if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;
        if (json.extensions !== undefined) for(const key in json.extensions)material.extensions[key] = json.extensions[key];
        // Deprecated
        if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading
        // for PointsMaterial
        if (json.size !== undefined) material.size = json.size;
        if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation;
        // maps
        if (json.map !== undefined) material.map = getTexture(json.map);
        if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);
        if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);
        if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);
        if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;
        if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);
        if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;
        if (json.normalScale !== undefined) {
            let normalScale = json.normalScale;
            if (Array.isArray(normalScale) === false) // Blender exporter used to export a scalar. See #7459
            normalScale = [
                normalScale,
                normalScale
            ];
            material.normalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1().fromArray(normalScale);
        }
        if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);
        if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;
        if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;
        if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);
        if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);
        if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);
        if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;
        if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);
        if (json.specularIntensityMap !== undefined) material.specularIntensityMap = getTexture(json.specularIntensityMap);
        if (json.specularColorMap !== undefined) material.specularColorMap = getTexture(json.specularColorMap);
        if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);
        if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;
        if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;
        if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;
        if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);
        if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;
        if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);
        if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;
        if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);
        if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);
        if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
        if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
        if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1().fromArray(json.clearcoatNormalScale);
        if (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);
        if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);
        if (json.sheenColorMap !== undefined) material.sheenColorMap = getTexture(json.sheenColorMap);
        if (json.sheenRoughnessMap !== undefined) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
        return material;
    }
    setTextures(value) {
        this.textures = value;
        return this;
    }
}
class $2d9d8c9fc2282acc$export$b5d2dc08d867e41a {
    static decodeText(array) {
        if (typeof TextDecoder !== 'undefined') return new TextDecoder().decode(array);
        // Avoid the String.fromCharCode.apply(null, array) shortcut, which
        // throws a "maximum call stack size exceeded" error for large arrays.
        let s = '';
        for(let i297 = 0, il = array.length; i297 < il; i297++)// Implicitly assumes little-endian.
        s += String.fromCharCode(array[i297]);
        try {
            // merges multi-byte utf-8 characters.
            return decodeURIComponent(escape(s));
        } catch (e) {
            return s;
        }
    }
    static extractUrlBase(url) {
        const index = url.lastIndexOf('/');
        if (index === -1) return './';
        return url.substr(0, index + 1);
    }
    static resolveURL(url, path) {
        // Invalid URL
        if (typeof url !== 'string' || url === '') return '';
        // Host Relative URL
        if (/^https?:\/\//i.test(path) && /^\//.test(url)) path = path.replace(/(^https?:\/\/[^\/]+).*/i, '$1');
        // Absolute URL http://,https://,//
        if (/^(https?:)?\/\//i.test(url)) return url;
        // Data URI
        if (/^data:.*,.*$/i.test(url)) return url;
        // Blob URL
        if (/^blob:.*$/i.test(url)) return url;
        // Relative URL
        return path + url;
    }
}
class $2d9d8c9fc2282acc$export$231f009cbe414146 extends $2d9d8c9fc2282acc$export$b7be63a67df8959 {
    constructor(){
        super();
        this.type = 'InstancedBufferGeometry';
        this.instanceCount = Infinity;
    }
    copy(source) {
        super.copy(source);
        this.instanceCount = source.instanceCount;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    toJSON() {
        const data = super.toJSON(this);
        data.instanceCount = this.instanceCount;
        data.isInstancedBufferGeometry = true;
        return data;
    }
}
$2d9d8c9fc2282acc$export$231f009cbe414146.prototype.isInstancedBufferGeometry = true;
class $2d9d8c9fc2282acc$export$dc275bb96327833a extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(scope.manager);
        loader.setPath(scope.path);
        loader.setRequestHeader(scope.requestHeader);
        loader.setWithCredentials(scope.withCredentials);
        loader.load(url, function(text) {
            try {
                onLoad(scope.parse(JSON.parse(text)));
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
    parse(json1) {
        const interleavedBufferMap = {
        };
        const arrayBufferMap = {
        };
        function getInterleavedBuffer(json, uuid) {
            if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];
            const interleavedBuffers = json.interleavedBuffers;
            const interleavedBuffer = interleavedBuffers[uuid];
            const buffer = getArrayBuffer(json, interleavedBuffer.buffer);
            const array = $2d9d8c9fc2282acc$var$getTypedArray(interleavedBuffer.type, buffer);
            const ib = new $2d9d8c9fc2282acc$export$3d5cd879f108f53f(array, interleavedBuffer.stride);
            ib.uuid = interleavedBuffer.uuid;
            interleavedBufferMap[uuid] = ib;
            return ib;
        }
        function getArrayBuffer(json, uuid) {
            if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];
            const arrayBuffers = json.arrayBuffers;
            const arrayBuffer = arrayBuffers[uuid];
            const ab = new Uint32Array(arrayBuffer).buffer;
            arrayBufferMap[uuid] = ab;
            return ab;
        }
        const geometry = json1.isInstancedBufferGeometry ? new $2d9d8c9fc2282acc$export$231f009cbe414146() : new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        const index = json1.data.index;
        if (index !== undefined) {
            const typedArray = $2d9d8c9fc2282acc$var$getTypedArray(index.type, index.array);
            geometry.setIndex(new $2d9d8c9fc2282acc$export$8dea267bd6bde117(typedArray, 1));
        }
        const attributes = json1.data.attributes;
        for(const key in attributes){
            const attribute = attributes[key];
            let bufferAttribute;
            if (attribute.isInterleavedBufferAttribute) {
                const interleavedBuffer = getInterleavedBuffer(json1.data, attribute.data);
                bufferAttribute = new $2d9d8c9fc2282acc$export$920b6d07334599c7(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
            } else {
                const typedArray = $2d9d8c9fc2282acc$var$getTypedArray(attribute.type, attribute.array);
                const bufferAttributeConstr = attribute.isInstancedBufferAttribute ? $2d9d8c9fc2282acc$export$32ea87a8b54d744a : $2d9d8c9fc2282acc$export$8dea267bd6bde117;
                bufferAttribute = new bufferAttributeConstr(typedArray, attribute.itemSize, attribute.normalized);
            }
            if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
            if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);
            if (attribute.updateRange !== undefined) {
                bufferAttribute.updateRange.offset = attribute.updateRange.offset;
                bufferAttribute.updateRange.count = attribute.updateRange.count;
            }
            geometry.setAttribute(key, bufferAttribute);
        }
        const morphAttributes = json1.data.morphAttributes;
        if (morphAttributes) for(const key2 in morphAttributes){
            const attributeArray = morphAttributes[key2];
            const array = [];
            for(let i298 = 0, il = attributeArray.length; i298 < il; i298++){
                const attribute = attributeArray[i298];
                let bufferAttribute;
                if (attribute.isInterleavedBufferAttribute) {
                    const interleavedBuffer = getInterleavedBuffer(json1.data, attribute.data);
                    bufferAttribute = new $2d9d8c9fc2282acc$export$920b6d07334599c7(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                } else {
                    const typedArray = $2d9d8c9fc2282acc$var$getTypedArray(attribute.type, attribute.array);
                    bufferAttribute = new $2d9d8c9fc2282acc$export$8dea267bd6bde117(typedArray, attribute.itemSize, attribute.normalized);
                }
                if (attribute.name !== undefined) bufferAttribute.name = attribute.name;
                array.push(bufferAttribute);
            }
            geometry.morphAttributes[key2] = array;
        }
        const morphTargetsRelative = json1.data.morphTargetsRelative;
        if (morphTargetsRelative) geometry.morphTargetsRelative = true;
        const groups = json1.data.groups || json1.data.drawcalls || json1.data.offsets;
        if (groups !== undefined) for(let i299 = 0, n = groups.length; i299 !== n; ++i299){
            const group = groups[i299];
            geometry.addGroup(group.start, group.count, group.materialIndex);
        }
        const boundingSphere = json1.data.boundingSphere;
        if (boundingSphere !== undefined) {
            const center = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
            if (boundingSphere.center !== undefined) center.fromArray(boundingSphere.center);
            geometry.boundingSphere = new $2d9d8c9fc2282acc$export$805e8b72413ccaba(center, boundingSphere.radius);
        }
        if (json1.name) geometry.name = json1.name;
        if (json1.userData) geometry.userData = json1.userData;
        return geometry;
    }
}
class $2d9d8c9fc2282acc$export$40110c8505c5ad19 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const path = this.path === '' ? $2d9d8c9fc2282acc$export$b5d2dc08d867e41a.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(text) {
            let json = null;
            try {
                json = JSON.parse(text);
            } catch (error) {
                if (onError !== undefined) onError(error);
                console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
                return;
            }
            const metadata = json.metadata;
            if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {
                console.error('THREE.ObjectLoader: Can\'t load ' + url);
                return;
            }
            scope.parse(json, onLoad);
        }, onProgress, onError);
    }
    async loadAsync(url, onProgress) {
        const scope = this;
        const path = this.path === '' ? $2d9d8c9fc2282acc$export$b5d2dc08d867e41a.extractUrlBase(url) : this.path;
        this.resourcePath = this.resourcePath || path;
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        const text = await loader.loadAsync(url, onProgress);
        const json = JSON.parse(text);
        const metadata = json.metadata;
        if (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') throw new Error('THREE.ObjectLoader: Can\'t load ' + url);
        return await scope.parseAsync(json);
    }
    parse(json, onLoad) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = this.parseImages(json.images, function() {
            if (onLoad !== undefined) onLoad(object);
        });
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        //
        if (onLoad !== undefined) {
            let hasImages = false;
            for(const uuid in images)if (images[uuid] instanceof HTMLImageElement) {
                hasImages = true;
                break;
            }
            if (hasImages === false) onLoad(object);
        }
        return object;
    }
    async parseAsync(json) {
        const animations = this.parseAnimations(json.animations);
        const shapes = this.parseShapes(json.shapes);
        const geometries = this.parseGeometries(json.geometries, shapes);
        const images = await this.parseImagesAsync(json.images);
        const textures = this.parseTextures(json.textures, images);
        const materials = this.parseMaterials(json.materials, textures);
        const object = this.parseObject(json.object, geometries, materials, textures, animations);
        const skeletons = this.parseSkeletons(json.skeletons, object);
        this.bindSkeletons(object, skeletons);
        return object;
    }
    parseShapes(json) {
        const shapes = {
        };
        if (json !== undefined) for(let i300 = 0, l = json.length; i300 < l; i300++){
            const shape = new $2d9d8c9fc2282acc$export$6428a7f2611ef1fa().fromJSON(json[i300]);
            shapes[shape.uuid] = shape;
        }
        return shapes;
    }
    parseSkeletons(json, object) {
        const skeletons = {
        };
        const bones = {
        };
        // generate bone lookup table
        object.traverse(function(child) {
            if (child.isBone) bones[child.uuid] = child;
        });
        // create skeletons
        if (json !== undefined) for(let i301 = 0, l = json.length; i301 < l; i301++){
            const skeleton = new $2d9d8c9fc2282acc$export$8f31e4c4a37b8e9c().fromJSON(json[i301], bones);
            skeletons[skeleton.uuid] = skeleton;
        }
        return skeletons;
    }
    parseGeometries(json, shapes) {
        const geometries = {
        };
        if (json !== undefined) {
            const bufferGeometryLoader = new $2d9d8c9fc2282acc$export$dc275bb96327833a();
            for(let i302 = 0, l = json.length; i302 < l; i302++){
                let geometry;
                const data = json[i302];
                switch(data.type){
                    case 'BufferGeometry':
                    case 'InstancedBufferGeometry':
                        geometry = bufferGeometryLoader.parse(data);
                        break;
                    case 'Geometry':
                        console.error('THREE.ObjectLoader: The legacy Geometry type is no longer supported.');
                        break;
                    default:
                        if (data.type in $2d9d8c9fc2282acc$var$Geometries) geometry = $2d9d8c9fc2282acc$var$Geometries[data.type].fromJSON(data, shapes);
                        else console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`);
                }
                geometry.uuid = data.uuid;
                if (data.name !== undefined) geometry.name = data.name;
                if (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;
                geometries[data.uuid] = geometry;
            }
        }
        return geometries;
    }
    parseMaterials(json, textures) {
        const cache = {
        }; // MultiMaterial
        const materials = {
        };
        if (json !== undefined) {
            const loader = new $2d9d8c9fc2282acc$export$3bd6d323353dcf96();
            loader.setTextures(textures);
            for(let i303 = 0, l = json.length; i303 < l; i303++){
                const data = json[i303];
                if (data.type === 'MultiMaterial') {
                    // Deprecated
                    const array = [];
                    for(let j = 0; j < data.materials.length; j++){
                        const material = data.materials[j];
                        if (cache[material.uuid] === undefined) cache[material.uuid] = loader.parse(material);
                        array.push(cache[material.uuid]);
                    }
                    materials[data.uuid] = array;
                } else {
                    if (cache[data.uuid] === undefined) cache[data.uuid] = loader.parse(data);
                    materials[data.uuid] = cache[data.uuid];
                }
            }
        }
        return materials;
    }
    parseAnimations(json) {
        const animations = {
        };
        if (json !== undefined) for(let i304 = 0; i304 < json.length; i304++){
            const data = json[i304];
            const clip = $2d9d8c9fc2282acc$export$d942c706bf23829c.parse(data);
            animations[clip.uuid] = clip;
        }
        return animations;
    }
    parseImages(json, onLoad) {
        const scope = this;
        const images = {
        };
        let loader;
        function loadImage(url) {
            scope.manager.itemStart(url);
            return loader.load(url, function() {
                scope.manager.itemEnd(url);
            }, undefined, function() {
                scope.manager.itemError(url);
                scope.manager.itemEnd(url);
            });
        }
        function deserializeImage(image) {
            if (typeof image === 'string') {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return loadImage(path);
            } else {
                if (image.data) return {
                    data: $2d9d8c9fc2282acc$var$getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json !== undefined && json.length > 0) {
            const manager = new $2d9d8c9fc2282acc$export$99cc795e99919eed(onLoad);
            loader = new $2d9d8c9fc2282acc$export$8905ce1c7a2464a1(manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i305 = 0, il = json.length; i305 < il; i305++){
                const image = json[i305];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    images[image.uuid] = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) images[image.uuid].push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            images[image.uuid].push(new $2d9d8c9fc2282acc$export$b691f601014eabe1(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                } else {
                    // load single image
                    const deserializedImage = deserializeImage(image.url);
                    if (deserializedImage !== null) images[image.uuid] = deserializedImage;
                }
            }
        }
        return images;
    }
    async parseImagesAsync(json) {
        const scope = this;
        const images = {
        };
        let loader;
        async function deserializeImage(image) {
            if (typeof image === 'string') {
                const url = image;
                const path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(url) ? url : scope.resourcePath + url;
                return await loader.loadAsync(path);
            } else {
                if (image.data) return {
                    data: $2d9d8c9fc2282acc$var$getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                };
                else return null;
            }
        }
        if (json !== undefined && json.length > 0) {
            loader = new $2d9d8c9fc2282acc$export$8905ce1c7a2464a1(this.manager);
            loader.setCrossOrigin(this.crossOrigin);
            for(let i306 = 0, il = json.length; i306 < il; i306++){
                const image = json[i306];
                const url = image.url;
                if (Array.isArray(url)) {
                    // load array of images e.g CubeTexture
                    images[image.uuid] = [];
                    for(let j = 0, jl = url.length; j < jl; j++){
                        const currentUrl = url[j];
                        const deserializedImage = await deserializeImage(currentUrl);
                        if (deserializedImage !== null) {
                            if (deserializedImage instanceof HTMLImageElement) images[image.uuid].push(deserializedImage);
                            else // special case: handle array of data textures for cube textures
                            images[image.uuid].push(new $2d9d8c9fc2282acc$export$b691f601014eabe1(deserializedImage.data, deserializedImage.width, deserializedImage.height));
                        }
                    }
                } else {
                    // load single image
                    const deserializedImage = await deserializeImage(image.url);
                    if (deserializedImage !== null) images[image.uuid] = deserializedImage;
                }
            }
        }
        return images;
    }
    parseTextures(json, images) {
        function parseConstant(value, type) {
            if (typeof value === 'number') return value;
            console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);
            return type[value];
        }
        const textures = {
        };
        if (json !== undefined) for(let i307 = 0, l = json.length; i307 < l; i307++){
            const data = json[i307];
            if (data.image === undefined) console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid);
            if (images[data.image] === undefined) console.warn('THREE.ObjectLoader: Undefined image', data.image);
            let texture;
            const image = images[data.image];
            if (Array.isArray(image)) {
                texture = new $2d9d8c9fc2282acc$export$ee2e5a18258a4049(image);
                if (image.length === 6) texture.needsUpdate = true;
            } else {
                if (image && image.data) texture = new $2d9d8c9fc2282acc$export$b691f601014eabe1(image.data, image.width, image.height);
                else texture = new $2d9d8c9fc2282acc$export$5431306cf43de24a(image);
                if (image) texture.needsUpdate = true; // textures can have undefined image data
            }
            texture.uuid = data.uuid;
            if (data.name !== undefined) texture.name = data.name;
            if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, $2d9d8c9fc2282acc$var$TEXTURE_MAPPING);
            if (data.offset !== undefined) texture.offset.fromArray(data.offset);
            if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);
            if (data.center !== undefined) texture.center.fromArray(data.center);
            if (data.rotation !== undefined) texture.rotation = data.rotation;
            if (data.wrap !== undefined) {
                texture.wrapS = parseConstant(data.wrap[0], $2d9d8c9fc2282acc$var$TEXTURE_WRAPPING);
                texture.wrapT = parseConstant(data.wrap[1], $2d9d8c9fc2282acc$var$TEXTURE_WRAPPING);
            }
            if (data.format !== undefined) texture.format = data.format;
            if (data.type !== undefined) texture.type = data.type;
            if (data.encoding !== undefined) texture.encoding = data.encoding;
            if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, $2d9d8c9fc2282acc$var$TEXTURE_FILTER);
            if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, $2d9d8c9fc2282acc$var$TEXTURE_FILTER);
            if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;
            if (data.flipY !== undefined) texture.flipY = data.flipY;
            if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;
            if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;
            if (data.userData !== undefined) texture.userData = data.userData;
            textures[data.uuid] = texture;
        }
        return textures;
    }
    parseObject(data, geometries, materials, textures, animations) {
        let object;
        function getGeometry(name) {
            if (geometries[name] === undefined) console.warn('THREE.ObjectLoader: Undefined geometry', name);
            return geometries[name];
        }
        function getMaterial(name) {
            if (name === undefined) return undefined;
            if (Array.isArray(name)) {
                const array = [];
                for(let i308 = 0, l = name.length; i308 < l; i308++){
                    const uuid = name[i308];
                    if (materials[uuid] === undefined) console.warn('THREE.ObjectLoader: Undefined material', uuid);
                    array.push(materials[uuid]);
                }
                return array;
            }
            if (materials[name] === undefined) console.warn('THREE.ObjectLoader: Undefined material', name);
            return materials[name];
        }
        function getTexture(uuid) {
            if (textures[uuid] === undefined) console.warn('THREE.ObjectLoader: Undefined texture', uuid);
            return textures[uuid];
        }
        let geometry, material;
        switch(data.type){
            case 'Scene':
                object = new $2d9d8c9fc2282acc$export$38af1803e3442a7f();
                if (data.background !== undefined) {
                    if (Number.isInteger(data.background)) object.background = new $2d9d8c9fc2282acc$export$892596cec99bc70e(data.background);
                    else object.background = getTexture(data.background);
                }
                if (data.environment !== undefined) object.environment = getTexture(data.environment);
                if (data.fog !== undefined) {
                    if (data.fog.type === 'Fog') object.fog = new $2d9d8c9fc2282acc$export$3c890837b09508d4(data.fog.color, data.fog.near, data.fog.far);
                    else if (data.fog.type === 'FogExp2') object.fog = new $2d9d8c9fc2282acc$export$6f1519f023b8d0f6(data.fog.color, data.fog.density);
                }
                break;
            case 'PerspectiveCamera':
                object = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7(data.fov, data.aspect, data.near, data.far);
                if (data.focus !== undefined) object.focus = data.focus;
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;
                if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;
                if (data.view !== undefined) object.view = Object.assign({
                }, data.view);
                break;
            case 'OrthographicCamera':
                object = new $2d9d8c9fc2282acc$export$9ebf355ee4ed261b(data.left, data.right, data.top, data.bottom, data.near, data.far);
                if (data.zoom !== undefined) object.zoom = data.zoom;
                if (data.view !== undefined) object.view = Object.assign({
                }, data.view);
                break;
            case 'AmbientLight':
                object = new $2d9d8c9fc2282acc$export$af279bfef9ec2c96(data.color, data.intensity);
                break;
            case 'DirectionalLight':
                object = new $2d9d8c9fc2282acc$export$3fea33cc9972c868(data.color, data.intensity);
                break;
            case 'PointLight':
                object = new $2d9d8c9fc2282acc$export$4c9c1cb3f0b6f455(data.color, data.intensity, data.distance, data.decay);
                break;
            case 'RectAreaLight':
                object = new $2d9d8c9fc2282acc$export$61db2d908bbd2429(data.color, data.intensity, data.width, data.height);
                break;
            case 'SpotLight':
                object = new $2d9d8c9fc2282acc$export$81495cbb73897362(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                break;
            case 'HemisphereLight':
                object = new $2d9d8c9fc2282acc$export$8d474f55edbb9624(data.color, data.groundColor, data.intensity);
                break;
            case 'LightProbe':
                object = new $2d9d8c9fc2282acc$export$e7ef036e309b38d2().fromJSON(data);
                break;
            case 'SkinnedMesh':
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new $2d9d8c9fc2282acc$export$b303577035157ecf(geometry, material);
                if (data.bindMode !== undefined) object.bindMode = data.bindMode;
                if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);
                if (data.skeleton !== undefined) object.skeleton = data.skeleton;
                break;
            case 'Mesh':
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                object = new $2d9d8c9fc2282acc$export$e176487c05830cc5(geometry, material);
                break;
            case 'InstancedMesh':
                geometry = getGeometry(data.geometry);
                material = getMaterial(data.material);
                const count = data.count;
                const instanceMatrix = data.instanceMatrix;
                const instanceColor = data.instanceColor;
                object = new $2d9d8c9fc2282acc$export$f3c979c331175ad7(geometry, material, count);
                object.instanceMatrix = new $2d9d8c9fc2282acc$export$32ea87a8b54d744a(new Float32Array(instanceMatrix.array), 16);
                if (instanceColor !== undefined) object.instanceColor = new $2d9d8c9fc2282acc$export$32ea87a8b54d744a(new Float32Array(instanceColor.array), instanceColor.itemSize);
                break;
            case 'LOD':
                object = new $2d9d8c9fc2282acc$export$112e7237be0c5f30();
                break;
            case 'Line':
                object = new $2d9d8c9fc2282acc$export$17d680238e50603e(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'LineLoop':
                object = new $2d9d8c9fc2282acc$export$f85a24d745e4f17d(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'LineSegments':
                object = new $2d9d8c9fc2282acc$export$ff1ed10fedfdd604(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'PointCloud':
            case 'Points':
                object = new $2d9d8c9fc2282acc$export$1c787534cb11aa3e(getGeometry(data.geometry), getMaterial(data.material));
                break;
            case 'Sprite':
                object = new $2d9d8c9fc2282acc$export$3075603db8e6204c(getMaterial(data.material));
                break;
            case 'Group':
                object = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
                break;
            case 'Bone':
                object = new $2d9d8c9fc2282acc$export$b127726e56765aa4();
                break;
            default:
                object = new $2d9d8c9fc2282acc$export$e4dd07dff30cc924();
        }
        object.uuid = data.uuid;
        if (data.name !== undefined) object.name = data.name;
        if (data.matrix !== undefined) {
            object.matrix.fromArray(data.matrix);
            if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;
            if (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);
        } else {
            if (data.position !== undefined) object.position.fromArray(data.position);
            if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);
            if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);
            if (data.scale !== undefined) object.scale.fromArray(data.scale);
        }
        if (data.castShadow !== undefined) object.castShadow = data.castShadow;
        if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;
        if (data.shadow) {
            if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;
            if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;
            if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;
            if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);
            if (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);
        }
        if (data.visible !== undefined) object.visible = data.visible;
        if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;
        if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;
        if (data.userData !== undefined) object.userData = data.userData;
        if (data.layers !== undefined) object.layers.mask = data.layers;
        if (data.children !== undefined) {
            const children = data.children;
            for(let i309 = 0; i309 < children.length; i309++)object.add(this.parseObject(children[i309], geometries, materials, textures, animations));
        }
        if (data.animations !== undefined) {
            const objectAnimations = data.animations;
            for(let i310 = 0; i310 < objectAnimations.length; i310++){
                const uuid = objectAnimations[i310];
                object.animations.push(animations[uuid]);
            }
        }
        if (data.type === 'LOD') {
            if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;
            const levels = data.levels;
            for(let l = 0; l < levels.length; l++){
                const level = levels[l];
                const child = object.getObjectByProperty('uuid', level.object);
                if (child !== undefined) object.addLevel(child, level.distance);
            }
        }
        return object;
    }
    bindSkeletons(object, skeletons) {
        if (Object.keys(skeletons).length === 0) return;
        object.traverse(function(child) {
            if (child.isSkinnedMesh === true && child.skeleton !== undefined) {
                const skeleton = skeletons[child.skeleton];
                if (skeleton === undefined) console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);
                else child.bind(skeleton, child.bindMatrix);
            }
        });
    }
    /* DEPRECATED */ setTexturePath(value) {
        console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');
        return this.setResourcePath(value);
    }
}
const $2d9d8c9fc2282acc$var$TEXTURE_MAPPING = {
    UVMapping: $2d9d8c9fc2282acc$export$1beec6768cbb3d2d,
    CubeReflectionMapping: $2d9d8c9fc2282acc$export$8759762a6477f2c4,
    CubeRefractionMapping: $2d9d8c9fc2282acc$export$dc59f8aed047f61d,
    EquirectangularReflectionMapping: $2d9d8c9fc2282acc$export$d64030b316d3b087,
    EquirectangularRefractionMapping: $2d9d8c9fc2282acc$export$ee99d97d46898098,
    CubeUVReflectionMapping: $2d9d8c9fc2282acc$export$dbf3e70ff37af79,
    CubeUVRefractionMapping: $2d9d8c9fc2282acc$export$76a9f4355364345c
};
const $2d9d8c9fc2282acc$var$TEXTURE_WRAPPING = {
    RepeatWrapping: $2d9d8c9fc2282acc$export$533346c8e8dac0f5,
    ClampToEdgeWrapping: $2d9d8c9fc2282acc$export$9d9334239a5a5e06,
    MirroredRepeatWrapping: $2d9d8c9fc2282acc$export$c7e7c00b14f51a4f
};
const $2d9d8c9fc2282acc$var$TEXTURE_FILTER = {
    NearestFilter: $2d9d8c9fc2282acc$export$727aa5ec3fe39bf0,
    NearestMipmapNearestFilter: $2d9d8c9fc2282acc$export$d129e38cf6feaa8c,
    NearestMipmapLinearFilter: $2d9d8c9fc2282acc$export$d2327c1afe5bfdf2,
    LinearFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
    LinearMipmapNearestFilter: $2d9d8c9fc2282acc$export$19a719f377145a13,
    LinearMipmapLinearFilter: $2d9d8c9fc2282acc$export$5d8599b6a933fb1b
};
class $2d9d8c9fc2282acc$export$52286b55c4a9b51f extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
        if (typeof createImageBitmap === 'undefined') console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');
        if (typeof fetch === 'undefined') console.warn('THREE.ImageBitmapLoader: fetch() not supported.');
        this.options = {
            premultiplyAlpha: 'none'
        };
    }
    setOptions(options) {
        this.options = options;
        return this;
    }
    load(url, onLoad, onProgress, onError) {
        if (url === undefined) url = '';
        if (this.path !== undefined) url = this.path + url;
        url = this.manager.resolveURL(url);
        const scope = this;
        const cached = $2d9d8c9fc2282acc$export$94affb487e701bf2.get(url);
        if (cached !== undefined) {
            scope.manager.itemStart(url);
            setTimeout(function() {
                if (onLoad) onLoad(cached);
                scope.manager.itemEnd(url);
            }, 0);
            return cached;
        }
        const fetchOptions = {
        };
        fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';
        fetchOptions.headers = this.requestHeader;
        fetch(url, fetchOptions).then(function(res) {
            return res.blob();
        }).then(function(blob) {
            return createImageBitmap(blob, Object.assign(scope.options, {
                colorSpaceConversion: 'none'
            }));
        }).then(function(imageBitmap) {
            $2d9d8c9fc2282acc$export$94affb487e701bf2.add(url, imageBitmap);
            if (onLoad) onLoad(imageBitmap);
            scope.manager.itemEnd(url);
        }).catch(function(e) {
            if (onError) onError(e);
            scope.manager.itemError(url);
            scope.manager.itemEnd(url);
        });
        scope.manager.itemStart(url);
    }
}
$2d9d8c9fc2282acc$export$52286b55c4a9b51f.prototype.isImageBitmapLoader = true;
let $2d9d8c9fc2282acc$var$_context;
const $2d9d8c9fc2282acc$export$fcbc63750ec2a81f = {
    getContext: function() {
        if ($2d9d8c9fc2282acc$var$_context === undefined) $2d9d8c9fc2282acc$var$_context = new (window.AudioContext || window.webkitAudioContext)();
        return $2d9d8c9fc2282acc$var$_context;
    },
    setContext: function(value) {
        $2d9d8c9fc2282acc$var$_context = value;
    }
};
class $2d9d8c9fc2282acc$export$d8d5fccfbf47714e extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
    }
    load(url, onLoad, onProgress, onError) {
        const scope = this;
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setResponseType('arraybuffer');
        loader.setPath(this.path);
        loader.setRequestHeader(this.requestHeader);
        loader.setWithCredentials(this.withCredentials);
        loader.load(url, function(buffer) {
            try {
                // Create a copy of the buffer. The `decodeAudioData` method
                // detaches the buffer when complete, preventing reuse.
                const bufferCopy = buffer.slice(0);
                const context = $2d9d8c9fc2282acc$export$fcbc63750ec2a81f.getContext();
                context.decodeAudioData(bufferCopy, function(audioBuffer) {
                    onLoad(audioBuffer);
                });
            } catch (e) {
                if (onError) onError(e);
                else console.error(e);
                scope.manager.itemError(url);
            }
        }, onProgress, onError);
    }
}
class $2d9d8c9fc2282acc$export$2f22dadc8bc42820 extends $2d9d8c9fc2282acc$export$e7ef036e309b38d2 {
    constructor(skyColor, groundColor, intensity = 1){
        super(undefined, intensity);
        const color1 = new $2d9d8c9fc2282acc$export$892596cec99bc70e().set(skyColor);
        const color2 = new $2d9d8c9fc2282acc$export$892596cec99bc70e().set(groundColor);
        const sky = new $2d9d8c9fc2282acc$export$64b5c384219d3699(color1.r, color1.g, color1.b);
        const ground = new $2d9d8c9fc2282acc$export$64b5c384219d3699(color2.r, color2.g, color2.b);
        // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
        const c0 = Math.sqrt(Math.PI);
        const c1 = c0 * Math.sqrt(0.75);
        this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);
        this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
    }
}
$2d9d8c9fc2282acc$export$2f22dadc8bc42820.prototype.isHemisphereLightProbe = true;
class $2d9d8c9fc2282acc$export$afe310a21c86023d extends $2d9d8c9fc2282acc$export$e7ef036e309b38d2 {
    constructor(color, intensity = 1){
        super(undefined, intensity);
        const color1 = new $2d9d8c9fc2282acc$export$892596cec99bc70e().set(color);
        // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
        this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
}
$2d9d8c9fc2282acc$export$afe310a21c86023d.prototype.isAmbientLightProbe = true;
const $2d9d8c9fc2282acc$var$_eyeRight = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_eyeLeft = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_projectionMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
class $2d9d8c9fc2282acc$export$bc7f73a1065bee0c {
    constructor(){
        this.type = 'StereoCamera';
        this.aspect = 1;
        this.eyeSep = 0.064;
        this.cameraL = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7();
        this.cameraL.layers.enable(1);
        this.cameraL.matrixAutoUpdate = false;
        this.cameraR = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7();
        this.cameraR.layers.enable(2);
        this.cameraR.matrixAutoUpdate = false;
        this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    update(camera) {
        const cache = this._cache;
        const needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
        if (needsUpdate) {
            cache.focus = camera.focus;
            cache.fov = camera.fov;
            cache.aspect = camera.aspect * this.aspect;
            cache.near = camera.near;
            cache.far = camera.far;
            cache.zoom = camera.zoom;
            cache.eyeSep = this.eyeSep;
            // Off-axis stereoscopic effect based on
            // http://paulbourke.net/stereographics/stereorender/
            $2d9d8c9fc2282acc$var$_projectionMatrix.copy(camera.projectionMatrix);
            const eyeSepHalf = cache.eyeSep / 2;
            const eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
            const ymax = cache.near * Math.tan($2d9d8c9fc2282acc$var$DEG2RAD * cache.fov * 0.5) / cache.zoom;
            let xmin, xmax;
            // translate xOffset
            $2d9d8c9fc2282acc$var$_eyeLeft.elements[12] = -eyeSepHalf;
            $2d9d8c9fc2282acc$var$_eyeRight.elements[12] = eyeSepHalf;
            // for left eye
            xmin = -ymax * cache.aspect + eyeSepOnProjection;
            xmax = ymax * cache.aspect + eyeSepOnProjection;
            $2d9d8c9fc2282acc$var$_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            $2d9d8c9fc2282acc$var$_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraL.projectionMatrix.copy($2d9d8c9fc2282acc$var$_projectionMatrix);
            // for right eye
            xmin = -ymax * cache.aspect - eyeSepOnProjection;
            xmax = ymax * cache.aspect - eyeSepOnProjection;
            $2d9d8c9fc2282acc$var$_projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);
            $2d9d8c9fc2282acc$var$_projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);
            this.cameraR.projectionMatrix.copy($2d9d8c9fc2282acc$var$_projectionMatrix);
        }
        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply($2d9d8c9fc2282acc$var$_eyeLeft);
        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply($2d9d8c9fc2282acc$var$_eyeRight);
    }
}
class $2d9d8c9fc2282acc$export$9735c82c4bae3302 {
    constructor(autoStart = true){
        this.autoStart = autoStart;
        this.startTime = 0;
        this.oldTime = 0;
        this.elapsedTime = 0;
        this.running = false;
    }
    start() {
        this.startTime = $2d9d8c9fc2282acc$var$now();
        this.oldTime = this.startTime;
        this.elapsedTime = 0;
        this.running = true;
    }
    stop() {
        this.getElapsedTime();
        this.running = false;
        this.autoStart = false;
    }
    getElapsedTime() {
        this.getDelta();
        return this.elapsedTime;
    }
    getDelta() {
        let diff = 0;
        if (this.autoStart && !this.running) {
            this.start();
            return 0;
        }
        if (this.running) {
            const newTime = $2d9d8c9fc2282acc$var$now();
            diff = (newTime - this.oldTime) / 1000;
            this.oldTime = newTime;
            this.elapsedTime += diff;
        }
        return diff;
    }
}
function $2d9d8c9fc2282acc$var$now() {
    return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732
}
const $2d9d8c9fc2282acc$var$_position$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_quaternion$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
const $2d9d8c9fc2282acc$var$_scale$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_orientation$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$8a1b810c6fde8951 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(){
        super();
        this.type = 'AudioListener';
        this.context = $2d9d8c9fc2282acc$export$fcbc63750ec2a81f.getContext();
        this.gain = this.context.createGain();
        this.gain.connect(this.context.destination);
        this.filter = null;
        this.timeDelta = 0;
        // private
        this._clock = new $2d9d8c9fc2282acc$export$9735c82c4bae3302();
    }
    getInput() {
        return this.gain;
    }
    removeFilter() {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
            this.gain.connect(this.context.destination);
            this.filter = null;
        }
        return this;
    }
    getFilter() {
        return this.filter;
    }
    setFilter(value) {
        if (this.filter !== null) {
            this.gain.disconnect(this.filter);
            this.filter.disconnect(this.context.destination);
        } else this.gain.disconnect(this.context.destination);
        this.filter = value;
        this.gain.connect(this.filter);
        this.filter.connect(this.context.destination);
        return this;
    }
    getMasterVolume() {
        return this.gain.gain.value;
    }
    setMasterVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        const listener = this.context.listener;
        const up = this.up;
        this.timeDelta = this._clock.getDelta();
        this.matrixWorld.decompose($2d9d8c9fc2282acc$var$_position$1, $2d9d8c9fc2282acc$var$_quaternion$1, $2d9d8c9fc2282acc$var$_scale$1);
        $2d9d8c9fc2282acc$var$_orientation$1.set(0, 0, -1).applyQuaternion($2d9d8c9fc2282acc$var$_quaternion$1);
        if (listener.positionX) {
            // code path for Chrome (see #14393)
            const endTime = this.context.currentTime + this.timeDelta;
            listener.positionX.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_position$1.x, endTime);
            listener.positionY.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_position$1.y, endTime);
            listener.positionZ.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_position$1.z, endTime);
            listener.forwardX.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_orientation$1.x, endTime);
            listener.forwardY.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_orientation$1.y, endTime);
            listener.forwardZ.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_orientation$1.z, endTime);
            listener.upX.linearRampToValueAtTime(up.x, endTime);
            listener.upY.linearRampToValueAtTime(up.y, endTime);
            listener.upZ.linearRampToValueAtTime(up.z, endTime);
        } else {
            listener.setPosition($2d9d8c9fc2282acc$var$_position$1.x, $2d9d8c9fc2282acc$var$_position$1.y, $2d9d8c9fc2282acc$var$_position$1.z);
            listener.setOrientation($2d9d8c9fc2282acc$var$_orientation$1.x, $2d9d8c9fc2282acc$var$_orientation$1.y, $2d9d8c9fc2282acc$var$_orientation$1.z, up.x, up.y, up.z);
        }
    }
}
class $2d9d8c9fc2282acc$export$153755f98d9861de extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(listener){
        super();
        this.type = 'Audio';
        this.listener = listener;
        this.context = listener.context;
        this.gain = this.context.createGain();
        this.gain.connect(listener.getInput());
        this.autoplay = false;
        this.buffer = null;
        this.detune = 0;
        this.loop = false;
        this.loopStart = 0;
        this.loopEnd = 0;
        this.offset = 0;
        this.duration = undefined;
        this.playbackRate = 1;
        this.isPlaying = false;
        this.hasPlaybackControl = true;
        this.source = null;
        this.sourceType = 'empty';
        this._startedAt = 0;
        this._progress = 0;
        this._connected = false;
        this.filters = [];
    }
    getOutput() {
        return this.gain;
    }
    setNodeSource(audioNode) {
        this.hasPlaybackControl = false;
        this.sourceType = 'audioNode';
        this.source = audioNode;
        this.connect();
        return this;
    }
    setMediaElementSource(mediaElement) {
        this.hasPlaybackControl = false;
        this.sourceType = 'mediaNode';
        this.source = this.context.createMediaElementSource(mediaElement);
        this.connect();
        return this;
    }
    setMediaStreamSource(mediaStream) {
        this.hasPlaybackControl = false;
        this.sourceType = 'mediaStreamNode';
        this.source = this.context.createMediaStreamSource(mediaStream);
        this.connect();
        return this;
    }
    setBuffer(audioBuffer) {
        this.buffer = audioBuffer;
        this.sourceType = 'buffer';
        if (this.autoplay) this.play();
        return this;
    }
    play(delay = 0) {
        if (this.isPlaying === true) {
            console.warn('THREE.Audio: Audio is already playing.');
            return;
        }
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this._startedAt = this.context.currentTime + delay;
        const source = this.context.createBufferSource();
        source.buffer = this.buffer;
        source.loop = this.loop;
        source.loopStart = this.loopStart;
        source.loopEnd = this.loopEnd;
        source.onended = this.onEnded.bind(this);
        source.start(this._startedAt, this._progress + this.offset, this.duration);
        this.isPlaying = true;
        this.source = source;
        this.setDetune(this.detune);
        this.setPlaybackRate(this.playbackRate);
        return this.connect();
    }
    pause() {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        if (this.isPlaying === true) {
            // update current progress
            this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;
            if (this.loop === true) // ensure _progress does not exceed duration with looped audios
            this._progress = this._progress % (this.duration || this.buffer.duration);
            this.source.stop();
            this.source.onended = null;
            this.isPlaying = false;
        }
        return this;
    }
    stop() {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this._progress = 0;
        this.source.stop();
        this.source.onended = null;
        this.isPlaying = false;
        return this;
    }
    connect() {
        if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for(let i311 = 1, l = this.filters.length; i311 < l; i311++)this.filters[i311 - 1].connect(this.filters[i311]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
        } else this.source.connect(this.getOutput());
        this._connected = true;
        return this;
    }
    disconnect() {
        if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for(let i312 = 1, l = this.filters.length; i312 < l; i312++)this.filters[i312 - 1].disconnect(this.filters[i312]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
        } else this.source.disconnect(this.getOutput());
        this._connected = false;
        return this;
    }
    getFilters() {
        return this.filters;
    }
    setFilters(value) {
        if (!value) value = [];
        if (this._connected === true) {
            this.disconnect();
            this.filters = value.slice();
            this.connect();
        } else this.filters = value.slice();
        return this;
    }
    setDetune(value) {
        this.detune = value;
        if (this.source.detune === undefined) return; // only set detune when available
        if (this.isPlaying === true) this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);
        return this;
    }
    getDetune() {
        return this.detune;
    }
    getFilter() {
        return this.getFilters()[0];
    }
    setFilter(filter) {
        return this.setFilters(filter ? [
            filter
        ] : []);
    }
    setPlaybackRate(value) {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this.playbackRate = value;
        if (this.isPlaying === true) this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);
        return this;
    }
    getPlaybackRate() {
        return this.playbackRate;
    }
    onEnded() {
        this.isPlaying = false;
    }
    getLoop() {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return false;
        }
        return this.loop;
    }
    setLoop(value) {
        if (this.hasPlaybackControl === false) {
            console.warn('THREE.Audio: this Audio has no playback control.');
            return;
        }
        this.loop = value;
        if (this.isPlaying === true) this.source.loop = this.loop;
        return this;
    }
    setLoopStart(value) {
        this.loopStart = value;
        return this;
    }
    setLoopEnd(value) {
        this.loopEnd = value;
        return this;
    }
    getVolume() {
        return this.gain.gain.value;
    }
    setVolume(value) {
        this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);
        return this;
    }
}
const $2d9d8c9fc2282acc$var$_position = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_quaternion = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3();
const $2d9d8c9fc2282acc$var$_scale = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_orientation = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$4b3e397ef1832507 extends $2d9d8c9fc2282acc$export$153755f98d9861de {
    constructor(listener){
        super(listener);
        this.panner = this.context.createPanner();
        this.panner.panningModel = 'HRTF';
        this.panner.connect(this.gain);
    }
    getOutput() {
        return this.panner;
    }
    getRefDistance() {
        return this.panner.refDistance;
    }
    setRefDistance(value) {
        this.panner.refDistance = value;
        return this;
    }
    getRolloffFactor() {
        return this.panner.rolloffFactor;
    }
    setRolloffFactor(value) {
        this.panner.rolloffFactor = value;
        return this;
    }
    getDistanceModel() {
        return this.panner.distanceModel;
    }
    setDistanceModel(value) {
        this.panner.distanceModel = value;
        return this;
    }
    getMaxDistance() {
        return this.panner.maxDistance;
    }
    setMaxDistance(value) {
        this.panner.maxDistance = value;
        return this;
    }
    setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {
        this.panner.coneInnerAngle = coneInnerAngle;
        this.panner.coneOuterAngle = coneOuterAngle;
        this.panner.coneOuterGain = coneOuterGain;
        return this;
    }
    updateMatrixWorld(force) {
        super.updateMatrixWorld(force);
        if (this.hasPlaybackControl === true && this.isPlaying === false) return;
        this.matrixWorld.decompose($2d9d8c9fc2282acc$var$_position, $2d9d8c9fc2282acc$var$_quaternion, $2d9d8c9fc2282acc$var$_scale);
        $2d9d8c9fc2282acc$var$_orientation.set(0, 0, 1).applyQuaternion($2d9d8c9fc2282acc$var$_quaternion);
        const panner = this.panner;
        if (panner.positionX) {
            // code path for Chrome and Firefox (see #14393)
            const endTime = this.context.currentTime + this.listener.timeDelta;
            panner.positionX.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_position.x, endTime);
            panner.positionY.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_position.y, endTime);
            panner.positionZ.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_position.z, endTime);
            panner.orientationX.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_orientation.x, endTime);
            panner.orientationY.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_orientation.y, endTime);
            panner.orientationZ.linearRampToValueAtTime($2d9d8c9fc2282acc$var$_orientation.z, endTime);
        } else {
            panner.setPosition($2d9d8c9fc2282acc$var$_position.x, $2d9d8c9fc2282acc$var$_position.y, $2d9d8c9fc2282acc$var$_position.z);
            panner.setOrientation($2d9d8c9fc2282acc$var$_orientation.x, $2d9d8c9fc2282acc$var$_orientation.y, $2d9d8c9fc2282acc$var$_orientation.z);
        }
    }
}
class $2d9d8c9fc2282acc$export$d47da1ef3d382827 {
    constructor(audio, fftSize = 2048){
        this.analyser = audio.context.createAnalyser();
        this.analyser.fftSize = fftSize;
        this.data = new Uint8Array(this.analyser.frequencyBinCount);
        audio.getOutput().connect(this.analyser);
    }
    getFrequencyData() {
        this.analyser.getByteFrequencyData(this.data);
        return this.data;
    }
    getAverageFrequency() {
        let value = 0;
        const data = this.getFrequencyData();
        for(let i313 = 0; i313 < data.length; i313++)value += data[i313];
        return value / data.length;
    }
}
class $2d9d8c9fc2282acc$export$dfe0af1ca1acb78a {
    constructor(binding, typeName, valueSize){
        this.binding = binding;
        this.valueSize = valueSize;
        let mixFunction, mixFunctionAdditive, setIdentity;
        // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]
        //
        // interpolators can use .buffer as their .result
        // the data then goes to 'incoming'
        //
        // 'accu0' and 'accu1' are used frame-interleaved for
        // the cumulative result and are compared to detect
        // changes
        //
        // 'orig' stores the original state of the property
        //
        // 'add' is used for additive cumulative results
        //
        // 'work' is optional and is only present for quaternion types. It is used
        // to store intermediate quaternion multiplication results
        switch(typeName){
            case 'quaternion':
                mixFunction = this._slerp;
                mixFunctionAdditive = this._slerpAdditive;
                setIdentity = this._setAdditiveIdentityQuaternion;
                this.buffer = new Float64Array(valueSize * 6);
                this._workIndex = 5;
                break;
            case 'string':
            case 'bool':
                mixFunction = this._select;
                // Use the regular mix function and for additive on these types,
                // additive is not relevant for non-numeric types
                mixFunctionAdditive = this._select;
                setIdentity = this._setAdditiveIdentityOther;
                this.buffer = new Array(valueSize * 5);
                break;
            default:
                mixFunction = this._lerp;
                mixFunctionAdditive = this._lerpAdditive;
                setIdentity = this._setAdditiveIdentityNumeric;
                this.buffer = new Float64Array(valueSize * 5);
        }
        this._mixBufferRegion = mixFunction;
        this._mixBufferRegionAdditive = mixFunctionAdditive;
        this._setIdentity = setIdentity;
        this._origIndex = 3;
        this._addIndex = 4;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        this.useCount = 0;
        this.referenceCount = 0;
    }
    // accumulate data in the 'incoming' region into 'accu<i>'
    accumulate(accuIndex, weight) {
        // note: happily accumulating nothing when weight = 0, the caller knows
        // the weight and shouldn't have made the call in the first place
        const buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride;
        let currentWeight = this.cumulativeWeight;
        if (currentWeight === 0) {
            // accuN := incoming * weight
            for(let i314 = 0; i314 !== stride; ++i314)buffer[offset + i314] = buffer[i314];
            currentWeight = weight;
        } else {
            // accuN := accuN + incoming * weight
            currentWeight += weight;
            const mix = weight / currentWeight;
            this._mixBufferRegion(buffer, offset, 0, mix, stride);
        }
        this.cumulativeWeight = currentWeight;
    }
    // accumulate data in the 'incoming' region into 'add'
    accumulateAdditive(weight) {
        const buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
        if (this.cumulativeWeightAdditive === 0) // add = identity
        this._setIdentity();
        // add := add + incoming * weight
        this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);
        this.cumulativeWeightAdditive += weight;
    }
    // apply the state of 'accu<i>' to the binding when accus differ
    apply(accuIndex) {
        const stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
        if (weight < 1) {
            // accuN := accuN + original * ( 1 - cumulativeWeight )
            const originalValueOffset = stride * this._origIndex;
            this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
        }
        if (weightAdditive > 0) // accuN := accuN + additive accuN
        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
        for(let i315 = stride, e = stride + stride; i315 !== e; ++i315)if (buffer[i315] !== buffer[i315 + stride]) {
            // value has changed -> update scene graph
            binding.setValue(buffer, offset);
            break;
        }
    }
    // remember the state of the bound property and copy it to both accus
    saveOriginalState() {
        const binding = this.binding;
        const buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
        binding.getValue(buffer, originalValueOffset);
        // accu[0..1] := orig -- initially detect changes against the original
        for(let i316 = stride, e = originalValueOffset; i316 !== e; ++i316)buffer[i316] = buffer[originalValueOffset + i316 % stride];
        // Add to identity for additive
        this._setIdentity();
        this.cumulativeWeight = 0;
        this.cumulativeWeightAdditive = 0;
    }
    // apply the state previously taken via 'saveOriginalState' to the binding
    restoreOriginalState() {
        const originalValueOffset = this.valueSize * 3;
        this.binding.setValue(this.buffer, originalValueOffset);
    }
    _setAdditiveIdentityNumeric() {
        const startIndex = this._addIndex * this.valueSize;
        const endIndex = startIndex + this.valueSize;
        for(let i317 = startIndex; i317 < endIndex; i317++)this.buffer[i317] = 0;
    }
    _setAdditiveIdentityQuaternion() {
        this._setAdditiveIdentityNumeric();
        this.buffer[this._addIndex * this.valueSize + 3] = 1;
    }
    _setAdditiveIdentityOther() {
        const startIndex = this._origIndex * this.valueSize;
        const targetIndex = this._addIndex * this.valueSize;
        for(let i318 = 0; i318 < this.valueSize; i318++)this.buffer[targetIndex + i318] = this.buffer[startIndex + i318];
    }
    // mix functions
    _select(buffer, dstOffset, srcOffset, t, stride) {
        if (t >= 0.5) for(let i319 = 0; i319 !== stride; ++i319)buffer[dstOffset + i319] = buffer[srcOffset + i319];
    }
    _slerp(buffer, dstOffset, srcOffset, t) {
        $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
    }
    _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        const workOffset = this._workIndex * stride;
        // Store result in intermediate buffer offset
        $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset);
        // Slerp to the intermediate result
        $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
    }
    _lerp(buffer, dstOffset, srcOffset, t, stride) {
        const s = 1 - t;
        for(let i320 = 0; i320 !== stride; ++i320){
            const j = dstOffset + i320;
            buffer[j] = buffer[j] * s + buffer[srcOffset + i320] * t;
        }
    }
    _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {
        for(let i321 = 0; i321 !== stride; ++i321){
            const j = dstOffset + i321;
            buffer[j] = buffer[j] + buffer[srcOffset + i321] * t;
        }
    }
}
// Characters [].:/ are reserved for track binding syntax.
const $2d9d8c9fc2282acc$var$_RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
const $2d9d8c9fc2282acc$var$_reservedRe = new RegExp('[' + $2d9d8c9fc2282acc$var$_RESERVED_CHARS_RE + ']', 'g');
// Attempts to allow node names from any language. ES5's `\w` regexp matches
// only latin characters, and the unicode \p{L} is not yet supported. So
// instead, we exclude reserved characters and match everything else.
const $2d9d8c9fc2282acc$var$_wordChar = '[^' + $2d9d8c9fc2282acc$var$_RESERVED_CHARS_RE + ']';
const $2d9d8c9fc2282acc$var$_wordCharOrDot = '[^' + $2d9d8c9fc2282acc$var$_RESERVED_CHARS_RE.replace('\\.', '') + ']';
// Parent directories, delimited by '/' or ':'. Currently unused, but must
// be matched to parse the rest of the track name.
const $2d9d8c9fc2282acc$var$_directoryRe = /((?:WC+[\/:])*)/.source.replace('WC', $2d9d8c9fc2282acc$var$_wordChar);
// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
const $2d9d8c9fc2282acc$var$_nodeRe = /(WCOD+)?/.source.replace('WCOD', $2d9d8c9fc2282acc$var$_wordCharOrDot);
// Object on target node, and accessor. May not contain reserved
// characters. Accessor may contain any character except closing bracket.
const $2d9d8c9fc2282acc$var$_objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', $2d9d8c9fc2282acc$var$_wordChar);
// Property and accessor. May not contain reserved characters. Accessor may
// contain any non-bracket characters.
const $2d9d8c9fc2282acc$var$_propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', $2d9d8c9fc2282acc$var$_wordChar);
const $2d9d8c9fc2282acc$var$_trackRe = new RegExp("^" + $2d9d8c9fc2282acc$var$_directoryRe + $2d9d8c9fc2282acc$var$_nodeRe + $2d9d8c9fc2282acc$var$_objectRe + $2d9d8c9fc2282acc$var$_propertyRe + '$');
const $2d9d8c9fc2282acc$var$_supportedObjectNames = [
    'material',
    'materials',
    'bones'
];
class $2d9d8c9fc2282acc$var$Composite {
    constructor(targetGroup, path, optionalParsedPath){
        const parsedPath = optionalParsedPath || $2d9d8c9fc2282acc$export$7bf70fcf9f891893.parseTrackName(path);
        this._targetGroup = targetGroup;
        this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    getValue(array, offset) {
        this.bind(); // bind all binding
        const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
        // and only call .getValue on the first
        if (binding !== undefined) binding.getValue(array, offset);
    }
    setValue(array, offset) {
        const bindings = this._bindings;
        for(let i322 = this._targetGroup.nCachedObjects_, n = bindings.length; i322 !== n; ++i322)bindings[i322].setValue(array, offset);
    }
    bind() {
        const bindings = this._bindings;
        for(let i323 = this._targetGroup.nCachedObjects_, n = bindings.length; i323 !== n; ++i323)bindings[i323].bind();
    }
    unbind() {
        const bindings = this._bindings;
        for(let i324 = this._targetGroup.nCachedObjects_, n = bindings.length; i324 !== n; ++i324)bindings[i324].unbind();
    }
}
// Note: This class uses a State pattern on a per-method basis:
// 'bind' sets 'this.getValue' / 'setValue' and shadows the
// prototype version of these methods with one that represents
// the bound state. When the property is not found, the methods
// become no-ops.
class $2d9d8c9fc2282acc$export$7bf70fcf9f891893 {
    constructor(rootNode, path, parsedPath){
        this.path = path;
        this.parsedPath = parsedPath || $2d9d8c9fc2282acc$export$7bf70fcf9f891893.parseTrackName(path);
        this.node = $2d9d8c9fc2282acc$export$7bf70fcf9f891893.findNode(rootNode, this.parsedPath.nodeName) || rootNode;
        this.rootNode = rootNode;
        // initial state of these methods that calls 'bind'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
    static create(root, path, parsedPath) {
        if (!(root && root.isAnimationObjectGroup)) return new $2d9d8c9fc2282acc$export$7bf70fcf9f891893(root, path, parsedPath);
        else return new $2d9d8c9fc2282acc$export$7bf70fcf9f891893.Composite(root, path, parsedPath);
    }
    /**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param {string} name Node name to be sanitized.
	 * @return {string}
	 */ static sanitizeNodeName(name) {
        return name.replace(/\s/g, '_').replace($2d9d8c9fc2282acc$var$_reservedRe, '');
    }
    static parseTrackName(trackName) {
        const matches = $2d9d8c9fc2282acc$var$_trackRe.exec(trackName);
        if (!matches) throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);
        const results = {
            // directoryName: matches[ 1 ], // (tschw) currently unused
            nodeName: matches[2],
            objectName: matches[3],
            objectIndex: matches[4],
            propertyName: matches[5],
            propertyIndex: matches[6]
        };
        const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');
        if (lastDot !== undefined && lastDot !== -1) {
            const objectName = results.nodeName.substring(lastDot + 1);
            // Object names must be checked against an allowlist. Otherwise, there
            // is no way to parse 'foo.bar.baz': 'baz' must be a property, but
            // 'bar' could be the objectName, or part of a nodeName (which can
            // include '.' characters).
            if ($2d9d8c9fc2282acc$var$_supportedObjectNames.indexOf(objectName) !== -1) {
                results.nodeName = results.nodeName.substring(0, lastDot);
                results.objectName = objectName;
            }
        }
        if (results.propertyName === null || results.propertyName.length === 0) throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
        return results;
    }
    static findNode(root, nodeName) {
        if (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) return root;
        // search into skeleton bones.
        if (root.skeleton) {
            const bone = root.skeleton.getBoneByName(nodeName);
            if (bone !== undefined) return bone;
        }
        // search into node subtree.
        if (root.children) {
            const searchNodeSubtree = function(children) {
                for(let i325 = 0; i325 < children.length; i325++){
                    const childNode = children[i325];
                    if (childNode.name === nodeName || childNode.uuid === nodeName) return childNode;
                    const result = searchNodeSubtree(childNode.children);
                    if (result) return result;
                }
                return null;
            };
            const subTreeNode = searchNodeSubtree(root.children);
            if (subTreeNode) return subTreeNode;
        }
        return null;
    }
    // these are used to "bind" a nonexistent property
    _getValue_unavailable() {
    }
    _setValue_unavailable() {
    }
    // Getters
    _getValue_direct(buffer, offset) {
        buffer[offset] = this.targetObject[this.propertyName];
    }
    _getValue_array(buffer, offset) {
        const source = this.resolvedProperty;
        for(let i326 = 0, n = source.length; i326 !== n; ++i326)buffer[offset++] = source[i326];
    }
    _getValue_arrayElement(buffer, offset) {
        buffer[offset] = this.resolvedProperty[this.propertyIndex];
    }
    _getValue_toArray(buffer, offset) {
        this.resolvedProperty.toArray(buffer, offset);
    }
    // Direct
    _setValue_direct(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
    }
    _setValue_direct_setNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.needsUpdate = true;
    }
    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.targetObject[this.propertyName] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // EntireArray
    _setValue_array(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i327 = 0, n = dest.length; i327 !== n; ++i327)dest[i327] = buffer[offset++];
    }
    _setValue_array_setNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i328 = 0, n = dest.length; i328 !== n; ++i328)dest[i328] = buffer[offset++];
        this.targetObject.needsUpdate = true;
    }
    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {
        const dest = this.resolvedProperty;
        for(let i329 = 0, n = dest.length; i329 !== n; ++i329)dest[i329] = buffer[offset++];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // ArrayElement
    _setValue_arrayElement(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
    }
    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.needsUpdate = true;
    }
    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty[this.propertyIndex] = buffer[offset];
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    // HasToFromArray
    _setValue_fromArray(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
    }
    _setValue_fromArray_setNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.needsUpdate = true;
    }
    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {
        this.resolvedProperty.fromArray(buffer, offset);
        this.targetObject.matrixWorldNeedsUpdate = true;
    }
    _getValue_unbound(targetArray, offset) {
        this.bind();
        this.getValue(targetArray, offset);
    }
    _setValue_unbound(sourceArray, offset) {
        this.bind();
        this.setValue(sourceArray, offset);
    }
    // create getter / setter pair for a property in the scene graph
    bind() {
        let targetObject = this.node;
        const parsedPath = this.parsedPath;
        const objectName = parsedPath.objectName;
        const propertyName = parsedPath.propertyName;
        let propertyIndex = parsedPath.propertyIndex;
        if (!targetObject) {
            targetObject = $2d9d8c9fc2282acc$export$7bf70fcf9f891893.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;
            this.node = targetObject;
        }
        // set fail state so we can just 'return' on error
        this.getValue = this._getValue_unavailable;
        this.setValue = this._setValue_unavailable;
        // ensure there is a value node
        if (!targetObject) {
            console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
            return;
        }
        if (objectName) {
            let objectIndex = parsedPath.objectIndex;
            // special cases were we need to reach deeper into the hierarchy to get the face materials....
            switch(objectName){
                case 'materials':
                    if (!targetObject.material) {
                        console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
                        return;
                    }
                    if (!targetObject.material.materials) {
                        console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
                        return;
                    }
                    targetObject = targetObject.material.materials;
                    break;
                case 'bones':
                    if (!targetObject.skeleton) {
                        console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
                        return;
                    }
                    // potential future optimization: skip this if propertyIndex is already an integer
                    // and convert the integer string to a true integer.
                    targetObject = targetObject.skeleton.bones;
                    // support resolving morphTarget names into indices.
                    for(let i330 = 0; i330 < targetObject.length; i330++)if (targetObject[i330].name === objectIndex) {
                        objectIndex = i330;
                        break;
                    }
                    break;
                default:
                    if (targetObject[objectName] === undefined) {
                        console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
                        return;
                    }
                    targetObject = targetObject[objectName];
            }
            if (objectIndex !== undefined) {
                if (targetObject[objectIndex] === undefined) {
                    console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
                    return;
                }
                targetObject = targetObject[objectIndex];
            }
        }
        // resolve property
        const nodeProperty = targetObject[propertyName];
        if (nodeProperty === undefined) {
            const nodeName = parsedPath.nodeName;
            console.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
            return;
        }
        // determine versioning scheme
        let versioning = this.Versioning.None;
        this.targetObject = targetObject;
        if (targetObject.needsUpdate !== undefined) versioning = this.Versioning.NeedsUpdate;
        else if (targetObject.matrixWorldNeedsUpdate !== undefined) versioning = this.Versioning.MatrixWorldNeedsUpdate;
        // determine how the property gets bound
        let bindingType = this.BindingType.Direct;
        if (propertyIndex !== undefined) {
            // access a sub element of the property array (only primitives are supported right now)
            if (propertyName === 'morphTargetInfluences') {
                // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
                // support resolving morphTarget names into indices.
                if (!targetObject.geometry) {
                    console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
                    return;
                }
                if (targetObject.geometry.isBufferGeometry) {
                    if (!targetObject.geometry.morphAttributes) {
                        console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
                        return;
                    }
                    if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
                } else {
                    console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);
                    return;
                }
            }
            bindingType = this.BindingType.ArrayElement;
            this.resolvedProperty = nodeProperty;
            this.propertyIndex = propertyIndex;
        } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {
            // must use copy for Object3D.Euler/Quaternion
            bindingType = this.BindingType.HasFromToArray;
            this.resolvedProperty = nodeProperty;
        } else if (Array.isArray(nodeProperty)) {
            bindingType = this.BindingType.EntireArray;
            this.resolvedProperty = nodeProperty;
        } else this.propertyName = propertyName;
        // select getter / setter
        this.getValue = this.GetterByBindingType[bindingType];
        this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
    }
    unbind() {
        this.node = null;
        // back to the prototype version of getValue / setValue
        // note: avoiding to mutate the shape of 'this' via 'delete'
        this.getValue = this._getValue_unbound;
        this.setValue = this._setValue_unbound;
    }
}
$2d9d8c9fc2282acc$export$7bf70fcf9f891893.Composite = $2d9d8c9fc2282acc$var$Composite;
$2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype.BindingType = {
    Direct: 0,
    EntireArray: 1,
    ArrayElement: 2,
    HasFromToArray: 3
};
$2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype.Versioning = {
    None: 0,
    NeedsUpdate: 1,
    MatrixWorldNeedsUpdate: 2
};
$2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype.GetterByBindingType = [
    $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._getValue_direct,
    $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._getValue_array,
    $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._getValue_arrayElement,
    $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._getValue_toArray, 
];
$2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype.SetterByBindingTypeAndVersioning = [
    [
        // Direct
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_direct,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_direct_setNeedsUpdate,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_direct_setMatrixWorldNeedsUpdate, 
    ],
    [
        // EntireArray
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_array,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_array_setNeedsUpdate,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_array_setMatrixWorldNeedsUpdate, 
    ],
    [
        // ArrayElement
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_arrayElement,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_arrayElement_setNeedsUpdate,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate, 
    ],
    [
        // HasToFromArray
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_fromArray,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_fromArray_setNeedsUpdate,
        $2d9d8c9fc2282acc$export$7bf70fcf9f891893.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate, 
    ]
];
/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 *  - Add objects you would otherwise pass as 'root' to the
 *    constructor or the .clipAction method of AnimationMixer.
 *
 *  - Instead pass this object as 'root'.
 *
 *  - You can also add and remove objects later when the mixer
 *    is running.
 *
 * Note:
 *
 *    Objects of this class appear as one object to the mixer,
 *    so cache control of the individual objects must be done
 *    on the group.
 *
 * Limitation:
 *
 *  - The animated properties must be compatible among the
 *    all objects in the group.
 *
 *  - A single property can either be controlled through a
 *    target group or directly, but not both.
 */ class $2d9d8c9fc2282acc$export$30619c2afd3f34db {
    constructor(){
        this.uuid = $2d9d8c9fc2282acc$var$generateUUID();
        // cached objects followed by the active ones
        this._objects = Array.prototype.slice.call(arguments);
        this.nCachedObjects_ = 0; // threshold
        // note: read by PropertyBinding.Composite
        const indices = {
        };
        this._indicesByUUID = indices; // for bookkeeping
        for(let i331 = 0, n = arguments.length; i331 !== n; ++i331)indices[arguments[i331].uuid] = i331;
        this._paths = []; // inside: string
        this._parsedPaths = []; // inside: { we don't care, here }
        this._bindings = []; // inside: Array< PropertyBinding >
        this._bindingsIndicesByPath = {
        }; // inside: indices in these arrays
        const scope = this;
        this.stats = {
            objects: {
                get total () {
                    return scope._objects.length;
                },
                get inUse () {
                    return this.total - scope.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return scope._bindings.length;
            }
        };
    }
    add() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length;
        let knownObject = undefined, nObjects = objects.length, nCachedObjects = this.nCachedObjects_;
        for(let i332 = 0, n = arguments.length; i332 !== n; ++i332){
            const object = arguments[i332], uuid = object.uuid;
            let index = indicesByUUID[uuid];
            if (index === undefined) {
                // unknown object -> add it to the ACTIVE region
                index = nObjects++;
                indicesByUUID[uuid] = index;
                objects.push(object);
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j)bindings[j].push(new $2d9d8c9fc2282acc$export$7bf70fcf9f891893(object, paths[j], parsedPaths[j]));
            } else if (index < nCachedObjects) {
                knownObject = objects[index];
                // move existing object to the ACTIVE region
                const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
                indicesByUUID[lastCachedObject.uuid] = index;
                objects[index] = lastCachedObject;
                indicesByUUID[uuid] = firstActiveIndex;
                objects[firstActiveIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex];
                    let binding = bindingsForPath[index];
                    bindingsForPath[index] = lastCached;
                    if (binding === undefined) // since we do not bother to create new bindings
                    // for objects that are cached, the binding may
                    // or may not exist
                    binding = new $2d9d8c9fc2282acc$export$7bf70fcf9f891893(object, paths[j], parsedPaths[j]);
                    bindingsForPath[firstActiveIndex] = binding;
                }
            } else if (objects[index] !== knownObject) console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
             // else the object is already where we want it to be
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    remove() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_;
        for(let i333 = 0, n = arguments.length; i333 !== n; ++i333){
            const object = arguments[i333], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined && index >= nCachedObjects) {
                // move existing object into the CACHED region
                const lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
                indicesByUUID[firstActiveObject.uuid] = index;
                objects[index] = firstActiveObject;
                indicesByUUID[uuid] = lastCachedIndex;
                objects[lastCachedIndex] = object;
                // accounting is done, now do the same for all bindings
                for(let j = 0, m = nBindings; j !== m; ++j){
                    const bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                    bindingsForPath[index] = firstActive;
                    bindingsForPath[lastCachedIndex] = binding;
                }
            }
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // remove & forget
    uncache() {
        const objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length;
        let nCachedObjects = this.nCachedObjects_, nObjects = objects.length;
        for(let i334 = 0, n = arguments.length; i334 !== n; ++i334){
            const object = arguments[i334], uuid = object.uuid, index = indicesByUUID[uuid];
            if (index !== undefined) {
                delete indicesByUUID[uuid];
                if (index < nCachedObjects) {
                    // object is cached, shrink the CACHED region
                    const firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                    // last cached object takes this object's place
                    indicesByUUID[lastCachedObject.uuid] = index;
                    objects[index] = lastCachedObject;
                    // last object goes to the activated slot and pop
                    indicesByUUID[lastObject.uuid] = firstActiveIndex;
                    objects[firstActiveIndex] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                        bindingsForPath[index] = lastCached;
                        bindingsForPath[firstActiveIndex] = last;
                        bindingsForPath.pop();
                    }
                } else {
                    // object is active, just swap with the last and pop
                    const lastIndex = --nObjects, lastObject = objects[lastIndex];
                    if (lastIndex > 0) indicesByUUID[lastObject.uuid] = index;
                    objects[index] = lastObject;
                    objects.pop();
                    // accounting is done, now do the same for all bindings
                    for(let j = 0, m = nBindings; j !== m; ++j){
                        const bindingsForPath = bindings[j];
                        bindingsForPath[index] = bindingsForPath[lastIndex];
                        bindingsForPath.pop();
                    }
                } // cached or active
            } // if object is known
        } // for arguments
        this.nCachedObjects_ = nCachedObjects;
    }
    // Internal interface used by befriended PropertyBinding.Composite:
    subscribe_(path, parsedPath) {
        // returns an array of bindings for the given path that is changed
        // according to the contained objects in the group
        const indicesByPath = this._bindingsIndicesByPath;
        let index = indicesByPath[path];
        const bindings = this._bindings;
        if (index !== undefined) return bindings[index];
        const paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = new Array(nObjects);
        index = bindings.length;
        indicesByPath[path] = index;
        paths.push(path);
        parsedPaths.push(parsedPath);
        bindings.push(bindingsForPath);
        for(let i335 = nCachedObjects, n = objects.length; i335 !== n; ++i335){
            const object = objects[i335];
            bindingsForPath[i335] = new $2d9d8c9fc2282acc$export$7bf70fcf9f891893(object, path, parsedPath);
        }
        return bindingsForPath;
    }
    unsubscribe_(path) {
        // tells the group to forget about a property path and no longer
        // update the array previously obtained with 'subscribe_'
        const indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
        if (index !== undefined) {
            const paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex], lastBindingsPath = path[lastBindingsIndex];
            indicesByPath[lastBindingsPath] = index;
            bindings[index] = lastBindings;
            bindings.pop();
            parsedPaths[index] = parsedPaths[lastBindingsIndex];
            parsedPaths.pop();
            paths[index] = paths[lastBindingsIndex];
            paths.pop();
        }
    }
}
$2d9d8c9fc2282acc$export$30619c2afd3f34db.prototype.isAnimationObjectGroup = true;
class $2d9d8c9fc2282acc$var$AnimationAction {
    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode){
        this._mixer = mixer;
        this._clip = clip;
        this._localRoot = localRoot;
        this.blendMode = blendMode;
        const tracks = clip.tracks, nTracks = tracks.length, interpolants = new Array(nTracks);
        const interpolantSettings = {
            endingStart: $2d9d8c9fc2282acc$export$7f795934b84ab523,
            endingEnd: $2d9d8c9fc2282acc$export$7f795934b84ab523
        };
        for(let i336 = 0; i336 !== nTracks; ++i336){
            const interpolant = tracks[i336].createInterpolant(null);
            interpolants[i336] = interpolant;
            interpolant.settings = interpolantSettings;
        }
        this._interpolantSettings = interpolantSettings;
        this._interpolants = interpolants; // bound by the mixer
        // inside: PropertyMixer (managed by the mixer)
        this._propertyBindings = new Array(nTracks);
        this._cacheIndex = null; // for the memory manager
        this._byClipCacheIndex = null; // for the memory manager
        this._timeScaleInterpolant = null;
        this._weightInterpolant = null;
        this.loop = $2d9d8c9fc2282acc$export$dfaf4422ce096e29;
        this._loopCount = -1;
        // global mixer time when the action is to be started
        // it's set back to 'null' upon start of the action
        this._startTime = null;
        // scaled local time of the action
        // gets clamped or wrapped to 0..clip.duration according to loop
        this.time = 0;
        this.timeScale = 1;
        this._effectiveTimeScale = 1;
        this.weight = 1;
        this._effectiveWeight = 1;
        this.repetitions = Infinity; // no. of repetitions when looping
        this.paused = false; // true -> zero effective time scale
        this.enabled = true; // false -> zero effective weight
        this.clampWhenFinished = false; // keep feeding the last frame?
        this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate
        this.zeroSlopeAtEnd = true; // clips for start, loop and end
    }
    // State & Scheduling
    play() {
        this._mixer._activateAction(this);
        return this;
    }
    stop() {
        this._mixer._deactivateAction(this);
        return this.reset();
    }
    reset() {
        this.paused = false;
        this.enabled = true;
        this.time = 0; // restart clip
        this._loopCount = -1; // forget previous loops
        this._startTime = null; // forget scheduling
        return this.stopFading().stopWarping();
    }
    isRunning() {
        return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
    }
    // return true when play has been called
    isScheduled() {
        return this._mixer._isActiveAction(this);
    }
    startAt(time) {
        this._startTime = time;
        return this;
    }
    setLoop(mode, repetitions) {
        this.loop = mode;
        this.repetitions = repetitions;
        return this;
    }
    // Weight
    // set the weight stopping any scheduled fading
    // although .enabled = false yields an effective weight of zero, this
    // method does *not* change .enabled, because it would be confusing
    setEffectiveWeight(weight) {
        this.weight = weight;
        // note: same logic as when updated at runtime
        this._effectiveWeight = this.enabled ? weight : 0;
        return this.stopFading();
    }
    // return the weight considering fading and .enabled
    getEffectiveWeight() {
        return this._effectiveWeight;
    }
    fadeIn(duration) {
        return this._scheduleFading(duration, 0, 1);
    }
    fadeOut(duration) {
        return this._scheduleFading(duration, 1, 0);
    }
    crossFadeFrom(fadeOutAction, duration, warp) {
        fadeOutAction.fadeOut(duration);
        this.fadeIn(duration);
        if (warp) {
            const fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration, startEndRatio = fadeOutDuration / fadeInDuration, endStartRatio = fadeInDuration / fadeOutDuration;
            fadeOutAction.warp(1, startEndRatio, duration);
            this.warp(endStartRatio, 1, duration);
        }
        return this;
    }
    crossFadeTo(fadeInAction, duration, warp) {
        return fadeInAction.crossFadeFrom(this, duration, warp);
    }
    stopFading() {
        const weightInterpolant = this._weightInterpolant;
        if (weightInterpolant !== null) {
            this._weightInterpolant = null;
            this._mixer._takeBackControlInterpolant(weightInterpolant);
        }
        return this;
    }
    // Time Scale Control
    // set the time scale stopping any scheduled warping
    // although .paused = true yields an effective time scale of zero, this
    // method does *not* change .paused, because it would be confusing
    setEffectiveTimeScale(timeScale) {
        this.timeScale = timeScale;
        this._effectiveTimeScale = this.paused ? 0 : timeScale;
        return this.stopWarping();
    }
    // return the time scale considering warping and .paused
    getEffectiveTimeScale() {
        return this._effectiveTimeScale;
    }
    setDuration(duration) {
        this.timeScale = this._clip.duration / duration;
        return this.stopWarping();
    }
    syncWith(action) {
        this.time = action.time;
        this.timeScale = action.timeScale;
        return this.stopWarping();
    }
    halt(duration) {
        return this.warp(this._effectiveTimeScale, 0, duration);
    }
    warp(startTimeScale, endTimeScale, duration) {
        const mixer = this._mixer, now = mixer.time, timeScale = this.timeScale;
        let interpolant = this._timeScaleInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._timeScaleInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        times[1] = now + duration;
        values[0] = startTimeScale / timeScale;
        values[1] = endTimeScale / timeScale;
        return this;
    }
    stopWarping() {
        const timeScaleInterpolant = this._timeScaleInterpolant;
        if (timeScaleInterpolant !== null) {
            this._timeScaleInterpolant = null;
            this._mixer._takeBackControlInterpolant(timeScaleInterpolant);
        }
        return this;
    }
    // Object Accessors
    getMixer() {
        return this._mixer;
    }
    getClip() {
        return this._clip;
    }
    getRoot() {
        return this._localRoot || this._mixer._root;
    }
    // Interna
    _update(time, deltaTime, timeDirection, accuIndex) {
        // called by the mixer
        if (!this.enabled) {
            // call ._updateWeight() to update ._effectiveWeight
            this._updateWeight(time);
            return;
        }
        const startTime = this._startTime;
        if (startTime !== null) {
            // check for scheduled start of action
            const timeRunning = (time - startTime) * timeDirection;
            if (timeRunning < 0 || timeDirection === 0) return; // yet to come / don't decide when delta = 0
            // start
            this._startTime = null; // unschedule
            deltaTime = timeDirection * timeRunning;
        }
        // apply time scale and advance time
        deltaTime *= this._updateTimeScale(time);
        const clipTime = this._updateTime(deltaTime);
        // note: _updateTime may disable the action resulting in
        // an effective weight of 0
        const weight = this._updateWeight(time);
        if (weight > 0) {
            const interpolants = this._interpolants;
            const propertyMixers = this._propertyBindings;
            switch(this.blendMode){
                case $2d9d8c9fc2282acc$export$d875e029ef558d3:
                    for(let j = 0, m = interpolants.length; j !== m; ++j){
                        interpolants[j].evaluate(clipTime);
                        propertyMixers[j].accumulateAdditive(weight);
                    }
                    break;
                case $2d9d8c9fc2282acc$export$bcfbbdcf8de7f8cd:
                default:
                    for(let j5 = 0, m1 = interpolants.length; j5 !== m1; ++j5){
                        interpolants[j5].evaluate(clipTime);
                        propertyMixers[j5].accumulate(accuIndex, weight);
                    }
            }
        }
    }
    _updateWeight(time) {
        let weight = 0;
        if (this.enabled) {
            weight = this.weight;
            const interpolant = this._weightInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time)[0];
                weight *= interpolantValue;
                if (time > interpolant.parameterPositions[1]) {
                    this.stopFading();
                    if (interpolantValue === 0) // faded out, disable
                    this.enabled = false;
                }
            }
        }
        this._effectiveWeight = weight;
        return weight;
    }
    _updateTimeScale(time) {
        let timeScale = 0;
        if (!this.paused) {
            timeScale = this.timeScale;
            const interpolant = this._timeScaleInterpolant;
            if (interpolant !== null) {
                const interpolantValue = interpolant.evaluate(time)[0];
                timeScale *= interpolantValue;
                if (time > interpolant.parameterPositions[1]) {
                    this.stopWarping();
                    if (timeScale === 0) // motion has halted, pause
                    this.paused = true;
                    else // warp done - apply final time scale
                    this.timeScale = timeScale;
                }
            }
        }
        this._effectiveTimeScale = timeScale;
        return timeScale;
    }
    _updateTime(deltaTime) {
        const duration = this._clip.duration;
        const loop = this.loop;
        let time = this.time + deltaTime;
        let loopCount = this._loopCount;
        const pingPong = loop === $2d9d8c9fc2282acc$export$f8f6f2041b78e210;
        if (deltaTime === 0) {
            if (loopCount === -1) return time;
            return pingPong && (loopCount & 1) === 1 ? duration - time : time;
        }
        if (loop === $2d9d8c9fc2282acc$export$d62fdc9d1b1cccad) {
            if (loopCount === -1) {
                // just started
                this._loopCount = 0;
                this._setEndings(true, true, false);
            }
            handle_stop: {
                if (time >= duration) time = duration;
                else if (time < 0) time = 0;
                else {
                    this.time = time;
                    break handle_stop;
                }
                if (this.clampWhenFinished) this.paused = true;
                else this.enabled = false;
                this.time = time;
                this._mixer.dispatchEvent({
                    type: 'finished',
                    action: this,
                    direction: deltaTime < 0 ? -1 : 1
                });
            }
        } else {
            if (loopCount === -1) {
                // just started
                if (deltaTime >= 0) {
                    loopCount = 0;
                    this._setEndings(true, this.repetitions === 0, pingPong);
                } else // when looping in reverse direction, the initial
                // transition through zero counts as a repetition,
                // so leave loopCount at -1
                this._setEndings(this.repetitions === 0, true, pingPong);
            }
            if (time >= duration || time < 0) {
                // wrap around
                const loopDelta = Math.floor(time / duration); // signed
                time -= duration * loopDelta;
                loopCount += Math.abs(loopDelta);
                const pending = this.repetitions - loopCount;
                if (pending <= 0) {
                    // have to stop (switch state, clamp time, fire event)
                    if (this.clampWhenFinished) this.paused = true;
                    else this.enabled = false;
                    time = deltaTime > 0 ? duration : 0;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: 'finished',
                        action: this,
                        direction: deltaTime > 0 ? 1 : -1
                    });
                } else {
                    // keep running
                    if (pending === 1) {
                        // entering the last round
                        const atStart = deltaTime < 0;
                        this._setEndings(atStart, !atStart, pingPong);
                    } else this._setEndings(false, false, pingPong);
                    this._loopCount = loopCount;
                    this.time = time;
                    this._mixer.dispatchEvent({
                        type: 'loop',
                        action: this,
                        loopDelta: loopDelta
                    });
                }
            } else this.time = time;
            if (pingPong && (loopCount & 1) === 1) // invert time for the "pong round"
            return duration - time;
        }
        return time;
    }
    _setEndings(atStart, atEnd, pingPong) {
        const settings = this._interpolantSettings;
        if (pingPong) {
            settings.endingStart = $2d9d8c9fc2282acc$export$24a4ccb5099273b5;
            settings.endingEnd = $2d9d8c9fc2282acc$export$24a4ccb5099273b5;
        } else {
            // assuming for LoopOnce atStart == atEnd == true
            if (atStart) settings.endingStart = this.zeroSlopeAtStart ? $2d9d8c9fc2282acc$export$24a4ccb5099273b5 : $2d9d8c9fc2282acc$export$7f795934b84ab523;
            else settings.endingStart = $2d9d8c9fc2282acc$export$8e8c3ecdcd8e1fee;
            if (atEnd) settings.endingEnd = this.zeroSlopeAtEnd ? $2d9d8c9fc2282acc$export$24a4ccb5099273b5 : $2d9d8c9fc2282acc$export$7f795934b84ab523;
            else settings.endingEnd = $2d9d8c9fc2282acc$export$8e8c3ecdcd8e1fee;
        }
    }
    _scheduleFading(duration, weightNow, weightThen) {
        const mixer = this._mixer, now = mixer.time;
        let interpolant = this._weightInterpolant;
        if (interpolant === null) {
            interpolant = mixer._lendControlInterpolant();
            this._weightInterpolant = interpolant;
        }
        const times = interpolant.parameterPositions, values = interpolant.sampleValues;
        times[0] = now;
        values[0] = weightNow;
        times[1] = now + duration;
        values[1] = weightThen;
        return this;
    }
}
class $2d9d8c9fc2282acc$export$fbd77e5aefaa0102 extends $2d9d8c9fc2282acc$export$ec8b666c5fe2c75a {
    constructor(root){
        super();
        this._root = root;
        this._initMemoryManager();
        this._accuIndex = 0;
        this.time = 0;
        this.timeScale = 1;
    }
    _bindAction(action, prototypeAction) {
        const root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName;
        let bindingsByName = bindingsByRoot[rootUuid];
        if (bindingsByName === undefined) {
            bindingsByName = {
            };
            bindingsByRoot[rootUuid] = bindingsByName;
        }
        for(let i337 = 0; i337 !== nTracks; ++i337){
            const track = tracks[i337], trackName = track.name;
            let binding = bindingsByName[trackName];
            if (binding !== undefined) bindings[i337] = binding;
            else {
                binding = bindings[i337];
                if (binding !== undefined) {
                    // existing binding, make sure the cache knows
                    if (binding._cacheIndex === null) {
                        ++binding.referenceCount;
                        this._addInactiveBinding(binding, rootUuid, trackName);
                    }
                    continue;
                }
                const path = prototypeAction && prototypeAction._propertyBindings[i337].binding.parsedPath;
                binding = new $2d9d8c9fc2282acc$export$dfe0af1ca1acb78a($2d9d8c9fc2282acc$export$7bf70fcf9f891893.create(root, trackName, path), track.ValueTypeName, track.getValueSize());
                ++binding.referenceCount;
                this._addInactiveBinding(binding, rootUuid, trackName);
                bindings[i337] = binding;
            }
            interpolants[i337].resultBuffer = binding.buffer;
        }
    }
    _activateAction(action) {
        if (!this._isActiveAction(action)) {
            if (action._cacheIndex === null) {
                // this action has been forgotten by the cache, but the user
                // appears to be still using it -> rebind
                const rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
                this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);
                this._addInactiveAction(action, clipUuid, rootUuid);
            }
            const bindings = action._propertyBindings;
            // increment reference counts / sort out state
            for(let i338 = 0, n = bindings.length; i338 !== n; ++i338){
                const binding = bindings[i338];
                if ((binding.useCount++) === 0) {
                    this._lendBinding(binding);
                    binding.saveOriginalState();
                }
            }
            this._lendAction(action);
        }
    }
    _deactivateAction(action) {
        if (this._isActiveAction(action)) {
            const bindings = action._propertyBindings;
            // decrement reference counts / sort out state
            for(let i339 = 0, n = bindings.length; i339 !== n; ++i339){
                const binding = bindings[i339];
                if (--binding.useCount === 0) {
                    binding.restoreOriginalState();
                    this._takeBackBinding(binding);
                }
            }
            this._takeBackAction(action);
        }
    }
    // Memory manager
    _initMemoryManager() {
        this._actions = []; // 'nActiveActions' followed by inactive ones
        this._nActiveActions = 0;
        this._actionsByClip = {
        };
        // inside:
        // {
        // 	knownActions: Array< AnimationAction > - used as prototypes
        // 	actionByRoot: AnimationAction - lookup
        // }
        this._bindings = []; // 'nActiveBindings' followed by inactive ones
        this._nActiveBindings = 0;
        this._bindingsByRootAndName = {
        }; // inside: Map< name, PropertyMixer >
        this._controlInterpolants = []; // same game as above
        this._nActiveControlInterpolants = 0;
        const scope = this;
        this.stats = {
            actions: {
                get total () {
                    return scope._actions.length;
                },
                get inUse () {
                    return scope._nActiveActions;
                }
            },
            bindings: {
                get total () {
                    return scope._bindings.length;
                },
                get inUse () {
                    return scope._nActiveBindings;
                }
            },
            controlInterpolants: {
                get total () {
                    return scope._controlInterpolants.length;
                },
                get inUse () {
                    return scope._nActiveControlInterpolants;
                }
            }
        };
    }
    // Memory management for AnimationAction objects
    _isActiveAction(action) {
        const index = action._cacheIndex;
        return index !== null && index < this._nActiveActions;
    }
    _addInactiveAction(action, clipUuid, rootUuid) {
        const actions = this._actions, actionsByClip = this._actionsByClip;
        let actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip === undefined) {
            actionsForClip = {
                knownActions: [
                    action
                ],
                actionByRoot: {
                }
            };
            action._byClipCacheIndex = 0;
            actionsByClip[clipUuid] = actionsForClip;
        } else {
            const knownActions = actionsForClip.knownActions;
            action._byClipCacheIndex = knownActions.length;
            knownActions.push(action);
        }
        action._cacheIndex = actions.length;
        actions.push(action);
        actionsForClip.actionByRoot[rootUuid] = action;
    }
    _removeInactiveAction(action) {
        const actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
        lastInactiveAction._cacheIndex = cacheIndex;
        actions[cacheIndex] = lastInactiveAction;
        actions.pop();
        action._cacheIndex = null;
        const clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
        lastKnownAction._byClipCacheIndex = byClipCacheIndex;
        knownActionsForClip[byClipCacheIndex] = lastKnownAction;
        knownActionsForClip.pop();
        action._byClipCacheIndex = null;
        const actionByRoot = actionsForClip.actionByRoot, rootUuid = (action._localRoot || this._root).uuid;
        delete actionByRoot[rootUuid];
        if (knownActionsForClip.length === 0) delete actionsByClip[clipUuid];
        this._removeInactiveBindingsForAction(action);
    }
    _removeInactiveBindingsForAction(action) {
        const bindings = action._propertyBindings;
        for(let i340 = 0, n = bindings.length; i340 !== n; ++i340){
            const binding = bindings[i340];
            if (--binding.referenceCount === 0) this._removeInactiveBinding(binding);
        }
    }
    _lendAction(action) {
        // [ active actions |  inactive actions  ]
        // [  active actions >| inactive actions ]
        //                 s        a
        //                  <-swap->
        //                 a        s
        const actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
        action._cacheIndex = lastActiveIndex;
        actions[lastActiveIndex] = action;
        firstInactiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = firstInactiveAction;
    }
    _takeBackAction(action) {
        // [  active actions  | inactive actions ]
        // [ active actions |< inactive actions  ]
        //        a        s
        //         <-swap->
        //        s        a
        const actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
        action._cacheIndex = firstInactiveIndex;
        actions[firstInactiveIndex] = action;
        lastActiveAction._cacheIndex = prevIndex;
        actions[prevIndex] = lastActiveAction;
    }
    // Memory management for PropertyMixer objects
    _addInactiveBinding(binding, rootUuid, trackName) {
        const bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings;
        let bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName === undefined) {
            bindingByName = {
            };
            bindingsByRoot[rootUuid] = bindingByName;
        }
        bindingByName[trackName] = binding;
        binding._cacheIndex = bindings.length;
        bindings.push(binding);
    }
    _removeInactiveBinding(binding) {
        const bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
        lastInactiveBinding._cacheIndex = cacheIndex;
        bindings[cacheIndex] = lastInactiveBinding;
        bindings.pop();
        delete bindingByName[trackName];
        if (Object.keys(bindingByName).length === 0) delete bindingsByRoot[rootUuid];
    }
    _lendBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
        binding._cacheIndex = lastActiveIndex;
        bindings[lastActiveIndex] = binding;
        firstInactiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = firstInactiveBinding;
    }
    _takeBackBinding(binding) {
        const bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
        binding._cacheIndex = firstInactiveIndex;
        bindings[firstInactiveIndex] = binding;
        lastActiveBinding._cacheIndex = prevIndex;
        bindings[prevIndex] = lastActiveBinding;
    }
    // Memory management of Interpolants for weight and time scale
    _lendControlInterpolant() {
        const interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++;
        let interpolant = interpolants[lastActiveIndex];
        if (interpolant === undefined) {
            interpolant = new $2d9d8c9fc2282acc$export$a8e6009059f51e1a(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);
            interpolant.__cacheIndex = lastActiveIndex;
            interpolants[lastActiveIndex] = interpolant;
        }
        return interpolant;
    }
    _takeBackControlInterpolant(interpolant) {
        const interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
        interpolant.__cacheIndex = firstInactiveIndex;
        interpolants[firstInactiveIndex] = interpolant;
        lastActiveInterpolant.__cacheIndex = prevIndex;
        interpolants[prevIndex] = lastActiveInterpolant;
    }
    // return an action for a clip optionally using a custom root target
    // object (this method allocates a lot of dynamic memory in case a
    // previously unknown clip/root combination is specified)
    clipAction(clip, optionalRoot, blendMode) {
        const root = optionalRoot || this._root, rootUuid = root.uuid;
        let clipObject = typeof clip === 'string' ? $2d9d8c9fc2282acc$export$d942c706bf23829c.findByName(root, clip) : clip;
        const clipUuid = clipObject !== null ? clipObject.uuid : clip;
        const actionsForClip = this._actionsByClip[clipUuid];
        let prototypeAction = null;
        if (blendMode === undefined) {
            if (clipObject !== null) blendMode = clipObject.blendMode;
            else blendMode = $2d9d8c9fc2282acc$export$bcfbbdcf8de7f8cd;
        }
        if (actionsForClip !== undefined) {
            const existingAction = actionsForClip.actionByRoot[rootUuid];
            if (existingAction !== undefined && existingAction.blendMode === blendMode) return existingAction;
            // we know the clip, so we don't have to parse all
            // the bindings again but can just copy
            prototypeAction = actionsForClip.knownActions[0];
            // also, take the clip from the prototype action
            if (clipObject === null) clipObject = prototypeAction._clip;
        }
        // clip must be known when specified via string
        if (clipObject === null) return null;
        // allocate all resources required to run it
        const newAction = new $2d9d8c9fc2282acc$var$AnimationAction(this, clipObject, optionalRoot, blendMode);
        this._bindAction(newAction, prototypeAction);
        // and make the action known to the memory manager
        this._addInactiveAction(newAction, clipUuid, rootUuid);
        return newAction;
    }
    // get an existing action
    existingAction(clip, optionalRoot) {
        const root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = typeof clip === 'string' ? $2d9d8c9fc2282acc$export$d942c706bf23829c.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
        if (actionsForClip !== undefined) return actionsForClip.actionByRoot[rootUuid] || null;
        return null;
    }
    // deactivates all previously scheduled actions
    stopAllAction() {
        const actions = this._actions, nActions = this._nActiveActions;
        for(let i341 = nActions - 1; i341 >= 0; --i341)actions[i341].stop();
        return this;
    }
    // advance the time and update apply the animation
    update(deltaTime) {
        deltaTime *= this.timeScale;
        const actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1;
        // run active actions
        for(let i343 = 0; i343 !== nActions; ++i343){
            const action = actions[i343];
            action._update(time, deltaTime, timeDirection, accuIndex);
        }
        // update scene graph
        const bindings = this._bindings, nBindings = this._nActiveBindings;
        for(let i342 = 0; i342 !== nBindings; ++i342)bindings[i342].apply(accuIndex);
        return this;
    }
    // Allows you to seek to a specific time in an animation.
    setTime(timeInSeconds) {
        this.time = 0; // Zero out time attribute for AnimationMixer object;
        for(let i344 = 0; i344 < this._actions.length; i344++)this._actions[i344].time = 0; // Zero out time attribute for all associated AnimationAction objects.
        return this.update(timeInSeconds); // Update used to set exact time. Returns "this" AnimationMixer object.
    }
    // return this mixer's root target object
    getRoot() {
        return this._root;
    }
    // free all resources specific to a particular clip
    uncacheClip(clip) {
        const actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
        if (actionsForClip !== undefined) {
            // note: just calling _removeInactiveAction would mess up the
            // iteration state and also require updating the state we can
            // just throw away
            const actionsToRemove = actionsForClip.knownActions;
            for(let i345 = 0, n = actionsToRemove.length; i345 !== n; ++i345){
                const action = actionsToRemove[i345];
                this._deactivateAction(action);
                const cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
                action._cacheIndex = null;
                action._byClipCacheIndex = null;
                lastInactiveAction._cacheIndex = cacheIndex;
                actions[cacheIndex] = lastInactiveAction;
                actions.pop();
                this._removeInactiveBindingsForAction(action);
            }
            delete actionsByClip[clipUuid];
        }
    }
    // free all resources specific to a particular root target object
    uncacheRoot(root) {
        const rootUuid = root.uuid, actionsByClip = this._actionsByClip;
        for(const clipUuid in actionsByClip){
            const actionByRoot = actionsByClip[clipUuid].actionByRoot, action = actionByRoot[rootUuid];
            if (action !== undefined) {
                this._deactivateAction(action);
                this._removeInactiveAction(action);
            }
        }
        const bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid];
        if (bindingByName !== undefined) for(const trackName in bindingByName){
            const binding = bindingByName[trackName];
            binding.restoreOriginalState();
            this._removeInactiveBinding(binding);
        }
    }
    // remove a targeted clip from the cache
    uncacheAction(clip, optionalRoot) {
        const action = this.existingAction(clip, optionalRoot);
        if (action !== null) {
            this._deactivateAction(action);
            this._removeInactiveAction(action);
        }
    }
}
$2d9d8c9fc2282acc$export$fbd77e5aefaa0102.prototype._controlInterpolantsResultBuffer = new Float32Array(1);
class $2d9d8c9fc2282acc$export$2947cebfe91c02f8 {
    constructor(value){
        if (typeof value === 'string') {
            console.warn('THREE.Uniform: Type parameter is no longer needed.');
            value = arguments[1];
        }
        this.value = value;
    }
    clone() {
        return new $2d9d8c9fc2282acc$export$2947cebfe91c02f8(this.value.clone === undefined ? this.value : this.value.clone());
    }
}
class $2d9d8c9fc2282acc$export$25ec0e1af1389358 extends $2d9d8c9fc2282acc$export$3d5cd879f108f53f {
    constructor(array, stride, meshPerAttribute = 1){
        super(array, stride);
        this.meshPerAttribute = meshPerAttribute;
    }
    copy(source) {
        super.copy(source);
        this.meshPerAttribute = source.meshPerAttribute;
        return this;
    }
    clone(data) {
        const ib = super.clone(data);
        ib.meshPerAttribute = this.meshPerAttribute;
        return ib;
    }
    toJSON(data) {
        const json = super.toJSON(data);
        json.isInstancedInterleavedBuffer = true;
        json.meshPerAttribute = this.meshPerAttribute;
        return json;
    }
}
$2d9d8c9fc2282acc$export$25ec0e1af1389358.prototype.isInstancedInterleavedBuffer = true;
class $2d9d8c9fc2282acc$export$6b7339ae8dbddf73 {
    constructor(buffer, type, itemSize, elementSize, count){
        this.buffer = buffer;
        this.type = type;
        this.itemSize = itemSize;
        this.elementSize = elementSize;
        this.count = count;
        this.version = 0;
    }
    set needsUpdate(value) {
        if (value === true) this.version++;
    }
    setBuffer(buffer) {
        this.buffer = buffer;
        return this;
    }
    setType(type, elementSize) {
        this.type = type;
        this.elementSize = elementSize;
        return this;
    }
    setItemSize(itemSize) {
        this.itemSize = itemSize;
        return this;
    }
    setCount(count) {
        this.count = count;
        return this;
    }
}
$2d9d8c9fc2282acc$export$6b7339ae8dbddf73.prototype.isGLBufferAttribute = true;
class $2d9d8c9fc2282acc$export$8b7aaceff00bd2f {
    constructor(origin, direction, near = 0, far = Infinity){
        this.ray = new $2d9d8c9fc2282acc$export$a186db52eed6d40e(origin, direction);
        // direction is assumed to be normalized (for accurate distance calculations)
        this.near = near;
        this.far = far;
        this.camera = null;
        this.layers = new $2d9d8c9fc2282acc$export$89312ce47c0ca777();
        this.params = {
            Mesh: {
            },
            Line: {
                threshold: 1
            },
            LOD: {
            },
            Points: {
                threshold: 1
            },
            Sprite: {
            }
        };
    }
    set(origin, direction) {
        // direction is assumed to be normalized (for accurate distance calculations)
        this.ray.set(origin, direction);
    }
    setFromCamera(coords, camera) {
        if (camera && camera.isPerspectiveCamera) {
            this.ray.origin.setFromMatrixPosition(camera.matrixWorld);
            this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();
            this.camera = camera;
        } else if (camera && camera.isOrthographicCamera) {
            this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera
            this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);
            this.camera = camera;
        } else console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
    }
    intersectObject(object, recursive = true, intersects = []) {
        $2d9d8c9fc2282acc$var$intersectObject(object, this, intersects, recursive);
        intersects.sort($2d9d8c9fc2282acc$var$ascSort);
        return intersects;
    }
    intersectObjects(objects, recursive = true, intersects = []) {
        for(let i346 = 0, l = objects.length; i346 < l; i346++)$2d9d8c9fc2282acc$var$intersectObject(objects[i346], this, intersects, recursive);
        intersects.sort($2d9d8c9fc2282acc$var$ascSort);
        return intersects;
    }
}
function $2d9d8c9fc2282acc$var$ascSort(a, b) {
    return a.distance - b.distance;
}
function $2d9d8c9fc2282acc$var$intersectObject(object, raycaster, intersects, recursive) {
    if (object.layers.test(raycaster.layers)) object.raycast(raycaster, intersects);
    if (recursive === true) {
        const children = object.children;
        for(let i347 = 0, l = children.length; i347 < l; i347++)$2d9d8c9fc2282acc$var$intersectObject(children[i347], raycaster, intersects, true);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */ class $2d9d8c9fc2282acc$export$d712cd887b4a00f7 {
    constructor(radius = 1, phi = 0, theta = 0){
        this.radius = radius;
        this.phi = phi; // polar angle
        this.theta = theta; // azimuthal angle
        return this;
    }
    set(radius, phi, theta) {
        this.radius = radius;
        this.phi = phi;
        this.theta = theta;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.phi = other.phi;
        this.theta = other.theta;
        return this;
    }
    // restrict phi to be betwee EPS and PI-EPS
    makeSafe() {
        const EPS = 0.000001;
        this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
        return this;
    }
    setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + y * y + z * z);
        if (this.radius === 0) {
            this.theta = 0;
            this.phi = 0;
        } else {
            this.theta = Math.atan2(x, z);
            this.phi = Math.acos($2d9d8c9fc2282acc$var$clamp(y / this.radius, -1, 1));
        }
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
/**
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 */ class $2d9d8c9fc2282acc$export$287165bb2177f4fd {
    constructor(radius = 1, theta = 0, y = 0){
        this.radius = radius; // distance from the origin to a point in the x-z plane
        this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
        this.y = y; // height above the x-z plane
        return this;
    }
    set(radius, theta, y) {
        this.radius = radius;
        this.theta = theta;
        this.y = y;
        return this;
    }
    copy(other) {
        this.radius = other.radius;
        this.theta = other.theta;
        this.y = other.y;
        return this;
    }
    setFromVector3(v) {
        return this.setFromCartesianCoords(v.x, v.y, v.z);
    }
    setFromCartesianCoords(x, y, z) {
        this.radius = Math.sqrt(x * x + z * z);
        this.theta = Math.atan2(x, z);
        this.y = y;
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $2d9d8c9fc2282acc$var$_vector$4 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
class $2d9d8c9fc2282acc$export$60f553fa130f08b0 {
    constructor(min = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(Infinity, Infinity), max = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(-Infinity, -Infinity)){
        this.min = min;
        this.max = max;
    }
    set(min, max) {
        this.min.copy(min);
        this.max.copy(max);
        return this;
    }
    setFromPoints(points) {
        this.makeEmpty();
        for(let i348 = 0, il = points.length; i348 < il; i348++)this.expandByPoint(points[i348]);
        return this;
    }
    setFromCenterAndSize(center, size) {
        const halfSize = $2d9d8c9fc2282acc$var$_vector$4.copy(size).multiplyScalar(0.5);
        this.min.copy(center).sub(halfSize);
        this.max.copy(center).add(halfSize);
        return this;
    }
    clone() {
        return new this.constructor().copy(this);
    }
    copy(box) {
        this.min.copy(box.min);
        this.max.copy(box.max);
        return this;
    }
    makeEmpty() {
        this.min.x = this.min.y = Infinity;
        this.max.x = this.max.y = -Infinity;
        return this;
    }
    isEmpty() {
        // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
        return this.max.x < this.min.x || this.max.y < this.min.y;
    }
    getCenter(target) {
        return this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
    }
    getSize(target) {
        return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
    }
    expandByPoint(point) {
        this.min.min(point);
        this.max.max(point);
        return this;
    }
    expandByVector(vector) {
        this.min.sub(vector);
        this.max.add(vector);
        return this;
    }
    expandByScalar(scalar) {
        this.min.addScalar(-scalar);
        this.max.addScalar(scalar);
        return this;
    }
    containsPoint(point) {
        return point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;
    }
    containsBox(box) {
        return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
    }
    getParameter(point, target) {
        // This can potentially have a divide by zero if the box
        // has a size dimension of 0.
        return target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
    }
    intersectsBox(box) {
        // using 4 splitting planes to rule out intersections
        return box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
    }
    clampPoint(point, target) {
        return target.copy(point).clamp(this.min, this.max);
    }
    distanceToPoint(point) {
        const clampedPoint = $2d9d8c9fc2282acc$var$_vector$4.copy(point).clamp(this.min, this.max);
        return clampedPoint.sub(point).length();
    }
    intersect(box) {
        this.min.max(box.min);
        this.max.min(box.max);
        return this;
    }
    union(box) {
        this.min.min(box.min);
        this.max.max(box.max);
        return this;
    }
    translate(offset) {
        this.min.add(offset);
        this.max.add(offset);
        return this;
    }
    equals(box) {
        return box.min.equals(this.min) && box.max.equals(this.max);
    }
}
$2d9d8c9fc2282acc$export$60f553fa130f08b0.prototype.isBox2 = true;
const $2d9d8c9fc2282acc$var$_startP = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_startEnd = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$e0ba6359f1954fd3 {
    constructor(start = new $2d9d8c9fc2282acc$export$64b5c384219d3699(), end = new $2d9d8c9fc2282acc$export$64b5c384219d3699()){
        this.start = start;
        this.end = end;
    }
    set(start, end) {
        this.start.copy(start);
        this.end.copy(end);
        return this;
    }
    copy(line) {
        this.start.copy(line.start);
        this.end.copy(line.end);
        return this;
    }
    getCenter(target) {
        return target.addVectors(this.start, this.end).multiplyScalar(0.5);
    }
    delta(target) {
        return target.subVectors(this.end, this.start);
    }
    distanceSq() {
        return this.start.distanceToSquared(this.end);
    }
    distance() {
        return this.start.distanceTo(this.end);
    }
    at(t, target) {
        return this.delta(target).multiplyScalar(t).add(this.start);
    }
    closestPointToPointParameter(point, clampToLine) {
        $2d9d8c9fc2282acc$var$_startP.subVectors(point, this.start);
        $2d9d8c9fc2282acc$var$_startEnd.subVectors(this.end, this.start);
        const startEnd2 = $2d9d8c9fc2282acc$var$_startEnd.dot($2d9d8c9fc2282acc$var$_startEnd);
        const startEnd_startP = $2d9d8c9fc2282acc$var$_startEnd.dot($2d9d8c9fc2282acc$var$_startP);
        let t = startEnd_startP / startEnd2;
        if (clampToLine) t = $2d9d8c9fc2282acc$var$clamp(t, 0, 1);
        return t;
    }
    closestPointToPoint(point, clampToLine, target) {
        const t = this.closestPointToPointParameter(point, clampToLine);
        return this.delta(target).multiplyScalar(t).add(this.start);
    }
    applyMatrix4(matrix) {
        this.start.applyMatrix4(matrix);
        this.end.applyMatrix4(matrix);
        return this;
    }
    equals(line) {
        return line.start.equals(this.start) && line.end.equals(this.end);
    }
    clone() {
        return new this.constructor().copy(this);
    }
}
const $2d9d8c9fc2282acc$var$_vector$3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$4b14638ffdd81e68 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(light, color){
        super();
        this.light = light;
        this.light.updateMatrixWorld();
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        const positions = [
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            -1,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            -1,
            1
        ];
        for(let i349 = 0, j = 1, l = 32; i349 < l; i349++, j++){
            const p1 = i349 / l * Math.PI * 2;
            const p2 = j / l * Math.PI * 2;
            positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
        }
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(positions, 3));
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            fog: false,
            toneMapped: false
        });
        this.cone = new $2d9d8c9fc2282acc$export$ff1ed10fedfdd604(geometry, material);
        this.add(this.cone);
        this.update();
    }
    dispose() {
        this.cone.geometry.dispose();
        this.cone.material.dispose();
    }
    update() {
        this.light.updateMatrixWorld();
        const coneLength = this.light.distance ? this.light.distance : 1000;
        const coneWidth = coneLength * Math.tan(this.light.angle);
        this.cone.scale.set(coneWidth, coneWidth, coneLength);
        $2d9d8c9fc2282acc$var$_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);
        this.cone.lookAt($2d9d8c9fc2282acc$var$_vector$3);
        if (this.color !== undefined) this.cone.material.color.set(this.color);
        else this.cone.material.color.copy(this.light.color);
    }
}
const $2d9d8c9fc2282acc$var$_vector$2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_boneMatrix = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
const $2d9d8c9fc2282acc$var$_matrixWorldInv = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
class $2d9d8c9fc2282acc$export$5277df3c9e732259 extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(object){
        const bones = $2d9d8c9fc2282acc$var$getBoneList(object);
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        const vertices = [];
        const colors = [];
        const color1 = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0, 0, 1);
        const color2 = new $2d9d8c9fc2282acc$export$892596cec99bc70e(0, 1, 0);
        for(let i350 = 0; i350 < bones.length; i350++){
            const bone = bones[i350];
            if (bone.parent && bone.parent.isBone) {
                vertices.push(0, 0, 0);
                vertices.push(0, 0, 0);
                colors.push(color1.r, color1.g, color1.b);
                colors.push(color2.r, color2.g, color2.b);
            }
        }
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute('color', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(colors, 3));
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            vertexColors: true,
            depthTest: false,
            depthWrite: false,
            toneMapped: false,
            transparent: true
        });
        super(geometry, material);
        this.type = 'SkeletonHelper';
        this.isSkeletonHelper = true;
        this.root = object;
        this.bones = bones;
        this.matrix = object.matrixWorld;
        this.matrixAutoUpdate = false;
    }
    updateMatrixWorld(force) {
        const bones = this.bones;
        const geometry = this.geometry;
        const position = geometry.getAttribute('position');
        $2d9d8c9fc2282acc$var$_matrixWorldInv.copy(this.root.matrixWorld).invert();
        for(let i351 = 0, j = 0; i351 < bones.length; i351++){
            const bone = bones[i351];
            if (bone.parent && bone.parent.isBone) {
                $2d9d8c9fc2282acc$var$_boneMatrix.multiplyMatrices($2d9d8c9fc2282acc$var$_matrixWorldInv, bone.matrixWorld);
                $2d9d8c9fc2282acc$var$_vector$2.setFromMatrixPosition($2d9d8c9fc2282acc$var$_boneMatrix);
                position.setXYZ(j, $2d9d8c9fc2282acc$var$_vector$2.x, $2d9d8c9fc2282acc$var$_vector$2.y, $2d9d8c9fc2282acc$var$_vector$2.z);
                $2d9d8c9fc2282acc$var$_boneMatrix.multiplyMatrices($2d9d8c9fc2282acc$var$_matrixWorldInv, bone.parent.matrixWorld);
                $2d9d8c9fc2282acc$var$_vector$2.setFromMatrixPosition($2d9d8c9fc2282acc$var$_boneMatrix);
                position.setXYZ(j + 1, $2d9d8c9fc2282acc$var$_vector$2.x, $2d9d8c9fc2282acc$var$_vector$2.y, $2d9d8c9fc2282acc$var$_vector$2.z);
                j += 2;
            }
        }
        geometry.getAttribute('position').needsUpdate = true;
        super.updateMatrixWorld(force);
    }
}
function $2d9d8c9fc2282acc$var$getBoneList(object) {
    const boneList = [];
    if (object && object.isBone) boneList.push(object);
    for(let i352 = 0; i352 < object.children.length; i352++)boneList.push.apply(boneList, $2d9d8c9fc2282acc$var$getBoneList(object.children[i352]));
    return boneList;
}
class $2d9d8c9fc2282acc$export$9a9291685b9e4023 extends $2d9d8c9fc2282acc$export$e176487c05830cc5 {
    constructor(light, sphereSize, color){
        const geometry = new $2d9d8c9fc2282acc$export$d5d06a966fec4192(sphereSize, 4, 2);
        const material = new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        super(geometry, material);
        this.light = light;
        this.light.updateMatrixWorld();
        this.color = color;
        this.type = 'PointLightHelper';
        this.matrix = this.light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.update();
    /*
	// TODO: delete this comment?
	const distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
	const distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	const d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/ }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
    update() {
        if (this.color !== undefined) this.material.color.set(this.color);
        else this.material.color.copy(this.light.color);
    /*
		const d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/ }
}
const $2d9d8c9fc2282acc$var$_vector$1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_color1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$892596cec99bc70e();
const $2d9d8c9fc2282acc$var$_color2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$892596cec99bc70e();
class $2d9d8c9fc2282acc$export$8dca15f13f4f8172 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(light, size, color){
        super();
        this.light = light;
        this.light.updateMatrixWorld();
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        const geometry = new $2d9d8c9fc2282acc$export$8e05fc91596f4752(size);
        geometry.rotateY(Math.PI * 0.5);
        this.material = new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5({
            wireframe: true,
            fog: false,
            toneMapped: false
        });
        if (this.color === undefined) this.material.vertexColors = true;
        const position = geometry.getAttribute('position');
        const colors = new Float32Array(position.count * 3);
        geometry.setAttribute('color', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(colors, 3));
        this.add(new $2d9d8c9fc2282acc$export$e176487c05830cc5(geometry, this.material));
        this.update();
    }
    dispose() {
        this.children[0].geometry.dispose();
        this.children[0].material.dispose();
    }
    update() {
        const mesh = this.children[0];
        if (this.color !== undefined) this.material.color.set(this.color);
        else {
            const colors = mesh.geometry.getAttribute('color');
            $2d9d8c9fc2282acc$var$_color1.copy(this.light.color);
            $2d9d8c9fc2282acc$var$_color2.copy(this.light.groundColor);
            for(let i353 = 0, l = colors.count; i353 < l; i353++){
                const color = i353 < l / 2 ? $2d9d8c9fc2282acc$var$_color1 : $2d9d8c9fc2282acc$var$_color2;
                colors.setXYZ(i353, color.r, color.g, color.b);
            }
            colors.needsUpdate = true;
        }
        mesh.lookAt($2d9d8c9fc2282acc$var$_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());
    }
}
class $2d9d8c9fc2282acc$export$3875d39926561055 extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(size = 10, divisions = 10, color1 = 4473924, color2 = 8947848){
        color1 = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color1);
        color2 = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color2);
        const center = divisions / 2;
        const step = size / divisions;
        const halfSize = size / 2;
        const vertices = [], colors = [];
        for(let i354 = 0, j = 0, k = -halfSize; i354 <= divisions; i354++, k += step){
            vertices.push(-halfSize, 0, k, halfSize, 0, k);
            vertices.push(k, 0, -halfSize, k, 0, halfSize);
            const color = i354 === center ? color1 : color2;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
            color.toArray(colors, j);
            j += 3;
        }
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute('color', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(colors, 3));
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = 'GridHelper';
    }
}
class $2d9d8c9fc2282acc$export$361430a10f533cd3 extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 4473924, color2 = 8947848){
        color1 = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color1);
        color2 = new $2d9d8c9fc2282acc$export$892596cec99bc70e(color2);
        const vertices = [];
        const colors = [];
        // create the radials
        for(let i356 = 0; i356 <= radials; i356++){
            const v = i356 / radials * (Math.PI * 2);
            const x = Math.sin(v) * radius;
            const z = Math.cos(v) * radius;
            vertices.push(0, 0, 0);
            vertices.push(x, 0, z);
            const color = i356 & 1 ? color1 : color2;
            colors.push(color.r, color.g, color.b);
            colors.push(color.r, color.g, color.b);
        }
        // create the circles
        for(let i355 = 0; i355 <= circles; i355++){
            const color = i355 & 1 ? color1 : color2;
            const r = radius - radius / circles * i355;
            for(let j = 0; j < divisions; j++){
                // first vertex
                let v = j / divisions * (Math.PI * 2);
                let x = Math.sin(v) * r;
                let z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
                // second vertex
                v = (j + 1) / divisions * (Math.PI * 2);
                x = Math.sin(v) * r;
                z = Math.cos(v) * r;
                vertices.push(x, 0, z);
                colors.push(color.r, color.g, color.b);
            }
        }
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute('color', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(colors, 3));
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = 'PolarGridHelper';
    }
}
const $2d9d8c9fc2282acc$var$_v1 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v2 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_v3 = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
class $2d9d8c9fc2282acc$export$f8e434dc14203e7d extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    constructor(light, size, color){
        super();
        this.light = light;
        this.light.updateMatrixWorld();
        this.matrix = light.matrixWorld;
        this.matrixAutoUpdate = false;
        this.color = color;
        if (size === undefined) size = 1;
        let geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd([
            -size,
            size,
            0,
            size,
            size,
            0,
            size,
            -size,
            0,
            -size,
            -size,
            0,
            -size,
            size,
            0
        ], 3));
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            fog: false,
            toneMapped: false
        });
        this.lightPlane = new $2d9d8c9fc2282acc$export$17d680238e50603e(geometry, material);
        this.add(this.lightPlane);
        geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd([
            0,
            0,
            0,
            0,
            0,
            1
        ], 3));
        this.targetLine = new $2d9d8c9fc2282acc$export$17d680238e50603e(geometry, material);
        this.add(this.targetLine);
        this.update();
    }
    dispose() {
        this.lightPlane.geometry.dispose();
        this.lightPlane.material.dispose();
        this.targetLine.geometry.dispose();
        this.targetLine.material.dispose();
    }
    update() {
        $2d9d8c9fc2282acc$var$_v1.setFromMatrixPosition(this.light.matrixWorld);
        $2d9d8c9fc2282acc$var$_v2.setFromMatrixPosition(this.light.target.matrixWorld);
        $2d9d8c9fc2282acc$var$_v3.subVectors($2d9d8c9fc2282acc$var$_v2, $2d9d8c9fc2282acc$var$_v1);
        this.lightPlane.lookAt($2d9d8c9fc2282acc$var$_v2);
        if (this.color !== undefined) {
            this.lightPlane.material.color.set(this.color);
            this.targetLine.material.color.set(this.color);
        } else {
            this.lightPlane.material.color.copy(this.light.color);
            this.targetLine.material.color.copy(this.light.color);
        }
        this.targetLine.lookAt($2d9d8c9fc2282acc$var$_v2);
        this.targetLine.scale.z = $2d9d8c9fc2282acc$var$_v3.length();
    }
}
const $2d9d8c9fc2282acc$var$_vector = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
const $2d9d8c9fc2282acc$var$_camera = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$79f141de891a5fed();
/**
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		https://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html
 */ class $2d9d8c9fc2282acc$export$ed8e93f853cd795 extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(camera){
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            color: 16777215,
            vertexColors: true,
            toneMapped: false
        });
        const vertices = [];
        const colors = [];
        const pointMap = {
        };
        // colors
        const colorFrustum = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16755200);
        const colorCone = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16711680);
        const colorUp = new $2d9d8c9fc2282acc$export$892596cec99bc70e(43775);
        const colorTarget = new $2d9d8c9fc2282acc$export$892596cec99bc70e(16777215);
        const colorCross = new $2d9d8c9fc2282acc$export$892596cec99bc70e(3355443);
        // near
        addLine('n1', 'n2', colorFrustum);
        addLine('n2', 'n4', colorFrustum);
        addLine('n4', 'n3', colorFrustum);
        addLine('n3', 'n1', colorFrustum);
        // far
        addLine('f1', 'f2', colorFrustum);
        addLine('f2', 'f4', colorFrustum);
        addLine('f4', 'f3', colorFrustum);
        addLine('f3', 'f1', colorFrustum);
        // sides
        addLine('n1', 'f1', colorFrustum);
        addLine('n2', 'f2', colorFrustum);
        addLine('n3', 'f3', colorFrustum);
        addLine('n4', 'f4', colorFrustum);
        // cone
        addLine('p', 'n1', colorCone);
        addLine('p', 'n2', colorCone);
        addLine('p', 'n3', colorCone);
        addLine('p', 'n4', colorCone);
        // up
        addLine('u1', 'u2', colorUp);
        addLine('u2', 'u3', colorUp);
        addLine('u3', 'u1', colorUp);
        // target
        addLine('c', 't', colorTarget);
        addLine('p', 'c', colorCross);
        // cross
        addLine('cn1', 'cn2', colorCross);
        addLine('cn3', 'cn4', colorCross);
        addLine('cf1', 'cf2', colorCross);
        addLine('cf3', 'cf4', colorCross);
        function addLine(a, b, color) {
            addPoint(a, color);
            addPoint(b, color);
        }
        function addPoint(id, color) {
            vertices.push(0, 0, 0);
            colors.push(color.r, color.g, color.b);
            if (pointMap[id] === undefined) pointMap[id] = [];
            pointMap[id].push(vertices.length / 3 - 1);
        }
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute('color', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(colors, 3));
        super(geometry, material);
        this.type = 'CameraHelper';
        this.camera = camera;
        if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();
        this.matrix = camera.matrixWorld;
        this.matrixAutoUpdate = false;
        this.pointMap = pointMap;
        this.update();
    }
    update() {
        const geometry = this.geometry;
        const pointMap = this.pointMap;
        const w = 1, h = 1;
        // we need just camera projection matrix inverse
        // world matrix must be identity
        $2d9d8c9fc2282acc$var$_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);
        // center / target
        $2d9d8c9fc2282acc$var$setPoint('c', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, 0, -1);
        $2d9d8c9fc2282acc$var$setPoint('t', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, 0, 1);
        // near
        $2d9d8c9fc2282acc$var$setPoint('n1', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w, -h, -1);
        $2d9d8c9fc2282acc$var$setPoint('n2', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w, -h, -1);
        $2d9d8c9fc2282acc$var$setPoint('n3', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w, h, -1);
        $2d9d8c9fc2282acc$var$setPoint('n4', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w, h, -1);
        // far
        $2d9d8c9fc2282acc$var$setPoint('f1', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w, -h, 1);
        $2d9d8c9fc2282acc$var$setPoint('f2', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w, -h, 1);
        $2d9d8c9fc2282acc$var$setPoint('f3', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w, h, 1);
        $2d9d8c9fc2282acc$var$setPoint('f4', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w, h, 1);
        // up
        $2d9d8c9fc2282acc$var$setPoint('u1', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w * 0.7, h * 1.1, -1);
        $2d9d8c9fc2282acc$var$setPoint('u2', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w * 0.7, h * 1.1, -1);
        $2d9d8c9fc2282acc$var$setPoint('u3', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, h * 2, -1);
        // cross
        $2d9d8c9fc2282acc$var$setPoint('cf1', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w, 0, 1);
        $2d9d8c9fc2282acc$var$setPoint('cf2', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w, 0, 1);
        $2d9d8c9fc2282acc$var$setPoint('cf3', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, -h, 1);
        $2d9d8c9fc2282acc$var$setPoint('cf4', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, h, 1);
        $2d9d8c9fc2282acc$var$setPoint('cn1', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, -w, 0, -1);
        $2d9d8c9fc2282acc$var$setPoint('cn2', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, w, 0, -1);
        $2d9d8c9fc2282acc$var$setPoint('cn3', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, -h, -1);
        $2d9d8c9fc2282acc$var$setPoint('cn4', pointMap, geometry, $2d9d8c9fc2282acc$var$_camera, 0, h, -1);
        geometry.getAttribute('position').needsUpdate = true;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
function $2d9d8c9fc2282acc$var$setPoint(point, pointMap, geometry, camera, x, y, z) {
    $2d9d8c9fc2282acc$var$_vector.set(x, y, z).unproject(camera);
    const points = pointMap[point];
    if (points !== undefined) {
        const position = geometry.getAttribute('position');
        for(let i357 = 0, l = points.length; i357 < l; i357++)position.setXYZ(points[i357], $2d9d8c9fc2282acc$var$_vector.x, $2d9d8c9fc2282acc$var$_vector.y, $2d9d8c9fc2282acc$var$_vector.z);
    }
}
const $2d9d8c9fc2282acc$var$_box = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3();
class $2d9d8c9fc2282acc$export$38a664cc862a6a9d extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(object, color = 16776960){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = new Float32Array(24);
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setIndex(new $2d9d8c9fc2282acc$export$8dea267bd6bde117(indices, 1));
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$8dea267bd6bde117(positions, 3));
        super(geometry, new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.object = object;
        this.type = 'BoxHelper';
        this.matrixAutoUpdate = false;
        this.update();
    }
    update(object) {
        if (object !== undefined) console.warn('THREE.BoxHelper: .update() has no longer arguments.');
        if (this.object !== undefined) $2d9d8c9fc2282acc$var$_box.setFromObject(this.object);
        if ($2d9d8c9fc2282acc$var$_box.isEmpty()) return;
        const min = $2d9d8c9fc2282acc$var$_box.min;
        const max = $2d9d8c9fc2282acc$var$_box.max;
        /*
			5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/ const position = this.geometry.attributes.position;
        const array = position.array;
        array[0] = max.x;
        array[1] = max.y;
        array[2] = max.z;
        array[3] = min.x;
        array[4] = max.y;
        array[5] = max.z;
        array[6] = min.x;
        array[7] = min.y;
        array[8] = max.z;
        array[9] = max.x;
        array[10] = min.y;
        array[11] = max.z;
        array[12] = max.x;
        array[13] = max.y;
        array[14] = min.z;
        array[15] = min.x;
        array[16] = max.y;
        array[17] = min.z;
        array[18] = min.x;
        array[19] = min.y;
        array[20] = min.z;
        array[21] = max.x;
        array[22] = min.y;
        array[23] = min.z;
        position.needsUpdate = true;
        this.geometry.computeBoundingSphere();
    }
    setFromObject(object) {
        this.object = object;
        this.update();
        return this;
    }
    copy(source) {
        $2d9d8c9fc2282acc$export$ff1ed10fedfdd604.prototype.copy.call(this, source);
        this.object = source.object;
        return this;
    }
}
class $2d9d8c9fc2282acc$export$ce39f4bb96c9a290 extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(box, color = 16776960){
        const indices = new Uint16Array([
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            0,
            4,
            5,
            5,
            6,
            6,
            7,
            7,
            4,
            0,
            4,
            1,
            5,
            2,
            6,
            3,
            7
        ]);
        const positions = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            -1,
            -1,
            -1,
            -1,
            1,
            -1,
            -1
        ];
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setIndex(new $2d9d8c9fc2282acc$export$8dea267bd6bde117(indices, 1));
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(positions, 3));
        super(geometry, new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.box = box;
        this.type = 'Box3Helper';
        this.geometry.computeBoundingSphere();
    }
    updateMatrixWorld(force) {
        const box = this.box;
        if (box.isEmpty()) return;
        box.getCenter(this.position);
        box.getSize(this.scale);
        this.scale.multiplyScalar(0.5);
        super.updateMatrixWorld(force);
    }
}
class $2d9d8c9fc2282acc$export$a34fe8156c66e5d7 extends $2d9d8c9fc2282acc$export$17d680238e50603e {
    constructor(plane, size = 1, hex = 16776960){
        const color = hex;
        const positions = [
            1,
            -1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1,
            1,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0
        ];
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(positions, 3));
        geometry.computeBoundingSphere();
        super(geometry, new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.type = 'PlaneHelper';
        this.plane = plane;
        this.size = size;
        const positions2 = [
            1,
            1,
            1,
            -1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            1,
            1,
            -1,
            -1,
            1,
            1,
            -1,
            1
        ];
        const geometry2 = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry2.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(positions2, 3));
        geometry2.computeBoundingSphere();
        this.add(new $2d9d8c9fc2282acc$export$e176487c05830cc5(geometry2, new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5({
            color: color,
            opacity: 0.2,
            transparent: true,
            depthWrite: false,
            toneMapped: false
        })));
    }
    updateMatrixWorld(force) {
        let scale = -this.plane.constant;
        if (Math.abs(scale) < 0.00000001) scale = 0.00000001; // sign does not matter
        this.scale.set(0.5 * this.size, 0.5 * this.size, scale);
        this.children[0].material.side = scale < 0 ? $2d9d8c9fc2282acc$export$d9f0486e75b5ace : $2d9d8c9fc2282acc$export$2ede184fc2998901; // renderer flips side when determinant < 0; flipping not wanted here
        this.lookAt(this.plane.normal);
        super.updateMatrixWorld(force);
    }
}
const $2d9d8c9fc2282acc$var$_axis = /*@__PURE__*/ new $2d9d8c9fc2282acc$export$64b5c384219d3699();
let $2d9d8c9fc2282acc$var$_lineGeometry, $2d9d8c9fc2282acc$var$_coneGeometry;
class $2d9d8c9fc2282acc$export$a3008e7bd8d2cbe7 extends $2d9d8c9fc2282acc$export$e4dd07dff30cc924 {
    // dir is assumed to be normalized
    constructor(dir = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 1), origin = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 0), length = 1, color = 16776960, headLength = length * 0.2, headWidth = headLength * 0.2){
        super();
        this.type = 'ArrowHelper';
        if ($2d9d8c9fc2282acc$var$_lineGeometry === undefined) {
            $2d9d8c9fc2282acc$var$_lineGeometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
            $2d9d8c9fc2282acc$var$_lineGeometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd([
                0,
                0,
                0,
                0,
                1,
                0
            ], 3));
            $2d9d8c9fc2282acc$var$_coneGeometry = new $2d9d8c9fc2282acc$export$d4345c83207d7c68(0, 0.5, 1, 5, 1);
            $2d9d8c9fc2282acc$var$_coneGeometry.translate(0, -0.5, 0);
        }
        this.position.copy(origin);
        this.line = new $2d9d8c9fc2282acc$export$17d680238e50603e($2d9d8c9fc2282acc$var$_lineGeometry, new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            color: color,
            toneMapped: false
        }));
        this.line.matrixAutoUpdate = false;
        this.add(this.line);
        this.cone = new $2d9d8c9fc2282acc$export$e176487c05830cc5($2d9d8c9fc2282acc$var$_coneGeometry, new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5({
            color: color,
            toneMapped: false
        }));
        this.cone.matrixAutoUpdate = false;
        this.add(this.cone);
        this.setDirection(dir);
        this.setLength(length, headLength, headWidth);
    }
    setDirection(dir) {
        // dir is assumed to be normalized
        if (dir.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
        else if (dir.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
        else {
            $2d9d8c9fc2282acc$var$_axis.set(dir.z, 0, -dir.x).normalize();
            const radians = Math.acos(dir.y);
            this.quaternion.setFromAxisAngle($2d9d8c9fc2282acc$var$_axis, radians);
        }
    }
    setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {
        this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458
        this.line.updateMatrix();
        this.cone.scale.set(headWidth, headLength, headWidth);
        this.cone.position.y = length;
        this.cone.updateMatrix();
    }
    setColor(color) {
        this.line.material.color.set(color);
        this.cone.material.color.set(color);
    }
    copy(source) {
        super.copy(source, false);
        this.line.copy(source.line);
        this.cone.copy(source.cone);
        return this;
    }
}
class $2d9d8c9fc2282acc$export$6c8303f35b8578fd extends $2d9d8c9fc2282acc$export$ff1ed10fedfdd604 {
    constructor(size = 1){
        const vertices = [
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size,
            0,
            0,
            0,
            0,
            0,
            0,
            size
        ];
        const colors = [
            1,
            0,
            0,
            1,
            0.6,
            0,
            0,
            1,
            0,
            0.6,
            1,
            0,
            0,
            0,
            1,
            0,
            0.6,
            1
        ];
        const geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        geometry.setAttribute('position', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(vertices, 3));
        geometry.setAttribute('color', new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(colors, 3));
        const material = new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
            vertexColors: true,
            toneMapped: false
        });
        super(geometry, material);
        this.type = 'AxesHelper';
    }
    setColors(xAxisColor, yAxisColor, zAxisColor) {
        const color = new $2d9d8c9fc2282acc$export$892596cec99bc70e();
        const array = this.geometry.attributes.color.array;
        color.set(xAxisColor);
        color.toArray(array, 0);
        color.toArray(array, 3);
        color.set(yAxisColor);
        color.toArray(array, 6);
        color.toArray(array, 9);
        color.set(zAxisColor);
        color.toArray(array, 12);
        color.toArray(array, 15);
        this.geometry.attributes.color.needsUpdate = true;
        return this;
    }
    dispose() {
        this.geometry.dispose();
        this.material.dispose();
    }
}
class $2d9d8c9fc2282acc$export$148534a3c727230b {
    constructor(){
        this.type = 'ShapePath';
        this.color = new $2d9d8c9fc2282acc$export$892596cec99bc70e();
        this.subPaths = [];
        this.currentPath = null;
    }
    moveTo(x, y) {
        this.currentPath = new $2d9d8c9fc2282acc$export$4b2950bdac9b6ee9();
        this.subPaths.push(this.currentPath);
        this.currentPath.moveTo(x, y);
        return this;
    }
    lineTo(x, y) {
        this.currentPath.lineTo(x, y);
        return this;
    }
    quadraticCurveTo(aCPx, aCPy, aX, aY) {
        this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
        return this;
    }
    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
        this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
        return this;
    }
    splineThru(pts) {
        this.currentPath.splineThru(pts);
        return this;
    }
    toShapes(isCCW, noHoles) {
        function toShapesNoHoles(inSubpaths) {
            const shapes = [];
            for(let i360 = 0, l = inSubpaths.length; i360 < l; i360++){
                const tmpPath = inSubpaths[i360];
                const tmpShape = new $2d9d8c9fc2282acc$export$6428a7f2611ef1fa();
                tmpShape.curves = tmpPath.curves;
                shapes.push(tmpShape);
            }
            return shapes;
        }
        function isPointInsidePolygon(inPt, inPolygon) {
            const polyLen = inPolygon.length;
            // inPt on polygon contour => immediate success    or
            // toggling of inside/outside at every single! intersection point of an edge
            //  with the horizontal line through inPt, left of inPt
            //  not counting lowerY endpoints of edges and whole edges on that line
            let inside = false;
            for(let p = polyLen - 1, q = 0; q < polyLen; p = q++){
                let edgeLowPt = inPolygon[p];
                let edgeHighPt = inPolygon[q];
                let edgeDx = edgeHighPt.x - edgeLowPt.x;
                let edgeDy = edgeHighPt.y - edgeLowPt.y;
                if (Math.abs(edgeDy) > Number.EPSILON) {
                    // not parallel
                    if (edgeDy < 0) {
                        edgeLowPt = inPolygon[q];
                        edgeDx = -edgeDx;
                        edgeHighPt = inPolygon[p];
                        edgeDy = -edgeDy;
                    }
                    if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
                    if (inPt.y === edgeLowPt.y) {
                        if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?
                    // continue;				// no intersection or edgeLowPt => doesn't count !!!
                    } else {
                        const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                        if (perpEdge === 0) return true; // inPt is on contour ?
                        if (perpEdge < 0) continue;
                        inside = !inside; // true intersection left of inPt
                    }
                } else {
                    // parallel or collinear
                    if (inPt.y !== edgeLowPt.y) continue; // parallel
                    // edge lies on the same horizontal line as inPt
                    if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !
                // continue;
                }
            }
            return inside;
        }
        const isClockWise = $2d9d8c9fc2282acc$export$96bdf6d9c66d7ba8.isClockWise;
        const subPaths = this.subPaths;
        if (subPaths.length === 0) return [];
        if (noHoles === true) return toShapesNoHoles(subPaths);
        let solid, tmpPath1, tmpShape1;
        const shapes1 = [];
        if (subPaths.length === 1) {
            tmpPath1 = subPaths[0];
            tmpShape1 = new $2d9d8c9fc2282acc$export$6428a7f2611ef1fa();
            tmpShape1.curves = tmpPath1.curves;
            shapes1.push(tmpShape1);
            return shapes1;
        }
        let holesFirst = !isClockWise(subPaths[0].getPoints());
        holesFirst = isCCW ? !holesFirst : holesFirst;
        // console.log("Holes first", holesFirst);
        const betterShapeHoles = [];
        const newShapes = [];
        let newShapeHoles = [];
        let mainIdx = 0;
        let tmpPoints;
        newShapes[mainIdx] = undefined;
        newShapeHoles[mainIdx] = [];
        for(let i359 = 0, l6 = subPaths.length; i359 < l6; i359++){
            tmpPath1 = subPaths[i359];
            tmpPoints = tmpPath1.getPoints();
            solid = isClockWise(tmpPoints);
            solid = isCCW ? !solid : solid;
            if (solid) {
                if (!holesFirst && newShapes[mainIdx]) mainIdx++;
                newShapes[mainIdx] = {
                    s: new $2d9d8c9fc2282acc$export$6428a7f2611ef1fa(),
                    p: tmpPoints
                };
                newShapes[mainIdx].s.curves = tmpPath1.curves;
                if (holesFirst) mainIdx++;
                newShapeHoles[mainIdx] = [];
            //console.log('cw', i);
            } else newShapeHoles[mainIdx].push({
                h: tmpPath1,
                p: tmpPoints[0]
            });
        }
        // only Holes? -> probably all Shapes with wrong orientation
        if (!newShapes[0]) return toShapesNoHoles(subPaths);
        if (newShapes.length > 1) {
            let ambiguous = false;
            const toChange = [];
            for(let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++)betterShapeHoles[sIdx] = [];
            for(let sIdx1 = 0, sLen1 = newShapes.length; sIdx1 < sLen1; sIdx1++){
                const sho = newShapeHoles[sIdx1];
                for(let hIdx = 0; hIdx < sho.length; hIdx++){
                    const ho = sho[hIdx];
                    let hole_unassigned = true;
                    for(let s2Idx = 0; s2Idx < newShapes.length; s2Idx++)if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
                        if (sIdx1 !== s2Idx) toChange.push({
                            froms: sIdx1,
                            tos: s2Idx,
                            hole: hIdx
                        });
                        if (hole_unassigned) {
                            hole_unassigned = false;
                            betterShapeHoles[s2Idx].push(ho);
                        } else ambiguous = true;
                    }
                    if (hole_unassigned) betterShapeHoles[sIdx1].push(ho);
                }
            }
            // console.log("ambiguous: ", ambiguous);
            if (toChange.length > 0) // console.log("to change: ", toChange);
            {
                if (!ambiguous) newShapeHoles = betterShapeHoles;
            }
        }
        let tmpHoles;
        for(let i358 = 0, il = newShapes.length; i358 < il; i358++){
            tmpShape1 = newShapes[i358].s;
            shapes1.push(tmpShape1);
            tmpHoles = newShapeHoles[i358];
            for(let j = 0, jl = tmpHoles.length; j < jl; j++)tmpShape1.holes.push(tmpHoles[j].h);
        }
        //console.log("shape", shapes);
        return shapes1;
    }
}
const $2d9d8c9fc2282acc$var$_floatView = new Float32Array(1);
const $2d9d8c9fc2282acc$var$_int32View = new Int32Array($2d9d8c9fc2282acc$var$_floatView.buffer);
class $2d9d8c9fc2282acc$export$11ce8b759162cc80 {
    // Converts float32 to float16 (stored as uint16 value).
    static toHalfFloat(val) {
        if (val > 65504) {
            console.warn('THREE.DataUtils.toHalfFloat(): value exceeds 65504.');
            val = 65504; // maximum representable value in float16
        }
        // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410
        /* This method is faster than the OpenEXR implementation (very often
		* used, eg. in Ogre), with the additional benefit of rounding, inspired
		* by James Tursa?s half-precision code. */ $2d9d8c9fc2282acc$var$_floatView[0] = val;
        const x = $2d9d8c9fc2282acc$var$_int32View[0];
        let bits = x >> 16 & 32768; /* Get the sign */ 
        let m = x >> 12 & 2047; /* Keep one extra bit for rounding */ 
        const e = x >> 23 & 255; /* Using int is faster here */ 
        /* If zero, or denormal, or exponent underflows too much for a denormal
			* half, return signed zero. */ if (e < 103) return bits;
        /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */ if (e > 142) {
            bits |= 31744;
            /* If exponent was 0xff and one mantissa bit was set, it means NaN,
						* not Inf, so make sure we set one mantissa bit too. */ bits |= (e == 255 ? 0 : 1) && x & 8388607;
            return bits;
        }
        /* If exponent underflows but not too much, return a denormal */ if (e < 113) {
            m |= 2048;
            /* Extra rounding may overflow and set mantissa to 0 and exponent
				* to 1, which is OK. */ bits |= (m >> 114 - e) + (m >> 113 - e & 1);
            return bits;
        }
        bits |= e - 112 << 10 | m >> 1;
        /* Extra rounding. An overflow will set mantissa to 0 and increment
			* the exponent, which is OK. */ bits += m & 1;
        return bits;
    }
}
const $2d9d8c9fc2282acc$export$195910b613d3dbcb = 0;
const $2d9d8c9fc2282acc$export$c8a71586e494fb81 = 1;
const $2d9d8c9fc2282acc$export$1a5c46edbdc9a5b7 = 0;
const $2d9d8c9fc2282acc$export$617e978cc3201d85 = 1;
const $2d9d8c9fc2282acc$export$969ede3d37172881 = 2;
function $2d9d8c9fc2282acc$export$8f0d8c869214e38a(materials) {
    console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');
    return materials;
}
function $2d9d8c9fc2282acc$export$4f1842f7cdf61f78(materials = []) {
    console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');
    materials.isMultiMaterial = true;
    materials.materials = materials;
    materials.clone = function() {
        return materials.slice();
    };
    return materials;
}
function $2d9d8c9fc2282acc$export$5c812f854e08d33d(geometry, material) {
    console.warn('THREE.PointCloud has been renamed to THREE.Points.');
    return new $2d9d8c9fc2282acc$export$1c787534cb11aa3e(geometry, material);
}
function $2d9d8c9fc2282acc$export$c36c68baa13912a5(material) {
    console.warn('THREE.Particle has been renamed to THREE.Sprite.');
    return new $2d9d8c9fc2282acc$export$3075603db8e6204c(material);
}
function $2d9d8c9fc2282acc$export$f219b6a0e4bb0b6d(geometry, material) {
    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');
    return new $2d9d8c9fc2282acc$export$1c787534cb11aa3e(geometry, material);
}
function $2d9d8c9fc2282acc$export$29121d9ccd2f757a(parameters) {
    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');
    return new $2d9d8c9fc2282acc$export$a178c45366ce5d6b(parameters);
}
function $2d9d8c9fc2282acc$export$ffa02580217a1c8(parameters) {
    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');
    return new $2d9d8c9fc2282acc$export$a178c45366ce5d6b(parameters);
}
function $2d9d8c9fc2282acc$export$cb1306c614c86e6b(parameters) {
    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');
    return new $2d9d8c9fc2282acc$export$a178c45366ce5d6b(parameters);
}
function $2d9d8c9fc2282acc$export$3e8a3cc8713efbec(x, y, z) {
    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');
    return new $2d9d8c9fc2282acc$export$64b5c384219d3699(x, y, z);
}
//
function $2d9d8c9fc2282acc$export$189ab5ea9d161e81(array, itemSize) {
    console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');
    return new $2d9d8c9fc2282acc$export$8dea267bd6bde117(array, itemSize).setUsage($2d9d8c9fc2282acc$export$8505d14ac8546ca);
}
function $2d9d8c9fc2282acc$export$e0ae4f0a1804ea11(array, itemSize) {
    console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$f9ff2d6a20248cbf(array, itemSize);
}
function $2d9d8c9fc2282acc$export$a0d192e03a5b32f5(array, itemSize) {
    console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$cacc90cf35d11cdd(array, itemSize);
}
function $2d9d8c9fc2282acc$export$8ca743ab36552bfa(array, itemSize) {
    console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$baaa85a1a812c157(array, itemSize);
}
function $2d9d8c9fc2282acc$export$5d9757676aad9dab(array, itemSize) {
    console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$2b755a102ccdcefe(array, itemSize);
}
function $2d9d8c9fc2282acc$export$ed102ffd14092320(array, itemSize) {
    console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$640a853f68025f2e(array, itemSize);
}
function $2d9d8c9fc2282acc$export$6acc479034658f15(array, itemSize) {
    console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$46b369aed2968a0a(array, itemSize);
}
function $2d9d8c9fc2282acc$export$53474877d6e539b9(array, itemSize) {
    console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$7eb8c9fa25cd5bd6(array, itemSize);
}
function $2d9d8c9fc2282acc$export$377af6eadc8006c3(array, itemSize) {
    console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(array, itemSize);
}
function $2d9d8c9fc2282acc$export$b9212d1a67b6f081(array, itemSize) {
    console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');
    return new $2d9d8c9fc2282acc$export$9e0ade74842adbb8(array, itemSize);
}
//
$2d9d8c9fc2282acc$export$b0e83c3ef8d2db1.create = function(construct, getPoint) {
    console.log('THREE.Curve.create() has been deprecated');
    construct.prototype = Object.create($2d9d8c9fc2282acc$export$b0e83c3ef8d2db1.prototype);
    construct.prototype.constructor = construct;
    construct.prototype.getPoint = getPoint;
    return construct;
};
//
$2d9d8c9fc2282acc$export$4b2950bdac9b6ee9.prototype.fromPoints = function(points) {
    console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');
    return this.setFromPoints(points);
};
//
function $2d9d8c9fc2282acc$export$46c1eaab6b8d1e23(size) {
    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');
    return new $2d9d8c9fc2282acc$export$6c8303f35b8578fd(size);
}
function $2d9d8c9fc2282acc$export$3c24c67720a2146c(object, color) {
    console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');
    return new $2d9d8c9fc2282acc$export$38a664cc862a6a9d(object, color);
}
function $2d9d8c9fc2282acc$export$e341a90264c62d4c(object, hex) {
    console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');
    return new $2d9d8c9fc2282acc$export$ff1ed10fedfdd604(new $2d9d8c9fc2282acc$export$4730b1542707547f(object.geometry), new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
        color: hex !== undefined ? hex : 16777215
    }));
}
$2d9d8c9fc2282acc$export$3875d39926561055.prototype.setColors = function() {
    console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
};
$2d9d8c9fc2282acc$export$5277df3c9e732259.prototype.update = function() {
    console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
};
function $2d9d8c9fc2282acc$export$72d033539c529f13(object, hex) {
    console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');
    return new $2d9d8c9fc2282acc$export$ff1ed10fedfdd604(new $2d9d8c9fc2282acc$export$4b739da06d24892b(object.geometry), new $2d9d8c9fc2282acc$export$fbaaa33907730a0c({
        color: hex !== undefined ? hex : 16777215
    }));
}
//
$2d9d8c9fc2282acc$export$3b0d6d7590275603.prototype.extractUrlBase = function(url) {
    console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');
    return $2d9d8c9fc2282acc$export$b5d2dc08d867e41a.extractUrlBase(url);
};
$2d9d8c9fc2282acc$export$3b0d6d7590275603.Handlers = {
    add: function() {
        console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');
    },
    get: function() {
        console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');
    }
};
function $2d9d8c9fc2282acc$export$c8b77178c5db4e0d(manager) {
    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');
    return new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(manager);
}
function $2d9d8c9fc2282acc$export$58c7c1107fc658f9(manager) {
    console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');
    return new $2d9d8c9fc2282acc$export$792d8a18f2c55855(manager);
}
//
$2d9d8c9fc2282acc$export$60f553fa130f08b0.prototype.center = function(optionalTarget) {
    console.warn('THREE.Box2: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
};
$2d9d8c9fc2282acc$export$60f553fa130f08b0.prototype.empty = function() {
    console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
};
$2d9d8c9fc2282acc$export$60f553fa130f08b0.prototype.isIntersectionBox = function(box) {
    console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
};
$2d9d8c9fc2282acc$export$60f553fa130f08b0.prototype.size = function(optionalTarget) {
    console.warn('THREE.Box2: .size() has been renamed to .getSize().');
    return this.getSize(optionalTarget);
};
//
$2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3.prototype.center = function(optionalTarget) {
    console.warn('THREE.Box3: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
};
$2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3.prototype.empty = function() {
    console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
};
$2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3.prototype.isIntersectionBox = function(box) {
    console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
};
$2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3.prototype.isIntersectionSphere = function(sphere) {
    console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');
    return this.intersectsSphere(sphere);
};
$2d9d8c9fc2282acc$export$6f7d5a9418ab2aa3.prototype.size = function(optionalTarget) {
    console.warn('THREE.Box3: .size() has been renamed to .getSize().');
    return this.getSize(optionalTarget);
};
//
$2d9d8c9fc2282acc$export$805e8b72413ccaba.prototype.empty = function() {
    console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');
    return this.isEmpty();
};
//
$2d9d8c9fc2282acc$export$35efe6f4c85463d2.prototype.setFromMatrix = function(m) {
    console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');
    return this.setFromProjectionMatrix(m);
};
//
$2d9d8c9fc2282acc$export$e0ba6359f1954fd3.prototype.center = function(optionalTarget) {
    console.warn('THREE.Line3: .center() has been renamed to .getCenter().');
    return this.getCenter(optionalTarget);
};
//
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
    return this.toArray(array, offset);
};
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.multiplyVector3 = function(vector) {
    console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');
    return vector.applyMatrix3(this);
};
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.multiplyVector3Array = function() {
    console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
};
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.applyToBufferAttribute = function(attribute) {
    console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');
    return attribute.applyMatrix3(this);
};
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.applyToVector3Array = function() {
    console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
};
$2d9d8c9fc2282acc$export$8ff26dafa08918.prototype.getInverse = function(matrix) {
    console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
    return this.copy(matrix).invert();
};
//
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.extractPosition = function(m) {
    console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');
    return this.copyPosition(m);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.flattenToArrayOffset = function(array, offset) {
    console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');
    return this.toArray(array, offset);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.getPosition = function() {
    console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');
    return new $2d9d8c9fc2282acc$export$64b5c384219d3699().setFromMatrixColumn(this, 3);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.setRotationFromQuaternion = function(q) {
    console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');
    return this.makeRotationFromQuaternion(q);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.multiplyToArray = function() {
    console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.multiplyVector3 = function(vector) {
    console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.multiplyVector4 = function(vector) {
    console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.multiplyVector3Array = function() {
    console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.rotateAxis = function(v) {
    console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');
    v.transformDirection(this);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.crossVector = function(vector) {
    console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');
    return vector.applyMatrix4(this);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.translate = function() {
    console.error('THREE.Matrix4: .translate() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.rotateX = function() {
    console.error('THREE.Matrix4: .rotateX() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.rotateY = function() {
    console.error('THREE.Matrix4: .rotateY() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.rotateZ = function() {
    console.error('THREE.Matrix4: .rotateZ() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.rotateByAxis = function() {
    console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.applyToBufferAttribute = function(attribute) {
    console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');
    return attribute.applyMatrix4(this);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.applyToVector3Array = function() {
    console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.makeFrustum = function(left, right, bottom, top, near, far) {
    console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');
    return this.makePerspective(left, right, top, bottom, near, far);
};
$2d9d8c9fc2282acc$export$2ae72fc923e5eb5.prototype.getInverse = function(matrix) {
    console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');
    return this.copy(matrix).invert();
};
//
$2d9d8c9fc2282acc$export$7ff5ac152ef991b0.prototype.isIntersectionLine = function(line) {
    console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');
    return this.intersectsLine(line);
};
//
$2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.prototype.multiplyVector3 = function(vector) {
    console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');
    return vector.applyQuaternion(this);
};
$2d9d8c9fc2282acc$export$23d6a54f0bbc85a3.prototype.inverse = function() {
    console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');
    return this.invert();
};
//
$2d9d8c9fc2282acc$export$a186db52eed6d40e.prototype.isIntersectionBox = function(box) {
    console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');
    return this.intersectsBox(box);
};
$2d9d8c9fc2282acc$export$a186db52eed6d40e.prototype.isIntersectionPlane = function(plane) {
    console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');
    return this.intersectsPlane(plane);
};
$2d9d8c9fc2282acc$export$a186db52eed6d40e.prototype.isIntersectionSphere = function(sphere) {
    console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');
    return this.intersectsSphere(sphere);
};
//
$2d9d8c9fc2282acc$export$5a465592bfe74b48.prototype.area = function() {
    console.warn('THREE.Triangle: .area() has been renamed to .getArea().');
    return this.getArea();
};
$2d9d8c9fc2282acc$export$5a465592bfe74b48.prototype.barycoordFromPoint = function(point, target) {
    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
    return this.getBarycoord(point, target);
};
$2d9d8c9fc2282acc$export$5a465592bfe74b48.prototype.midpoint = function(target) {
    console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');
    return this.getMidpoint(target);
};
$2d9d8c9fc2282acc$export$5a465592bfe74b48.prototypenormal = function(target) {
    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
    return this.getNormal(target);
};
$2d9d8c9fc2282acc$export$5a465592bfe74b48.prototype.plane = function(target) {
    console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');
    return this.getPlane(target);
};
$2d9d8c9fc2282acc$export$5a465592bfe74b48.barycoordFromPoint = function(point, a, b, c, target) {
    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');
    return $2d9d8c9fc2282acc$export$5a465592bfe74b48.getBarycoord(point, a, b, c, target);
};
$2d9d8c9fc2282acc$export$5a465592bfe74b48.normal = function(a, b, c, target) {
    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');
    return $2d9d8c9fc2282acc$export$5a465592bfe74b48.getNormal(a, b, c, target);
};
//
$2d9d8c9fc2282acc$export$6428a7f2611ef1fa.prototype.extractAllPoints = function(divisions) {
    console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');
    return this.extractPoints(divisions);
};
$2d9d8c9fc2282acc$export$6428a7f2611ef1fa.prototype.extrude = function(options) {
    console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');
    return new $2d9d8c9fc2282acc$export$91836d01b9f75a58(this, options);
};
$2d9d8c9fc2282acc$export$6428a7f2611ef1fa.prototype.makeGeometry = function(options) {
    console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');
    return new $2d9d8c9fc2282acc$export$233afc324766bed8(this, options);
};
//
$2d9d8c9fc2282acc$export$c977b3e384af9ae1.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
};
$2d9d8c9fc2282acc$export$c977b3e384af9ae1.prototype.distanceToManhattan = function(v) {
    console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
    return this.manhattanDistanceTo(v);
};
$2d9d8c9fc2282acc$export$c977b3e384af9ae1.prototype.lengthManhattan = function() {
    console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
};
//
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.setEulerFromRotationMatrix = function() {
    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.setEulerFromQuaternion = function() {
    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.getPositionFromMatrix = function(m) {
    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');
    return this.setFromMatrixPosition(m);
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.getScaleFromMatrix = function(m) {
    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');
    return this.setFromMatrixScale(m);
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.getColumnFromMatrix = function(index, matrix) {
    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');
    return this.setFromMatrixColumn(matrix, index);
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.applyProjection = function(m) {
    console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');
    return this.applyMatrix4(m);
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.distanceToManhattan = function(v) {
    console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');
    return this.manhattanDistanceTo(v);
};
$2d9d8c9fc2282acc$export$64b5c384219d3699.prototype.lengthManhattan = function() {
    console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
};
//
$2d9d8c9fc2282acc$export$fa7daccca11cdbe3.prototype.fromAttribute = function(attribute, index, offset) {
    console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');
    return this.fromBufferAttribute(attribute, index, offset);
};
$2d9d8c9fc2282acc$export$fa7daccca11cdbe3.prototype.lengthManhattan = function() {
    console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');
    return this.manhattanLength();
};
//
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype.getChildByName = function(name) {
    console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');
    return this.getObjectByName(name);
};
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype.renderDepth = function() {
    console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
};
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype.translate = function(distance, axis) {
    console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');
    return this.translateOnAxis(axis, distance);
};
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype.getWorldRotation = function() {
    console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
};
$2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype.applyMatrix = function(matrix) {
    console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');
    return this.applyMatrix4(matrix);
};
Object.defineProperties($2d9d8c9fc2282acc$export$e4dd07dff30cc924.prototype, {
    eulerOrder: {
        get: function() {
            console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
            return this.rotation.order;
        },
        set: function(value) {
            console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');
            this.rotation.order = value;
        }
    },
    useQuaternion: {
        get: function() {
            console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
        },
        set: function() {
            console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
        }
    }
});
$2d9d8c9fc2282acc$export$e176487c05830cc5.prototype.setDrawMode = function() {
    console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
};
Object.defineProperties($2d9d8c9fc2282acc$export$e176487c05830cc5.prototype, {
    drawMode: {
        get: function() {
            console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');
            return $2d9d8c9fc2282acc$export$4c28c87c2dc84758;
        },
        set: function() {
            console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
        }
    }
});
$2d9d8c9fc2282acc$export$b303577035157ecf.prototype.initBones = function() {
    console.error('THREE.SkinnedMesh: initBones() has been removed.');
};
//
$2d9d8c9fc2282acc$export$74e4ae24825f68d7.prototype.setLens = function(focalLength, filmGauge) {
    console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");
    if (filmGauge !== undefined) this.filmGauge = filmGauge;
    this.setFocalLength(focalLength);
};
//
Object.defineProperties($2d9d8c9fc2282acc$export$6ecadb6ed240d696.prototype, {
    onlyShadow: {
        set: function() {
            console.warn('THREE.Light: .onlyShadow has been removed.');
        }
    },
    shadowCameraFov: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');
            this.shadow.camera.fov = value;
        }
    },
    shadowCameraLeft: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');
            this.shadow.camera.left = value;
        }
    },
    shadowCameraRight: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');
            this.shadow.camera.right = value;
        }
    },
    shadowCameraTop: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');
            this.shadow.camera.top = value;
        }
    },
    shadowCameraBottom: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');
            this.shadow.camera.bottom = value;
        }
    },
    shadowCameraNear: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');
            this.shadow.camera.near = value;
        }
    },
    shadowCameraFar: {
        set: function(value) {
            console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');
            this.shadow.camera.far = value;
        }
    },
    shadowCameraVisible: {
        set: function() {
            console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
        }
    },
    shadowBias: {
        set: function(value) {
            console.warn('THREE.Light: .shadowBias is now .shadow.bias.');
            this.shadow.bias = value;
        }
    },
    shadowDarkness: {
        set: function() {
            console.warn('THREE.Light: .shadowDarkness has been removed.');
        }
    },
    shadowMapWidth: {
        set: function(value) {
            console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');
            this.shadow.mapSize.width = value;
        }
    },
    shadowMapHeight: {
        set: function(value) {
            console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');
            this.shadow.mapSize.height = value;
        }
    }
});
//
Object.defineProperties($2d9d8c9fc2282acc$export$8dea267bd6bde117.prototype, {
    length: {
        get: function() {
            console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');
            return this.array.length;
        }
    },
    dynamic: {
        get: function() {
            console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
            return this.usage === $2d9d8c9fc2282acc$export$8505d14ac8546ca;
        },
        set: function() {
            console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');
            this.setUsage($2d9d8c9fc2282acc$export$8505d14ac8546ca);
        }
    }
});
$2d9d8c9fc2282acc$export$8dea267bd6bde117.prototype.setDynamic = function(value) {
    console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');
    this.setUsage(value === true ? $2d9d8c9fc2282acc$export$8505d14ac8546ca : $2d9d8c9fc2282acc$export$763e8360f4d7f77d);
    return this;
};
$2d9d8c9fc2282acc$export$8dea267bd6bde117.prototype.copyIndicesArray = function() {
    console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
}, $2d9d8c9fc2282acc$export$8dea267bd6bde117.prototype.setArray = function() {
    console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
};
//
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.addIndex = function(index) {
    console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');
    this.setIndex(index);
};
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.addAttribute = function(name, attribute) {
    console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');
    if (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {
        console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');
        return this.setAttribute(name, new $2d9d8c9fc2282acc$export$8dea267bd6bde117(arguments[1], arguments[2]));
    }
    if (name === 'index') {
        console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');
        this.setIndex(attribute);
        return this;
    }
    return this.setAttribute(name, attribute);
};
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.addDrawCall = function(start, count, indexOffset) {
    if (indexOffset !== undefined) console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');
    console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');
    this.addGroup(start, count);
};
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.clearDrawCalls = function() {
    console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');
    this.clearGroups();
};
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.computeOffsets = function() {
    console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
};
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.removeAttribute = function(name) {
    console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');
    return this.deleteAttribute(name);
};
$2d9d8c9fc2282acc$export$b7be63a67df8959.prototype.applyMatrix = function(matrix) {
    console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');
    return this.applyMatrix4(matrix);
};
Object.defineProperties($2d9d8c9fc2282acc$export$b7be63a67df8959.prototype, {
    drawcalls: {
        get: function() {
            console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');
            return this.groups;
        }
    },
    offsets: {
        get: function() {
            console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');
            return this.groups;
        }
    }
});
$2d9d8c9fc2282acc$export$3d5cd879f108f53f.prototype.setDynamic = function(value) {
    console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');
    this.setUsage(value === true ? $2d9d8c9fc2282acc$export$8505d14ac8546ca : $2d9d8c9fc2282acc$export$763e8360f4d7f77d);
    return this;
};
$2d9d8c9fc2282acc$export$3d5cd879f108f53f.prototype.setArray = function() {
    console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
};
//
$2d9d8c9fc2282acc$export$91836d01b9f75a58.prototype.getArrays = function() {
    console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');
};
$2d9d8c9fc2282acc$export$91836d01b9f75a58.prototype.addShapeList = function() {
    console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');
};
$2d9d8c9fc2282acc$export$91836d01b9f75a58.prototype.addShape = function() {
    console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');
};
//
$2d9d8c9fc2282acc$export$38af1803e3442a7f.prototype.dispose = function() {
    console.error('THREE.Scene: .dispose() has been removed.');
};
//
$2d9d8c9fc2282acc$export$2947cebfe91c02f8.prototype.onUpdate = function() {
    console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');
    return this;
};
//
Object.defineProperties($2d9d8c9fc2282acc$export$a2d8b23205c25948.prototype, {
    wrapAround: {
        get: function() {
            console.warn('THREE.Material: .wrapAround has been removed.');
        },
        set: function() {
            console.warn('THREE.Material: .wrapAround has been removed.');
        }
    },
    overdraw: {
        get: function() {
            console.warn('THREE.Material: .overdraw has been removed.');
        },
        set: function() {
            console.warn('THREE.Material: .overdraw has been removed.');
        }
    },
    wrapRGB: {
        get: function() {
            console.warn('THREE.Material: .wrapRGB has been removed.');
            return new $2d9d8c9fc2282acc$export$892596cec99bc70e();
        }
    },
    shading: {
        get: function() {
            console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
        },
        set: function(value) {
            console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
            this.flatShading = value === $2d9d8c9fc2282acc$export$a62047d29c96d8ff;
        }
    },
    stencilMask: {
        get: function() {
            console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
            return this.stencilFuncMask;
        },
        set: function(value) {
            console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');
            this.stencilFuncMask = value;
        }
    },
    vertexTangents: {
        get: function() {
            console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
        },
        set: function() {
            console.warn('THREE.' + this.type + ': .vertexTangents has been removed.');
        }
    }
});
Object.defineProperties($2d9d8c9fc2282acc$export$83c7d75d550a8b0d.prototype, {
    derivatives: {
        get: function() {
            console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
            return this.extensions.derivatives;
        },
        set: function(value) {
            console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');
            this.extensions.derivatives = value;
        }
    }
});
//
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.clearTarget = function(renderTarget, color, depth, stencil) {
    console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');
    this.setRenderTarget(renderTarget);
    this.clear(color, depth, stencil);
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.animate = function(callback) {
    console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');
    this.setAnimationLoop(callback);
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.getCurrentRenderTarget = function() {
    console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');
    return this.getRenderTarget();
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.getMaxAnisotropy = function() {
    console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');
    return this.capabilities.getMaxAnisotropy();
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.getPrecision = function() {
    console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');
    return this.capabilities.precision;
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.resetGLState = function() {
    console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');
    return this.state.reset();
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsFloatTextures = function() {
    console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).');
    return this.extensions.get('OES_texture_float');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsHalfFloatTextures = function() {
    console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).');
    return this.extensions.get('OES_texture_half_float');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsStandardDerivatives = function() {
    console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).');
    return this.extensions.get('OES_standard_derivatives');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsCompressedTextureS3TC = function() {
    console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).');
    return this.extensions.get('WEBGL_compressed_texture_s3tc');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsCompressedTexturePVRTC = function() {
    console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).');
    return this.extensions.get('WEBGL_compressed_texture_pvrtc');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsBlendMinMax = function() {
    console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).');
    return this.extensions.get('EXT_blend_minmax');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsVertexTextures = function() {
    console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');
    return this.capabilities.vertexTextures;
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.supportsInstancedArrays = function() {
    console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).');
    return this.extensions.get('ANGLE_instanced_arrays');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.enableScissorTest = function(boolean) {
    console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');
    this.setScissorTest(boolean);
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.initMaterial = function() {
    console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.addPrePlugin = function() {
    console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.addPostPlugin = function() {
    console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.updateShadowMap = function() {
    console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.setFaceCulling = function() {
    console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.allocTextureUnit = function() {
    console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.setTexture = function() {
    console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.setTexture2D = function() {
    console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.setTextureCube = function() {
    console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');
};
$2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype.getActiveMipMapLevel = function() {
    console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');
    return this.getActiveMipmapLevel();
};
Object.defineProperties($2d9d8c9fc2282acc$export$f6cc00ef28d7cf97.prototype, {
    shadowMapEnabled: {
        get: function() {
            return this.shadowMap.enabled;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');
            this.shadowMap.enabled = value;
        }
    },
    shadowMapType: {
        get: function() {
            return this.shadowMap.type;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');
            this.shadowMap.type = value;
        }
    },
    shadowMapCullFace: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
        }
    },
    context: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');
            return this.getContext();
        }
    },
    vr: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');
            return this.xr;
        }
    },
    gammaInput: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
            return false;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
        }
    },
    gammaOutput: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
            return false;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');
            this.outputEncoding = value === true ? $2d9d8c9fc2282acc$export$f32388edbb32674 : $2d9d8c9fc2282acc$export$7207336e4151a112;
        }
    },
    toneMappingWhitePoint: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
            return 1;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
        }
    },
    gammaFactor: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
            return 2;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .gammaFactor has been removed.');
        }
    }
});
Object.defineProperties($2d9d8c9fc2282acc$var$WebGLShadowMap.prototype, {
    cullFace: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
        }
    },
    renderReverseSided: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
        }
    },
    renderSingleSided: {
        get: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
            return undefined;
        },
        set: function() {
            console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
        }
    }
});
function $2d9d8c9fc2282acc$export$689069929abfa262(width, height, options) {
    console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');
    return new $2d9d8c9fc2282acc$export$ac386671d651941e(width, options);
}
//
Object.defineProperties($2d9d8c9fc2282acc$export$3c052beb2e51e23f.prototype, {
    wrapS: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
            return this.texture.wrapS;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');
            this.texture.wrapS = value;
        }
    },
    wrapT: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
            return this.texture.wrapT;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');
            this.texture.wrapT = value;
        }
    },
    magFilter: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
            return this.texture.magFilter;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');
            this.texture.magFilter = value;
        }
    },
    minFilter: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
            return this.texture.minFilter;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');
            this.texture.minFilter = value;
        }
    },
    anisotropy: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
            return this.texture.anisotropy;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');
            this.texture.anisotropy = value;
        }
    },
    offset: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
            return this.texture.offset;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');
            this.texture.offset = value;
        }
    },
    repeat: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
            return this.texture.repeat;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');
            this.texture.repeat = value;
        }
    },
    format: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
            return this.texture.format;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');
            this.texture.format = value;
        }
    },
    type: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
            return this.texture.type;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');
            this.texture.type = value;
        }
    },
    generateMipmaps: {
        get: function() {
            console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
            return this.texture.generateMipmaps;
        },
        set: function(value) {
            console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');
            this.texture.generateMipmaps = value;
        }
    }
});
//
$2d9d8c9fc2282acc$export$153755f98d9861de.prototype.load = function(file) {
    console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
    const scope = this;
    const audioLoader = new $2d9d8c9fc2282acc$export$d8d5fccfbf47714e();
    audioLoader.load(file, function(buffer) {
        scope.setBuffer(buffer);
    });
    return this;
};
$2d9d8c9fc2282acc$export$d47da1ef3d382827.prototype.getData = function() {
    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');
    return this.getFrequencyData();
};
//
$2d9d8c9fc2282acc$export$d0cdd0bd804995de.prototype.updateCubeMap = function(renderer, scene) {
    console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');
    return this.update(renderer, scene);
};
$2d9d8c9fc2282acc$export$d0cdd0bd804995de.prototype.clear = function(renderer, color, depth, stencil) {
    console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');
    return this.renderTarget.clear(renderer, color, depth, stencil);
};
$2d9d8c9fc2282acc$export$698882cf06df44aa.crossOrigin = undefined;
$2d9d8c9fc2282acc$export$698882cf06df44aa.loadTexture = function(url, mapping, onLoad, onError) {
    console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
    const loader = new $2d9d8c9fc2282acc$export$fd1bfc71f64c538c();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(url, onLoad, undefined, onError);
    if (mapping) texture.mapping = mapping;
    return texture;
};
$2d9d8c9fc2282acc$export$698882cf06df44aa.loadTextureCube = function(urls, mapping, onLoad, onError) {
    console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
    const loader = new $2d9d8c9fc2282acc$export$2ec114afc2cf6308();
    loader.setCrossOrigin(this.crossOrigin);
    const texture = loader.load(urls, onLoad, undefined, onError);
    if (mapping) texture.mapping = mapping;
    return texture;
};
$2d9d8c9fc2282acc$export$698882cf06df44aa.loadCompressedTexture = function() {
    console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
};
$2d9d8c9fc2282acc$export$698882cf06df44aa.loadCompressedTextureCube = function() {
    console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
};
//
function $2d9d8c9fc2282acc$export$7adc20298958481a() {
    console.error('THREE.CanvasRenderer has been removed');
}
//
function $2d9d8c9fc2282acc$export$8e85bca5826c4696() {
    console.error('THREE.JSONLoader has been removed.');
}
//
const $2d9d8c9fc2282acc$export$a8351e0de8b3fd78 = {
    createMultiMaterialObject: function() {
        console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
    },
    detach: function() {
        console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
    },
    attach: function() {
        console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
    }
};
//
function $2d9d8c9fc2282acc$export$3f909fba4d49fe3d() {
    console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');
}
//
function $2d9d8c9fc2282acc$export$8f6f2b4b16d33f() {
    console.error('THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js');
    return new $2d9d8c9fc2282acc$export$b7be63a67df8959();
}
function $2d9d8c9fc2282acc$export$684b774b4473ba5f() {
    console.error('THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js');
    return new $2d9d8c9fc2282acc$export$b7be63a67df8959();
}
function $2d9d8c9fc2282acc$export$812303d6cad736b3() {
    console.error('THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js');
}
function $2d9d8c9fc2282acc$export$89abf52a030e56ee() {
    console.error('THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js');
}
function $2d9d8c9fc2282acc$export$960665a8431ecff6() {
    console.error('THREE.ImmediateRenderObject has been removed.');
}
if (typeof __THREE_DEVTOOLS__ !== 'undefined') __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
    detail: {
        revision: $2d9d8c9fc2282acc$export$3545e07a80636437
    }
}));
if (typeof window !== 'undefined') {
    if (window.__THREE__) console.warn('WARNING: Multiple instances of Three.js being imported.');
    else window.__THREE__ = $2d9d8c9fc2282acc$export$3545e07a80636437;
}



function $9adc3b62f9b9a789$var$_assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function $9adc3b62f9b9a789$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
/*!
 * GSAP 3.9.1
 * https://greensock.com
 *
 * @license Copyright 2008-2021, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/ /* eslint-disable */ var $9adc3b62f9b9a789$export$4922bee768729a77 = {
    autoSleep: 120,
    force3D: "auto",
    nullTargetWarn: 1,
    units: {
        lineHeight: ""
    }
}, $9adc3b62f9b9a789$var$_defaults = {
    duration: 0.5,
    overwrite: false,
    delay: 0
}, $9adc3b62f9b9a789$var$_suppressOverwrites, $9adc3b62f9b9a789$var$_bigNum = 100000000, $9adc3b62f9b9a789$var$_tinyNum = 1 / $9adc3b62f9b9a789$var$_bigNum, $9adc3b62f9b9a789$var$_2PI = Math.PI * 2, $9adc3b62f9b9a789$var$_HALF_PI = $9adc3b62f9b9a789$var$_2PI / 4, $9adc3b62f9b9a789$var$_gsID = 0, $9adc3b62f9b9a789$var$_sqrt = Math.sqrt, $9adc3b62f9b9a789$var$_cos = Math.cos, $9adc3b62f9b9a789$var$_sin = Math.sin, $9adc3b62f9b9a789$export$f664476fd67145ca = function $9adc3b62f9b9a789$export$f664476fd67145ca(value) {
    return typeof value === "string";
}, $9adc3b62f9b9a789$var$_isFunction = function _isFunction(value) {
    return typeof value === "function";
}, $9adc3b62f9b9a789$var$_isNumber = function _isNumber(value) {
    return typeof value === "number";
}, $9adc3b62f9b9a789$export$a8178c063a9fd3a1 = function $9adc3b62f9b9a789$export$a8178c063a9fd3a1(value) {
    return typeof value === "undefined";
}, $9adc3b62f9b9a789$var$_isObject = function _isObject(value) {
    return typeof value === "object";
}, $9adc3b62f9b9a789$var$_isNotFalse = function _isNotFalse(value) {
    return value !== false;
}, $9adc3b62f9b9a789$var$_windowExists = function _windowExists() {
    return typeof window !== "undefined";
}, $9adc3b62f9b9a789$var$_isFuncOrString = function _isFuncOrString(value) {
    return $9adc3b62f9b9a789$var$_isFunction(value) || $9adc3b62f9b9a789$export$f664476fd67145ca(value);
}, $9adc3b62f9b9a789$var$_isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function() {
}, // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
$9adc3b62f9b9a789$var$_isArray = Array.isArray, $9adc3b62f9b9a789$var$_strictNumExp = /(?:-?\.?\d|\.)+/gi, //only numbers (including negatives and decimals) but NOT relative values.
$9adc3b62f9b9a789$export$b9d44bb6523120d6 = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
$9adc3b62f9b9a789$export$65c88bbd597e7b0a = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g, $9adc3b62f9b9a789$var$_complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
$9adc3b62f9b9a789$export$5a680e28b0b61bc = /[+-]=-?[.\d]+/, $9adc3b62f9b9a789$var$_delimitedValueExp = /[^,'"\[\]\s]+/gi, // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
$9adc3b62f9b9a789$var$_unitExp = /[\d.+\-=]+(?:e[-+]\d*)*/i, $9adc3b62f9b9a789$var$_globalTimeline, $9adc3b62f9b9a789$var$_win, $9adc3b62f9b9a789$var$_coreInitted, $9adc3b62f9b9a789$var$_doc, $9adc3b62f9b9a789$var$_globals = {
}, $9adc3b62f9b9a789$var$_installScope = {
}, $9adc3b62f9b9a789$var$_coreReady, $9adc3b62f9b9a789$var$_install = function _install(scope) {
    return ($9adc3b62f9b9a789$var$_installScope = $9adc3b62f9b9a789$var$_merge(scope, $9adc3b62f9b9a789$var$_globals)) && $9adc3b62f9b9a789$export$99ee26438460406a;
}, $9adc3b62f9b9a789$export$7fb54635790b59a5 = function $9adc3b62f9b9a789$export$7fb54635790b59a5(property, value) {
    return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
}, $9adc3b62f9b9a789$var$_warn = function _warn(message, suppress) {
    return !suppress && console.warn(message);
}, $9adc3b62f9b9a789$var$_addGlobal = function _addGlobal(name, obj) {
    return name && ($9adc3b62f9b9a789$var$_globals[name] = obj) && $9adc3b62f9b9a789$var$_installScope && ($9adc3b62f9b9a789$var$_installScope[name] = obj) || $9adc3b62f9b9a789$var$_globals;
}, $9adc3b62f9b9a789$var$_emptyFunc = function _emptyFunc() {
    return 0;
}, $9adc3b62f9b9a789$var$_reservedProps = {
}, $9adc3b62f9b9a789$var$_lazyTweens = [], $9adc3b62f9b9a789$var$_lazyLookup = {
}, $9adc3b62f9b9a789$var$_lastRenderedFrame, $9adc3b62f9b9a789$export$d305d8ec5d7c26b8 = {
}, $9adc3b62f9b9a789$var$_effects = {
}, $9adc3b62f9b9a789$var$_nextGCFrame = 30, $9adc3b62f9b9a789$var$_harnessPlugins = [], $9adc3b62f9b9a789$var$_callbackNames = "", $9adc3b62f9b9a789$var$_harness = function _harness(targets) {
    var target = targets[0], harnessPlugin, i;
    $9adc3b62f9b9a789$var$_isObject(target) || $9adc3b62f9b9a789$var$_isFunction(target) || (targets = [
        targets
    ]);
    if (!(harnessPlugin = (target._gsap || {
    }).harness)) {
        // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
        i = $9adc3b62f9b9a789$var$_harnessPlugins.length;
        while((i--) && !$9adc3b62f9b9a789$var$_harnessPlugins[i].targetTest(target));
        harnessPlugin = $9adc3b62f9b9a789$var$_harnessPlugins[i];
    }
    i = targets.length;
    while(i--)targets[i] && (targets[i]._gsap || (targets[i]._gsap = new $9adc3b62f9b9a789$export$cf10981d5419cad5(targets[i], harnessPlugin))) || targets.splice(i, 1);
    return targets;
}, $9adc3b62f9b9a789$export$8b9be379d2de2a39 = function $9adc3b62f9b9a789$export$8b9be379d2de2a39(target) {
    return target._gsap || $9adc3b62f9b9a789$var$_harness($9adc3b62f9b9a789$export$45b10814cc054894(target))[0]._gsap;
}, $9adc3b62f9b9a789$export$51d6bbe898aef1f9 = function $9adc3b62f9b9a789$export$51d6bbe898aef1f9(target, property, v) {
    return (v = target[property]) && $9adc3b62f9b9a789$var$_isFunction(v) ? target[property]() : $9adc3b62f9b9a789$export$a8178c063a9fd3a1(v) && target.getAttribute && target.getAttribute(property) || v;
}, $9adc3b62f9b9a789$export$f9000b814859f126 = function $9adc3b62f9b9a789$export$f9000b814859f126(names, func) {
    return (names = names.split(",")).forEach(func) || names;
}, //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
$9adc3b62f9b9a789$export$9c8d725d65e13f94 = function $9adc3b62f9b9a789$export$9c8d725d65e13f94(value) {
    return Math.round(value * 100000) / 100000 || 0;
}, $9adc3b62f9b9a789$var$_roundPrecise = function _roundPrecise(value) {
    return Math.round(value * 10000000) / 10000000 || 0;
}, // increased precision mostly for timing values.
$9adc3b62f9b9a789$var$_arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
    //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
    var l = toFind.length, i = 0;
    for(; toSearch.indexOf(toFind[i]) < 0 && ++i < l;);
    return i < l;
}, $9adc3b62f9b9a789$var$_lazyRender = function _lazyRender() {
    var l = $9adc3b62f9b9a789$var$_lazyTweens.length, a = $9adc3b62f9b9a789$var$_lazyTweens.slice(0), i, tween;
    $9adc3b62f9b9a789$var$_lazyLookup = {
    };
    $9adc3b62f9b9a789$var$_lazyTweens.length = 0;
    for(i = 0; i < l; i++){
        tween = a[i];
        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
    }
}, $9adc3b62f9b9a789$var$_lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
    $9adc3b62f9b9a789$var$_lazyTweens.length && $9adc3b62f9b9a789$var$_lazyRender();
    animation.render(time, suppressEvents, force);
    $9adc3b62f9b9a789$var$_lazyTweens.length && $9adc3b62f9b9a789$var$_lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
}, $9adc3b62f9b9a789$var$_numericIfPossible = function _numericIfPossible(value) {
    var n = parseFloat(value);
    return (n || n === 0) && (value + "").match($9adc3b62f9b9a789$var$_delimitedValueExp).length < 2 ? n : $9adc3b62f9b9a789$export$f664476fd67145ca(value) ? value.trim() : value;
}, $9adc3b62f9b9a789$var$_passThrough = function _passThrough(p) {
    return p;
}, $9adc3b62f9b9a789$export$dc2b19673bb53610 = function $9adc3b62f9b9a789$export$dc2b19673bb53610(obj, defaults) {
    for(var p in defaults)p in obj || (obj[p] = defaults[p]);
    return obj;
}, $9adc3b62f9b9a789$var$_setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
    return function(obj, defaults) {
        for(var p in defaults)p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
    };
}, $9adc3b62f9b9a789$var$_merge = function _merge(base, toMerge) {
    for(var p in toMerge)base[p] = toMerge[p];
    return base;
}, $9adc3b62f9b9a789$var$_mergeDeep = function _mergeDeep(base, toMerge) {
    for(var p in toMerge)p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = $9adc3b62f9b9a789$var$_isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {
    }), toMerge[p]) : toMerge[p]);
    return base;
}, $9adc3b62f9b9a789$var$_copyExcluding = function _copyExcluding(obj, excluding) {
    var copy = {
    }, p;
    for(p in obj)p in excluding || (copy[p] = obj[p]);
    return copy;
}, $9adc3b62f9b9a789$var$_inheritDefaults = function _inheritDefaults(vars) {
    var parent = vars.parent || $9adc3b62f9b9a789$var$_globalTimeline, func = vars.keyframes ? $9adc3b62f9b9a789$var$_setKeyframeDefaults($9adc3b62f9b9a789$var$_isArray(vars.keyframes)) : $9adc3b62f9b9a789$export$dc2b19673bb53610;
    if ($9adc3b62f9b9a789$var$_isNotFalse(vars.inherit)) while(parent){
        func(vars, parent.vars.defaults);
        parent = parent.parent || parent._dp;
    }
    return vars;
}, $9adc3b62f9b9a789$var$_arraysMatch = function _arraysMatch(a1, a2) {
    var i = a1.length, match = i === a2.length;
    while(match && i-- && a1[i] === a2[i]);
    return i < 0;
}, $9adc3b62f9b9a789$var$_addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
    if (firstProp === void 0) firstProp = "_first";
    if (lastProp === void 0) lastProp = "_last";
    var prev = parent[lastProp], t;
    if (sortBy) {
        t = child[sortBy];
        while(prev && prev[sortBy] > t)prev = prev._prev;
    }
    if (prev) {
        child._next = prev._next;
        prev._next = child;
    } else {
        child._next = parent[firstProp];
        parent[firstProp] = child;
    }
    if (child._next) child._next._prev = child;
    else parent[lastProp] = child;
    child._prev = prev;
    child.parent = child._dp = parent;
    return child;
}, $9adc3b62f9b9a789$export$cd008aa6cd8844e3 = function $9adc3b62f9b9a789$export$cd008aa6cd8844e3(parent, child, firstProp, lastProp) {
    if (firstProp === void 0) firstProp = "_first";
    if (lastProp === void 0) lastProp = "_last";
    var prev = child._prev, next = child._next;
    if (prev) prev._next = next;
    else if (parent[firstProp] === child) parent[firstProp] = next;
    if (next) next._prev = prev;
    else if (parent[lastProp] === child) parent[lastProp] = prev;
    child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
}, $9adc3b62f9b9a789$var$_removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);
    child._act = 0;
}, $9adc3b62f9b9a789$var$_uncache = function _uncache(animation, child) {
    if (animation && (!child || child._end > animation._dur || child._start < 0)) {
        // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
        var a = animation;
        while(a){
            a._dirty = 1;
            a = a.parent;
        }
    }
    return animation;
}, $9adc3b62f9b9a789$var$_recacheAncestors = function _recacheAncestors(animation) {
    var parent = animation.parent;
    while(parent && parent.parent){
        //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
        parent._dirty = 1;
        parent.totalDuration();
        parent = parent.parent;
    }
    return animation;
}, $9adc3b62f9b9a789$var$_hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
}, $9adc3b62f9b9a789$var$_elapsedCycleDuration = function _elapsedCycleDuration(animation) {
    return animation._repeat ? $9adc3b62f9b9a789$var$_animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
}, // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
$9adc3b62f9b9a789$var$_animationCycle = function _animationCycle(tTime, cycleDuration) {
    var whole = Math.floor(tTime /= cycleDuration);
    return tTime && whole === tTime ? whole - 1 : whole;
}, $9adc3b62f9b9a789$var$_parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
}, $9adc3b62f9b9a789$var$_setEnd = function _setEnd(animation) {
    return animation._end = $9adc3b62f9b9a789$var$_roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || $9adc3b62f9b9a789$var$_tinyNum) || 0));
}, $9adc3b62f9b9a789$var$_alignPlayhead = function _alignPlayhead(animation, totalTime) {
    // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
    var parent = animation._dp;
    if (parent && parent.smoothChildTiming && animation._ts) {
        animation._start = $9adc3b62f9b9a789$var$_roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));
        $9adc3b62f9b9a789$var$_setEnd(animation);
        parent._dirty || $9adc3b62f9b9a789$var$_uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
    }
    return animation;
}, /*
_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
	let cycleDuration = duration + repeatDelay,
		time = _round(clampedTotalTime % cycleDuration);
	if (time > duration) {
		time = duration;
	}
	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
},
*/ $9adc3b62f9b9a789$var$_postAddChecks = function _postAddChecks(timeline, child) {
    var t;
    if (child._time || child._initted && !child._dur) {
        //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
        t = $9adc3b62f9b9a789$var$_parentToChildTotalTime(timeline.rawTime(), child);
        if (!child._dur || $9adc3b62f9b9a789$var$_clamp(0, child.totalDuration(), t) - child._tTime > $9adc3b62f9b9a789$var$_tinyNum) child.render(t, true);
    } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
    if ($9adc3b62f9b9a789$var$_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
        //in case any of the ancestors had completed but should now be enabled...
        if (timeline._dur < timeline.duration()) {
            t = timeline;
            while(t._dp){
                t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.
                t = t._dp;
            }
        }
        timeline._zTime = -$9adc3b62f9b9a789$var$_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
    }
}, $9adc3b62f9b9a789$var$_addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
    child.parent && $9adc3b62f9b9a789$var$_removeFromParent(child);
    child._start = $9adc3b62f9b9a789$var$_roundPrecise(($9adc3b62f9b9a789$var$_isNumber(position) ? position : position || timeline !== $9adc3b62f9b9a789$var$_globalTimeline ? $9adc3b62f9b9a789$var$_parsePosition(timeline, position, child) : timeline._time) + child._delay);
    child._end = $9adc3b62f9b9a789$var$_roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));
    $9adc3b62f9b9a789$var$_addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);
    $9adc3b62f9b9a789$var$_isFromOrFromStart(child) || (timeline._recent = child);
    skipChecks || $9adc3b62f9b9a789$var$_postAddChecks(timeline, child);
    return timeline;
}, $9adc3b62f9b9a789$var$_scrollTrigger = function _scrollTrigger(animation, trigger) {
    return ($9adc3b62f9b9a789$var$_globals.ScrollTrigger || $9adc3b62f9b9a789$export$7fb54635790b59a5("scrollTrigger", trigger)) && $9adc3b62f9b9a789$var$_globals.ScrollTrigger.create(trigger, animation);
}, $9adc3b62f9b9a789$var$_attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {
    $9adc3b62f9b9a789$var$_initTween(tween, totalTime);
    if (!tween._initted) return 1;
    if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && $9adc3b62f9b9a789$var$_lastRenderedFrame !== $9adc3b62f9b9a789$export$762ed8fbedb691e3.frame) {
        $9adc3b62f9b9a789$var$_lazyTweens.push(tween);
        tween._lazy = [
            totalTime,
            suppressEvents
        ];
        return 1;
    }
}, $9adc3b62f9b9a789$var$_parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
    var parent = _ref.parent;
    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
}, // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
$9adc3b62f9b9a789$var$_isFromOrFromStart = function _isFromOrFromStart(_ref2) {
    var data = _ref2.data;
    return data === "isFromStart" || data === "isStart";
}, $9adc3b62f9b9a789$var$_renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
    var prevRatio = tween.ratio, ratio = totalTime < 0 || !totalTime && (!tween._start && $9adc3b62f9b9a789$var$_parentPlayheadIsBeforeStart(tween) && !(!tween._initted && $9adc3b62f9b9a789$var$_isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !$9adc3b62f9b9a789$var$_isFromOrFromStart(tween)) ? 0 : 1, // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
    repeatDelay = tween._rDelay, tTime = 0, pt, iteration, prevIteration;
    if (repeatDelay && tween._repeat) {
        // in case there's a zero-duration tween that has a repeat with a repeatDelay
        tTime = $9adc3b62f9b9a789$var$_clamp(0, tween._tDur, totalTime);
        iteration = $9adc3b62f9b9a789$var$_animationCycle(tTime, repeatDelay);
        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);
        if (iteration !== $9adc3b62f9b9a789$var$_animationCycle(tween._tTime, repeatDelay)) {
            // if iteration changed
            prevRatio = 1 - ratio;
            tween.vars.repeatRefresh && tween._initted && tween.invalidate();
        }
    }
    if (ratio !== prevRatio || force || tween._zTime === $9adc3b62f9b9a789$var$_tinyNum || !totalTime && tween._zTime) {
        if (!tween._initted && $9adc3b62f9b9a789$var$_attemptInitTween(tween, totalTime, force, suppressEvents)) // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
        return;
        prevIteration = tween._zTime;
        tween._zTime = totalTime || (suppressEvents ? $9adc3b62f9b9a789$var$_tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
        suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.
        tween.ratio = ratio;
        tween._from && (ratio = 1 - ratio);
        tween._time = 0;
        tween._tTime = tTime;
        pt = tween._pt;
        while(pt){
            pt.r(ratio, pt.d);
            pt = pt._next;
        }
        tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);
        tween._onUpdate && !suppressEvents && $9adc3b62f9b9a789$var$_callback(tween, "onUpdate");
        tTime && tween._repeat && !suppressEvents && tween.parent && $9adc3b62f9b9a789$var$_callback(tween, "onRepeat");
        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
            ratio && $9adc3b62f9b9a789$var$_removeFromParent(tween, 1);
            if (!suppressEvents) {
                $9adc3b62f9b9a789$var$_callback(tween, ratio ? "onComplete" : "onReverseComplete", true);
                tween._prom && tween._prom();
            }
        }
    } else if (!tween._zTime) tween._zTime = totalTime;
}, $9adc3b62f9b9a789$var$_findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
    var child;
    if (time > prevTime) {
        child = animation._first;
        while(child && child._start <= time){
            if (child.data === "isPause" && child._start > prevTime) return child;
            child = child._next;
        }
    } else {
        child = animation._last;
        while(child && child._start >= time){
            if (child.data === "isPause" && child._start < prevTime) return child;
            child = child._prev;
        }
    }
}, $9adc3b62f9b9a789$var$_setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
    var repeat = animation._repeat, dur = $9adc3b62f9b9a789$var$_roundPrecise(duration) || 0, totalProgress = animation._tTime / animation._tDur;
    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
    animation._dur = dur;
    animation._tDur = !repeat ? dur : repeat < 0 ? 10000000000 : $9adc3b62f9b9a789$var$_roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
    totalProgress > 0 && !leavePlayhead ? $9adc3b62f9b9a789$var$_alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && $9adc3b62f9b9a789$var$_setEnd(animation);
    skipUncache || $9adc3b62f9b9a789$var$_uncache(animation.parent, animation);
    return animation;
}, $9adc3b62f9b9a789$var$_onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
    return animation instanceof $9adc3b62f9b9a789$export$e6a97ba2cae5bb94 ? $9adc3b62f9b9a789$var$_uncache(animation) : $9adc3b62f9b9a789$var$_setDuration(animation, animation._dur);
}, $9adc3b62f9b9a789$var$_zeroPosition = {
    _start: 0,
    endTime: $9adc3b62f9b9a789$var$_emptyFunc,
    totalDuration: $9adc3b62f9b9a789$var$_emptyFunc
}, $9adc3b62f9b9a789$var$_parsePosition = function _parsePosition(animation, position, percentAnimation) {
    var labels = animation.labels, recent = animation._recent || $9adc3b62f9b9a789$var$_zeroPosition, clippedDuration = animation.duration() >= $9adc3b62f9b9a789$var$_bigNum ? recent.endTime(false) : animation._dur, //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
    i, offset, isPercent;
    if ($9adc3b62f9b9a789$export$f664476fd67145ca(position) && (isNaN(position) || position in labels)) {
        //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
        offset = position.charAt(0);
        isPercent = position.substr(-1) === "%";
        i = position.indexOf("=");
        if (offset === "<" || offset === ">") {
            i >= 0 && (position = position.replace(/=/, ""));
            return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
        }
        if (i < 0) {
            position in labels || (labels[position] = clippedDuration);
            return labels[position];
        }
        offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));
        if (isPercent && percentAnimation) offset = offset / 100 * ($9adc3b62f9b9a789$var$_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
        return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
    }
    return position == null ? clippedDuration : +position;
}, $9adc3b62f9b9a789$var$_createTweenType = function _createTweenType(type, params, timeline) {
    var isLegacy = $9adc3b62f9b9a789$var$_isNumber(params[1]), varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1), vars = params[varsIndex], irVars, parent;
    isLegacy && (vars.duration = params[1]);
    vars.parent = timeline;
    if (type) {
        irVars = vars;
        parent = timeline;
        while(parent && !("immediateRender" in irVars)){
            // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
            irVars = parent.vars.defaults || {
            };
            parent = $9adc3b62f9b9a789$var$_isNotFalse(parent.vars.inherit) && parent.parent;
        }
        vars.immediateRender = $9adc3b62f9b9a789$var$_isNotFalse(irVars.immediateRender);
        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
    }
    return new $9adc3b62f9b9a789$export$208a41d6b4e37b97(params[0], vars, params[varsIndex + 1]);
}, $9adc3b62f9b9a789$var$_conditionalReturn = function _conditionalReturn(value, func) {
    return value || value === 0 ? func(value) : func;
}, $9adc3b62f9b9a789$var$_clamp = function _clamp(min, max, value) {
    return value < min ? min : value > max ? max : value;
}, $9adc3b62f9b9a789$export$65f2564e9a9b9222 = function $9adc3b62f9b9a789$export$65f2564e9a9b9222(value, v) {
    return !$9adc3b62f9b9a789$export$f664476fd67145ca(value) || !(v = $9adc3b62f9b9a789$var$_unitExp.exec(value)) ? "" : value.substr(v.index + v[0].length);
}, // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
$9adc3b62f9b9a789$export$7d15b64cf5a3a4c4 = function $9adc3b62f9b9a789$export$7d15b64cf5a3a4c4(min, max, value) {
    return $9adc3b62f9b9a789$var$_conditionalReturn(value, function(v) {
        return $9adc3b62f9b9a789$var$_clamp(min, max, v);
    });
}, $9adc3b62f9b9a789$var$_slice = [].slice, $9adc3b62f9b9a789$var$_isArrayLike = function _isArrayLike(value, nonEmpty) {
    return value && $9adc3b62f9b9a789$var$_isObject(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && $9adc3b62f9b9a789$var$_isObject(value[0])) && !value.nodeType && value !== $9adc3b62f9b9a789$var$_win;
}, $9adc3b62f9b9a789$var$_flatten = function _flatten(ar, leaveStrings, accumulator) {
    if (accumulator === void 0) accumulator = [];
    return ar.forEach(function(value) {
        var _accumulator;
        return $9adc3b62f9b9a789$export$f664476fd67145ca(value) && !leaveStrings || $9adc3b62f9b9a789$var$_isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, $9adc3b62f9b9a789$export$45b10814cc054894(value)) : accumulator.push(value);
    }) || accumulator;
}, //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
$9adc3b62f9b9a789$export$45b10814cc054894 = function $9adc3b62f9b9a789$export$45b10814cc054894(value, scope, leaveStrings) {
    return $9adc3b62f9b9a789$export$f664476fd67145ca(value) && !leaveStrings && ($9adc3b62f9b9a789$var$_coreInitted || !$9adc3b62f9b9a789$var$_wake()) ? $9adc3b62f9b9a789$var$_slice.call((scope || $9adc3b62f9b9a789$var$_doc).querySelectorAll(value), 0) : $9adc3b62f9b9a789$var$_isArray(value) ? $9adc3b62f9b9a789$var$_flatten(value, leaveStrings) : $9adc3b62f9b9a789$var$_isArrayLike(value) ? $9adc3b62f9b9a789$var$_slice.call(value, 0) : value ? [
        value
    ] : [];
}, $9adc3b62f9b9a789$export$aea217a45095ce11 = function $9adc3b62f9b9a789$export$aea217a45095ce11(value) {
    value = $9adc3b62f9b9a789$export$45b10814cc054894(value)[0] || $9adc3b62f9b9a789$var$_warn("Invalid scope") || {
    };
    return function(v) {
        var el = value.current || value.nativeElement || value;
        return $9adc3b62f9b9a789$export$45b10814cc054894(v, el.querySelectorAll ? el : el === value ? $9adc3b62f9b9a789$var$_warn("Invalid scope") || $9adc3b62f9b9a789$var$_doc.createElement("div") : value);
    };
}, $9adc3b62f9b9a789$export$448332262467e042 = function $9adc3b62f9b9a789$export$448332262467e042(a) {
    return a.sort(function() {
        return 0.5 - Math.random();
    });
}, // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;
//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
$9adc3b62f9b9a789$export$f02a9ddbe4480f19 = function $9adc3b62f9b9a789$export$f02a9ddbe4480f19(v) {
    if ($9adc3b62f9b9a789$var$_isFunction(v)) return v;
    var vars = $9adc3b62f9b9a789$var$_isObject(v) ? v : {
        each: v
    }, //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
    ease = $9adc3b62f9b9a789$var$_parseEase(vars.ease), from = vars.from || 0, base = parseFloat(vars.base) || 0, cache = {
    }, isDecimal = from > 0 && from < 1, ratios = isNaN(from) || isDecimal, axis = vars.axis, ratioX = from, ratioY = from;
    if ($9adc3b62f9b9a789$export$f664476fd67145ca(from)) ratioX = ratioY = ({
        center: 0.5,
        edges: 0.5,
        end: 1
    })[from] || 0;
    else if (!isDecimal && ratios) {
        ratioX = from[0];
        ratioY = from[1];
    }
    return function(i, target, a) {
        var l = (a || vars).length, distances = cache[l], originX, originY, x, y, d, j, max, min, wrapAt;
        if (!distances) {
            wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [
                1,
                $9adc3b62f9b9a789$var$_bigNum
            ])[1];
            if (!wrapAt) {
                max = -$9adc3b62f9b9a789$var$_bigNum;
                while(max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l);
                wrapAt--;
            }
            distances = cache[l] = [];
            originX = ratios ? Math.min(wrapAt, l) * ratioX - 0.5 : from % wrapAt;
            originY = wrapAt === $9adc3b62f9b9a789$var$_bigNum ? 0 : ratios ? l * ratioY / wrapAt - 0.5 : from / wrapAt | 0;
            max = 0;
            min = $9adc3b62f9b9a789$var$_bigNum;
            for(j = 0; j < l; j++){
                x = j % wrapAt - originX;
                y = originY - (j / wrapAt | 0);
                distances[j] = d = !axis ? $9adc3b62f9b9a789$var$_sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
                d > max && (max = d);
                d < min && (min = d);
            }
            from === "random" && $9adc3b62f9b9a789$export$448332262467e042(distances);
            distances.max = max - min;
            distances.min = min;
            distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
            distances.b = l < 0 ? base - l : base;
            distances.u = $9adc3b62f9b9a789$export$65f2564e9a9b9222(vars.amount || vars.each) || 0; //unit
            ease = ease && l < 0 ? $9adc3b62f9b9a789$var$_invertEase(ease) : ease;
        }
        l = (distances[i] - distances.min) / distances.max || 0;
        return $9adc3b62f9b9a789$var$_roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
    };
}, $9adc3b62f9b9a789$export$dd12390e6b265a17 = function $9adc3b62f9b9a789$export$dd12390e6b265a17(v) {
    //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
    var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())
    return function(raw) {
        var n = Math.round(parseFloat(raw) / v) * v * p;
        return (n - n % 1) / p + ($9adc3b62f9b9a789$var$_isNumber(raw) ? 0 : $9adc3b62f9b9a789$export$65f2564e9a9b9222(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
    };
}, $9adc3b62f9b9a789$export$51a0620f7a28532b = function $9adc3b62f9b9a789$export$51a0620f7a28532b(snapTo, value) {
    var isArray = $9adc3b62f9b9a789$var$_isArray(snapTo), radius, is2D;
    if (!isArray && $9adc3b62f9b9a789$var$_isObject(snapTo)) {
        radius = isArray = snapTo.radius || $9adc3b62f9b9a789$var$_bigNum;
        if (snapTo.values) {
            snapTo = $9adc3b62f9b9a789$export$45b10814cc054894(snapTo.values);
            if (is2D = !$9adc3b62f9b9a789$var$_isNumber(snapTo[0])) radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
        } else snapTo = $9adc3b62f9b9a789$export$dd12390e6b265a17(snapTo.increment);
    }
    return $9adc3b62f9b9a789$var$_conditionalReturn(value, !isArray ? $9adc3b62f9b9a789$export$dd12390e6b265a17(snapTo) : $9adc3b62f9b9a789$var$_isFunction(snapTo) ? function(raw) {
        is2D = snapTo(raw);
        return Math.abs(is2D - raw) <= radius ? is2D : raw;
    } : function(raw) {
        var x = parseFloat(is2D ? raw.x : raw), y = parseFloat(is2D ? raw.y : 0), min = $9adc3b62f9b9a789$var$_bigNum, closest = 0, i = snapTo.length, dx, dy;
        while(i--){
            if (is2D) {
                dx = snapTo[i].x - x;
                dy = snapTo[i].y - y;
                dx = dx * dx + dy * dy;
            } else dx = Math.abs(snapTo[i] - x);
            if (dx < min) {
                min = dx;
                closest = i;
            }
        }
        closest = !radius || min <= radius ? snapTo[closest] : raw;
        return is2D || closest === raw || $9adc3b62f9b9a789$var$_isNumber(raw) ? closest : closest + $9adc3b62f9b9a789$export$65f2564e9a9b9222(raw);
    });
}, $9adc3b62f9b9a789$export$4385e60b38654f68 = function $9adc3b62f9b9a789$export$4385e60b38654f68(min, max, roundingIncrement, returnFunction) {
    return $9adc3b62f9b9a789$var$_conditionalReturn($9adc3b62f9b9a789$var$_isArray(min) ? !max : roundingIncrement === true ? (roundingIncrement = 0, false) : !returnFunction, function() {
        return $9adc3b62f9b9a789$var$_isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 0.00001, returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * 0.99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
    });
}, $9adc3b62f9b9a789$export$a4627e546088548d = function $9adc3b62f9b9a789$export$a4627e546088548d() {
    for(var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++)functions[_key] = arguments[_key];
    return function(value) {
        return functions.reduce(function(v, f) {
            return f(v);
        }, value);
    };
}, $9adc3b62f9b9a789$export$d7502930aa5492de = function $9adc3b62f9b9a789$export$d7502930aa5492de(func, unit) {
    return function(value) {
        return func(parseFloat(value)) + (unit || $9adc3b62f9b9a789$export$65f2564e9a9b9222(value));
    };
}, $9adc3b62f9b9a789$export$a3295358bff77e = function $9adc3b62f9b9a789$export$a3295358bff77e(min, max, value) {
    return $9adc3b62f9b9a789$export$f65a7599bbc6b121(min, max, 0, 1, value);
}, $9adc3b62f9b9a789$var$_wrapArray = function _wrapArray(a, wrapper, value) {
    return $9adc3b62f9b9a789$var$_conditionalReturn(value, function(index) {
        return a[~~wrapper(index)];
    });
}, $9adc3b62f9b9a789$export$4997ffc0176396a6 = function $9adc3b62f9b9a789$export$4997ffc0176396a6(min, max, value1) {
    // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
    var range = max - min;
    return $9adc3b62f9b9a789$var$_isArray(min) ? $9adc3b62f9b9a789$var$_wrapArray(min, $9adc3b62f9b9a789$export$4997ffc0176396a6(0, min.length), max) : $9adc3b62f9b9a789$var$_conditionalReturn(value1, function(value) {
        return (range + (value - min) % range) % range + min;
    });
}, $9adc3b62f9b9a789$export$cfc0b067273edc55 = function $9adc3b62f9b9a789$export$cfc0b067273edc55(min, max, value2) {
    var range = max - min, total = range * 2;
    return $9adc3b62f9b9a789$var$_isArray(min) ? $9adc3b62f9b9a789$var$_wrapArray(min, $9adc3b62f9b9a789$export$cfc0b067273edc55(0, min.length - 1), max) : $9adc3b62f9b9a789$var$_conditionalReturn(value2, function(value) {
        value = (total + (value - min) % total) % total || 0;
        return min + (value > range ? total - value : value);
    });
}, $9adc3b62f9b9a789$export$d5962a97e3cde94d = function $9adc3b62f9b9a789$export$d5962a97e3cde94d(value) {
    //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
    var prev = 0, s = "", i, nums, end, isArray;
    while(~(i = value.indexOf("random(", prev))){
        end = value.indexOf(")", i);
        isArray = value.charAt(i + 7) === "[";
        nums = value.substr(i + 7, end - i - 7).match(isArray ? $9adc3b62f9b9a789$var$_delimitedValueExp : $9adc3b62f9b9a789$var$_strictNumExp);
        s += value.substr(prev, i - prev) + $9adc3b62f9b9a789$export$4385e60b38654f68(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 0.00001);
        prev = end + 1;
    }
    return s + value.substr(prev, value.length - prev);
}, $9adc3b62f9b9a789$export$f65a7599bbc6b121 = function $9adc3b62f9b9a789$export$f65a7599bbc6b121(inMin, inMax, outMin, outMax, value3) {
    var inRange = inMax - inMin, outRange = outMax - outMin;
    return $9adc3b62f9b9a789$var$_conditionalReturn(value3, function(value) {
        return outMin + ((value - inMin) / inRange * outRange || 0);
    });
}, $9adc3b62f9b9a789$export$89e29e4ab65e70a9 = function $9adc3b62f9b9a789$export$89e29e4ab65e70a9(start, end, progress, mutate) {
    var func = isNaN(start + end) ? 0 : function(p) {
        return (1 - p) * start + p * end;
    };
    if (!func) {
        var isString = $9adc3b62f9b9a789$export$f664476fd67145ca(start), master = {
        }, p1, i1, interpolators, l, il;
        progress === true && (mutate = 1) && (progress = null);
        if (isString) {
            start = {
                p: start
            };
            end = {
                p: end
            };
        } else if ($9adc3b62f9b9a789$var$_isArray(start) && !$9adc3b62f9b9a789$var$_isArray(end)) {
            interpolators = [];
            l = start.length;
            il = l - 2;
            for(i1 = 1; i1 < l; i1++)interpolators.push($9adc3b62f9b9a789$export$89e29e4ab65e70a9(start[i1 - 1], start[i1])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
            l--;
            func = function func(p) {
                p *= l;
                var i = Math.min(il, ~~p);
                return interpolators[i](p - i);
            };
            progress = end;
        } else if (!mutate) start = $9adc3b62f9b9a789$var$_merge($9adc3b62f9b9a789$var$_isArray(start) ? [] : {
        }, start);
        if (!interpolators) {
            for(p1 in end)$9adc3b62f9b9a789$var$_addPropTween.call(master, start, p1, "get", end[p1]);
            func = function func(p) {
                return $9adc3b62f9b9a789$var$_renderPropTweens(p, master) || (isString ? start.p : start);
            };
        }
    }
    return $9adc3b62f9b9a789$var$_conditionalReturn(progress, func);
}, $9adc3b62f9b9a789$var$_getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
    //used for nextLabel() and previousLabel()
    var labels = timeline.labels, min = $9adc3b62f9b9a789$var$_bigNum, p, distance, label;
    for(p in labels){
        distance = labels[p] - fromTime;
        if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
            label = p;
            min = distance;
        }
    }
    return label;
}, $9adc3b62f9b9a789$var$_callback = function _callback(animation, type, executeLazyFirst) {
    var v = animation.vars, callback = v[type], params, scope;
    if (!callback) return;
    params = v[type + "Params"];
    scope = v.callbackScope || animation;
    executeLazyFirst && $9adc3b62f9b9a789$var$_lazyTweens.length && $9adc3b62f9b9a789$var$_lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
    return params ? callback.apply(scope, params) : callback.call(scope);
}, $9adc3b62f9b9a789$var$_interrupt = function _interrupt(animation) {
    $9adc3b62f9b9a789$var$_removeFromParent(animation);
    animation.scrollTrigger && animation.scrollTrigger.kill(false);
    animation.progress() < 1 && $9adc3b62f9b9a789$var$_callback(animation, "onInterrupt");
    return animation;
}, $9adc3b62f9b9a789$var$_quickTween, $9adc3b62f9b9a789$var$_createPlugin = function _createPlugin(config) {
    config = !config.name && config["default"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.
    var name = config.name, isFunc = $9adc3b62f9b9a789$var$_isFunction(config), Plugin = name && !isFunc && config.init ? function() {
        this._props = [];
    } : config, //in case someone passes in an object that's not a plugin, like CustomEase
    instanceDefaults = {
        init: $9adc3b62f9b9a789$var$_emptyFunc,
        render: $9adc3b62f9b9a789$var$_renderPropTweens,
        add: $9adc3b62f9b9a789$var$_addPropTween,
        kill: $9adc3b62f9b9a789$var$_killPropTweensOf,
        modifier: $9adc3b62f9b9a789$var$_addPluginModifier,
        rawVars: 0
    }, statics = {
        targetTest: 0,
        get: 0,
        getSetter: $9adc3b62f9b9a789$export$d60fbc1e0278aaf0,
        aliases: {
        },
        register: 0
    };
    $9adc3b62f9b9a789$var$_wake();
    if (config !== Plugin) {
        if ($9adc3b62f9b9a789$export$d305d8ec5d7c26b8[name]) return;
        $9adc3b62f9b9a789$export$dc2b19673bb53610(Plugin, $9adc3b62f9b9a789$export$dc2b19673bb53610($9adc3b62f9b9a789$var$_copyExcluding(config, instanceDefaults), statics)); //static methods
        $9adc3b62f9b9a789$var$_merge(Plugin.prototype, $9adc3b62f9b9a789$var$_merge(instanceDefaults, $9adc3b62f9b9a789$var$_copyExcluding(config, statics))); //instance methods
        $9adc3b62f9b9a789$export$d305d8ec5d7c26b8[Plugin.prop = name] = Plugin;
        if (config.targetTest) {
            $9adc3b62f9b9a789$var$_harnessPlugins.push(Plugin);
            $9adc3b62f9b9a789$var$_reservedProps[name] = 1;
        }
        name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
    }
    $9adc3b62f9b9a789$var$_addGlobal(name, Plugin);
    config.register && config.register($9adc3b62f9b9a789$export$99ee26438460406a, Plugin, $9adc3b62f9b9a789$export$3a67f7f44b1e838a);
}, /*
 * --------------------------------------------------------------------------------------
 * COLORS
 * --------------------------------------------------------------------------------------
 */ $9adc3b62f9b9a789$var$_255 = 255, $9adc3b62f9b9a789$var$_colorLookup = {
    aqua: [
        0,
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255
    ],
    lime: [
        0,
        $9adc3b62f9b9a789$var$_255,
        0
    ],
    silver: [
        192,
        192,
        192
    ],
    black: [
        0,
        0,
        0
    ],
    maroon: [
        128,
        0,
        0
    ],
    teal: [
        0,
        128,
        128
    ],
    blue: [
        0,
        0,
        $9adc3b62f9b9a789$var$_255
    ],
    navy: [
        0,
        0,
        128
    ],
    white: [
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255
    ],
    olive: [
        128,
        128,
        0
    ],
    yellow: [
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255,
        0
    ],
    orange: [
        $9adc3b62f9b9a789$var$_255,
        165,
        0
    ],
    gray: [
        128,
        128,
        128
    ],
    purple: [
        128,
        0,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    red: [
        $9adc3b62f9b9a789$var$_255,
        0,
        0
    ],
    pink: [
        $9adc3b62f9b9a789$var$_255,
        192,
        203
    ],
    cyan: [
        0,
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255
    ],
    transparent: [
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255,
        $9adc3b62f9b9a789$var$_255,
        0
    ]
}, // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
// let ctx = _doc.createElement("canvas").getContext("2d");
// _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
$9adc3b62f9b9a789$var$_hue = function _hue(h, m1, m2) {
    h += h < 0 ? 1 : h > 1 ? -1 : 0;
    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < 0.5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * $9adc3b62f9b9a789$var$_255 + 0.5 | 0;
}, $9adc3b62f9b9a789$export$73d6f35be992df24 = function $9adc3b62f9b9a789$export$73d6f35be992df24(v, toHSL, forceAlpha) {
    var a = !v ? $9adc3b62f9b9a789$var$_colorLookup.black : $9adc3b62f9b9a789$var$_isNumber(v) ? [
        v >> 16,
        v >> 8 & $9adc3b62f9b9a789$var$_255,
        v & $9adc3b62f9b9a789$var$_255
    ] : 0, r, g, b, h, s, l, max, min, d, wasHSL;
    if (!a) {
        if (v.substr(-1) === ",") //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
        v = v.substr(0, v.length - 1);
        if ($9adc3b62f9b9a789$var$_colorLookup[v]) a = $9adc3b62f9b9a789$var$_colorLookup[v];
        else if (v.charAt(0) === "#") {
            if (v.length < 6) {
                //for shorthand like #9F0 or #9F0F (could have alpha)
                r = v.charAt(1);
                g = v.charAt(2);
                b = v.charAt(3);
                v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
            }
            if (v.length === 9) {
                // hex with alpha, like #fd5e53ff
                a = parseInt(v.substr(1, 6), 16);
                return [
                    a >> 16,
                    a >> 8 & $9adc3b62f9b9a789$var$_255,
                    a & $9adc3b62f9b9a789$var$_255,
                    parseInt(v.substr(7), 16) / 255
                ];
            }
            v = parseInt(v.substr(1), 16);
            a = [
                v >> 16,
                v >> 8 & $9adc3b62f9b9a789$var$_255,
                v & $9adc3b62f9b9a789$var$_255
            ];
        } else if (v.substr(0, 3) === "hsl") {
            a = wasHSL = v.match($9adc3b62f9b9a789$var$_strictNumExp);
            if (!toHSL) {
                h = +a[0] % 360 / 360;
                s = +a[1] / 100;
                l = +a[2] / 100;
                g = l <= 0.5 ? l * (s + 1) : l + s - l * s;
                r = l * 2 - g;
                a.length > 3 && (a[3] *= 1); //cast as number
                a[0] = $9adc3b62f9b9a789$var$_hue(h + 1 / 3, r, g);
                a[1] = $9adc3b62f9b9a789$var$_hue(h, r, g);
                a[2] = $9adc3b62f9b9a789$var$_hue(h - 1 / 3, r, g);
            } else if (~v.indexOf("=")) {
                //if relative values are found, just return the raw strings with the relative prefixes in place.
                a = v.match($9adc3b62f9b9a789$export$b9d44bb6523120d6);
                forceAlpha && a.length < 4 && (a[3] = 1);
                return a;
            }
        } else a = v.match($9adc3b62f9b9a789$var$_strictNumExp) || $9adc3b62f9b9a789$var$_colorLookup.transparent;
        a = a.map(Number);
    }
    if (toHSL && !wasHSL) {
        r = a[0] / $9adc3b62f9b9a789$var$_255;
        g = a[1] / $9adc3b62f9b9a789$var$_255;
        b = a[2] / $9adc3b62f9b9a789$var$_255;
        max = Math.max(r, g, b);
        min = Math.min(r, g, b);
        l = (max + min) / 2;
        if (max === min) h = s = 0;
        else {
            d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
            h *= 60;
        }
        a[0] = ~~(h + 0.5);
        a[1] = ~~(s * 100 + 0.5);
        a[2] = ~~(l * 100 + 0.5);
    }
    forceAlpha && a.length < 4 && (a[3] = 1);
    return a;
}, $9adc3b62f9b9a789$var$_colorOrderData = function _colorOrderData(v1) {
    // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
    var values = [], c = [], i = -1;
    v1.split($9adc3b62f9b9a789$export$dd733e62515be2bd).forEach(function(v) {
        var a = v.match($9adc3b62f9b9a789$export$65c88bbd597e7b0a) || [];
        values.push.apply(values, a);
        c.push(i += a.length + 1);
    });
    values.c = c;
    return values;
}, $9adc3b62f9b9a789$var$_formatColors = function _formatColors(s, toHSL, orderMatchData) {
    var result = "", colors = (s + result).match($9adc3b62f9b9a789$export$dd733e62515be2bd), type = toHSL ? "hsla(" : "rgba(", i = 0, c, shell, d, l;
    if (!colors) return s;
    colors = colors.map(function(color) {
        return (color = $9adc3b62f9b9a789$export$73d6f35be992df24(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
    });
    if (orderMatchData) {
        d = $9adc3b62f9b9a789$var$_colorOrderData(s);
        c = orderMatchData.c;
        if (c.join(result) !== d.c.join(result)) {
            shell = s.replace($9adc3b62f9b9a789$export$dd733e62515be2bd, "1").split($9adc3b62f9b9a789$export$65c88bbd597e7b0a);
            l = shell.length - 1;
            for(; i < l; i++)result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
        }
    }
    if (!shell) {
        shell = s.split($9adc3b62f9b9a789$export$dd733e62515be2bd);
        l = shell.length - 1;
        for(; i < l; i++)result += shell[i] + colors[i];
    }
    return result + shell[l];
}, $9adc3b62f9b9a789$export$dd733e62515be2bd = function() {
    var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
    p;
    for(p in $9adc3b62f9b9a789$var$_colorLookup)s += "|" + p + "\\b";
    return new RegExp(s + ")", "gi");
}(), $9adc3b62f9b9a789$var$_hslExp = /hsl[a]?\(/, $9adc3b62f9b9a789$export$7eb2e5eb5eeb96a4 = function $9adc3b62f9b9a789$export$7eb2e5eb5eeb96a4(a) {
    var combined = a.join(" "), toHSL;
    $9adc3b62f9b9a789$export$dd733e62515be2bd.lastIndex = 0;
    if ($9adc3b62f9b9a789$export$dd733e62515be2bd.test(combined)) {
        toHSL = $9adc3b62f9b9a789$var$_hslExp.test(combined);
        a[1] = $9adc3b62f9b9a789$var$_formatColors(a[1], toHSL);
        a[0] = $9adc3b62f9b9a789$var$_formatColors(a[0], toHSL, $9adc3b62f9b9a789$var$_colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.
        return true;
    }
}, /*
 * --------------------------------------------------------------------------------------
 * TICKER
 * --------------------------------------------------------------------------------------
 */ $9adc3b62f9b9a789$var$_tickerActive, $9adc3b62f9b9a789$export$762ed8fbedb691e3 = function() {
    var _getTime = Date.now, _lagThreshold = 500, _adjustedLag = 33, _startTime = _getTime(), _lastUpdate = _startTime, _gap = 1000 / 240, _nextTime = _gap, _listeners = [], _id, _req, _raf, _self, _delta, _i, _tick1 = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate, manual = v === true, overlap, dispatch, time, frame;
        elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;
        if (overlap > 0 || manual) {
            frame = ++_self.frame;
            _delta = time - _self.time * 1000;
            _self.time = time = time / 1000;
            _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
            dispatch = 1;
        }
        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
        if (dispatch) for(_i = 0; _i < _listeners.length; _i++)// use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
        _listeners[_i](time, _delta, frame, v);
    };
    _self = {
        time: 0,
        frame: 0,
        tick: function tick() {
            _tick1(true);
        },
        deltaRatio: function deltaRatio(fps) {
            return _delta / (1000 / (fps || 60));
        },
        wake: function wake() {
            if ($9adc3b62f9b9a789$var$_coreReady) {
                if (!$9adc3b62f9b9a789$var$_coreInitted && $9adc3b62f9b9a789$var$_windowExists()) {
                    $9adc3b62f9b9a789$var$_win = $9adc3b62f9b9a789$var$_coreInitted = window;
                    $9adc3b62f9b9a789$var$_doc = $9adc3b62f9b9a789$var$_win.document || {
                    };
                    $9adc3b62f9b9a789$var$_globals.gsap = $9adc3b62f9b9a789$export$99ee26438460406a;
                    ($9adc3b62f9b9a789$var$_win.gsapVersions || ($9adc3b62f9b9a789$var$_win.gsapVersions = [])).push($9adc3b62f9b9a789$export$99ee26438460406a.version);
                    $9adc3b62f9b9a789$var$_install($9adc3b62f9b9a789$var$_installScope || $9adc3b62f9b9a789$var$_win.GreenSockGlobals || !$9adc3b62f9b9a789$var$_win.gsap && $9adc3b62f9b9a789$var$_win || {
                    });
                    _raf = $9adc3b62f9b9a789$var$_win.requestAnimationFrame;
                }
                _id && _self.sleep();
                _req = _raf || function(f) {
                    return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
                };
                $9adc3b62f9b9a789$var$_tickerActive = 1;
                _tick1(2);
            }
        },
        sleep: function sleep() {
            (_raf ? $9adc3b62f9b9a789$var$_win.cancelAnimationFrame : clearTimeout)(_id);
            $9adc3b62f9b9a789$var$_tickerActive = 0;
            _req = $9adc3b62f9b9a789$var$_emptyFunc;
        },
        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
            _lagThreshold = threshold || 1 / $9adc3b62f9b9a789$var$_tinyNum; //zero should be interpreted as basically unlimited
            _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
        },
        fps: function fps(_fps) {
            _gap = 1000 / (_fps || 240);
            _nextTime = _self.time * 1000 + _gap;
        },
        add: function add(callback) {
            _listeners.indexOf(callback) < 0 && _listeners.push(callback);
            $9adc3b62f9b9a789$var$_wake();
        },
        remove: function remove(callback, i) {
            ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
        },
        _listeners: _listeners
    };
    return _self;
}(), $9adc3b62f9b9a789$var$_wake = function _wake() {
    return !$9adc3b62f9b9a789$var$_tickerActive && $9adc3b62f9b9a789$export$762ed8fbedb691e3.wake();
}, //also ensures the core classes are initialized.
/*
* -------------------------------------------------
* EASING
* -------------------------------------------------
*/ $9adc3b62f9b9a789$var$_easeMap = {
}, $9adc3b62f9b9a789$var$_customEaseExp = /^[\d.\-M][\d.\-,\s]/, $9adc3b62f9b9a789$var$_quotesExp = /["']/g, $9adc3b62f9b9a789$var$_parseObjectInString = function _parseObjectInString(value) {
    //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
    var obj = {
    }, split = value.substr(1, value.length - 3).split(":"), key = split[0], i = 1, l = split.length, index, val, parsedVal;
    for(; i < l; i++){
        val = split[i];
        index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
        parsedVal = val.substr(0, index);
        obj[key] = isNaN(parsedVal) ? parsedVal.replace($9adc3b62f9b9a789$var$_quotesExp, "").trim() : +parsedVal;
        key = val.substr(index + 1).trim();
    }
    return obj;
}, $9adc3b62f9b9a789$var$_valueInParentheses = function _valueInParentheses(value) {
    var open = value.indexOf("(") + 1, close = value.indexOf(")"), nested = value.indexOf("(", open);
    return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
}, $9adc3b62f9b9a789$var$_configEaseFromString = function _configEaseFromString(name) {
    //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
    var split = (name + "").split("("), ease = $9adc3b62f9b9a789$var$_easeMap[split[0]];
    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [
        $9adc3b62f9b9a789$var$_parseObjectInString(split[1])
    ] : $9adc3b62f9b9a789$var$_valueInParentheses(name).split(",").map($9adc3b62f9b9a789$var$_numericIfPossible)) : $9adc3b62f9b9a789$var$_easeMap._CE && $9adc3b62f9b9a789$var$_customEaseExp.test(name) ? $9adc3b62f9b9a789$var$_easeMap._CE("", name) : ease;
}, $9adc3b62f9b9a789$var$_invertEase = function _invertEase(ease) {
    return function(p) {
        return 1 - ease(1 - p);
    };
}, // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
$9adc3b62f9b9a789$var$_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
    var child = timeline._first, ease;
    while(child){
        if (child instanceof $9adc3b62f9b9a789$export$e6a97ba2cae5bb94) _propagateYoyoEase(child, isYoyo);
        else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
            if (child.timeline) _propagateYoyoEase(child.timeline, isYoyo);
            else {
                ease = child._ease;
                child._ease = child._yEase;
                child._yEase = ease;
                child._yoyo = isYoyo;
            }
        }
        child = child._next;
    }
}, $9adc3b62f9b9a789$var$_parseEase = function _parseEase(ease, defaultEase) {
    return !ease ? defaultEase : ($9adc3b62f9b9a789$var$_isFunction(ease) ? ease : $9adc3b62f9b9a789$var$_easeMap[ease] || $9adc3b62f9b9a789$var$_configEaseFromString(ease)) || defaultEase;
}, $9adc3b62f9b9a789$var$_insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
    if (easeOut === void 0) easeOut = function easeOut(p) {
        return 1 - easeIn(1 - p);
    };
    if (easeInOut === void 0) easeInOut = function easeInOut(p) {
        return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
    };
    var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
    }, lowercaseName;
    $9adc3b62f9b9a789$export$f9000b814859f126(names, function(name) {
        $9adc3b62f9b9a789$var$_easeMap[name] = $9adc3b62f9b9a789$var$_globals[name] = ease;
        $9adc3b62f9b9a789$var$_easeMap[lowercaseName = name.toLowerCase()] = easeOut;
        for(var p in ease)$9adc3b62f9b9a789$var$_easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = $9adc3b62f9b9a789$var$_easeMap[name + "." + p] = ease[p];
    });
    return ease;
}, $9adc3b62f9b9a789$var$_easeInOutFromOut = function _easeInOutFromOut(easeOut) {
    return function(p) {
        return p < 0.5 ? (1 - easeOut(1 - p * 2)) / 2 : 0.5 + easeOut((p - 0.5) * 2) / 2;
    };
}, $9adc3b62f9b9a789$var$_configElastic = function _configElastic(type, amplitude1, period1) {
    var p1 = amplitude1 >= 1 ? amplitude1 : 1, //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
    p2 = (period1 || (type ? 0.3 : 0.45)) / (amplitude1 < 1 ? amplitude1 : 1), p3 = p2 / $9adc3b62f9b9a789$var$_2PI * (Math.asin(1 / p1) || 0), easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * $9adc3b62f9b9a789$var$_sin((p - p3) * p2) + 1;
    }, ease = type === "out" ? easeOut : type === "in" ? function(p) {
        return 1 - easeOut(1 - p);
    } : $9adc3b62f9b9a789$var$_easeInOutFromOut(easeOut);
    p2 = $9adc3b62f9b9a789$var$_2PI / p2; //precalculate to optimize
    ease.config = function(amplitude, period) {
        return _configElastic(type, amplitude, period);
    };
    return ease;
}, $9adc3b62f9b9a789$var$_configBack = function _configBack(type, overshoot1) {
    if (overshoot1 === void 0) overshoot1 = 1.70158;
    var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot1 + 1) * p + overshoot1) + 1 : 0;
    }, ease = type === "out" ? easeOut : type === "in" ? function(p) {
        return 1 - easeOut(1 - p);
    } : $9adc3b62f9b9a789$var$_easeInOutFromOut(easeOut);
    ease.config = function(overshoot) {
        return _configBack(type, overshoot);
    };
    return ease;
}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEase = ratio => {
// 	let y = 0.5 + ratio / 2;
// 	return p => (2 * (1 - p) * p * y + p * p);
// },
// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
// _weightedEaseStrong = ratio => {
// 	ratio = .5 + ratio / 2;
// 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
// 		b = ratio - o,
// 		c = ratio + o;
// 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
// };
$9adc3b62f9b9a789$export$f9000b814859f126("Linear,Quad,Cubic,Quart,Quint,Strong", function(name, i) {
    var power = i < 5 ? i + 1 : i;
    $9adc3b62f9b9a789$var$_insertEase(name + ",Power" + (power - 1), i ? function(p) {
        return Math.pow(p, power);
    } : function(p) {
        return p;
    }, function(p) {
        return 1 - Math.pow(1 - p, power);
    }, function(p) {
        return p < 0.5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
    });
});
$9adc3b62f9b9a789$var$_easeMap.Linear.easeNone = $9adc3b62f9b9a789$var$_easeMap.none = $9adc3b62f9b9a789$var$_easeMap.Linear.easeIn;
$9adc3b62f9b9a789$var$_insertEase("Elastic", $9adc3b62f9b9a789$var$_configElastic("in"), $9adc3b62f9b9a789$var$_configElastic("out"), $9adc3b62f9b9a789$var$_configElastic());
(function(n, c) {
    var n1 = 1 / c, n2 = 2 * n1, n3 = 2.5 * n1, easeOut = function easeOut(p) {
        return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + 0.75 : p < n3 ? n * (p -= 2.25 / c) * p + 0.9375 : n * Math.pow(p - 2.625 / c, 2) + 0.984375;
    };
    $9adc3b62f9b9a789$var$_insertEase("Bounce", function(p) {
        return 1 - easeOut(1 - p);
    }, easeOut);
})(7.5625, 2.75);
$9adc3b62f9b9a789$var$_insertEase("Expo", function(p) {
    return p ? Math.pow(2, 10 * (p - 1)) : 0;
});
$9adc3b62f9b9a789$var$_insertEase("Circ", function(p) {
    return -($9adc3b62f9b9a789$var$_sqrt(1 - p * p) - 1);
});
$9adc3b62f9b9a789$var$_insertEase("Sine", function(p) {
    return p === 1 ? 1 : -$9adc3b62f9b9a789$var$_cos(p * $9adc3b62f9b9a789$var$_HALF_PI) + 1;
});
$9adc3b62f9b9a789$var$_insertEase("Back", $9adc3b62f9b9a789$var$_configBack("in"), $9adc3b62f9b9a789$var$_configBack("out"), $9adc3b62f9b9a789$var$_configBack());
$9adc3b62f9b9a789$var$_easeMap.SteppedEase = $9adc3b62f9b9a789$var$_easeMap.steps = $9adc3b62f9b9a789$var$_globals.SteppedEase = {
    config: function config(steps, immediateStart) {
        if (steps === void 0) steps = 1;
        var p1 = 1 / steps, p2 = steps + (immediateStart ? 0 : 1), p3 = immediateStart ? 1 : 0, max = 1 - $9adc3b62f9b9a789$var$_tinyNum;
        return function(p) {
            return ((p2 * $9adc3b62f9b9a789$var$_clamp(0, max, p) | 0) + p3) * p1;
        };
    }
};
$9adc3b62f9b9a789$var$_defaults.ease = $9adc3b62f9b9a789$var$_easeMap["quad.out"];
$9adc3b62f9b9a789$export$f9000b814859f126("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function(name) {
    return $9adc3b62f9b9a789$var$_callbackNames += name + "," + name + "Params,";
});
var $9adc3b62f9b9a789$export$cf10981d5419cad5 = function $9adc3b62f9b9a789$export$cf10981d5419cad5(target, harness) {
    this.id = $9adc3b62f9b9a789$var$_gsID++;
    target._gsap = this;
    this.target = target;
    this.harness = harness;
    this.get = harness ? harness.get : $9adc3b62f9b9a789$export$51d6bbe898aef1f9;
    this.set = harness ? harness.getSetter : $9adc3b62f9b9a789$export$d60fbc1e0278aaf0;
};
var $9adc3b62f9b9a789$export$c35d437ae5945fcd = /*#__PURE__*/ function() {
    function $9adc3b62f9b9a789$export$c35d437ae5945fcd(vars) {
        this.vars = vars;
        this._delay = +vars.delay || 0;
        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
            // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
            this._rDelay = vars.repeatDelay || 0;
            this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
        }
        this._ts = 1;
        $9adc3b62f9b9a789$var$_setDuration(this, +vars.duration, 1, 1);
        this.data = vars.data;
        $9adc3b62f9b9a789$var$_tickerActive || $9adc3b62f9b9a789$export$762ed8fbedb691e3.wake();
    }
    var _proto = $9adc3b62f9b9a789$export$c35d437ae5945fcd.prototype;
    _proto.delay = function delay(value) {
        if (value || value === 0) {
            this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
            this._delay = value;
            return this;
        }
        return this._delay;
    };
    _proto.duration = function duration(value) {
        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
    };
    _proto.totalDuration = function totalDuration(value) {
        if (!arguments.length) return this._tDur;
        this._dirty = 0;
        return $9adc3b62f9b9a789$var$_setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
    };
    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
        $9adc3b62f9b9a789$var$_wake();
        if (!arguments.length) return this._tTime;
        var parent = this._dp;
        if (parent && parent.smoothChildTiming && this._ts) {
            $9adc3b62f9b9a789$var$_alignPlayhead(this, _totalTime);
            !parent._dp || parent.parent || $9adc3b62f9b9a789$var$_postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
            //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.
            while(parent && parent.parent){
                if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) parent.totalTime(parent._tTime, true);
                parent = parent.parent;
            }
            if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
            $9adc3b62f9b9a789$var$_addToTimeline(this._dp, this, this._start - this._delay);
        }
        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === $9adc3b62f9b9a789$var$_tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
            // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
            this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
            //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
            //   this._lock = 1;
            $9adc3b62f9b9a789$var$_lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
        //}
        }
        return this;
    };
    _proto.time = function time(value, suppressEvents) {
        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + $9adc3b62f9b9a789$var$_elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
    };
    _proto.totalProgress = function totalProgress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;
    };
    _proto.progress = function progress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + $9adc3b62f9b9a789$var$_elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;
    };
    _proto.iteration = function iteration(value, suppressEvents) {
        var cycleDuration = this.duration() + this._rDelay;
        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? $9adc3b62f9b9a789$var$_animationCycle(this._tTime, cycleDuration) + 1 : 1;
    } // potential future addition:
    ;
    _proto.timeScale = function timeScale(value) {
        if (!arguments.length) return this._rts === -$9adc3b62f9b9a789$var$_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
        if (this._rts === value) return this;
        var tTime = this.parent && this._ts ? $9adc3b62f9b9a789$var$_parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
        // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
        //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
        // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.
        this._rts = +value || 0;
        this._ts = this._ps || value === -$9adc3b62f9b9a789$var$_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.
        $9adc3b62f9b9a789$var$_recacheAncestors(this.totalTime($9adc3b62f9b9a789$var$_clamp(-this._delay, this._tDur, tTime), true));
        $9adc3b62f9b9a789$var$_setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.
        return this;
    };
    _proto.paused = function paused(value) {
        if (!arguments.length) return this._ps;
        if (this._ps !== value) {
            this._ps = value;
            if (value) {
                this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.
                this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
            } else {
                $9adc3b62f9b9a789$var$_wake();
                this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.
                this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== $9adc3b62f9b9a789$var$_tinyNum && (this._tTime -= $9adc3b62f9b9a789$var$_tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
            }
        }
        return this;
    };
    _proto.startTime = function startTime(value) {
        if (arguments.length) {
            this._start = value;
            var parent = this.parent || this._dp;
            parent && (parent._sort || !this.parent) && $9adc3b62f9b9a789$var$_addToTimeline(parent, this, value - this._delay);
            return this;
        }
        return this._start;
    };
    _proto.endTime = function endTime(includeRepeats) {
        return this._start + ($9adc3b62f9b9a789$var$_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
    };
    _proto.rawTime = function rawTime(wrapRepeats) {
        var parent = this.parent || this._dp; // _dp = detached parent
        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : $9adc3b62f9b9a789$var$_parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
    };
    _proto.globalTime = function globalTime(rawTime) {
        var animation = this, time = arguments.length ? rawTime : animation.rawTime();
        while(animation){
            time = animation._start + time / (animation._ts || 1);
            animation = animation._dp;
        }
        return time;
    };
    _proto.repeat = function repeat(value) {
        if (arguments.length) {
            this._repeat = value === Infinity ? -2 : value;
            return $9adc3b62f9b9a789$var$_onUpdateTotalDuration(this);
        }
        return this._repeat === -2 ? Infinity : this._repeat;
    };
    _proto.repeatDelay = function repeatDelay(value) {
        if (arguments.length) {
            var time = this._time;
            this._rDelay = value;
            $9adc3b62f9b9a789$var$_onUpdateTotalDuration(this);
            return time ? this.time(time) : this;
        }
        return this._rDelay;
    };
    _proto.yoyo = function yoyo(value) {
        if (arguments.length) {
            this._yoyo = value;
            return this;
        }
        return this._yoyo;
    };
    _proto.seek = function seek(position, suppressEvents) {
        return this.totalTime($9adc3b62f9b9a789$var$_parsePosition(this, position), $9adc3b62f9b9a789$var$_isNotFalse(suppressEvents));
    };
    _proto.restart = function restart(includeDelay, suppressEvents) {
        return this.play().totalTime(includeDelay ? -this._delay : 0, $9adc3b62f9b9a789$var$_isNotFalse(suppressEvents));
    };
    _proto.play = function play(from, suppressEvents) {
        from != null && this.seek(from, suppressEvents);
        return this.reversed(false).paused(false);
    };
    _proto.reverse = function reverse(from, suppressEvents) {
        from != null && this.seek(from || this.totalDuration(), suppressEvents);
        return this.reversed(true).paused(false);
    };
    _proto.pause = function pause(atTime, suppressEvents) {
        atTime != null && this.seek(atTime, suppressEvents);
        return this.paused(true);
    };
    _proto.resume = function resume() {
        return this.paused(false);
    };
    _proto.reversed = function reversed(value) {
        if (arguments.length) {
            !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -$9adc3b62f9b9a789$var$_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.
            return this;
        }
        return this._rts < 0;
    };
    _proto.invalidate = function invalidate() {
        this._initted = this._act = 0;
        this._zTime = -$9adc3b62f9b9a789$var$_tinyNum;
        return this;
    };
    _proto.isActive = function isActive() {
        var parent = this.parent || this._dp, start = this._start, rawTime;
        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - $9adc3b62f9b9a789$var$_tinyNum);
    };
    _proto.eventCallback = function eventCallback(type, callback, params) {
        var vars = this.vars;
        if (arguments.length > 1) {
            if (!callback) delete vars[type];
            else {
                vars[type] = callback;
                params && (vars[type + "Params"] = params);
                type === "onUpdate" && (this._onUpdate = callback);
            }
            return this;
        }
        return vars[type];
    };
    _proto.then = function then(onFulfilled) {
        var self = this;
        return new Promise(function(resolve) {
            var f = $9adc3b62f9b9a789$var$_isFunction(onFulfilled) ? onFulfilled : $9adc3b62f9b9a789$var$_passThrough, _resolve = function _resolve() {
                var _then = self.then;
                self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)
                $9adc3b62f9b9a789$var$_isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
                resolve(f);
                self.then = _then;
            };
            if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) _resolve();
            else self._prom = _resolve;
        });
    };
    _proto.kill = function kill() {
        $9adc3b62f9b9a789$var$_interrupt(this);
    };
    return $9adc3b62f9b9a789$export$c35d437ae5945fcd;
}();
$9adc3b62f9b9a789$export$dc2b19673bb53610($9adc3b62f9b9a789$export$c35d437ae5945fcd.prototype, {
    _time: 0,
    _start: 0,
    _end: 0,
    _tTime: 0,
    _tDur: 0,
    _dirty: 0,
    _repeat: 0,
    _yoyo: false,
    parent: null,
    _initted: false,
    _rDelay: 0,
    _ts: 1,
    _dp: 0,
    ratio: 0,
    _zTime: -$9adc3b62f9b9a789$var$_tinyNum,
    _prom: 0,
    _ps: false,
    _rts: 1
});
var $9adc3b62f9b9a789$export$e6a97ba2cae5bb94 = /*#__PURE__*/ function(_Animation) {
    $9adc3b62f9b9a789$var$_inheritsLoose($9adc3b62f9b9a789$export$e6a97ba2cae5bb94, _Animation);
    function $9adc3b62f9b9a789$export$e6a97ba2cae5bb94(vars, position) {
        var _this;
        if (vars === void 0) vars = {
        };
        _this = _Animation.call(this, vars) || this;
        _this.labels = {
        };
        _this.smoothChildTiming = !!vars.smoothChildTiming;
        _this.autoRemoveChildren = !!vars.autoRemoveChildren;
        _this._sort = $9adc3b62f9b9a789$var$_isNotFalse(vars.sortChildren);
        $9adc3b62f9b9a789$var$_globalTimeline && $9adc3b62f9b9a789$var$_addToTimeline(vars.parent || $9adc3b62f9b9a789$var$_globalTimeline, $9adc3b62f9b9a789$var$_assertThisInitialized(_this), position);
        vars.reversed && _this.reverse();
        vars.paused && _this.paused(true);
        vars.scrollTrigger && $9adc3b62f9b9a789$var$_scrollTrigger($9adc3b62f9b9a789$var$_assertThisInitialized(_this), vars.scrollTrigger);
        return _this;
    }
    var _proto2 = $9adc3b62f9b9a789$export$e6a97ba2cae5bb94.prototype;
    _proto2.to = function to(targets, vars, position) {
        $9adc3b62f9b9a789$var$_createTweenType(0, arguments, this);
        return this;
    };
    _proto2.from = function from(targets, vars, position) {
        $9adc3b62f9b9a789$var$_createTweenType(1, arguments, this);
        return this;
    };
    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
        $9adc3b62f9b9a789$var$_createTweenType(2, arguments, this);
        return this;
    };
    _proto2.set = function set(targets, vars, position) {
        vars.duration = 0;
        vars.parent = this;
        $9adc3b62f9b9a789$var$_inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
        vars.immediateRender = !!vars.immediateRender;
        new $9adc3b62f9b9a789$export$208a41d6b4e37b97(targets, vars, $9adc3b62f9b9a789$var$_parsePosition(this, position), 1);
        return this;
    };
    _proto2.call = function call(callback, params, position) {
        return $9adc3b62f9b9a789$var$_addToTimeline(this, $9adc3b62f9b9a789$export$208a41d6b4e37b97.delayedCall(0, callback, params), position);
    } //ONLY for backward compatibility! Maybe delete?
    ;
    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.duration = duration;
        vars.stagger = vars.stagger || stagger;
        vars.onComplete = onCompleteAll;
        vars.onCompleteParams = onCompleteAllParams;
        vars.parent = this;
        new $9adc3b62f9b9a789$export$208a41d6b4e37b97(targets, vars, $9adc3b62f9b9a789$var$_parsePosition(this, position));
        return this;
    };
    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.runBackwards = 1;
        $9adc3b62f9b9a789$var$_inheritDefaults(vars).immediateRender = $9adc3b62f9b9a789$var$_isNotFalse(vars.immediateRender);
        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
    };
    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
        toVars.startAt = fromVars;
        $9adc3b62f9b9a789$var$_inheritDefaults(toVars).immediateRender = $9adc3b62f9b9a789$var$_isNotFalse(toVars.immediateRender);
        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
    };
    _proto2.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time, tDur = this._dirty ? this.totalDuration() : this._tDur, dur = this._dur, tTime = totalTime <= 0 ? 0 : $9adc3b62f9b9a789$var$_roundPrecise(totalTime), // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur), time, child, next, iteration, cycleDuration, prevPaused, pauseTween, timeScale, prevStart, prevIteration, yoyo, isYoyo;
        this !== $9adc3b62f9b9a789$var$_globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);
        if (tTime !== this._tTime || force || crossingStart) {
            if (prevTime !== this._time && dur) {
                //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
                tTime += this._time - prevTime;
                totalTime += this._time - prevTime;
            }
            time = tTime;
            prevStart = this._start;
            timeScale = this._ts;
            prevPaused = !timeScale;
            if (crossingStart) {
                dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.
                (totalTime || !suppressEvents) && (this._zTime = totalTime);
            }
            if (this._repeat) {
                //adjust the time for repeats and yoyos
                yoyo = this._yoyo;
                cycleDuration = dur + this._rDelay;
                if (this._repeat < -1 && totalTime < 0) return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
                time = $9adc3b62f9b9a789$var$_roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
                if (tTime === tDur) {
                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
                    iteration = this._repeat;
                    time = dur;
                } else {
                    iteration = ~~(tTime / cycleDuration);
                    if (iteration && iteration === tTime / cycleDuration) {
                        time = dur;
                        iteration--;
                    }
                    time > dur && (time = dur);
                }
                prevIteration = $9adc3b62f9b9a789$var$_animationCycle(this._tTime, cycleDuration);
                !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005
                if (yoyo && iteration & 1) {
                    time = dur - time;
                    isYoyo = 1;
                }
                /*
        make sure children at the end/beginning of the timeline are rendered properly. If, for example,
        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
        ensure that zero-duration tweens at the very beginning or end of the Timeline work.
        */ if (iteration !== prevIteration && !this._lock) {
                    var rewinding = yoyo && prevIteration & 1, doesWrap = rewinding === (yoyo && iteration & 1);
                    iteration < prevIteration && (rewinding = !rewinding);
                    prevTime = rewinding ? 0 : dur;
                    this._lock = 1;
                    this.render(prevTime || (isYoyo ? 0 : $9adc3b62f9b9a789$var$_roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
                    this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.
                    !suppressEvents && this.parent && $9adc3b62f9b9a789$var$_callback(this, "onRepeat");
                    this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);
                    if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
                    return this;
                    dur = this._dur; // in case the duration changed in the onRepeat
                    tDur = this._tDur;
                    if (doesWrap) {
                        this._lock = 2;
                        prevTime = rewinding ? dur : -0.0001;
                        this.render(prevTime, true);
                        this.vars.repeatRefresh && !isYoyo && this.invalidate();
                    }
                    this._lock = 0;
                    if (!this._ts && !prevPaused) return this;
                     //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.
                    $9adc3b62f9b9a789$var$_propagateYoyoEase(this, isYoyo);
                }
            }
            if (this._hasPause && !this._forcing && this._lock < 2) {
                pauseTween = $9adc3b62f9b9a789$var$_findNextPauseTween(this, $9adc3b62f9b9a789$var$_roundPrecise(prevTime), $9adc3b62f9b9a789$var$_roundPrecise(time));
                if (pauseTween) tTime -= time - (time = pauseTween._start);
            }
            this._tTime = tTime;
            this._time = time;
            this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
            if (!this._initted) {
                this._onUpdate = this.vars.onUpdate;
                this._initted = 1;
                this._zTime = totalTime;
                prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
            }
            if (!prevTime && time && !suppressEvents) {
                $9adc3b62f9b9a789$var$_callback(this, "onStart");
                if (this._tTime !== tTime) // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
                return this;
            }
            if (time >= prevTime && totalTime >= 0) {
                child = this._first;
                while(child){
                    next = child._next;
                    if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
                        if (child.parent !== this) // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                        return this.render(totalTime, suppressEvents, force);
                        child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);
                        if (time !== this._time || !this._ts && !prevPaused) {
                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            pauseTween = 0;
                            next && (tTime += this._zTime = -$9adc3b62f9b9a789$var$_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)
                            break;
                        }
                    }
                    child = next;
                }
            } else {
                child = this._last;
                var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.
                while(child){
                    next = child._prev;
                    if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
                        if (child.parent !== this) // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                        return this.render(totalTime, suppressEvents, force);
                        child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);
                        if (time !== this._time || !this._ts && !prevPaused) {
                            //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            pauseTween = 0;
                            next && (tTime += this._zTime = adjustedTime ? -$9adc3b62f9b9a789$var$_tinyNum : $9adc3b62f9b9a789$var$_tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)
                            break;
                        }
                    }
                    child = next;
                }
            }
            if (pauseTween && !suppressEvents) {
                this.pause();
                pauseTween.render(time >= prevTime ? 0 : -$9adc3b62f9b9a789$var$_tinyNum)._zTime = time >= prevTime ? 1 : -1;
                if (this._ts) {
                    //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
                    this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.
                    $9adc3b62f9b9a789$var$_setEnd(this);
                    return this.render(totalTime, suppressEvents, force);
                }
            }
            this._onUpdate && !suppressEvents && $9adc3b62f9b9a789$var$_callback(this, "onUpdate", true);
            if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) {
                if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) {
                    if (!this._lock) {
                        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && $9adc3b62f9b9a789$var$_removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
                        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
                            $9adc3b62f9b9a789$var$_callback(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);
                            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
                        }
                    }
                }
            }
        }
        return this;
    };
    _proto2.add = function add(child, position) {
        var _this2 = this;
        $9adc3b62f9b9a789$var$_isNumber(position) || (position = $9adc3b62f9b9a789$var$_parsePosition(this, position, child));
        if (!(child instanceof $9adc3b62f9b9a789$export$c35d437ae5945fcd)) {
            if ($9adc3b62f9b9a789$var$_isArray(child)) {
                child.forEach(function(obj) {
                    return _this2.add(obj, position);
                });
                return this;
            }
            if ($9adc3b62f9b9a789$export$f664476fd67145ca(child)) return this.addLabel(child, position);
            if ($9adc3b62f9b9a789$var$_isFunction(child)) child = $9adc3b62f9b9a789$export$208a41d6b4e37b97.delayedCall(0, child);
            else return this;
        }
        return this !== child ? $9adc3b62f9b9a789$var$_addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
    };
    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
        if (nested === void 0) nested = true;
        if (tweens === void 0) tweens = true;
        if (timelines === void 0) timelines = true;
        if (ignoreBeforeTime === void 0) ignoreBeforeTime = -$9adc3b62f9b9a789$var$_bigNum;
        var a = [], child = this._first;
        while(child){
            if (child._start >= ignoreBeforeTime) {
                if (child instanceof $9adc3b62f9b9a789$export$208a41d6b4e37b97) tweens && a.push(child);
                else {
                    timelines && a.push(child);
                    nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
                }
            }
            child = child._next;
        }
        return a;
    };
    _proto2.getById = function getById(id) {
        var animations = this.getChildren(1, 1, 1), i = animations.length;
        while(i--){
            if (animations[i].vars.id === id) return animations[i];
        }
    };
    _proto2.remove = function remove(child) {
        if ($9adc3b62f9b9a789$export$f664476fd67145ca(child)) return this.removeLabel(child);
        if ($9adc3b62f9b9a789$var$_isFunction(child)) return this.killTweensOf(child);
        $9adc3b62f9b9a789$export$cd008aa6cd8844e3(this, child);
        if (child === this._recent) this._recent = this._last;
        return $9adc3b62f9b9a789$var$_uncache(this);
    };
    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
        if (!arguments.length) return this._tTime;
        this._forcing = 1;
        if (!this._dp && this._ts) //special case for the global timeline (or any other that has no parent or detached parent).
        this._start = $9adc3b62f9b9a789$var$_roundPrecise($9adc3b62f9b9a789$export$762ed8fbedb691e3.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);
        this._forcing = 0;
        return this;
    };
    _proto2.addLabel = function addLabel(label, position) {
        this.labels[label] = $9adc3b62f9b9a789$var$_parsePosition(this, position);
        return this;
    };
    _proto2.removeLabel = function removeLabel(label) {
        delete this.labels[label];
        return this;
    };
    _proto2.addPause = function addPause(position, callback, params) {
        var t = $9adc3b62f9b9a789$export$208a41d6b4e37b97.delayedCall(0, callback || $9adc3b62f9b9a789$var$_emptyFunc, params);
        t.data = "isPause";
        this._hasPause = 1;
        return $9adc3b62f9b9a789$var$_addToTimeline(this, t, $9adc3b62f9b9a789$var$_parsePosition(this, position));
    };
    _proto2.removePause = function removePause(position) {
        var child = this._first;
        position = $9adc3b62f9b9a789$var$_parsePosition(this, position);
        while(child){
            if (child._start === position && child.data === "isPause") $9adc3b62f9b9a789$var$_removeFromParent(child);
            child = child._next;
        }
    };
    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        var tweens = this.getTweensOf(targets, onlyActive), i = tweens.length;
        while(i--)$9adc3b62f9b9a789$var$_overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
        return this;
    };
    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
        var a = [], parsedTargets = $9adc3b62f9b9a789$export$45b10814cc054894(targets), child = this._first, isGlobalTime = $9adc3b62f9b9a789$var$_isNumber(onlyActive), // a number is interpreted as a global time. If the animation spans
        children;
        while(child){
            if (child instanceof $9adc3b62f9b9a789$export$208a41d6b4e37b97) {
                if ($9adc3b62f9b9a789$var$_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!$9adc3b62f9b9a789$var$_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
                a.push(child);
            } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) a.push.apply(a, children);
            child = child._next;
        }
        return a;
    } // potential future feature - targets() on timelines
    ;
    _proto2.tweenTo = function tweenTo(position, vars) {
        vars = vars || {
        };
        var tl = this, endTime = $9adc3b62f9b9a789$var$_parsePosition(tl, position), _vars = vars, startAt = _vars.startAt, _onStart = _vars.onStart, onStartParams = _vars.onStartParams, immediateRender = _vars.immediateRender, initted, tween = $9adc3b62f9b9a789$export$208a41d6b4e37b97.to(tl, $9adc3b62f9b9a789$export$dc2b19673bb53610({
            ease: vars.ease || "none",
            lazy: false,
            immediateRender: false,
            time: endTime,
            overwrite: "auto",
            duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || $9adc3b62f9b9a789$var$_tinyNum,
            onStart: function onStart() {
                tl.pause();
                if (!initted) {
                    var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
                    tween._dur !== duration && $9adc3b62f9b9a789$var$_setDuration(tween, duration, 0, 1).render(tween._time, true, true);
                    initted = 1;
                }
                _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
            }
        }, vars));
        return immediateRender ? tween.render(0) : tween;
    };
    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
        return this.tweenTo(toPosition, $9adc3b62f9b9a789$export$dc2b19673bb53610({
            startAt: {
                time: $9adc3b62f9b9a789$var$_parsePosition(this, fromPosition)
            }
        }, vars));
    };
    _proto2.recent = function recent() {
        return this._recent;
    };
    _proto2.nextLabel = function nextLabel(afterTime) {
        if (afterTime === void 0) afterTime = this._time;
        return $9adc3b62f9b9a789$var$_getLabelInDirection(this, $9adc3b62f9b9a789$var$_parsePosition(this, afterTime));
    };
    _proto2.previousLabel = function previousLabel(beforeTime) {
        if (beforeTime === void 0) beforeTime = this._time;
        return $9adc3b62f9b9a789$var$_getLabelInDirection(this, $9adc3b62f9b9a789$var$_parsePosition(this, beforeTime), 1);
    };
    _proto2.currentLabel = function currentLabel(value) {
        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + $9adc3b62f9b9a789$var$_tinyNum);
    };
    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
        if (ignoreBeforeTime === void 0) ignoreBeforeTime = 0;
        var child = this._first, labels = this.labels, p;
        while(child){
            if (child._start >= ignoreBeforeTime) {
                child._start += amount;
                child._end += amount;
            }
            child = child._next;
        }
        if (adjustLabels) {
            for(p in labels)if (labels[p] >= ignoreBeforeTime) labels[p] += amount;
        }
        return $9adc3b62f9b9a789$var$_uncache(this);
    };
    _proto2.invalidate = function invalidate() {
        var child = this._first;
        this._lock = 0;
        while(child){
            child.invalidate();
            child = child._next;
        }
        return _Animation.prototype.invalidate.call(this);
    };
    _proto2.clear = function clear(includeLabels) {
        if (includeLabels === void 0) includeLabels = true;
        var child = this._first, next;
        while(child){
            next = child._next;
            this.remove(child);
            child = next;
        }
        this._dp && (this._time = this._tTime = this._pTime = 0);
        includeLabels && (this.labels = {
        });
        return $9adc3b62f9b9a789$var$_uncache(this);
    };
    _proto2.totalDuration = function totalDuration(value) {
        var max = 0, self = this, child = self._last, prevStart = $9adc3b62f9b9a789$var$_bigNum, prev, start, parent;
        if (arguments.length) return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
        if (self._dirty) {
            parent = self.parent;
            while(child){
                prev = child._prev; //record it here in case the tween changes position in the sequence...
                child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.
                start = child._start;
                if (start > prevStart && self._sort && child._ts && !self._lock) {
                    //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                    self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().
                    $9adc3b62f9b9a789$var$_addToTimeline(self, child, start - child._delay, 1)._lock = 0;
                } else prevStart = start;
                if (start < 0 && child._ts) {
                    //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                    max -= start;
                    if (!parent && !self._dp || parent && parent.smoothChildTiming) {
                        self._start += start / self._ts;
                        self._time -= start;
                        self._tTime -= start;
                    }
                    self.shiftChildren(-start, false, -Infinity);
                    prevStart = 0;
                }
                child._end > max && child._ts && (max = child._end);
                child = prev;
            }
            $9adc3b62f9b9a789$var$_setDuration(self, self === $9adc3b62f9b9a789$var$_globalTimeline && self._time > max ? self._time : max, 1, 1);
            self._dirty = 0;
        }
        return self._tDur;
    };
    $9adc3b62f9b9a789$export$e6a97ba2cae5bb94.updateRoot = function updateRoot(time) {
        if ($9adc3b62f9b9a789$var$_globalTimeline._ts) {
            $9adc3b62f9b9a789$var$_lazySafeRender($9adc3b62f9b9a789$var$_globalTimeline, $9adc3b62f9b9a789$var$_parentToChildTotalTime(time, $9adc3b62f9b9a789$var$_globalTimeline));
            $9adc3b62f9b9a789$var$_lastRenderedFrame = $9adc3b62f9b9a789$export$762ed8fbedb691e3.frame;
        }
        if ($9adc3b62f9b9a789$export$762ed8fbedb691e3.frame >= $9adc3b62f9b9a789$var$_nextGCFrame) {
            $9adc3b62f9b9a789$var$_nextGCFrame += $9adc3b62f9b9a789$export$4922bee768729a77.autoSleep || 120;
            var child = $9adc3b62f9b9a789$var$_globalTimeline._first;
            if (!child || !child._ts) {
                if ($9adc3b62f9b9a789$export$4922bee768729a77.autoSleep && $9adc3b62f9b9a789$export$762ed8fbedb691e3._listeners.length < 2) {
                    while(child && !child._ts)child = child._next;
                    child || $9adc3b62f9b9a789$export$762ed8fbedb691e3.sleep();
                }
            }
        }
    };
    return $9adc3b62f9b9a789$export$e6a97ba2cae5bb94;
}($9adc3b62f9b9a789$export$c35d437ae5945fcd);
$9adc3b62f9b9a789$export$dc2b19673bb53610($9adc3b62f9b9a789$export$e6a97ba2cae5bb94.prototype, {
    _lock: 0,
    _hasPause: 0,
    _forcing: 0
});
var $9adc3b62f9b9a789$var$_addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
    //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    var pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(this._pt, target, prop, 0, 1, $9adc3b62f9b9a789$export$c5bc8e04394ecb2, null, setter), index = 0, matchIndex = 0, result, startNums, color, endNum, chunk, startNum, hasRandom, a;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings
    end += "";
    if (hasRandom = ~end.indexOf("random(")) end = $9adc3b62f9b9a789$export$d5962a97e3cde94d(end);
    if (stringFilter) {
        a = [
            start,
            end
        ];
        stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
        start = a[0];
        end = a[1];
    }
    startNums = start.match($9adc3b62f9b9a789$var$_complexStringNumExp) || [];
    while(result = $9adc3b62f9b9a789$var$_complexStringNumExp.exec(end)){
        endNum = result[0];
        chunk = end.substring(index, result.index);
        if (color) color = (color + 1) % 5;
        else if (chunk.substr(-5) === "rgba(") color = 1;
        if (endNum !== startNums[matchIndex++]) {
            startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
            pt._pt = {
                _next: pt._pt,
                p: chunk || matchIndex === 1 ? chunk : ",",
                //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                s: startNum,
                c: endNum.charAt(1) === "=" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === "-" ? -1 : 1) : parseFloat(endNum) - startNum,
                m: color && color < 4 ? Math.round : 0
            };
            index = $9adc3b62f9b9a789$var$_complexStringNumExp.lastIndex;
        }
    }
    pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    pt.fp = funcParam;
    if ($9adc3b62f9b9a789$export$5a680e28b0b61bc.test(end) || hasRandom) pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    return pt;
}, $9adc3b62f9b9a789$var$_addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {
    $9adc3b62f9b9a789$var$_isFunction(end) && (end = end(index || 0, target, targets));
    var currentValue = target[prop], parsedStart = start !== "get" ? start : !$9adc3b62f9b9a789$var$_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !$9adc3b62f9b9a789$var$_isFunction(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](), setter = !$9adc3b62f9b9a789$var$_isFunction(currentValue) ? $9adc3b62f9b9a789$var$_setterPlain : funcParam ? $9adc3b62f9b9a789$var$_setterFuncWithParam : $9adc3b62f9b9a789$var$_setterFunc, pt;
    if ($9adc3b62f9b9a789$export$f664476fd67145ca(end)) {
        if (~end.indexOf("random(")) end = $9adc3b62f9b9a789$export$d5962a97e3cde94d(end);
        if (end.charAt(1) === "=") {
            pt = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === "-" ? -1 : 1) + ($9adc3b62f9b9a789$export$65f2564e9a9b9222(parsedStart) || 0);
            if (pt || pt === 0) // to avoid isNaN, like if someone passes in a value like "!= whatever"
            end = pt;
        }
    }
    if (parsedStart !== end) {
        if (!isNaN(parsedStart * end) && end !== "") {
            // fun fact: any number multiplied by "" is evaluated as the number 0!
            pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? $9adc3b62f9b9a789$var$_renderBoolean : $9adc3b62f9b9a789$var$_renderPlain, 0, setter);
            funcParam && (pt.fp = funcParam);
            modifier && pt.modifier(modifier, this, target);
            return this._pt = pt;
        }
        !currentValue && !(prop in target) && $9adc3b62f9b9a789$export$7fb54635790b59a5(prop, end);
        return $9adc3b62f9b9a789$var$_addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || $9adc3b62f9b9a789$export$4922bee768729a77.stringFilter, funcParam);
    }
}, //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
$9adc3b62f9b9a789$var$_processVars = function _processVars(vars, index, target, targets, tween) {
    $9adc3b62f9b9a789$var$_isFunction(vars) && (vars = $9adc3b62f9b9a789$var$_parseFuncOrString(vars, tween, index, target, targets));
    if (!$9adc3b62f9b9a789$var$_isObject(vars) || vars.style && vars.nodeType || $9adc3b62f9b9a789$var$_isArray(vars) || $9adc3b62f9b9a789$var$_isTypedArray(vars)) return $9adc3b62f9b9a789$export$f664476fd67145ca(vars) ? $9adc3b62f9b9a789$var$_parseFuncOrString(vars, tween, index, target, targets) : vars;
    var copy = {
    }, p;
    for(p in vars)copy[p] = $9adc3b62f9b9a789$var$_parseFuncOrString(vars[p], tween, index, target, targets);
    return copy;
}, $9adc3b62f9b9a789$export$5c457b74208010cf = function $9adc3b62f9b9a789$export$5c457b74208010cf(property, vars, tween, index, target, targets) {
    var plugin, pt, ptLookup, i;
    if ($9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property] && (plugin = new $9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property]()).init(target, plugin.rawVars ? vars[property] : $9adc3b62f9b9a789$var$_processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
        tween._pt = pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);
        if (tween !== $9adc3b62f9b9a789$var$_quickTween) {
            ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.
            i = plugin._props.length;
            while(i--)ptLookup[plugin._props[i]] = pt;
        }
    }
    return plugin;
}, $9adc3b62f9b9a789$var$_overwritingTween, //store a reference temporarily so we can avoid overwriting itself.
$9adc3b62f9b9a789$var$_initTween = function _initTween(tween, time) {
    var vars = tween.vars, ease = vars.ease, startAt = vars.startAt, immediateRender = vars.immediateRender, lazy = vars.lazy, onUpdate = vars.onUpdate, onUpdateParams = vars.onUpdateParams, callbackScope = vars.callbackScope, runBackwards = vars.runBackwards, yoyoEase = vars.yoyoEase, keyframes = vars.keyframes, autoRevert = vars.autoRevert, dur = tween._dur, prevStartAt = tween._startAt, targets = tween._targets, parent = tween.parent, fullTargets = parent && parent.data === "nested" ? parent.parent._targets : targets, autoOverwrite = tween._overwrite === "auto" && !$9adc3b62f9b9a789$var$_suppressOverwrites, tl = tween.timeline, cleanVars, i, p, pt, target, hasPriority, gsData, harness, plugin, ptLookup, index, harnessVars, overwritten;
    tl && (!keyframes || !ease) && (ease = "none");
    tween._ease = $9adc3b62f9b9a789$var$_parseEase(ease, $9adc3b62f9b9a789$var$_defaults.ease);
    tween._yEase = yoyoEase ? $9adc3b62f9b9a789$var$_invertEase($9adc3b62f9b9a789$var$_parseEase(yoyoEase === true ? ease : yoyoEase, $9adc3b62f9b9a789$var$_defaults.ease)) : 0;
    if (yoyoEase && tween._yoyo && !tween._repeat) {
        //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
        yoyoEase = tween._yEase;
        tween._yEase = tween._ease;
        tween._ease = yoyoEase;
    }
    tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.
    if (!tl || keyframes && !vars.stagger) {
        //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
        harness = targets[0] ? $9adc3b62f9b9a789$export$8b9be379d2de2a39(targets[0]).harness : 0;
        harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.
        cleanVars = $9adc3b62f9b9a789$var$_copyExcluding(vars, $9adc3b62f9b9a789$var$_reservedProps);
        prevStartAt && $9adc3b62f9b9a789$var$_removeFromParent(prevStartAt.render(-1, true));
        if (startAt) {
            $9adc3b62f9b9a789$var$_removeFromParent(tween._startAt = $9adc3b62f9b9a789$export$208a41d6b4e37b97.set(targets, $9adc3b62f9b9a789$export$dc2b19673bb53610({
                data: "isStart",
                overwrite: false,
                parent: parent,
                immediateRender: true,
                lazy: $9adc3b62f9b9a789$var$_isNotFalse(lazy),
                startAt: null,
                delay: 0,
                onUpdate: onUpdate,
                onUpdateParams: onUpdateParams,
                callbackScope: callbackScope,
                stagger: 0
            }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);
            time < 0 && !immediateRender && !autoRevert && tween._startAt.render(-1, true); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.
            if (immediateRender) {
                time > 0 && !autoRevert && (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.
                if (dur && time <= 0) {
                    time && (tween._zTime = time);
                    return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                } // if (time > 0) {
            // 	autoRevert || (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.
            // } else if (dur && !(time < 0 && prevStartAt)) {
            // 	time && (tween._zTime = time);
            // 	return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
            // }
            } else if (autoRevert === false) tween._startAt = 0;
        } else if (runBackwards && dur) {
            //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
            if (prevStartAt) !autoRevert && (tween._startAt = 0);
            else {
                time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
                p = $9adc3b62f9b9a789$export$dc2b19673bb53610({
                    overwrite: false,
                    data: "isFromStart",
                    //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                    lazy: immediateRender && $9adc3b62f9b9a789$var$_isNotFalse(lazy),
                    immediateRender: immediateRender,
                    //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                    stagger: 0,
                    parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y:gsap.utils.wrap([-100,100])})
                }, cleanVars);
                harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})
                $9adc3b62f9b9a789$var$_removeFromParent(tween._startAt = $9adc3b62f9b9a789$export$208a41d6b4e37b97.set(targets, p));
                time < 0 && tween._startAt.render(-1, true); // rare edge case, like if a render is forced in the negative direction of a non-initted from() tween.
                tween._zTime = time;
                if (!immediateRender) _initTween(tween._startAt, $9adc3b62f9b9a789$var$_tinyNum); //ensures that the initial values are recorded
                else if (!time) return;
            }
        }
        tween._pt = 0;
        lazy = dur && $9adc3b62f9b9a789$var$_isNotFalse(lazy) || lazy && !dur;
        for(i = 0; i < targets.length; i++){
            target = targets[i];
            gsData = target._gsap || $9adc3b62f9b9a789$var$_harness(targets)[i]._gsap;
            tween._ptLookup[i] = ptLookup = {
            };
            $9adc3b62f9b9a789$var$_lazyLookup[gsData.id] && $9adc3b62f9b9a789$var$_lazyTweens.length && $9adc3b62f9b9a789$var$_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
            index = fullTargets === targets ? i : fullTargets.indexOf(target);
            if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
                tween._pt = pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);
                plugin._props.forEach(function(name) {
                    ptLookup[name] = pt;
                });
                plugin.priority && (hasPriority = 1);
            }
            if (!harness || harnessVars) {
                for(p in cleanVars)if ($9adc3b62f9b9a789$export$d305d8ec5d7c26b8[p] && (plugin = $9adc3b62f9b9a789$export$5c457b74208010cf(p, cleanVars, tween, index, target, fullTargets))) plugin.priority && (hasPriority = 1);
                else ptLookup[p] = pt = $9adc3b62f9b9a789$var$_addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
            }
            tween._op && tween._op[i] && tween.kill(target, tween._op[i]);
            if (autoOverwrite && tween._pt) {
                $9adc3b62f9b9a789$var$_overwritingTween = tween;
                $9adc3b62f9b9a789$var$_globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!
                overwritten = !tween.parent;
                $9adc3b62f9b9a789$var$_overwritingTween = 0;
            }
            tween._pt && lazy && ($9adc3b62f9b9a789$var$_lazyLookup[gsData.id] = 1);
        }
        hasPriority && $9adc3b62f9b9a789$export$eed5824f53346d57(tween);
        tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
    }
    tween._onUpdate = onUpdate;
    tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.
    keyframes && time <= 0 && tl.render($9adc3b62f9b9a789$var$_bigNum, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
}, $9adc3b62f9b9a789$var$_addAliasesToVars = function _addAliasesToVars(targets, vars) {
    var harness = targets[0] ? $9adc3b62f9b9a789$export$8b9be379d2de2a39(targets[0]).harness : 0, propertyAliases = harness && harness.aliases, copy, p, i, aliases;
    if (!propertyAliases) return vars;
    copy = $9adc3b62f9b9a789$var$_merge({
    }, vars);
    for(p in propertyAliases)if (p in copy) {
        aliases = propertyAliases[p].split(",");
        i = aliases.length;
        while(i--)copy[aliases[i]] = copy[p];
    }
    return copy;
}, // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
$9adc3b62f9b9a789$var$_parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
    var ease = obj.ease || easeEach || "power1.inOut", p, a;
    if ($9adc3b62f9b9a789$var$_isArray(obj)) {
        a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease
        obj.forEach(function(value, i) {
            return a.push({
                t: i / (obj.length - 1) * 100,
                v: value,
                e: ease
            });
        });
    } else for(p in obj){
        a = allProps[p] || (allProps[p] = []);
        p === "ease" || a.push({
            t: parseFloat(prop),
            v: obj[p],
            e: ease
        });
    }
}, $9adc3b62f9b9a789$var$_parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
    return $9adc3b62f9b9a789$var$_isFunction(value) ? value.call(tween, i, target, targets) : $9adc3b62f9b9a789$export$f664476fd67145ca(value) && ~value.indexOf("random(") ? $9adc3b62f9b9a789$export$d5962a97e3cde94d(value) : value;
}, $9adc3b62f9b9a789$var$_staggerTweenProps = $9adc3b62f9b9a789$var$_callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase", $9adc3b62f9b9a789$var$_staggerPropsToSkip = {
};
$9adc3b62f9b9a789$export$f9000b814859f126($9adc3b62f9b9a789$var$_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function(name) {
    return $9adc3b62f9b9a789$var$_staggerPropsToSkip[name] = 1;
});
var $9adc3b62f9b9a789$export$208a41d6b4e37b97 = /*#__PURE__*/ function(_Animation2) {
    $9adc3b62f9b9a789$var$_inheritsLoose($9adc3b62f9b9a789$export$208a41d6b4e37b97, _Animation2);
    function $9adc3b62f9b9a789$export$208a41d6b4e37b97(targets, vars, position, skipInherit) {
        var _this3;
        if (typeof vars === "number") {
            position.duration = vars;
            vars = position;
            position = null;
        }
        _this3 = _Animation2.call(this, skipInherit ? vars : $9adc3b62f9b9a789$var$_inheritDefaults(vars)) || this;
        var _this3$vars = _this3.vars, duration = _this3$vars.duration, delay = _this3$vars.delay, immediateRender = _this3$vars.immediateRender, stagger = _this3$vars.stagger, overwrite = _this3$vars.overwrite, keyframes = _this3$vars.keyframes, defaults = _this3$vars.defaults, scrollTrigger = _this3$vars.scrollTrigger, yoyoEase = _this3$vars.yoyoEase, parent = vars.parent || $9adc3b62f9b9a789$var$_globalTimeline, parsedTargets = ($9adc3b62f9b9a789$var$_isArray(targets) || $9adc3b62f9b9a789$var$_isTypedArray(targets) ? $9adc3b62f9b9a789$var$_isNumber(targets[0]) : "length" in vars) ? [
            targets
        ] : $9adc3b62f9b9a789$export$45b10814cc054894(targets), tl, i, copy, l, p, curTarget, staggerFunc, staggerVarsToMerge;
        _this3._targets = parsedTargets.length ? $9adc3b62f9b9a789$var$_harness(parsedTargets) : $9adc3b62f9b9a789$var$_warn("GSAP target " + targets + " not found. https://greensock.com", !$9adc3b62f9b9a789$export$4922bee768729a77.nullTargetWarn) || [];
        _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property
        _this3._overwrite = overwrite;
        if (keyframes || stagger || $9adc3b62f9b9a789$var$_isFuncOrString(duration) || $9adc3b62f9b9a789$var$_isFuncOrString(delay)) {
            vars = _this3.vars;
            tl = _this3.timeline = new $9adc3b62f9b9a789$export$e6a97ba2cae5bb94({
                data: "nested",
                defaults: defaults || {
                }
            });
            tl.kill();
            tl.parent = tl._dp = $9adc3b62f9b9a789$var$_assertThisInitialized(_this3);
            tl._start = 0;
            if (stagger || $9adc3b62f9b9a789$var$_isFuncOrString(duration) || $9adc3b62f9b9a789$var$_isFuncOrString(delay)) {
                l = parsedTargets.length;
                staggerFunc = stagger && $9adc3b62f9b9a789$export$f02a9ddbe4480f19(stagger);
                if ($9adc3b62f9b9a789$var$_isObject(stagger)) {
                    //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
                    for(p in stagger)if (~$9adc3b62f9b9a789$var$_staggerTweenProps.indexOf(p)) {
                        staggerVarsToMerge || (staggerVarsToMerge = {
                        });
                        staggerVarsToMerge[p] = stagger[p];
                    }
                }
                for(i = 0; i < l; i++){
                    copy = $9adc3b62f9b9a789$var$_copyExcluding(vars, $9adc3b62f9b9a789$var$_staggerPropsToSkip);
                    copy.stagger = 0;
                    yoyoEase && (copy.yoyoEase = yoyoEase);
                    staggerVarsToMerge && $9adc3b62f9b9a789$var$_merge(copy, staggerVarsToMerge);
                    curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.
                    copy.duration = +$9adc3b62f9b9a789$var$_parseFuncOrString(duration, $9adc3b62f9b9a789$var$_assertThisInitialized(_this3), i, curTarget, parsedTargets);
                    copy.delay = (+$9adc3b62f9b9a789$var$_parseFuncOrString(delay, $9adc3b62f9b9a789$var$_assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;
                    if (!stagger && l === 1 && copy.delay) {
                        // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
                        _this3._delay = delay = copy.delay;
                        _this3._start += delay;
                        copy.delay = 0;
                    }
                    tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
                    tl._ease = $9adc3b62f9b9a789$var$_easeMap.none;
                }
                tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
            } else if (keyframes) {
                $9adc3b62f9b9a789$var$_inheritDefaults($9adc3b62f9b9a789$export$dc2b19673bb53610(tl.vars.defaults, {
                    ease: "none"
                }));
                tl._ease = $9adc3b62f9b9a789$var$_parseEase(keyframes.ease || vars.ease || "none");
                var time = 0, a1, kf, v;
                if ($9adc3b62f9b9a789$var$_isArray(keyframes)) keyframes.forEach(function(frame) {
                    return tl.to(parsedTargets, frame, ">");
                });
                else {
                    copy = {
                    };
                    for(p in keyframes)p === "ease" || p === "easeEach" || $9adc3b62f9b9a789$var$_parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
                    for(p in copy){
                        a1 = copy[p].sort(function(a, b) {
                            return a.t - b.t;
                        });
                        time = 0;
                        for(i = 0; i < a1.length; i++){
                            kf = a1[i];
                            v = {
                                ease: kf.e,
                                duration: (kf.t - (i ? a1[i - 1].t : 0)) / 100 * duration
                            };
                            v[p] = kf.v;
                            tl.to(parsedTargets, v, time);
                            time += v.duration;
                        }
                    }
                    tl.duration() < duration && tl.to({
                    }, {
                        duration: duration - tl.duration()
                    }); // in case keyframes didn't go to 100%
                }
            }
            duration || _this3.duration(duration = tl.duration());
        } else _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
        if (overwrite === true && !$9adc3b62f9b9a789$var$_suppressOverwrites) {
            $9adc3b62f9b9a789$var$_overwritingTween = $9adc3b62f9b9a789$var$_assertThisInitialized(_this3);
            $9adc3b62f9b9a789$var$_globalTimeline.killTweensOf(parsedTargets);
            $9adc3b62f9b9a789$var$_overwritingTween = 0;
        }
        $9adc3b62f9b9a789$var$_addToTimeline(parent, $9adc3b62f9b9a789$var$_assertThisInitialized(_this3), position);
        vars.reversed && _this3.reverse();
        vars.paused && _this3.paused(true);
        if (immediateRender || !duration && !keyframes && _this3._start === $9adc3b62f9b9a789$var$_roundPrecise(parent._time) && $9adc3b62f9b9a789$var$_isNotFalse(immediateRender) && $9adc3b62f9b9a789$var$_hasNoPausedAncestors($9adc3b62f9b9a789$var$_assertThisInitialized(_this3)) && parent.data !== "nested") {
            _this3._tTime = -$9adc3b62f9b9a789$var$_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
            _this3.render(Math.max(0, -delay)); //in case delay is negative
        }
        scrollTrigger && $9adc3b62f9b9a789$var$_scrollTrigger($9adc3b62f9b9a789$var$_assertThisInitialized(_this3), scrollTrigger);
        return _this3;
    }
    var _proto3 = $9adc3b62f9b9a789$export$208a41d6b4e37b97.prototype;
    _proto3.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time, tDur = this._tDur, dur = this._dur, tTime = totalTime > tDur - $9adc3b62f9b9a789$var$_tinyNum && totalTime >= 0 ? tDur : totalTime < $9adc3b62f9b9a789$var$_tinyNum ? 0 : totalTime, time, pt, iteration, cycleDuration, prevIteration, isYoyo, ratio, timeline, yoyoEase;
        if (!dur) $9adc3b62f9b9a789$var$_renderZeroDurationTween(this, totalTime, suppressEvents, force);
        else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {
            //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
            time = tTime;
            timeline = this.timeline;
            if (this._repeat) {
                //adjust the time for repeats and yoyos
                cycleDuration = dur + this._rDelay;
                if (this._repeat < -1 && totalTime < 0) return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
                time = $9adc3b62f9b9a789$var$_roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
                if (tTime === tDur) {
                    // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
                    iteration = this._repeat;
                    time = dur;
                } else {
                    iteration = ~~(tTime / cycleDuration);
                    if (iteration && iteration === tTime / cycleDuration) {
                        time = dur;
                        iteration--;
                    }
                    time > dur && (time = dur);
                }
                isYoyo = this._yoyo && iteration & 1;
                if (isYoyo) {
                    yoyoEase = this._yEase;
                    time = dur - time;
                }
                prevIteration = $9adc3b62f9b9a789$var$_animationCycle(this._tTime, cycleDuration);
                if (time === prevTime && !force && this._initted) //could be during the repeatDelay part. No need to render and fire callbacks.
                return this;
                if (iteration !== prevIteration) {
                    timeline && this._yEase && $9adc3b62f9b9a789$var$_propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality
                    if (this.vars.repeatRefresh && !isYoyo && !this._lock) {
                        this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.
                        this.render($9adc3b62f9b9a789$var$_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
                    }
                }
            }
            if (!this._initted) {
                if ($9adc3b62f9b9a789$var$_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {
                    this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.
                    return this;
                }
                if (dur !== this._dur) // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
                return this.render(totalTime, suppressEvents, force);
            }
            this._tTime = tTime;
            this._time = time;
            if (!this._act && this._ts) {
                this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.
                this._lazy = 0;
            }
            this.ratio = ratio = (yoyoEase || this._ease)(time / dur);
            if (this._from) this.ratio = ratio = 1 - ratio;
            if (time && !prevTime && !suppressEvents) {
                $9adc3b62f9b9a789$var$_callback(this, "onStart");
                if (this._tTime !== tTime) // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
                return this;
            }
            pt = this._pt;
            while(pt){
                pt.r(ratio, pt.d);
                pt = pt._next;
            }
            timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -$9adc3b62f9b9a789$var$_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);
            if (this._onUpdate && !suppressEvents) {
                totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                $9adc3b62f9b9a789$var$_callback(this, "onUpdate");
            }
            this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && $9adc3b62f9b9a789$var$_callback(this, "onRepeat");
            if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
                totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);
                (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && $9adc3b62f9b9a789$var$_removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.
                if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {
                    // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
                    $9adc3b62f9b9a789$var$_callback(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);
                    this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
                }
            }
        }
        return this;
    };
    _proto3.targets = function targets() {
        return this._targets;
    };
    _proto3.invalidate = function invalidate() {
        this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;
        this._ptLookup = [];
        this.timeline && this.timeline.invalidate();
        return _Animation2.prototype.invalidate.call(this);
    };
    _proto3.kill = function kill(targets, vars) {
        if (vars === void 0) vars = "all";
        if (!targets && (!vars || vars === "all")) {
            this._lazy = this._pt = 0;
            return this.parent ? $9adc3b62f9b9a789$var$_interrupt(this) : this;
        }
        if (this.timeline) {
            var tDur = this.timeline.totalDuration();
            this.timeline.killTweensOf(targets, vars, $9adc3b62f9b9a789$var$_overwritingTween && $9adc3b62f9b9a789$var$_overwritingTween.vars.overwrite !== true)._first || $9adc3b62f9b9a789$var$_interrupt(this); // if nothing is left tweening, interrupt.
            this.parent && tDur !== this.timeline.totalDuration() && $9adc3b62f9b9a789$var$_setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.
            return this;
        }
        var parsedTargets = this._targets, killingTargets = targets ? $9adc3b62f9b9a789$export$45b10814cc054894(targets) : parsedTargets, propTweenLookup = this._ptLookup, firstPT = this._pt, overwrittenProps, curLookup, curOverwriteProps, props, p, pt, i;
        if ((!vars || vars === "all") && $9adc3b62f9b9a789$var$_arraysMatch(parsedTargets, killingTargets)) {
            vars === "all" && (this._pt = 0);
            return $9adc3b62f9b9a789$var$_interrupt(this);
        }
        overwrittenProps = this._op = this._op || [];
        if (vars !== "all") {
            //so people can pass in a comma-delimited list of property names
            if ($9adc3b62f9b9a789$export$f664476fd67145ca(vars)) {
                p = {
                };
                $9adc3b62f9b9a789$export$f9000b814859f126(vars, function(name) {
                    return p[name] = 1;
                });
                vars = p;
            }
            vars = $9adc3b62f9b9a789$var$_addAliasesToVars(parsedTargets, vars);
        }
        i = parsedTargets.length;
        while(i--)if (~killingTargets.indexOf(parsedTargets[i])) {
            curLookup = propTweenLookup[i];
            if (vars === "all") {
                overwrittenProps[i] = vars;
                props = curLookup;
                curOverwriteProps = {
                };
            } else {
                curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {
                };
                props = vars;
            }
            for(p in props){
                pt = curLookup && curLookup[p];
                if (pt) {
                    if (!("kill" in pt.d) || pt.d.kill(p) === true) $9adc3b62f9b9a789$export$cd008aa6cd8844e3(this, pt, "_pt");
                    delete curLookup[p];
                }
                if (curOverwriteProps !== "all") curOverwriteProps[p] = 1;
            }
        }
        this._initted && !this._pt && firstPT && $9adc3b62f9b9a789$var$_interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
        return this;
    };
    $9adc3b62f9b9a789$export$208a41d6b4e37b97.to = function to(targets, vars) {
        return new $9adc3b62f9b9a789$export$208a41d6b4e37b97(targets, vars, arguments[2]);
    };
    $9adc3b62f9b9a789$export$208a41d6b4e37b97.from = function from(targets, vars) {
        return $9adc3b62f9b9a789$var$_createTweenType(1, arguments);
    };
    $9adc3b62f9b9a789$export$208a41d6b4e37b97.delayedCall = function delayedCall(delay, callback, params, scope) {
        return new $9adc3b62f9b9a789$export$208a41d6b4e37b97(callback, 0, {
            immediateRender: false,
            lazy: false,
            overwrite: false,
            delay: delay,
            onComplete: callback,
            onReverseComplete: callback,
            onCompleteParams: params,
            onReverseCompleteParams: params,
            callbackScope: scope
        });
    };
    $9adc3b62f9b9a789$export$208a41d6b4e37b97.fromTo = function fromTo(targets, fromVars, toVars) {
        return $9adc3b62f9b9a789$var$_createTweenType(2, arguments);
    };
    $9adc3b62f9b9a789$export$208a41d6b4e37b97.set = function set(targets, vars) {
        vars.duration = 0;
        vars.repeatDelay || (vars.repeat = 0);
        return new $9adc3b62f9b9a789$export$208a41d6b4e37b97(targets, vars);
    };
    $9adc3b62f9b9a789$export$208a41d6b4e37b97.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        return $9adc3b62f9b9a789$var$_globalTimeline.killTweensOf(targets, props, onlyActive);
    };
    return $9adc3b62f9b9a789$export$208a41d6b4e37b97;
}($9adc3b62f9b9a789$export$c35d437ae5945fcd);
$9adc3b62f9b9a789$export$dc2b19673bb53610($9adc3b62f9b9a789$export$208a41d6b4e37b97.prototype, {
    _targets: [],
    _lazy: 0,
    _startAt: 0,
    _op: 0,
    _onInit: 0
}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
// _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
// 	Tween.prototype[name] = function() {
// 		let tl = new Timeline();
// 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
// 	}
// });
//for backward compatibility. Leverage the timeline calls.
$9adc3b62f9b9a789$export$f9000b814859f126("staggerTo,staggerFrom,staggerFromTo", function(name) {
    $9adc3b62f9b9a789$export$208a41d6b4e37b97[name] = function() {
        var tl = new $9adc3b62f9b9a789$export$e6a97ba2cae5bb94(), params = $9adc3b62f9b9a789$var$_slice.call(arguments, 0);
        params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
        return tl[name].apply(tl, params);
    };
});
/*
 * --------------------------------------------------------------------------------------
 * PROPTWEEN
 * --------------------------------------------------------------------------------------
 */ var $9adc3b62f9b9a789$var$_setterPlain = function _setterPlain(target, property, value) {
    return target[property] = value;
}, $9adc3b62f9b9a789$var$_setterFunc = function _setterFunc(target, property, value) {
    return target[property](value);
}, $9adc3b62f9b9a789$var$_setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
    return target[property](data.fp, value);
}, $9adc3b62f9b9a789$var$_setterAttribute = function _setterAttribute(target, property, value) {
    return target.setAttribute(property, value);
}, $9adc3b62f9b9a789$export$d60fbc1e0278aaf0 = function $9adc3b62f9b9a789$export$d60fbc1e0278aaf0(target, property) {
    return $9adc3b62f9b9a789$var$_isFunction(target[property]) ? $9adc3b62f9b9a789$var$_setterFunc : $9adc3b62f9b9a789$export$a8178c063a9fd3a1(target[property]) && target.setAttribute ? $9adc3b62f9b9a789$var$_setterAttribute : $9adc3b62f9b9a789$var$_setterPlain;
}, $9adc3b62f9b9a789$var$_renderPlain = function _renderPlain(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
}, $9adc3b62f9b9a789$var$_renderBoolean = function _renderBoolean(ratio, data) {
    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
}, $9adc3b62f9b9a789$export$c5bc8e04394ecb2 = function $9adc3b62f9b9a789$export$c5bc8e04394ecb2(ratio, data) {
    var pt = data._pt, s = "";
    if (!ratio && data.b) //b = beginning string
    s = data.b;
    else if (ratio === 1 && data.e) //e = ending string
    s = data.e;
    else {
        while(pt){
            s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.
            pt = pt._next;
        }
        s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
    }
    data.set(data.t, data.p, s, data);
}, $9adc3b62f9b9a789$var$_renderPropTweens = function _renderPropTweens(ratio, data) {
    var pt = data._pt;
    while(pt){
        pt.r(ratio, pt.d);
        pt = pt._next;
    }
}, $9adc3b62f9b9a789$var$_addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
    var pt = this._pt, next;
    while(pt){
        next = pt._next;
        pt.p === property && pt.modifier(modifier, tween, target);
        pt = next;
    }
}, $9adc3b62f9b9a789$var$_killPropTweensOf = function _killPropTweensOf(property) {
    var pt = this._pt, hasNonDependentRemaining, next;
    while(pt){
        next = pt._next;
        if (pt.p === property && !pt.op || pt.op === property) $9adc3b62f9b9a789$export$cd008aa6cd8844e3(this, pt, "_pt");
        else if (!pt.dep) hasNonDependentRemaining = 1;
        pt = next;
    }
    return !hasNonDependentRemaining;
}, $9adc3b62f9b9a789$var$_setterWithModifier = function _setterWithModifier(target, property, value, data) {
    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
}, $9adc3b62f9b9a789$export$eed5824f53346d57 = function $9adc3b62f9b9a789$export$eed5824f53346d57(parent) {
    var pt = parent._pt, next, pt2, first, last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)
    while(pt){
        next = pt._next;
        pt2 = first;
        while(pt2 && pt2.pr > pt.pr)pt2 = pt2._next;
        if (pt._prev = pt2 ? pt2._prev : last) pt._prev._next = pt;
        else first = pt;
        if (pt._next = pt2) pt2._prev = pt;
        else last = pt;
        pt = next;
    }
    parent._pt = first;
}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)
var $9adc3b62f9b9a789$export$3a67f7f44b1e838a = /*#__PURE__*/ function() {
    function $9adc3b62f9b9a789$export$3a67f7f44b1e838a(next, target, prop, start, change, renderer, data, setter, priority) {
        this.t = target;
        this.s = start;
        this.c = change;
        this.p = prop;
        this.r = renderer || $9adc3b62f9b9a789$var$_renderPlain;
        this.d = data || this;
        this.set = setter || $9adc3b62f9b9a789$var$_setterPlain;
        this.pr = priority || 0;
        this._next = next;
        if (next) next._prev = this;
    }
    var _proto4 = $9adc3b62f9b9a789$export$3a67f7f44b1e838a.prototype;
    _proto4.modifier = function modifier(func, tween, target) {
        this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)
        this.set = $9adc3b62f9b9a789$var$_setterWithModifier;
        this.m = func;
        this.mt = target; //modifier target
        this.tween = tween;
    };
    return $9adc3b62f9b9a789$export$3a67f7f44b1e838a;
}(); //Initialization tasks
$9adc3b62f9b9a789$export$f9000b814859f126($9adc3b62f9b9a789$var$_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function(name) {
    return $9adc3b62f9b9a789$var$_reservedProps[name] = 1;
});
$9adc3b62f9b9a789$var$_globals.TweenMax = $9adc3b62f9b9a789$var$_globals.TweenLite = $9adc3b62f9b9a789$export$208a41d6b4e37b97;
$9adc3b62f9b9a789$var$_globals.TimelineLite = $9adc3b62f9b9a789$var$_globals.TimelineMax = $9adc3b62f9b9a789$export$e6a97ba2cae5bb94;
$9adc3b62f9b9a789$var$_globalTimeline = new $9adc3b62f9b9a789$export$e6a97ba2cae5bb94({
    sortChildren: false,
    defaults: $9adc3b62f9b9a789$var$_defaults,
    autoRemoveChildren: true,
    id: "root",
    smoothChildTiming: true
});
$9adc3b62f9b9a789$export$4922bee768729a77.stringFilter = $9adc3b62f9b9a789$export$7eb2e5eb5eeb96a4;
/*
 * --------------------------------------------------------------------------------------
 * GSAP
 * --------------------------------------------------------------------------------------
 */ var $9adc3b62f9b9a789$var$_gsap = {
    registerPlugin: function registerPlugin() {
        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
        args.forEach(function(config) {
            return $9adc3b62f9b9a789$var$_createPlugin(config);
        });
    },
    timeline: function timeline(vars) {
        return new $9adc3b62f9b9a789$export$e6a97ba2cae5bb94(vars);
    },
    getTweensOf: function getTweensOf(targets, onlyActive) {
        return $9adc3b62f9b9a789$var$_globalTimeline.getTweensOf(targets, onlyActive);
    },
    getProperty: function getProperty(target, property1, unit1, uncache1) {
        $9adc3b62f9b9a789$export$f664476fd67145ca(target) && (target = $9adc3b62f9b9a789$export$45b10814cc054894(target)[0]); //in case selector text or an array is passed in
        var getter = $9adc3b62f9b9a789$export$8b9be379d2de2a39(target || {
        }).get, format = unit1 ? $9adc3b62f9b9a789$var$_passThrough : $9adc3b62f9b9a789$var$_numericIfPossible;
        unit1 === "native" && (unit1 = "");
        return !target ? target : !property1 ? function(property, unit, uncache) {
            return format(($9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property] && $9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property].get || getter)(target, property, unit, uncache));
        } : format(($9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property1] && $9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property1].get || getter)(target, property1, unit1, uncache1));
    },
    quickSetter: function quickSetter(target, property, unit) {
        target = $9adc3b62f9b9a789$export$45b10814cc054894(target);
        if (target.length > 1) {
            var setters = target.map(function(t) {
                return $9adc3b62f9b9a789$export$99ee26438460406a.quickSetter(t, property, unit);
            }), l = setters.length;
            return function(value) {
                var i = l;
                while(i--)setters[i](value);
            };
        }
        target = target[0] || {
        };
        var Plugin = $9adc3b62f9b9a789$export$d305d8ec5d7c26b8[property], cache = $9adc3b62f9b9a789$export$8b9be379d2de2a39(target), p2 = cache.harness && (cache.harness.aliases || {
        })[property] || property, // in case it's an alias, like "rotate" for "rotation".
        setter = Plugin ? function(value) {
            var p = new Plugin();
            $9adc3b62f9b9a789$var$_quickTween._pt = 0;
            p.init(target, unit ? value + unit : value, $9adc3b62f9b9a789$var$_quickTween, 0, [
                target
            ]);
            p.render(1, p);
            $9adc3b62f9b9a789$var$_quickTween._pt && $9adc3b62f9b9a789$var$_renderPropTweens(1, $9adc3b62f9b9a789$var$_quickTween);
        } : cache.set(target, p2);
        return Plugin ? setter : function(value) {
            return setter(target, p2, unit ? value + unit : value, cache, 1);
        };
    },
    isTweening: function isTweening(targets) {
        return $9adc3b62f9b9a789$var$_globalTimeline.getTweensOf(targets, true).length > 0;
    },
    defaults: function defaults(value) {
        value && value.ease && (value.ease = $9adc3b62f9b9a789$var$_parseEase(value.ease, $9adc3b62f9b9a789$var$_defaults.ease));
        return $9adc3b62f9b9a789$var$_mergeDeep($9adc3b62f9b9a789$var$_defaults, value || {
        });
    },
    config: function config(value) {
        return $9adc3b62f9b9a789$var$_mergeDeep($9adc3b62f9b9a789$export$4922bee768729a77, value || {
        });
    },
    registerEffect: function registerEffect(_ref3) {
        var name = _ref3.name, effect = _ref3.effect, plugins = _ref3.plugins, defaults = _ref3.defaults, extendTimeline = _ref3.extendTimeline;
        (plugins || "").split(",").forEach(function(pluginName) {
            return pluginName && !$9adc3b62f9b9a789$export$d305d8ec5d7c26b8[pluginName] && !$9adc3b62f9b9a789$var$_globals[pluginName] && $9adc3b62f9b9a789$var$_warn(name + " effect requires " + pluginName + " plugin.");
        });
        $9adc3b62f9b9a789$var$_effects[name] = function(targets, vars, tl) {
            return effect($9adc3b62f9b9a789$export$45b10814cc054894(targets), $9adc3b62f9b9a789$export$dc2b19673bb53610(vars || {
            }, defaults), tl);
        };
        if (extendTimeline) $9adc3b62f9b9a789$export$e6a97ba2cae5bb94.prototype[name] = function(targets, vars, position) {
            return this.add($9adc3b62f9b9a789$var$_effects[name](targets, $9adc3b62f9b9a789$var$_isObject(vars) ? vars : (position = vars) && {
            }, this), position);
        };
    },
    registerEase: function registerEase(name, ease) {
        $9adc3b62f9b9a789$var$_easeMap[name] = $9adc3b62f9b9a789$var$_parseEase(ease);
    },
    parseEase: function parseEase(ease, defaultEase) {
        return arguments.length ? $9adc3b62f9b9a789$var$_parseEase(ease, defaultEase) : $9adc3b62f9b9a789$var$_easeMap;
    },
    getById: function getById(id) {
        return $9adc3b62f9b9a789$var$_globalTimeline.getById(id);
    },
    exportRoot: function exportRoot(vars, includeDelayedCalls) {
        if (vars === void 0) vars = {
        };
        var tl = new $9adc3b62f9b9a789$export$e6a97ba2cae5bb94(vars), child, next;
        tl.smoothChildTiming = $9adc3b62f9b9a789$var$_isNotFalse(vars.smoothChildTiming);
        $9adc3b62f9b9a789$var$_globalTimeline.remove(tl);
        tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).
        tl._time = tl._tTime = $9adc3b62f9b9a789$var$_globalTimeline._time;
        child = $9adc3b62f9b9a789$var$_globalTimeline._first;
        while(child){
            next = child._next;
            if (includeDelayedCalls || !(!child._dur && child instanceof $9adc3b62f9b9a789$export$208a41d6b4e37b97 && child.vars.onComplete === child._targets[0])) $9adc3b62f9b9a789$var$_addToTimeline(tl, child, child._start - child._delay);
            child = next;
        }
        $9adc3b62f9b9a789$var$_addToTimeline($9adc3b62f9b9a789$var$_globalTimeline, tl, 0);
        return tl;
    },
    utils: {
        wrap: $9adc3b62f9b9a789$export$4997ffc0176396a6,
        wrapYoyo: $9adc3b62f9b9a789$export$cfc0b067273edc55,
        distribute: $9adc3b62f9b9a789$export$f02a9ddbe4480f19,
        random: $9adc3b62f9b9a789$export$4385e60b38654f68,
        snap: $9adc3b62f9b9a789$export$51a0620f7a28532b,
        normalize: $9adc3b62f9b9a789$export$a3295358bff77e,
        getUnit: $9adc3b62f9b9a789$export$65f2564e9a9b9222,
        clamp: $9adc3b62f9b9a789$export$7d15b64cf5a3a4c4,
        splitColor: $9adc3b62f9b9a789$export$73d6f35be992df24,
        toArray: $9adc3b62f9b9a789$export$45b10814cc054894,
        selector: $9adc3b62f9b9a789$export$aea217a45095ce11,
        mapRange: $9adc3b62f9b9a789$export$f65a7599bbc6b121,
        pipe: $9adc3b62f9b9a789$export$a4627e546088548d,
        unitize: $9adc3b62f9b9a789$export$d7502930aa5492de,
        interpolate: $9adc3b62f9b9a789$export$89e29e4ab65e70a9,
        shuffle: $9adc3b62f9b9a789$export$448332262467e042
    },
    install: $9adc3b62f9b9a789$var$_install,
    effects: $9adc3b62f9b9a789$var$_effects,
    ticker: $9adc3b62f9b9a789$export$762ed8fbedb691e3,
    updateRoot: $9adc3b62f9b9a789$export$e6a97ba2cae5bb94.updateRoot,
    plugins: $9adc3b62f9b9a789$export$d305d8ec5d7c26b8,
    globalTimeline: $9adc3b62f9b9a789$var$_globalTimeline,
    core: {
        PropTween: $9adc3b62f9b9a789$export$3a67f7f44b1e838a,
        globals: $9adc3b62f9b9a789$var$_addGlobal,
        Tween: $9adc3b62f9b9a789$export$208a41d6b4e37b97,
        Timeline: $9adc3b62f9b9a789$export$e6a97ba2cae5bb94,
        Animation: $9adc3b62f9b9a789$export$c35d437ae5945fcd,
        getCache: $9adc3b62f9b9a789$export$8b9be379d2de2a39,
        _removeLinkedListItem: $9adc3b62f9b9a789$export$cd008aa6cd8844e3,
        suppressOverwrites: function suppressOverwrites(value) {
            return $9adc3b62f9b9a789$var$_suppressOverwrites = value;
        }
    }
};
$9adc3b62f9b9a789$export$f9000b814859f126("to,from,fromTo,delayedCall,set,killTweensOf", function(name) {
    return $9adc3b62f9b9a789$var$_gsap[name] = $9adc3b62f9b9a789$export$208a41d6b4e37b97[name];
});
$9adc3b62f9b9a789$export$762ed8fbedb691e3.add($9adc3b62f9b9a789$export$e6a97ba2cae5bb94.updateRoot);
$9adc3b62f9b9a789$var$_quickTween = $9adc3b62f9b9a789$var$_gsap.to({
}, {
    duration: 0
}); // ---- EXTRA PLUGINS --------------------------------------------------------
var $9adc3b62f9b9a789$var$_getPluginPropTween = function _getPluginPropTween(plugin, prop) {
    var pt = plugin._pt;
    while(pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop)pt = pt._next;
    return pt;
}, $9adc3b62f9b9a789$var$_addModifiers = function _addModifiers(tween, modifiers) {
    var targets = tween._targets, p, i, pt;
    for(p in modifiers){
        i = targets.length;
        while(i--){
            pt = tween._ptLookup[i][p];
            if (pt && (pt = pt.d)) {
                if (pt._pt) // is a plugin
                pt = $9adc3b62f9b9a789$var$_getPluginPropTween(pt, p);
                pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
            }
        }
    }
}, $9adc3b62f9b9a789$var$_buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
    return {
        name: name,
        rawVars: 1,
        //don't pre-process function-based values or "random()" strings.
        init: function init(target, vars, tween1) {
            tween1._onInit = function(tween) {
                var temp, p;
                if ($9adc3b62f9b9a789$export$f664476fd67145ca(vars)) {
                    temp = {
                    };
                    $9adc3b62f9b9a789$export$f9000b814859f126(vars, function(name) {
                        return temp[name] = 1;
                    }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.
                    vars = temp;
                }
                if (modifier) {
                    temp = {
                    };
                    for(p in vars)temp[p] = modifier(vars[p]);
                    vars = temp;
                }
                $9adc3b62f9b9a789$var$_addModifiers(tween, vars);
            };
        }
    };
}; //register core plugins
var $9adc3b62f9b9a789$export$99ee26438460406a = $9adc3b62f9b9a789$var$_gsap.registerPlugin({
    name: "attr",
    init: function init(target, vars, tween, index, targets) {
        var p, pt;
        for(p in vars){
            pt = this.add(target, "setAttribute", (target.getAttribute(p) || 0) + "", vars[p], index, targets, 0, 0, p);
            pt && (pt.op = p);
            this._props.push(p);
        }
    }
}, {
    name: "endArray",
    init: function init(target, value) {
        var i = value.length;
        while(i--)this.add(target, i, target[i] || 0, value[i]);
    }
}, $9adc3b62f9b9a789$var$_buildModifierPlugin("roundProps", $9adc3b62f9b9a789$export$dd12390e6b265a17), $9adc3b62f9b9a789$var$_buildModifierPlugin("modifiers"), $9adc3b62f9b9a789$var$_buildModifierPlugin("snap", $9adc3b62f9b9a789$export$51a0620f7a28532b)) || $9adc3b62f9b9a789$var$_gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.
$9adc3b62f9b9a789$export$208a41d6b4e37b97.version = $9adc3b62f9b9a789$export$e6a97ba2cae5bb94.version = $9adc3b62f9b9a789$export$99ee26438460406a.version = "3.9.1";
$9adc3b62f9b9a789$var$_coreReady = 1;
$9adc3b62f9b9a789$var$_windowExists() && $9adc3b62f9b9a789$var$_wake();
var $9adc3b62f9b9a789$export$2fae1e8613537d5f = $9adc3b62f9b9a789$var$_easeMap.Power0, $9adc3b62f9b9a789$export$5d84ab4efbecec39 = $9adc3b62f9b9a789$var$_easeMap.Power1, $9adc3b62f9b9a789$export$d8c694b7490ad65d = $9adc3b62f9b9a789$var$_easeMap.Power2, $9adc3b62f9b9a789$export$acebdf2b184a0b6f = $9adc3b62f9b9a789$var$_easeMap.Power3, $9adc3b62f9b9a789$export$42e40a141003d2f0 = $9adc3b62f9b9a789$var$_easeMap.Power4, $9adc3b62f9b9a789$export$cff00ccf6e2392de = $9adc3b62f9b9a789$var$_easeMap.Linear, $9adc3b62f9b9a789$export$7005c9eb6671414d = $9adc3b62f9b9a789$var$_easeMap.Quad, $9adc3b62f9b9a789$export$755261d5a1567778 = $9adc3b62f9b9a789$var$_easeMap.Cubic, $9adc3b62f9b9a789$export$daf531446cad3d2a = $9adc3b62f9b9a789$var$_easeMap.Quart, $9adc3b62f9b9a789$export$4c407d38ce8ad8cc = $9adc3b62f9b9a789$var$_easeMap.Quint, $9adc3b62f9b9a789$export$f301627d437cff88 = $9adc3b62f9b9a789$var$_easeMap.Strong, $9adc3b62f9b9a789$export$56ebabebb04a9ca9 = $9adc3b62f9b9a789$var$_easeMap.Elastic, $9adc3b62f9b9a789$export$25e48ac541203d4a = $9adc3b62f9b9a789$var$_easeMap.Back, $9adc3b62f9b9a789$export$f7a11c7543d81853 = $9adc3b62f9b9a789$var$_easeMap.SteppedEase, $9adc3b62f9b9a789$export$d20e79fdc3899e95 = $9adc3b62f9b9a789$var$_easeMap.Bounce, $9adc3b62f9b9a789$export$bed2d20ad96b784c = $9adc3b62f9b9a789$var$_easeMap.Sine, $9adc3b62f9b9a789$export$41e9d1ff1a2fb15a = $9adc3b62f9b9a789$var$_easeMap.Expo, $9adc3b62f9b9a789$export$ce49a57dd865b86c = $9adc3b62f9b9a789$var$_easeMap.Circ;



var $91a310d41f41b7d6$var$_win, $91a310d41f41b7d6$var$_doc, $91a310d41f41b7d6$var$_docElement, $91a310d41f41b7d6$var$_pluginInitted, $91a310d41f41b7d6$var$_tempDiv, $91a310d41f41b7d6$var$_tempDivStyler, $91a310d41f41b7d6$var$_recentSetterPlugin, $91a310d41f41b7d6$var$_windowExists = function _windowExists() {
    return typeof window !== "undefined";
}, $91a310d41f41b7d6$var$_transformProps = {
}, $91a310d41f41b7d6$var$_RAD2DEG = 180 / Math.PI, $91a310d41f41b7d6$var$_DEG2RAD = Math.PI / 180, $91a310d41f41b7d6$var$_atan2 = Math.atan2, $91a310d41f41b7d6$var$_bigNum = 100000000, $91a310d41f41b7d6$var$_capsExp = /([A-Z])/g, $91a310d41f41b7d6$var$_horizontalExp = /(?:left|right|width|margin|padding|x)/i, $91a310d41f41b7d6$var$_complexExp = /[\s,\(]\S/, $91a310d41f41b7d6$var$_propertyAliases = {
    autoAlpha: "opacity,visibility",
    scale: "scaleX,scaleY",
    alpha: "opacity"
}, $91a310d41f41b7d6$var$_renderCSSProp = function _renderCSSProp(ratio, data) {
    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
}, $91a310d41f41b7d6$var$_renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
}, $91a310d41f41b7d6$var$_renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
}, //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
$91a310d41f41b7d6$var$_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
    var value = data.s + data.c * ratio;
    data.set(data.t, data.p, ~~(value + (value < 0 ? -0.5 : 0.5)) + data.u, data);
}, $91a310d41f41b7d6$var$_renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
    return data.set(data.t, data.p, ratio ? data.e : data.b, data);
}, $91a310d41f41b7d6$var$_renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
}, $91a310d41f41b7d6$var$_setterCSSStyle = function _setterCSSStyle(target, property, value) {
    return target.style[property] = value;
}, $91a310d41f41b7d6$var$_setterCSSProp = function _setterCSSProp(target, property, value) {
    return target.style.setProperty(property, value);
}, $91a310d41f41b7d6$var$_setterTransform = function _setterTransform(target, property, value) {
    return target._gsap[property] = value;
}, $91a310d41f41b7d6$var$_setterScale = function _setterScale(target, property, value) {
    return target._gsap.scaleX = target._gsap.scaleY = value;
}, $91a310d41f41b7d6$var$_setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache.scaleX = cache.scaleY = value;
    cache.renderTransform(ratio, cache);
}, $91a310d41f41b7d6$var$_setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
    var cache = target._gsap;
    cache[property] = value;
    cache.renderTransform(ratio, cache);
}, $91a310d41f41b7d6$var$_transformProp = "transform", $91a310d41f41b7d6$var$_transformOriginProp = $91a310d41f41b7d6$var$_transformProp + "Origin", $91a310d41f41b7d6$var$_supports3D, $91a310d41f41b7d6$export$a232bb0480ae674a = function $91a310d41f41b7d6$export$a232bb0480ae674a(type, ns) {
    var e = $91a310d41f41b7d6$var$_doc.createElementNS ? $91a310d41f41b7d6$var$_doc.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : $91a310d41f41b7d6$var$_doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.
    return e.style ? e : $91a310d41f41b7d6$var$_doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
}, $91a310d41f41b7d6$var$_getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
    var cs = getComputedStyle(target);
    return cs[property] || cs.getPropertyValue(property.replace($91a310d41f41b7d6$var$_capsExp, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, $91a310d41f41b7d6$export$8cbef5dd49a09c8b(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
}, $91a310d41f41b7d6$var$_prefixes = "O,Moz,ms,Ms,Webkit".split(","), $91a310d41f41b7d6$export$8cbef5dd49a09c8b = function $91a310d41f41b7d6$export$8cbef5dd49a09c8b(property, element, preferPrefix) {
    var e = element || $91a310d41f41b7d6$var$_tempDiv, s = e.style, i = 5;
    if (property in s && !preferPrefix) return property;
    property = property.charAt(0).toUpperCase() + property.substr(1);
    while((i--) && !($91a310d41f41b7d6$var$_prefixes[i] + property in s));
    return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? $91a310d41f41b7d6$var$_prefixes[i] : "") + property;
}, $91a310d41f41b7d6$var$_initCore = function _initCore() {
    if ($91a310d41f41b7d6$var$_windowExists() && window.document) {
        $91a310d41f41b7d6$var$_win = window;
        $91a310d41f41b7d6$var$_doc = $91a310d41f41b7d6$var$_win.document;
        $91a310d41f41b7d6$var$_docElement = $91a310d41f41b7d6$var$_doc.documentElement;
        $91a310d41f41b7d6$var$_tempDiv = $91a310d41f41b7d6$export$a232bb0480ae674a("div") || {
            style: {
            }
        };
        $91a310d41f41b7d6$var$_tempDivStyler = $91a310d41f41b7d6$export$a232bb0480ae674a("div");
        $91a310d41f41b7d6$var$_transformProp = $91a310d41f41b7d6$export$8cbef5dd49a09c8b($91a310d41f41b7d6$var$_transformProp);
        $91a310d41f41b7d6$var$_transformOriginProp = $91a310d41f41b7d6$var$_transformProp + "Origin";
        $91a310d41f41b7d6$var$_tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.
        $91a310d41f41b7d6$var$_supports3D = !!$91a310d41f41b7d6$export$8cbef5dd49a09c8b("perspective");
        $91a310d41f41b7d6$var$_pluginInitted = 1;
    }
}, $91a310d41f41b7d6$var$_getBBoxHack = function _getBBoxHack(swapIfPossible) {
    //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
    var svg = $91a310d41f41b7d6$export$a232bb0480ae674a("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), oldParent = this.parentNode, oldSibling = this.nextSibling, oldCSS = this.style.cssText, bbox;
    $91a310d41f41b7d6$var$_docElement.appendChild(svg);
    svg.appendChild(this);
    this.style.display = "block";
    if (swapIfPossible) try {
        bbox = this.getBBox();
        this._gsapBBox = this.getBBox; //store the original
        this.getBBox = _getBBoxHack;
    } catch (e) {
    }
    else if (this._gsapBBox) bbox = this._gsapBBox();
    if (oldParent) {
        if (oldSibling) oldParent.insertBefore(this, oldSibling);
        else oldParent.appendChild(this);
    }
    $91a310d41f41b7d6$var$_docElement.removeChild(svg);
    this.style.cssText = oldCSS;
    return bbox;
}, $91a310d41f41b7d6$var$_getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
    var i = attributesArray.length;
    while(i--){
        if (target.hasAttribute(attributesArray[i])) return target.getAttribute(attributesArray[i]);
    }
}, $91a310d41f41b7d6$export$41bc7c2d1e04f11b = function $91a310d41f41b7d6$export$41bc7c2d1e04f11b(target) {
    var bounds;
    try {
        bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
    } catch (error) {
        bounds = $91a310d41f41b7d6$var$_getBBoxHack.call(target, true);
    }
    bounds && (bounds.width || bounds.height) || target.getBBox === $91a310d41f41b7d6$var$_getBBoxHack || (bounds = $91a310d41f41b7d6$var$_getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
    return bounds && !bounds.width && !bounds.x && !bounds.y ? {
        x: +$91a310d41f41b7d6$var$_getAttributeFallbacks(target, [
            "x",
            "cx",
            "x1"
        ]) || 0,
        y: +$91a310d41f41b7d6$var$_getAttributeFallbacks(target, [
            "y",
            "cy",
            "y1"
        ]) || 0,
        width: 0,
        height: 0
    } : bounds;
}, $91a310d41f41b7d6$var$_isSVG = function _isSVG(e) {
    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && $91a310d41f41b7d6$export$41bc7c2d1e04f11b(e));
}, //reports if the element is an SVG on which getBBox() actually works
$91a310d41f41b7d6$var$_removeProperty = function _removeProperty(target, property) {
    if (property) {
        var style = target.style;
        if (property in $91a310d41f41b7d6$var$_transformProps && property !== $91a310d41f41b7d6$var$_transformOriginProp) property = $91a310d41f41b7d6$var$_transformProp;
        if (style.removeProperty) {
            if (property.substr(0, 2) === "ms" || property.substr(0, 6) === "webkit") //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
            property = "-" + property;
            style.removeProperty(property.replace($91a310d41f41b7d6$var$_capsExp, "-$1").toLowerCase());
        } else //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
        style.removeAttribute(property);
    }
}, $91a310d41f41b7d6$var$_addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
    var pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(plugin._pt, target, property, 0, 1, onlySetAtEnd ? $91a310d41f41b7d6$var$_renderNonTweeningValueOnlyAtEnd : $91a310d41f41b7d6$var$_renderNonTweeningValue);
    plugin._pt = pt;
    pt.b = beginning;
    pt.e = end;
    plugin._props.push(property);
    return pt;
}, $91a310d41f41b7d6$var$_nonConvertibleUnits = {
    deg: 1,
    rad: 1,
    turn: 1
}, //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
$91a310d41f41b7d6$var$_convertToUnit = function _convertToUnit(target, property, value, unit) {
    var curValue = parseFloat(value) || 0, curUnit = (value + "").trim().substr((curValue + "").length) || "px", // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
    style = $91a310d41f41b7d6$var$_tempDiv.style, horizontal = $91a310d41f41b7d6$var$_horizontalExp.test(property), isRootSVG = target.tagName.toLowerCase() === "svg", measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"), amount = 100, toPixels = unit === "px", toPercent = unit === "%", px, parent, cache, isSVG;
    if (unit === curUnit || !curValue || $91a310d41f41b7d6$var$_nonConvertibleUnits[unit] || $91a310d41f41b7d6$var$_nonConvertibleUnits[curUnit]) return curValue;
    curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
    isSVG = target.getCTM && $91a310d41f41b7d6$var$_isSVG(target);
    if ((toPercent || curUnit === "%") && ($91a310d41f41b7d6$var$_transformProps[property] || ~property.indexOf("adius"))) {
        px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
        return $9adc3b62f9b9a789$export$9c8d725d65e13f94(toPercent ? curValue / px * amount : curValue / 100 * px);
    }
    style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
    parent = ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;
    if (isSVG) parent = (target.ownerSVGElement || {
    }).parentNode;
    if (!parent || parent === $91a310d41f41b7d6$var$_doc || !parent.appendChild) parent = $91a310d41f41b7d6$var$_doc.body;
    cache = parent._gsap;
    if (cache && toPercent && cache.width && horizontal && cache.time === $9adc3b62f9b9a789$export$762ed8fbedb691e3.time) return $9adc3b62f9b9a789$export$9c8d725d65e13f94(curValue / cache.width * amount);
    else {
        (toPercent || curUnit === "%") && (style.position = $91a310d41f41b7d6$var$_getComputedProperty(target, "position"));
        parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.
        parent.appendChild($91a310d41f41b7d6$var$_tempDiv);
        px = $91a310d41f41b7d6$var$_tempDiv[measureProperty];
        parent.removeChild($91a310d41f41b7d6$var$_tempDiv);
        style.position = "absolute";
        if (horizontal && toPercent) {
            cache = $9adc3b62f9b9a789$export$8b9be379d2de2a39(parent);
            cache.time = $9adc3b62f9b9a789$export$762ed8fbedb691e3.time;
            cache.width = parent[measureProperty];
        }
    }
    return $9adc3b62f9b9a789$export$9c8d725d65e13f94(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
}, $91a310d41f41b7d6$var$_get = function _get(target, property, unit, uncache) {
    var value;
    $91a310d41f41b7d6$var$_pluginInitted || $91a310d41f41b7d6$var$_initCore();
    if (property in $91a310d41f41b7d6$var$_propertyAliases && property !== "transform") {
        property = $91a310d41f41b7d6$var$_propertyAliases[property];
        if (~property.indexOf(",")) property = property.split(",")[0];
    }
    if ($91a310d41f41b7d6$var$_transformProps[property] && property !== "transform") {
        value = $91a310d41f41b7d6$var$_parseTransform(target, uncache);
        value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : $91a310d41f41b7d6$var$_firstTwoOnly($91a310d41f41b7d6$var$_getComputedProperty(target, $91a310d41f41b7d6$var$_transformOriginProp)) + " " + value.zOrigin + "px";
    } else {
        value = target.style[property];
        if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) value = $91a310d41f41b7d6$var$_specialProps[property] && $91a310d41f41b7d6$var$_specialProps[property](target, property, unit) || $91a310d41f41b7d6$var$_getComputedProperty(target, property) || $9adc3b62f9b9a789$export$51d6bbe898aef1f9(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
    }
    return unit && !~(value + "").trim().indexOf(" ") ? $91a310d41f41b7d6$var$_convertToUnit(target, property, value, unit) + unit : value;
}, $91a310d41f41b7d6$var$_tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
    //note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
    if (!start || start === "none") {
        // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/
        var p = $91a310d41f41b7d6$export$8cbef5dd49a09c8b(prop, target, 1), s = p && $91a310d41f41b7d6$var$_getComputedProperty(target, p, 1);
        if (s && s !== start) {
            prop = p;
            start = s;
        } else if (prop === "borderColor") start = $91a310d41f41b7d6$var$_getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
    }
    var pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(this._pt, target.style, prop, 0, 1, $9adc3b62f9b9a789$export$c5bc8e04394ecb2), index = 0, matchIndex = 0, a, result, startValues, startNum, color, startValue, endValue, endNum, chunk, endUnit, startUnit, relative, endValues;
    pt.b = start;
    pt.e = end;
    start += ""; //ensure values are strings
    end += "";
    if (end === "auto") {
        target.style[prop] = end;
        end = $91a310d41f41b7d6$var$_getComputedProperty(target, prop) || end;
        target.style[prop] = start;
    }
    a = [
        start,
        end
    ];
    $9adc3b62f9b9a789$export$7eb2e5eb5eeb96a4(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().
    start = a[0];
    end = a[1];
    startValues = start.match($9adc3b62f9b9a789$export$65c88bbd597e7b0a) || [];
    endValues = end.match($9adc3b62f9b9a789$export$65c88bbd597e7b0a) || [];
    if (endValues.length) {
        while(result = $9adc3b62f9b9a789$export$65c88bbd597e7b0a.exec(end)){
            endValue = result[0];
            chunk = end.substring(index, result.index);
            if (color) color = (color + 1) % 5;
            else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") color = 1;
            if (endValue !== (startValue = startValues[matchIndex++] || "")) {
                startNum = parseFloat(startValue) || 0;
                startUnit = startValue.substr((startNum + "").length);
                relative = endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;
                if (relative) endValue = endValue.substr(2);
                endNum = parseFloat(endValue);
                endUnit = endValue.substr((endNum + "").length);
                index = $9adc3b62f9b9a789$export$65c88bbd597e7b0a.lastIndex - endUnit.length;
                if (!endUnit) {
                    //if something like "perspective:300" is passed in and we must add a unit to the end
                    endUnit = endUnit || $9adc3b62f9b9a789$export$4922bee768729a77.units[prop] || startUnit;
                    if (index === end.length) {
                        end += endUnit;
                        pt.e += endUnit;
                    }
                }
                if (startUnit !== endUnit) startNum = $91a310d41f41b7d6$var$_convertToUnit(target, prop, startValue, endUnit) || 0;
                 //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.
                pt._pt = {
                    _next: pt._pt,
                    p: chunk || matchIndex === 1 ? chunk : ",",
                    //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                    s: startNum,
                    c: relative ? relative * endNum : endNum - startNum,
                    m: color && color < 4 || prop === "zIndex" ? Math.round : 0
                };
            }
        }
        pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
    } else pt.r = prop === "display" && end === "none" ? $91a310d41f41b7d6$var$_renderNonTweeningValueOnlyAtEnd : $91a310d41f41b7d6$var$_renderNonTweeningValue;
    $9adc3b62f9b9a789$export$5a680e28b0b61bc.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
    this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.
    return pt;
}, $91a310d41f41b7d6$var$_keywordToPercent = {
    top: "0%",
    bottom: "100%",
    left: "0%",
    right: "100%",
    center: "50%"
}, $91a310d41f41b7d6$var$_convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
    var split = value.split(" "), x = split[0], y = split[1] || "50%";
    if (x === "top" || x === "bottom" || y === "left" || y === "right") {
        //the user provided them in the wrong order, so flip them
        value = x;
        x = y;
        y = value;
    }
    split[0] = $91a310d41f41b7d6$var$_keywordToPercent[x] || x;
    split[1] = $91a310d41f41b7d6$var$_keywordToPercent[y] || y;
    return split.join(" ");
}, $91a310d41f41b7d6$var$_renderClearProps = function _renderClearProps(ratio, data) {
    if (data.tween && data.tween._time === data.tween._dur) {
        var target = data.t, style = target.style, props = data.u, cache = target._gsap, prop, clearTransforms, i;
        if (props === "all" || props === true) {
            style.cssText = "";
            clearTransforms = 1;
        } else {
            props = props.split(",");
            i = props.length;
            while(--i > -1){
                prop = props[i];
                if ($91a310d41f41b7d6$var$_transformProps[prop]) {
                    clearTransforms = 1;
                    prop = prop === "transformOrigin" ? $91a310d41f41b7d6$var$_transformOriginProp : $91a310d41f41b7d6$var$_transformProp;
                }
                $91a310d41f41b7d6$var$_removeProperty(target, prop);
            }
        }
        if (clearTransforms) {
            $91a310d41f41b7d6$var$_removeProperty(target, $91a310d41f41b7d6$var$_transformProp);
            if (cache) {
                cache.svg && target.removeAttribute("transform");
                $91a310d41f41b7d6$var$_parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.
                cache.uncache = 1;
            }
        }
    }
}, // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
$91a310d41f41b7d6$var$_specialProps = {
    clearProps: function clearProps(plugin, target, property, endValue, tween) {
        if (tween.data !== "isFromStart") {
            var pt = plugin._pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(plugin._pt, target, property, 0, 0, $91a310d41f41b7d6$var$_renderClearProps);
            pt.u = endValue;
            pt.pr = -10;
            pt.tween = tween;
            plugin._props.push(property);
            return 1;
        }
    }
}, /*
 * --------------------------------------------------------------------------------------
 * TRANSFORMS
 * --------------------------------------------------------------------------------------
 */ $91a310d41f41b7d6$var$_identity2DMatrix = [
    1,
    0,
    0,
    1,
    0,
    0
], $91a310d41f41b7d6$var$_rotationalProperties = {
}, $91a310d41f41b7d6$var$_isNullTransform = function _isNullTransform(value) {
    return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
}, $91a310d41f41b7d6$var$_getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
    var matrixString = $91a310d41f41b7d6$var$_getComputedProperty(target, $91a310d41f41b7d6$var$_transformProp);
    return $91a310d41f41b7d6$var$_isNullTransform(matrixString) ? $91a310d41f41b7d6$var$_identity2DMatrix : matrixString.substr(7).match($9adc3b62f9b9a789$export$b9d44bb6523120d6).map($9adc3b62f9b9a789$export$9c8d725d65e13f94);
}, $91a310d41f41b7d6$var$_getMatrix = function _getMatrix(target, force2D) {
    var cache = target._gsap || $9adc3b62f9b9a789$export$8b9be379d2de2a39(target), style = target.style, matrix = $91a310d41f41b7d6$var$_getComputedTransformMatrixAsArray(target), parent, nextSibling, temp, addedToDOM;
    if (cache.svg && target.getAttribute("transform")) {
        temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.
        matrix = [
            temp.a,
            temp.b,
            temp.c,
            temp.d,
            temp.e,
            temp.f
        ];
        return matrix.join(",") === "1,0,0,1,0,0" ? $91a310d41f41b7d6$var$_identity2DMatrix : matrix;
    } else if (matrix === $91a310d41f41b7d6$var$_identity2DMatrix && !target.offsetParent && target !== $91a310d41f41b7d6$var$_docElement && !cache.svg) {
        //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
        temp = style.display;
        style.display = "block";
        parent = target.parentNode;
        if (!parent || !target.offsetParent) {
            // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375
            addedToDOM = 1; //flag
            nextSibling = target.nextSibling;
            $91a310d41f41b7d6$var$_docElement.appendChild(target); //we must add it to the DOM in order to get values properly
        }
        matrix = $91a310d41f41b7d6$var$_getComputedTransformMatrixAsArray(target);
        temp ? style.display = temp : $91a310d41f41b7d6$var$_removeProperty(target, "display");
        if (addedToDOM) nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : $91a310d41f41b7d6$var$_docElement.removeChild(target);
    }
    return force2D && matrix.length > 6 ? [
        matrix[0],
        matrix[1],
        matrix[4],
        matrix[5],
        matrix[12],
        matrix[13]
    ] : matrix;
}, $91a310d41f41b7d6$var$_applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
    var cache = target._gsap, matrix = matrixArray || $91a310d41f41b7d6$var$_getMatrix(target, true), xOriginOld = cache.xOrigin || 0, yOriginOld = cache.yOrigin || 0, xOffsetOld = cache.xOffset || 0, yOffsetOld = cache.yOffset || 0, a = matrix[0], b = matrix[1], c = matrix[2], d = matrix[3], tx = matrix[4], ty = matrix[5], originSplit = origin.split(" "), xOrigin = parseFloat(originSplit[0]) || 0, yOrigin = parseFloat(originSplit[1]) || 0, bounds, determinant, x, y;
    if (!originIsAbsolute) {
        bounds = $91a310d41f41b7d6$export$41bc7c2d1e04f11b(target);
        xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin);
    } else if (matrix !== $91a310d41f41b7d6$var$_identity2DMatrix && (determinant = a * d - b * c)) {
        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
        xOrigin = x;
        yOrigin = y;
    }
    if (smooth || smooth !== false && cache.smooth) {
        tx = xOrigin - xOriginOld;
        ty = yOrigin - yOriginOld;
        cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
        cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
    } else cache.xOffset = cache.yOffset = 0;
    cache.xOrigin = xOrigin;
    cache.yOrigin = yOrigin;
    cache.smooth = !!smooth;
    cache.origin = origin;
    cache.originIsAbsolute = !!originIsAbsolute;
    target.style[$91a310d41f41b7d6$var$_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).
    if (pluginToAddPropTweensTo) {
        $91a310d41f41b7d6$var$_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);
        $91a310d41f41b7d6$var$_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);
        $91a310d41f41b7d6$var$_addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);
        $91a310d41f41b7d6$var$_addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
    }
    target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
}, $91a310d41f41b7d6$var$_parseTransform = function _parseTransform(target, uncache) {
    var cache = target._gsap || new $9adc3b62f9b9a789$export$cf10981d5419cad5(target);
    if ("x" in cache && !uncache && !cache.uncache) return cache;
    var style = target.style, invertedScaleX = cache.scaleX < 0, px = "px", deg = "deg", origin = $91a310d41f41b7d6$var$_getComputedProperty(target, $91a310d41f41b7d6$var$_transformOriginProp) || "0", x, y, z, scaleX, scaleY, rotation, rotationX, rotationY, skewX, skewY, perspective, xOrigin, yOrigin, matrix, angle, cos, sin, a, b, c, d, a12, a22, t1, t2, t3, a13, a23, a33, a42, a43, a32;
    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
    scaleX = scaleY = 1;
    cache.svg = !!(target.getCTM && $91a310d41f41b7d6$var$_isSVG(target));
    matrix = $91a310d41f41b7d6$var$_getMatrix(target, cache.svg);
    if (cache.svg) {
        t1 = (!cache.uncache || origin === "0px 0px") && !uncache && target.getAttribute("data-svg-origin"); // if origin is 0,0 and cache.uncache is true, let the recorded data-svg-origin stay. Otherwise, whenever we set cache.uncache to true, we'd need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
        $91a310d41f41b7d6$var$_applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
    }
    xOrigin = cache.xOrigin || 0;
    yOrigin = cache.yOrigin || 0;
    if (matrix !== $91a310d41f41b7d6$var$_identity2DMatrix) {
        a = matrix[0]; //a11
        b = matrix[1]; //a21
        c = matrix[2]; //a31
        d = matrix[3]; //a41
        x = a12 = matrix[4];
        y = a22 = matrix[5]; //2D matrix
        if (matrix.length === 6) {
            scaleX = Math.sqrt(a * a + b * b);
            scaleY = Math.sqrt(d * d + c * c);
            rotation = a || b ? $91a310d41f41b7d6$var$_atan2(b, a) * $91a310d41f41b7d6$var$_RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
            skewX = c || d ? $91a310d41f41b7d6$var$_atan2(c, d) * $91a310d41f41b7d6$var$_RAD2DEG + rotation : 0;
            skewX && (scaleY *= Math.abs(Math.cos(skewX * $91a310d41f41b7d6$var$_DEG2RAD)));
            if (cache.svg) {
                x -= xOrigin - (xOrigin * a + yOrigin * c);
                y -= yOrigin - (xOrigin * b + yOrigin * d);
            } //3D matrix
        } else {
            a32 = matrix[6];
            a42 = matrix[7];
            a13 = matrix[8];
            a23 = matrix[9];
            a33 = matrix[10];
            a43 = matrix[11];
            x = matrix[12];
            y = matrix[13];
            z = matrix[14];
            angle = $91a310d41f41b7d6$var$_atan2(a32, a33);
            rotationX = angle * $91a310d41f41b7d6$var$_RAD2DEG; //rotationX
            if (angle) {
                cos = Math.cos(-angle);
                sin = Math.sin(-angle);
                t1 = a12 * cos + a13 * sin;
                t2 = a22 * cos + a23 * sin;
                t3 = a32 * cos + a33 * sin;
                a13 = a12 * -sin + a13 * cos;
                a23 = a22 * -sin + a23 * cos;
                a33 = a32 * -sin + a33 * cos;
                a43 = a42 * -sin + a43 * cos;
                a12 = t1;
                a22 = t2;
                a32 = t3;
            } //rotationY
            angle = $91a310d41f41b7d6$var$_atan2(-c, a33);
            rotationY = angle * $91a310d41f41b7d6$var$_RAD2DEG;
            if (angle) {
                cos = Math.cos(-angle);
                sin = Math.sin(-angle);
                t1 = a * cos - a13 * sin;
                t2 = b * cos - a23 * sin;
                t3 = c * cos - a33 * sin;
                a43 = d * sin + a43 * cos;
                a = t1;
                b = t2;
                c = t3;
            } //rotationZ
            angle = $91a310d41f41b7d6$var$_atan2(b, a);
            rotation = angle * $91a310d41f41b7d6$var$_RAD2DEG;
            if (angle) {
                cos = Math.cos(angle);
                sin = Math.sin(angle);
                t1 = a * cos + b * sin;
                t2 = a12 * cos + a22 * sin;
                b = b * cos - a * sin;
                a22 = a22 * cos - a12 * sin;
                a = t1;
                a12 = t2;
            }
            if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
                //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
                rotationX = rotation = 0;
                rotationY = 180 - rotationY;
            }
            scaleX = $9adc3b62f9b9a789$export$9c8d725d65e13f94(Math.sqrt(a * a + b * b + c * c));
            scaleY = $9adc3b62f9b9a789$export$9c8d725d65e13f94(Math.sqrt(a22 * a22 + a32 * a32));
            angle = $91a310d41f41b7d6$var$_atan2(a12, a22);
            skewX = Math.abs(angle) > 0.0002 ? angle * $91a310d41f41b7d6$var$_RAD2DEG : 0;
            perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
        }
        if (cache.svg) {
            //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
            t1 = target.getAttribute("transform");
            cache.forceCSS = target.setAttribute("transform", "") || !$91a310d41f41b7d6$var$_isNullTransform($91a310d41f41b7d6$var$_getComputedProperty(target, $91a310d41f41b7d6$var$_transformProp));
            t1 && target.setAttribute("transform", t1);
        }
    }
    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
        if (invertedScaleX) {
            scaleX *= -1;
            skewX += rotation <= 0 ? 180 : -180;
            rotation += rotation <= 0 ? 180 : -180;
        } else {
            scaleY *= -1;
            skewX += skewX <= 0 ? 180 : -180;
        }
    }
    cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
    cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
    cache.z = z + px;
    cache.scaleX = $9adc3b62f9b9a789$export$9c8d725d65e13f94(scaleX);
    cache.scaleY = $9adc3b62f9b9a789$export$9c8d725d65e13f94(scaleY);
    cache.rotation = $9adc3b62f9b9a789$export$9c8d725d65e13f94(rotation) + deg;
    cache.rotationX = $9adc3b62f9b9a789$export$9c8d725d65e13f94(rotationX) + deg;
    cache.rotationY = $9adc3b62f9b9a789$export$9c8d725d65e13f94(rotationY) + deg;
    cache.skewX = skewX + deg;
    cache.skewY = skewY + deg;
    cache.transformPerspective = perspective + px;
    if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || 0) style[$91a310d41f41b7d6$var$_transformOriginProp] = $91a310d41f41b7d6$var$_firstTwoOnly(origin);
    cache.xOffset = cache.yOffset = 0;
    cache.force3D = $9adc3b62f9b9a789$export$4922bee768729a77.force3D;
    cache.renderTransform = cache.svg ? $91a310d41f41b7d6$var$_renderSVGTransforms : $91a310d41f41b7d6$var$_supports3D ? $91a310d41f41b7d6$var$_renderCSSTransforms : $91a310d41f41b7d6$var$_renderNon3DTransforms;
    cache.uncache = 0;
    return cache;
}, $91a310d41f41b7d6$var$_firstTwoOnly = function _firstTwoOnly(value) {
    return (value = value.split(" "))[0] + " " + value[1];
}, //for handling transformOrigin values, stripping out the 3rd dimension
$91a310d41f41b7d6$var$_addPxTranslate = function _addPxTranslate(target, start, value) {
    var unit = $9adc3b62f9b9a789$export$65f2564e9a9b9222(start);
    return $9adc3b62f9b9a789$export$9c8d725d65e13f94(parseFloat(start) + parseFloat($91a310d41f41b7d6$var$_convertToUnit(target, "x", value + "px", unit))) + unit;
}, $91a310d41f41b7d6$var$_renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
    cache.z = "0px";
    cache.rotationY = cache.rotationX = "0deg";
    cache.force3D = 0;
    $91a310d41f41b7d6$var$_renderCSSTransforms(ratio, cache);
}, $91a310d41f41b7d6$var$_zeroDeg = "0deg", $91a310d41f41b7d6$var$_zeroPx = "0px", $91a310d41f41b7d6$var$_endParenthesis = ") ", $91a310d41f41b7d6$var$_renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
    var _ref = cache || this, xPercent = _ref.xPercent, yPercent = _ref.yPercent, x = _ref.x, y = _ref.y, z = _ref.z, rotation = _ref.rotation, rotationY = _ref.rotationY, rotationX = _ref.rotationX, skewX = _ref.skewX, skewY = _ref.skewY, scaleX = _ref.scaleX, scaleY = _ref.scaleY, transformPerspective = _ref.transformPerspective, force3D = _ref.force3D, target = _ref.target, zOrigin = _ref.zOrigin, transforms = "", use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)
    if (zOrigin && (rotationX !== $91a310d41f41b7d6$var$_zeroDeg || rotationY !== $91a310d41f41b7d6$var$_zeroDeg)) {
        var angle = parseFloat(rotationY) * $91a310d41f41b7d6$var$_DEG2RAD, a13 = Math.sin(angle), a33 = Math.cos(angle), cos;
        angle = parseFloat(rotationX) * $91a310d41f41b7d6$var$_DEG2RAD;
        cos = Math.cos(angle);
        x = $91a310d41f41b7d6$var$_addPxTranslate(target, x, a13 * cos * -zOrigin);
        y = $91a310d41f41b7d6$var$_addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
        z = $91a310d41f41b7d6$var$_addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
    }
    if (transformPerspective !== $91a310d41f41b7d6$var$_zeroPx) transforms += "perspective(" + transformPerspective + $91a310d41f41b7d6$var$_endParenthesis;
    if (xPercent || yPercent) transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
    if (use3D || x !== $91a310d41f41b7d6$var$_zeroPx || y !== $91a310d41f41b7d6$var$_zeroPx || z !== $91a310d41f41b7d6$var$_zeroPx) transforms += z !== $91a310d41f41b7d6$var$_zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + $91a310d41f41b7d6$var$_endParenthesis;
    if (rotation !== $91a310d41f41b7d6$var$_zeroDeg) transforms += "rotate(" + rotation + $91a310d41f41b7d6$var$_endParenthesis;
    if (rotationY !== $91a310d41f41b7d6$var$_zeroDeg) transforms += "rotateY(" + rotationY + $91a310d41f41b7d6$var$_endParenthesis;
    if (rotationX !== $91a310d41f41b7d6$var$_zeroDeg) transforms += "rotateX(" + rotationX + $91a310d41f41b7d6$var$_endParenthesis;
    if (skewX !== $91a310d41f41b7d6$var$_zeroDeg || skewY !== $91a310d41f41b7d6$var$_zeroDeg) transforms += "skew(" + skewX + ", " + skewY + $91a310d41f41b7d6$var$_endParenthesis;
    if (scaleX !== 1 || scaleY !== 1) transforms += "scale(" + scaleX + ", " + scaleY + $91a310d41f41b7d6$var$_endParenthesis;
    target.style[$91a310d41f41b7d6$var$_transformProp] = transforms || "translate(0, 0)";
}, $91a310d41f41b7d6$var$_renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
    var _ref2 = cache || this, xPercent = _ref2.xPercent, yPercent = _ref2.yPercent, x = _ref2.x, y = _ref2.y, rotation = _ref2.rotation, skewX = _ref2.skewX, skewY = _ref2.skewY, scaleX = _ref2.scaleX, scaleY = _ref2.scaleY, target = _ref2.target, xOrigin = _ref2.xOrigin, yOrigin = _ref2.yOrigin, xOffset = _ref2.xOffset, yOffset = _ref2.yOffset, forceCSS = _ref2.forceCSS, tx = parseFloat(x), ty = parseFloat(y), a11, a21, a12, a22, temp;
    rotation = parseFloat(rotation);
    skewX = parseFloat(skewX);
    skewY = parseFloat(skewY);
    if (skewY) {
        //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
        skewY = parseFloat(skewY);
        skewX += skewY;
        rotation += skewY;
    }
    if (rotation || skewX) {
        rotation *= $91a310d41f41b7d6$var$_DEG2RAD;
        skewX *= $91a310d41f41b7d6$var$_DEG2RAD;
        a11 = Math.cos(rotation) * scaleX;
        a21 = Math.sin(rotation) * scaleX;
        a12 = Math.sin(rotation - skewX) * -scaleY;
        a22 = Math.cos(rotation - skewX) * scaleY;
        if (skewX) {
            skewY *= $91a310d41f41b7d6$var$_DEG2RAD;
            temp = Math.tan(skewX - skewY);
            temp = Math.sqrt(1 + temp * temp);
            a12 *= temp;
            a22 *= temp;
            if (skewY) {
                temp = Math.tan(skewY);
                temp = Math.sqrt(1 + temp * temp);
                a11 *= temp;
                a21 *= temp;
            }
        }
        a11 = $9adc3b62f9b9a789$export$9c8d725d65e13f94(a11);
        a21 = $9adc3b62f9b9a789$export$9c8d725d65e13f94(a21);
        a12 = $9adc3b62f9b9a789$export$9c8d725d65e13f94(a12);
        a22 = $9adc3b62f9b9a789$export$9c8d725d65e13f94(a22);
    } else {
        a11 = scaleX;
        a22 = scaleY;
        a21 = a12 = 0;
    }
    if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
        tx = $91a310d41f41b7d6$var$_convertToUnit(target, "x", x, "px");
        ty = $91a310d41f41b7d6$var$_convertToUnit(target, "y", y, "px");
    }
    if (xOrigin || yOrigin || xOffset || yOffset) {
        tx = $9adc3b62f9b9a789$export$9c8d725d65e13f94(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
        ty = $9adc3b62f9b9a789$export$9c8d725d65e13f94(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
    }
    if (xPercent || yPercent) {
        //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
        temp = target.getBBox();
        tx = $9adc3b62f9b9a789$export$9c8d725d65e13f94(tx + xPercent / 100 * temp.width);
        ty = $9adc3b62f9b9a789$export$9c8d725d65e13f94(ty + yPercent / 100 * temp.height);
    }
    temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
    target.setAttribute("transform", temp);
    forceCSS && (target.style[$91a310d41f41b7d6$var$_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)
}, $91a310d41f41b7d6$var$_addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {
    var cap = 360, isString = $9adc3b62f9b9a789$export$f664476fd67145ca(endValue), endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? $91a310d41f41b7d6$var$_RAD2DEG : 1), change = relative ? endNum * relative : endNum - startNum, finalValue = startNum + change + "deg", direction, pt;
    if (isString) {
        direction = endValue.split("_")[1];
        if (direction === "short") {
            change %= cap;
            if (change !== change % (cap / 2)) change += change < 0 ? cap : -cap;
        }
        if (direction === "cw" && change < 0) change = (change + cap * $91a310d41f41b7d6$var$_bigNum) % cap - ~~(change / cap) * cap;
        else if (direction === "ccw" && change > 0) change = (change - cap * $91a310d41f41b7d6$var$_bigNum) % cap - ~~(change / cap) * cap;
    }
    plugin._pt = pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(plugin._pt, target, property, startNum, change, $91a310d41f41b7d6$var$_renderPropWithEnd);
    pt.e = finalValue;
    pt.u = "deg";
    plugin._props.push(property);
    return pt;
}, $91a310d41f41b7d6$var$_assign = function _assign(target, source) {
    // Internet Explorer doesn't have Object.assign(), so we recreate it here.
    for(var p in source)target[p] = source[p];
    return target;
}, $91a310d41f41b7d6$var$_addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
    //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
    var startCache = $91a310d41f41b7d6$var$_assign({
    }, target._gsap), exclude = "perspective,force3D,transformOrigin,svgOrigin", style = target.style, endCache, p, startValue, endValue, startNum, endNum, startUnit, endUnit;
    if (startCache.svg) {
        startValue = target.getAttribute("transform");
        target.setAttribute("transform", "");
        style[$91a310d41f41b7d6$var$_transformProp] = transforms;
        endCache = $91a310d41f41b7d6$var$_parseTransform(target, 1);
        $91a310d41f41b7d6$var$_removeProperty(target, $91a310d41f41b7d6$var$_transformProp);
        target.setAttribute("transform", startValue);
    } else {
        startValue = getComputedStyle(target)[$91a310d41f41b7d6$var$_transformProp];
        style[$91a310d41f41b7d6$var$_transformProp] = transforms;
        endCache = $91a310d41f41b7d6$var$_parseTransform(target, 1);
        style[$91a310d41f41b7d6$var$_transformProp] = startValue;
    }
    for(p in $91a310d41f41b7d6$var$_transformProps){
        startValue = startCache[p];
        endValue = endCache[p];
        if (startValue !== endValue && exclude.indexOf(p) < 0) {
            //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
            startUnit = $9adc3b62f9b9a789$export$65f2564e9a9b9222(startValue);
            endUnit = $9adc3b62f9b9a789$export$65f2564e9a9b9222(endValue);
            startNum = startUnit !== endUnit ? $91a310d41f41b7d6$var$_convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
            endNum = parseFloat(endValue);
            plugin._pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(plugin._pt, endCache, p, startNum, endNum - startNum, $91a310d41f41b7d6$var$_renderCSSProp);
            plugin._pt.u = endUnit || 0;
            plugin._props.push(p);
        }
    }
    $91a310d41f41b7d6$var$_assign(endCache, startCache);
}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.
$9adc3b62f9b9a789$export$f9000b814859f126("padding,margin,Width,Radius", function(name, index) {
    var t = "Top", r = "Right", b = "Bottom", l = "Left", props = (index < 3 ? [
        t,
        r,
        b,
        l
    ] : [
        t + l,
        t + r,
        b + r,
        b + l
    ]).map(function(side) {
        return index < 2 ? name + side : "border" + side + name;
    });
    $91a310d41f41b7d6$var$_specialProps[index > 1 ? "border" + name : name] = function(plugin, target, property, endValue, tween) {
        var a, vars;
        if (arguments.length < 4) {
            // getter, passed target, property, and unit (from _get())
            a = props.map(function(prop) {
                return $91a310d41f41b7d6$var$_get(plugin, prop, property);
            });
            vars = a.join(" ");
            return vars.split(a[0]).length === 5 ? a[0] : vars;
        }
        a = (endValue + "").split(" ");
        vars = {
        };
        props.forEach(function(prop, i) {
            return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
        });
        plugin.init(target, vars, tween);
    };
});
var $91a310d41f41b7d6$export$855822f522f18eef = {
    name: "css",
    register: $91a310d41f41b7d6$var$_initCore,
    targetTest: function targetTest(target) {
        return target.style && target.nodeType;
    },
    init: function init(target, vars, tween, index, targets) {
        var props = this._props, style = target.style, startAt = tween.vars.startAt, startValue, endValue, endNum, startNum, type, specialProp, p, startUnit, endUnit, relative, isTransformRelated, transformPropTween, cache, smooth, hasPriority;
        $91a310d41f41b7d6$var$_pluginInitted || $91a310d41f41b7d6$var$_initCore();
        for(p in vars){
            if (p === "autoRound") continue;
            endValue = vars[p];
            if ($9adc3b62f9b9a789$export$d305d8ec5d7c26b8[p] && $9adc3b62f9b9a789$export$5c457b74208010cf(p, vars, tween, index, target, targets)) continue;
            type = typeof endValue;
            specialProp = $91a310d41f41b7d6$var$_specialProps[p];
            if (type === "function") {
                endValue = endValue.call(tween, index, target, targets);
                type = typeof endValue;
            }
            if (type === "string" && ~endValue.indexOf("random(")) endValue = $9adc3b62f9b9a789$export$d5962a97e3cde94d(endValue);
            if (specialProp) specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
            else if (p.substr(0, 2) === "--") {
                //CSS variable
                startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
                endValue += "";
                $9adc3b62f9b9a789$export$dd733e62515be2bd.lastIndex = 0;
                if (!$9adc3b62f9b9a789$export$dd733e62515be2bd.test(startValue)) {
                    // colors don't have units
                    startUnit = $9adc3b62f9b9a789$export$65f2564e9a9b9222(startValue);
                    endUnit = $9adc3b62f9b9a789$export$65f2564e9a9b9222(endValue);
                }
                endUnit ? startUnit !== endUnit && (startValue = $91a310d41f41b7d6$var$_convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
                this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
                props.push(p);
            } else if (type !== "undefined") {
                if (startAt && p in startAt) {
                    // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
                    startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
                    $9adc3b62f9b9a789$export$f664476fd67145ca(startValue) && ~startValue.indexOf("random(") && (startValue = $9adc3b62f9b9a789$export$d5962a97e3cde94d(startValue));
                    $9adc3b62f9b9a789$export$65f2564e9a9b9222(startValue + "") || (startValue += $9adc3b62f9b9a789$export$4922bee768729a77.units[p] || $9adc3b62f9b9a789$export$65f2564e9a9b9222($91a310d41f41b7d6$var$_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.
                    (startValue + "").charAt(1) === "=" && (startValue = $91a310d41f41b7d6$var$_get(target, p)); // can't work with relative values
                } else startValue = $91a310d41f41b7d6$var$_get(target, p);
                startNum = parseFloat(startValue);
                relative = type === "string" && endValue.charAt(1) === "=" ? +(endValue.charAt(0) + "1") : 0;
                relative && (endValue = endValue.substr(2));
                endNum = parseFloat(endValue);
                if (p in $91a310d41f41b7d6$var$_propertyAliases) {
                    if (p === "autoAlpha") {
                        //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
                        if (startNum === 1 && $91a310d41f41b7d6$var$_get(target, "visibility") === "hidden" && endNum) //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                        startNum = 0;
                        $91a310d41f41b7d6$var$_addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
                    }
                    if (p !== "scale" && p !== "transform") {
                        p = $91a310d41f41b7d6$var$_propertyAliases[p];
                        ~p.indexOf(",") && (p = p.split(",")[0]);
                    }
                }
                isTransformRelated = p in $91a310d41f41b7d6$var$_transformProps; //--- TRANSFORM-RELATED ---
                if (isTransformRelated) {
                    if (!transformPropTween) {
                        cache = target._gsap;
                        cache.renderTransform && !vars.parseTransform || $91a310d41f41b7d6$var$_parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.
                        smooth = vars.smoothOrigin !== false && cache.smooth;
                        transformPropTween = this._pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(this._pt, style, $91a310d41f41b7d6$var$_transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)
                        transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
                    }
                    if (p === "scale") {
                        this._pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(this._pt, cache, "scaleY", cache.scaleY, (relative ? relative * endNum : endNum - cache.scaleY) || 0);
                        props.push("scaleY", p);
                        p += "X";
                    } else if (p === "transformOrigin") {
                        endValue = $91a310d41f41b7d6$var$_convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.
                        if (cache.svg) $91a310d41f41b7d6$var$_applySVGOrigin(target, endValue, 0, smooth, 0, this);
                        else {
                            endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!
                            endUnit !== cache.zOrigin && $91a310d41f41b7d6$var$_addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);
                            $91a310d41f41b7d6$var$_addNonTweeningPT(this, style, p, $91a310d41f41b7d6$var$_firstTwoOnly(startValue), $91a310d41f41b7d6$var$_firstTwoOnly(endValue));
                        }
                        continue;
                    } else if (p === "svgOrigin") {
                        $91a310d41f41b7d6$var$_applySVGOrigin(target, endValue, 1, smooth, 0, this);
                        continue;
                    } else if (p in $91a310d41f41b7d6$var$_rotationalProperties) {
                        $91a310d41f41b7d6$var$_addRotationalPropTween(this, cache, p, startNum, endValue, relative);
                        continue;
                    } else if (p === "smoothOrigin") {
                        $91a310d41f41b7d6$var$_addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);
                        continue;
                    } else if (p === "force3D") {
                        cache[p] = endValue;
                        continue;
                    } else if (p === "transform") {
                        $91a310d41f41b7d6$var$_addRawTransformPTs(this, endValue, target);
                        continue;
                    }
                } else if (!(p in style)) p = $91a310d41f41b7d6$export$8cbef5dd49a09c8b(p) || p;
                if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !$91a310d41f41b7d6$var$_complexExp.test(endValue) && p in style) {
                    startUnit = (startValue + "").substr((startNum + "").length);
                    endNum || (endNum = 0); // protect against NaN
                    endUnit = $9adc3b62f9b9a789$export$65f2564e9a9b9222(endValue) || (p in $9adc3b62f9b9a789$export$4922bee768729a77.units ? $9adc3b62f9b9a789$export$4922bee768729a77.units[p] : startUnit);
                    startUnit !== endUnit && (startNum = $91a310d41f41b7d6$var$_convertToUnit(target, p, startValue, endUnit));
                    this._pt = new $9adc3b62f9b9a789$export$3a67f7f44b1e838a(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? $91a310d41f41b7d6$var$_renderRoundedCSSProp : $91a310d41f41b7d6$var$_renderCSSProp);
                    this._pt.u = endUnit || 0;
                    if (startUnit !== endUnit && endUnit !== "%") {
                        //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
                        this._pt.b = startValue;
                        this._pt.r = $91a310d41f41b7d6$var$_renderCSSPropWithBeginning;
                    }
                } else if (!(p in style)) {
                    if (p in target) //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
                    this.add(target, p, startValue || target[p], endValue, index, targets);
                    else {
                        $9adc3b62f9b9a789$export$7fb54635790b59a5(p, endValue);
                        continue;
                    }
                } else $91a310d41f41b7d6$var$_tweenComplexCSSString.call(this, target, p, startValue, endValue);
                props.push(p);
            }
        }
        hasPriority && $9adc3b62f9b9a789$export$eed5824f53346d57(this);
    },
    get: $91a310d41f41b7d6$var$_get,
    aliases: $91a310d41f41b7d6$var$_propertyAliases,
    getSetter: function getSetter(target, property, plugin) {
        //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
        var p = $91a310d41f41b7d6$var$_propertyAliases[property];
        p && p.indexOf(",") < 0 && (property = p);
        return property in $91a310d41f41b7d6$var$_transformProps && property !== $91a310d41f41b7d6$var$_transformOriginProp && (target._gsap.x || $91a310d41f41b7d6$var$_get(target, "x")) ? plugin && $91a310d41f41b7d6$var$_recentSetterPlugin === plugin ? property === "scale" ? $91a310d41f41b7d6$var$_setterScale : $91a310d41f41b7d6$var$_setterTransform : ($91a310d41f41b7d6$var$_recentSetterPlugin = plugin || {
        }, property === "scale" ? $91a310d41f41b7d6$var$_setterScaleWithRender : $91a310d41f41b7d6$var$_setterTransformWithRender) : target.style && !$9adc3b62f9b9a789$export$a8178c063a9fd3a1(target.style[property]) ? $91a310d41f41b7d6$var$_setterCSSStyle : ~property.indexOf("-") ? $91a310d41f41b7d6$var$_setterCSSProp : $9adc3b62f9b9a789$export$d60fbc1e0278aaf0(target, property);
    },
    core: {
        _removeProperty: $91a310d41f41b7d6$var$_removeProperty,
        _getMatrix: $91a310d41f41b7d6$var$_getMatrix
    }
};
$9adc3b62f9b9a789$export$99ee26438460406a.utils.checkPrefix = $91a310d41f41b7d6$export$8cbef5dd49a09c8b;
(function(positionAndScale, rotation, others, aliases) {
    var all = $9adc3b62f9b9a789$export$f9000b814859f126(positionAndScale + "," + rotation + "," + others, function(name) {
        $91a310d41f41b7d6$var$_transformProps[name] = 1;
    });
    $9adc3b62f9b9a789$export$f9000b814859f126(rotation, function(name) {
        $9adc3b62f9b9a789$export$4922bee768729a77.units[name] = "deg";
        $91a310d41f41b7d6$var$_rotationalProperties[name] = 1;
    });
    $91a310d41f41b7d6$var$_propertyAliases[all[13]] = positionAndScale + "," + rotation;
    $9adc3b62f9b9a789$export$f9000b814859f126(aliases, function(name) {
        var split = name.split(":");
        $91a310d41f41b7d6$var$_propertyAliases[split[1]] = all[split[0]];
    });
})("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");
$9adc3b62f9b9a789$export$f9000b814859f126("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function(name) {
    $9adc3b62f9b9a789$export$4922bee768729a77.units[name] = "px";
});
$9adc3b62f9b9a789$export$99ee26438460406a.registerPlugin($91a310d41f41b7d6$export$855822f522f18eef);


var $980dae104ebd016a$export$99ee26438460406a = $9adc3b62f9b9a789$export$99ee26438460406a.registerPlugin($91a310d41f41b7d6$export$855822f522f18eef) || $9adc3b62f9b9a789$export$99ee26438460406a, // to protect from tree shaking
$980dae104ebd016a$export$7b23975ad686bf91 = $980dae104ebd016a$export$99ee26438460406a.core.Tween;


var $6a1284bd1e6d77d5$exports = {};
$6a1284bd1e6d77d5$exports = "#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n    vUv = uv;\n}";


var $ade496d0e753374b$exports = {};
$ade496d0e753374b$exports = "#define GLSLIFY 1\n#define PI2 6.28318530\n\nuniform float uTime;\nuniform float uAspect;\nuniform sampler2D uTrail;\nuniform sampler2D uTextureN;\nuniform sampler2D uTextureC;\nuniform float uMultiplier;\nuniform sampler2D uTexture;\nuniform float uBlack;\nuniform float uBlackGradient;\nuniform float uWhite;\nuniform vec2 uMouse;\n\nvarying vec2 vUv;\n\nvoid main()\n{\n\tvec2 nUv = vUv - vec2(0.5);\n\tnUv.x *= uAspect;\n\n\tfloat trail = texture2D(uTrail, vUv).r;\n\tfloat a = trail*PI2;\n    vec2 distortion = 0.9 * trail * vec2(sin(a), cos(a));\n    nUv -= distortion*2.*nUv;\n\n\tvec3 color = texture2D(uTextureN, mod(nUv+uTime*vec2(0.05, 0.05), 1.)).rbg;\n\n\tfloat offset = -0.45;\n\n\tvec3 pColor = texture2D(uTextureC, vec2(fract(uTime*0.1), 0.5)).rgb * 0.45;\n\tcolor -= pColor;\n\n\tcolor = color * uMultiplier;\n\n\tfloat strength = texture2D(uTexture, mod(nUv + uTime * vec2(0.08, 0.04), 1.)).r * 0.2;\n\n\tgl_FragColor = vec4(color, strength);\n\n\tfloat dist = abs(nUv.y);\n\tdist = smoothstep(uBlack, uBlackGradient + uBlack, dist);\n\tgl_FragColor += clamp(dist*3., 0. ,1.);\n\tgl_FragColor += vec4(1., 0.2,0.2, 1.5) * trail * 0.3;\n\n\tgl_FragColor = mix(gl_FragColor, vec4(1.), uWhite);\n}\n\n";


class $0c400d4900c824ad$export$2e2bcd8739ae039 {
    constructor({ scene: scene , width: width , height: height , trail: trail , fov: fov , aspect: aspect , template: template  }){
        this.mouse = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        this.parentWidth = width;
        this.parentHeight = height;
        this.template = template;
        this.fov = fov;
        this.aspect = aspect;
        this.height = 7000 * Math.tan(fov * Math.PI / 360);
        this.width = this.height * aspect;
        this.group = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
        scene.add(this.group);
        this.trail = trail;
        this.setTextures();
        this.setMaterial();
    }
    setTextures() {
        this.fogTexture = window.TEXTURES.fog;
        this.nebulaTexture = window.TEXTURES.nebula;
        this.colorPaletteTexture = window.TEXTURES.palette;
    }
    setMaterial() {
        this.geometry = new $2d9d8c9fc2282acc$export$e789a11a194ca4e0(1, 1);
        this.material = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            vertexShader: (/*@__PURE__*/$parcel$interopDefault($6a1284bd1e6d77d5$exports)),
            fragmentShader: (/*@__PURE__*/$parcel$interopDefault($ade496d0e753374b$exports)),
            depthTest: false,
            uniforms: {
                uTime: {
                    value: 0
                },
                uAspect: {
                    value: this.width / this.height
                },
                uTexture: {
                    value: this.fogTexture
                },
                uTextureN: {
                    value: this.nebulaTexture
                },
                uTextureC: {
                    value: this.colorPaletteTexture
                },
                uTrail: {
                    value: this.trail
                },
                uMultiplier: {
                    value: 1
                },
                uBlack: {
                    value: 0.26
                },
                uBlackGradient: {
                    value: 0.7
                },
                uWhite: {
                    value: 0
                }
            },
            transparent: true
        });
        this.mesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(this.geometry, this.material);
        this.mesh.renderOrder = -10;
        this.mesh.position.z = -3000;
        this.mesh.scale.set(this.width, this.height, 1);
        this.group.add(this.mesh);
    }
    onResize({ camera: camera  }) {
        this.height = 7000 * Math.tan(camera.fov * Math.PI / 360);
        this.width = this.height * camera.aspect;
        this.mesh.scale.set(this.width, this.height, 1);
        this.material.uniforms.uAspect.value = this.width / this.height;
    }
    async onChange(template) {
        if (template === "/about") $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uWhite, {
            value: 0.7,
            duration: 1.5
        });
        if (template === "/") {
            $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uWhite, {
                value: 0,
                duration: 1.5
            });
            $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uMultiplier, {
                value: 0.8,
                duration: 1.5
            });
            if (this.material.uniforms.uBlackGradient.value < 0) {
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0,
                    duration: 1,
                    onComplete: ()=>{
                        this.material.uniforms.uBlackGradient.value = 1;
                        this.material.uniforms.uBlack.value = 1;
                    }
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0.22,
                    duration: 1.5,
                    delay: 1
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlackGradient, {
                    value: 0.8,
                    duration: 1.5,
                    delay: 1
                });
            } else {
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0.22,
                    duration: 1.5
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlackGradient, {
                    value: 0.8,
                    duration: 1.5
                });
            }
        }
        if (template.includes("/detail/")) {
            $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uMultiplier, {
                value: 0.25,
                duration: 1.5
            });
            $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uWhite, {
                value: 0,
                duration: 1.5
            });
            if (this.template === "/") {
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 1,
                    duration: 1.5,
                    onComplete: ()=>{
                        this.material.uniforms.uBlackGradient.value = -1;
                        this.material.uniforms.uBlack.value = 0;
                    }
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0.3,
                    duration: 1.5,
                    delay: 1.5
                });
            } else {
                this.material.uniforms.uBlackGradient.value = -1;
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0.3,
                    duration: 1.5
                });
            }
        }
        if (template === "/snippets") {
            $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uMultiplier, {
                value: 1,
                duration: 1.5
            });
            $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uWhite, {
                value: 0,
                duration: 1.5
            });
            if (this.template === "/") {
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 1,
                    duration: 1.5,
                    onComplete: ()=>{
                        this.material.uniforms.uBlackGradient.value = -1;
                        this.material.uniforms.uBlack.value = 0;
                    }
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0.28,
                    duration: 1.5,
                    delay: 1.5
                });
            } else {
                this.material.uniforms.uBlackGradient.value = -1;
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uBlack, {
                    value: 0.28,
                    duration: 1.5
                });
            }
        }
        this.template = template;
    }
    update(time) {
        this.material.uniforms.uTime.value = time;
    }
}



class $19d4c7babde7c9f0$export$2e2bcd8739ae039 {
    constructor({ width: width , height: height , ratio: ratio , camera: camera , renderer: renderer  }){
        this.scene = new $2d9d8c9fc2282acc$export$38af1803e3442a7f();
        this.group = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
        this.previous = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        this.position = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        this.currentTouch = 0;
        this.map = window.TEXTURES.vortex;
        this.numTouch = 10;
        this.trail = [];
        this.stop = true;
        this.pause = false;
        this.width = width;
        this.height = height;
        this.scene.position.y = 0.5 * (1 - ratio) * this.height;
        this.baseScale = Math.max(this.height * 0.4, this.width * 0.2);
        this.camera = camera;
        this.renderer = renderer;
        this.setRenderTarget();
        this.setTrail();
    }
    setRenderTarget() {
        this.target = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(this.width, this.height, {
            minFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
            magFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
            format: $2d9d8c9fc2282acc$export$3f8bb04b555a363c,
            generateMipmaps: false
        });
        this.texture = this.target.texture;
    }
    setTrail() {
        const geometry = new $2d9d8c9fc2282acc$export$e789a11a194ca4e0(1, 1);
        const material = new $2d9d8c9fc2282acc$export$55cbcc9b622fe1f5({
            map: this.map,
            transparent: true,
            blending: $2d9d8c9fc2282acc$export$777d8f9551c2216b
        });
        for(let i = 0; i < this.numTouch; i++){
            const mesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(geometry, i === 0 ? material : material.clone());
            mesh.visible = false;
            mesh.rotation.z = 2 * Math.PI * Math.random();
            mesh.scale.x = mesh.scale.y = this.baseScale;
            this.scene.add(mesh);
            this.trail.push(mesh);
        }
    }
    addTouch(x, y, index) {
        let mesh = this.trail[index];
        mesh.visible = true;
        mesh.position.x = x;
        mesh.position.y = y;
        mesh.material.opacity = 1;
        mesh.scale.x = mesh.scale.y = this.baseScale;
    }
    updateTouch() {
        if (this.position.distanceTo(this.previous) > 6) {
            this.addTouch(this.position.x, this.position.y, this.currentTouch);
            this.currentTouch = (this.currentTouch + 1) % this.numTouch;
        }
        this.previous.set(this.position.x, this.position.y);
    }
    onTouchMove({ x: x , y: y  }) {
        this.position.x = x - this.width / 2;
        this.position.y = -y + this.height / 2;
    }
    onChange(template) {
    // if (Detection.isDesktop()) return;
    // if (template !== "/") {
    //   this.pause = true;
    // } else {
    //   this.pause = false;
    // }
    }
    onResize({ width: width , height: height , ratio: ratio  }) {
        this.width = width;
        this.height = height;
        this.target.setSize(this.width, this.height);
        this.scene.position.y = 0.5 * (1 - ratio) * this.height;
        this.baseScale = Math.max(this.height * 0.4, this.width * 0.2);
    }
    update() {
        if (this.pause) return;
        if (!this.stop) {
            this.renderer.setRenderTarget(this.target);
            this.renderer.render(this.scene, this.camera);
            this.renderer.setRenderTarget(null);
            this.renderer.clear();
        }
        this.stop = true;
        this.trail.forEach((mesh)=>{
            if (mesh.visible) {
                this.stop = false;
                mesh.rotation.z += 0.03;
                mesh.material.opacity *= 0.99;
                mesh.scale.x = mesh.scale.x * 0.992;
                mesh.scale.y = mesh.scale.x;
                if (mesh.material.opacity < 0.05) mesh.visible = false;
            }
        });
        this.updateTouch();
    }
}


class $dca6d1e03401b07e$export$2e2bcd8739ae039 {
    show() {
    }
    hide() {
    }
}


class $36043e5593076086$export$2e2bcd8739ae039 {
    constructor(){
    }
    show() {
    }
    hide() {
    }
}



const $95b9742290dc9865$var$_lut = [];
for(let i = 0; i < 256; i++)$95b9742290dc9865$var$_lut[i] = (i < 16 ? '0' : '') + i.toString(16);
let $95b9742290dc9865$var$_seed = 1234567;
const $95b9742290dc9865$export$460c4029b1a54a2e = Math.PI / 180;
const $95b9742290dc9865$export$914076c8150813e5 = 180 / Math.PI;
// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function $95b9742290dc9865$export$e73c8bd0f20705a() {
    const d0 = Math.random() * 4294967295 | 0;
    const d1 = Math.random() * 4294967295 | 0;
    const d2 = Math.random() * 4294967295 | 0;
    const d3 = Math.random() * 4294967295 | 0;
    const uuid = $95b9742290dc9865$var$_lut[d0 & 255] + $95b9742290dc9865$var$_lut[d0 >> 8 & 255] + $95b9742290dc9865$var$_lut[d0 >> 16 & 255] + $95b9742290dc9865$var$_lut[d0 >> 24 & 255] + '-' + $95b9742290dc9865$var$_lut[d1 & 255] + $95b9742290dc9865$var$_lut[d1 >> 8 & 255] + '-' + $95b9742290dc9865$var$_lut[d1 >> 16 & 15 | 64] + $95b9742290dc9865$var$_lut[d1 >> 24 & 255] + '-' + $95b9742290dc9865$var$_lut[d2 & 63 | 128] + $95b9742290dc9865$var$_lut[d2 >> 8 & 255] + '-' + $95b9742290dc9865$var$_lut[d2 >> 16 & 255] + $95b9742290dc9865$var$_lut[d2 >> 24 & 255] + $95b9742290dc9865$var$_lut[d3 & 255] + $95b9742290dc9865$var$_lut[d3 >> 8 & 255] + $95b9742290dc9865$var$_lut[d3 >> 16 & 255] + $95b9742290dc9865$var$_lut[d3 >> 24 & 255];
    // .toUpperCase() here flattens concatenated strings to save heap memory space.
    return uuid.toUpperCase();
}
function $95b9742290dc9865$export$7d15b64cf5a3a4c4(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
// compute euclidian modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function $95b9742290dc9865$export$3c11354a743b7f4e(n, m) {
    return (n % m + m) % m;
}
// Linear mapping from range <a1, a2> to range <b1, b2>
function $95b9742290dc9865$export$61343b3c0ad0a00a(x, a1, a2, b1, b2) {
    return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
}
// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function $95b9742290dc9865$export$c45b79d581bbb999(x, y, value) {
    if (x !== y) return (value - x) / (y - x);
    else return 0;
}
// https://en.wikipedia.org/wiki/Linear_interpolation
function $95b9742290dc9865$export$3a89f8d6f6bf6c9f(x, y, t) {
    return (1 - t) * x + t * y;
}
// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function $95b9742290dc9865$export$f81c1cb84e35b185(x, y, lambda, dt) {
    return $95b9742290dc9865$export$3a89f8d6f6bf6c9f(x, y, 1 - Math.exp(-lambda * dt));
}
// https://www.desmos.com/calculator/vcsjnyz7x4
function $95b9742290dc9865$export$1d919ae830ac5239(x, length = 1) {
    return length - Math.abs($95b9742290dc9865$export$3c11354a743b7f4e(x, length * 2) - length);
}
// http://en.wikipedia.org/wiki/Smoothstep
function $95b9742290dc9865$export$4053e36566dd3d9a(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * (3 - 2 * x);
}
function $95b9742290dc9865$export$7509a5c452b9dce8(x, min, max) {
    if (x <= min) return 0;
    if (x >= max) return 1;
    x = (x - min) / (max - min);
    return x * x * x * (x * (x * 6 - 15) + 10);
}
// Random integer from <low, high> interval
function $95b9742290dc9865$export$a85cdcada2f6e6d0(low, high) {
    return low + Math.floor(Math.random() * (high - low + 1));
}
// Random float from <low, high> interval
function $95b9742290dc9865$export$8dceb61b660164cc(low, high) {
    return low + Math.random() * (high - low);
}
// Random float from <-range/2, range/2> interval
function $95b9742290dc9865$export$f093f4e85c7dea5a(range) {
    return range * (0.5 - Math.random());
}
// Deterministic pseudo-random float in the interval [ 0, 1 ]
function $95b9742290dc9865$export$d3abb7a3a61fb0cb(s) {
    if (s !== undefined) $95b9742290dc9865$var$_seed = s % 2147483647;
    // Park-Miller algorithm
    $95b9742290dc9865$var$_seed = $95b9742290dc9865$var$_seed * 16807 % 2147483647;
    return ($95b9742290dc9865$var$_seed - 1) / 2147483646;
}
function $95b9742290dc9865$export$e6bfdeff8bfc94f9(degrees) {
    return degrees * $95b9742290dc9865$export$460c4029b1a54a2e;
}
function $95b9742290dc9865$export$54390e3b44c4a9cb(radians) {
    return radians * $95b9742290dc9865$export$914076c8150813e5;
}
function $95b9742290dc9865$export$b9e43d1765415474(value) {
    return (value & value - 1) === 0 && value !== 0;
}
function $95b9742290dc9865$export$150eaaaf1e7bb6f7(value) {
    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function $95b9742290dc9865$export$b500f0356efda8ea(value) {
    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function $95b9742290dc9865$export$ef2201424fe649f7(q, a, b, c, order) {
    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
    // rotations are applied to the axes in the order specified by 'order'
    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
    // angles are in radians
    const cos = Math.cos;
    const sin = Math.sin;
    const c2 = cos(b / 2);
    const s2 = sin(b / 2);
    const c13 = cos((a + c) / 2);
    const s13 = sin((a + c) / 2);
    const c1_3 = cos((a - c) / 2);
    const s1_3 = sin((a - c) / 2);
    const c3_1 = cos((c - a) / 2);
    const s3_1 = sin((c - a) / 2);
    switch(order){
        case 'XYX':
            q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
            break;
        case 'YZY':
            q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
            break;
        case 'ZXZ':
            q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
            break;
        case 'XZX':
            q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
            break;
        case 'YXY':
            q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
            break;
        case 'ZYZ':
            q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
            break;
        default:
            console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
    }
}



var $0a7160e2bec6e48d$exports = {};
$0a7160e2bec6e48d$exports = "#define GLSLIFY 1\nuniform float uTime;\nuniform float uScale;\nuniform float uIndex;\nuniform float uTransition;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec3 pos = position;\n\n    pos *= uScale;\n\n    float dist = distance(uv, vec2(0.5));\n    float wave = sin(dist * (10.+uIndex*2.) + uTime*1.5 + 3.1415 * uIndex) * uTransition;\n    pos.z += 6. * wave;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n    vUv = uv;\n}";


var $277bb2c4618ced5f$exports = {};
$277bb2c4618ced5f$exports = "#define GLSLIFY 1\nuniform sampler2D uTexture;\nuniform sampler2D uDisplacementMap;\nuniform sampler2D uDisplacementMap2;\nuniform float uSpeed;\nuniform float uDirection;\nuniform float uTransition;\nuniform float uOpacity;\nuniform float uZ;\n\nvarying vec2 vUv;\n\nvoid main() {\n    float dR = texture2D(uDisplacementMap, vUv).r;\n    float dL = texture2D(uDisplacementMap2, vUv).r;\n    vec2 dUv = vUv;\n    dUv.x = mix(vUv.x, dR * uDirection + (1.-uDirection) * (1. - dL), abs(uSpeed) * 4.5);\n\n    vec4 image = texture2D(uTexture, dUv);\n    vec3 colorDistortion = vec3(texture2D(uTexture, dUv + vec2(0.12*uSpeed, 0.)).r, texture2D(uTexture, dUv + vec2(0.34*uSpeed, 0.)).g, texture2D(uTexture, dUv + vec2(0.56*uSpeed, 0.)).b);\n    image.rgb = mix(image.rgb, colorDistortion, uTransition);\n\n    float gray = 0.21 * image.r + 0.71 * image.g + 0.07 * image.b;\n\n    vec4 notCurrent = vec4(vec3(gray), 0.6);\n\n    gl_FragColor =  mix(notCurrent, image, 1. - abs(uZ));\n    gl_FragColor.a *= uOpacity;\n    \n\n}";


class $6172e5b48d8b8161$export$2e2bcd8739ae039 {
    constructor({ element: element , geometry: geometry , position: position , scene: scene  }){
        this.extra = 0;
        this.initialPosition = 0;
        this.displacementLeftTexture = window.TEXTURES.displ;
        this.displacementRightTexture = window.TEXTURES.displ2;
        this.texture = window.TEXTURES[element.querySelector("img").getAttribute("data-src")];
        this.snippetIndex = Number(element.getAttribute("data-index"));
        this.geometry = geometry;
        this.position = position;
        this.scene = scene;
        this.setMaterial();
        this.setMesh();
    }
    setMaterial() {
        this.material = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            vertexShader: (/*@__PURE__*/$parcel$interopDefault($0a7160e2bec6e48d$exports)),
            fragmentShader: (/*@__PURE__*/$parcel$interopDefault($277bb2c4618ced5f$exports)),
            uniforms: {
                uTexture: {
                    value: this.texture
                },
                uTime: {
                    value: 0
                },
                uSpeed: {
                    value: 0
                },
                uOpacity: {
                    value: 1
                },
                uDirection: {
                    value: 0
                },
                uTransition: {
                    value: 1
                },
                uDisplacementMap: {
                    value: this.displacementLeftTexture
                },
                uScale: {
                    value: 1
                },
                uZ: {
                    value: 0
                },
                uIndex: {
                    value: this.position
                },
                uDisplacementMap2: {
                    value: this.displacementRightTexture
                }
            },
            transparent: true
        });
    }
    setMesh() {
        this.mesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(this.geometry, this.material);
        this.scene.add(this.mesh);
    }
    onResize({ galleryWidth: galleryWidth , upperBound: upperBound , lowerBound: lowerBound , scale: scale , unitSize: unitSize  }) {
        this.extra = 0;
        this.galleryWidth = galleryWidth;
        this.upperBound = upperBound;
        this.lowerBound = lowerBound;
        this.mesh.scale.x = this.mesh.scale.y = scale;
        this.initialPosition = this.position * unitSize;
        this.mesh.position.x = this.initialPosition;
    }
    update({ scroll: scroll  }) {
        this.mesh.position.x = this.initialPosition - scroll + this.extra;
        if (this.mesh.position.x > this.upperBound) this.extra -= this.galleryWidth;
        else if (this.mesh.position.x < this.lowerBound) this.extra += this.galleryWidth;
    }
}



var $ef35f6280e8cf2f8$exports = {};
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $ef35f6280e8cf2f8$var$R = typeof Reflect === 'object' ? Reflect : null;
var $ef35f6280e8cf2f8$var$ReflectApply = $ef35f6280e8cf2f8$var$R && typeof $ef35f6280e8cf2f8$var$R.apply === 'function' ? $ef35f6280e8cf2f8$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $ef35f6280e8cf2f8$var$ReflectOwnKeys;
if ($ef35f6280e8cf2f8$var$R && typeof $ef35f6280e8cf2f8$var$R.ownKeys === 'function') $ef35f6280e8cf2f8$var$ReflectOwnKeys = $ef35f6280e8cf2f8$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $ef35f6280e8cf2f8$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $ef35f6280e8cf2f8$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $ef35f6280e8cf2f8$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $ef35f6280e8cf2f8$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $ef35f6280e8cf2f8$var$EventEmitter() {
    $ef35f6280e8cf2f8$var$EventEmitter.init.call(this);
}
$ef35f6280e8cf2f8$exports = $ef35f6280e8cf2f8$var$EventEmitter;
$ef35f6280e8cf2f8$exports.once = $ef35f6280e8cf2f8$var$once;
// Backwards-compat with node 0.10.x
$ef35f6280e8cf2f8$var$EventEmitter.EventEmitter = $ef35f6280e8cf2f8$var$EventEmitter;
$ef35f6280e8cf2f8$var$EventEmitter.prototype._events = undefined;
$ef35f6280e8cf2f8$var$EventEmitter.prototype._eventsCount = 0;
$ef35f6280e8cf2f8$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $ef35f6280e8cf2f8$var$defaultMaxListeners = 10;
function $ef35f6280e8cf2f8$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($ef35f6280e8cf2f8$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return $ef35f6280e8cf2f8$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || $ef35f6280e8cf2f8$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $ef35f6280e8cf2f8$var$defaultMaxListeners = arg;
    }
});
$ef35f6280e8cf2f8$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$ef35f6280e8cf2f8$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $ef35f6280e8cf2f8$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $ef35f6280e8cf2f8$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $ef35f6280e8cf2f8$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$ef35f6280e8cf2f8$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $ef35f6280e8cf2f8$var$_getMaxListeners(this);
};
$ef35f6280e8cf2f8$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $ef35f6280e8cf2f8$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $ef35f6280e8cf2f8$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$ef35f6280e8cf2f8$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $ef35f6280e8cf2f8$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $ef35f6280e8cf2f8$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $ef35f6280e8cf2f8$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $ef35f6280e8cf2f8$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$ef35f6280e8cf2f8$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $ef35f6280e8cf2f8$var$_addListener(this, type, listener, false);
};
$ef35f6280e8cf2f8$var$EventEmitter.prototype.on = $ef35f6280e8cf2f8$var$EventEmitter.prototype.addListener;
$ef35f6280e8cf2f8$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $ef35f6280e8cf2f8$var$_addListener(this, type, listener, true);
};
function $ef35f6280e8cf2f8$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $ef35f6280e8cf2f8$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $ef35f6280e8cf2f8$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$ef35f6280e8cf2f8$var$EventEmitter.prototype.once = function once(type, listener) {
    $ef35f6280e8cf2f8$var$checkListener(listener);
    this.on(type, $ef35f6280e8cf2f8$var$_onceWrap(this, type, listener));
    return this;
};
$ef35f6280e8cf2f8$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $ef35f6280e8cf2f8$var$checkListener(listener);
    this.prependListener(type, $ef35f6280e8cf2f8$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$ef35f6280e8cf2f8$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $ef35f6280e8cf2f8$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $ef35f6280e8cf2f8$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$ef35f6280e8cf2f8$var$EventEmitter.prototype.off = $ef35f6280e8cf2f8$var$EventEmitter.prototype.removeListener;
$ef35f6280e8cf2f8$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $ef35f6280e8cf2f8$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $ef35f6280e8cf2f8$var$unwrapListeners(evlistener) : $ef35f6280e8cf2f8$var$arrayClone(evlistener, evlistener.length);
}
$ef35f6280e8cf2f8$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $ef35f6280e8cf2f8$var$_listeners(this, type, true);
};
$ef35f6280e8cf2f8$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $ef35f6280e8cf2f8$var$_listeners(this, type, false);
};
$ef35f6280e8cf2f8$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $ef35f6280e8cf2f8$var$listenerCount.call(emitter, type);
};
$ef35f6280e8cf2f8$var$EventEmitter.prototype.listenerCount = $ef35f6280e8cf2f8$var$listenerCount;
function $ef35f6280e8cf2f8$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$ef35f6280e8cf2f8$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $ef35f6280e8cf2f8$var$ReflectOwnKeys(this._events) : [];
};
function $ef35f6280e8cf2f8$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $ef35f6280e8cf2f8$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $ef35f6280e8cf2f8$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $ef35f6280e8cf2f8$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        $ef35f6280e8cf2f8$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') $ef35f6280e8cf2f8$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $ef35f6280e8cf2f8$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') $ef35f6280e8cf2f8$var$eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function $ef35f6280e8cf2f8$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}


class $a34760a1451bfed6$export$2e2bcd8739ae039 extends (/*@__PURE__*/$parcel$interopDefault($ef35f6280e8cf2f8$exports)) {
    constructor({ scene: scene , width: width , height: height  }){
        super();
        this.group = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
        this.index = 4;
        this.galleryElement = document.querySelector(".snippets__gallery");
        this.gap = document.querySelector(".snippets__gap");
        this.mediaSize = 0;
        this.gapSize = 0;
        this.unitSize = 0;
        this.zMagnitude = 0;
        this.galleryWidth = 0;
        this.mediaElements = document.querySelectorAll(".snippets__gallery__media");
        this.scroll = {
            ease: 0.07,
            current: 0,
            target: 0,
            start: 0,
            previous: 0
        };
        this.geometry = new $2d9d8c9fc2282acc$export$e789a11a194ca4e0(1, 1, 50, 50);
        this.time = 0;
        this.direction = 1;
        this.isTransitioning = false;
        this.detailIndex = 2;
        this.activePodIndex = 0;
        this.scene = scene;
        this.width = width;
        this.height = height;
        this.mediaLinks = this.galleryElement.querySelectorAll(".snippets__gallery__link");
        this.numMedias = this.mediaLinks.length;
        this.setGallery();
        this.onResize({
            width: this.width,
            height: this.height
        });
    }
    setGallery() {
        this.medias = [
            ...this.mediaLinks
        ].map((element, index)=>{
            const media = new $6172e5b48d8b8161$export$2e2bcd8739ae039({
                element: element,
                geometry: this.geometry,
                position: index,
                scene: this.group
            });
            return media;
        });
    }
    fromHomeTransition() {
        this.scene.add(this.group);
        this.medias.forEach((media, index)=>{
            media.material.uniforms.uOpacity.value = 1;
            media.material.uniforms.uTransition.value = 1;
            $980dae104ebd016a$export$99ee26438460406a.fromTo(media.material.uniforms.uScale, {
                value: 0
            }, {
                value: 1,
                delay: index * 0.075,
                duration: 1.5
            });
        });
        this.group.scale.set(0.5, 0.8, 1);
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.scale, {
            x: 1,
            y: 1,
            z: 1,
            duration: 1.5
        });
    }
    fromDetailTransition() {
        this.isTransitioning = true;
        this.medias.forEach((media)=>{
            media.material.uniforms.uOpacity.value = 0;
        });
        this.onResize({
            width: this.width,
            height: this.height
        });
        this.scene.add(this.group);
        const duration = 1;
        this.medias.forEach((media, index)=>{
            if (index !== this.index) $980dae104ebd016a$export$99ee26438460406a.to(media.material.uniforms.uOpacity, {
                value: 1,
                duration: duration,
                onComplete: ()=>{
                    this.medias[this.index].material.uniforms.uOpacity.value = 1;
                }
            });
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.medias[this.index].material.uniforms.uTransition, {
            value: 1,
            duration: 3,
            delay: duration
        });
        $980dae104ebd016a$export$99ee26438460406a.delayedCall(duration, ()=>{
            this.isTransitioning = false;
        });
    }
    fromAboutTransition() {
        this.scene.add(this.group);
        this.onResize({
            width: this.width,
            height: this.height
        });
        this.medias.forEach((media)=>{
            media.material.uniforms.uScale.value = 1;
            $980dae104ebd016a$export$99ee26438460406a.fromTo(media.material.uniforms.uOpacity, {
                value: 0
            }, {
                value: 1,
                duration: 1.5
            });
        });
    }
    show(template) {
        const activeMedia = this.medias.find((media)=>media.snippetIndex === this.activePodIndex
        );
        if (this.podTexture) activeMedia.material.uniforms.uTexture.value = this.podTexture;
        if (template === "/") this.fromHomeTransition();
        else if (template.includes("/detail/")) {
            this.index = activeMedia.position;
            this.fromDetailTransition();
        } else if (template === "/about") this.fromAboutTransition();
        else this.scene.add(this.group);
    }
    toHomeTransition() {
        this.medias.forEach((media, index)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(media.material.uniforms.uScale, {
                value: 0,
                delay: index * 0.02,
                duration: 0.6
            });
        });
    }
    toDetailTransition() {
        this.emit("toDetail", this.medias[this.index].mesh.position.x + this.group.position.x, this.medias[this.index].mesh.position.z);
        const duration = 1.5;
        $980dae104ebd016a$export$99ee26438460406a.to(this.medias[this.index].material.uniforms.uTransition, {
            value: 0,
            duration: 0.3,
            onComplete: ()=>{
                this.medias[this.index].material.uniforms.uOpacity.value = 0;
            }
        });
        this.medias.forEach((media, index)=>{
            if (index !== this.index) $980dae104ebd016a$export$99ee26438460406a.to(media.material.uniforms.uOpacity, {
                value: 0,
                duration: duration
            });
        });
        $980dae104ebd016a$export$99ee26438460406a.delayedCall(duration, ()=>{
            this.scene.remove(this.group);
        });
    }
    hide(template) {
        if (template === "/") this.toHomeTransition();
        else if (template.includes("/detail/")) this.toDetailTransition();
        else this.scene.remove(this.group);
    }
    onResize({ width: width , height: height  }) {
        this.width = width;
        this.height = height;
        this.mediaSize = this.galleryElement.clientWidth;
        this.gapSize = this.gap.clientWidth;
        this.unitSize = this.mediaSize + this.gapSize;
        this.zMagnitude = Math.min(this.mediaSize, 400);
        this.galleryWidth = this.numMedias * this.unitSize;
        this.group.position.x = 0.5 * (this.unitSize - this.galleryWidth);
        this.medias.forEach((media)=>media.onResize({
                galleryWidth: this.galleryWidth,
                upperBound: this.galleryWidth - 0.5 * this.unitSize,
                lowerBound: -0.5 * this.unitSize,
                scale: this.mediaSize,
                unitSize: this.unitSize
            })
        );
        this.scroll.current = this.scroll.target = (this.index - 2) * this.unitSize;
        this.update(this.time);
    }
    onWheel(scroll) {
        if (!this.isTransitioning) this.scroll.target += scroll;
    }
    onTouchDown({ x: x , y: y  }) {
        this.touchStart = x;
        this.scroll.start = this.scroll.current;
    }
    onTouchMove({ x: x , y: y  }) {
        const distance = this.touchStart - x;
        if (Math.abs(distance) > 1) this.mediaLinks[this.index].classList.add("snippets__gallery__link--dragging");
        this.scroll.target = this.scroll.start + distance * 3;
    }
    onTouchUp() {
        this.mediaLinks.forEach((element)=>element.classList.remove("snippets__gallery__link--dragging")
        );
    }
    updateIndex(center) {
        let index = (center + 2) % 5;
        if (index < 0) index += 5;
        if (this.index !== index) {
            this.mediaLinks[this.index].classList.remove("snippets__gallery__link--active");
            this.index = index;
            this.mediaLinks[this.index].classList.add("snippets__gallery__link--active");
        }
    }
    update(time) {
        this.time = time;
        const distanceFromTarget = this.scroll.target - this.scroll.current;
        this.direction = distanceFromTarget >= 0 ? 1 : 0;
        this.scroll.previous = this.scroll.current;
        const speed = distanceFromTarget * 0.11;
        this.speed = $95b9742290dc9865$export$7d15b64cf5a3a4c4(speed, -80, 80) / 80;
        this.scroll.current += speed;
        const distanceFromCenter = this.scroll.current / this.unitSize;
        const center = Math.round(distanceFromCenter);
        this.updateIndex(center);
        const discrepancy = center - distanceFromCenter;
        this.scroll.target += Math.sqrt(Math.abs(discrepancy)) * this.mediaSize * 0.01 * Math.sign(discrepancy);
        this.medias.forEach((media)=>{
            media.update({
                scroll: this.scroll.current
            });
            const deltaZ = Math.cos(Math.PI * ((media.mesh.position.x - this.unitSize) / this.group.position.x));
            media.mesh.position.z = deltaZ * this.zMagnitude;
            media.material.uniforms.uTime.value = this.time;
            media.material.uniforms.uSpeed.value = this.speed;
            media.material.uniforms.uDirection.value = this.direction;
            media.material.uniforms.uZ.value = deltaZ / 0.7;
        });
    }
}




var $b5ed3cfaeb1f6db4$exports = {};
$b5ed3cfaeb1f6db4$exports = "#define GLSLIFY 1\n#define OCTAVES 2\n\nuniform float uTime;\nuniform float uC;\nuniform sampler2D uTexture;\n\nvarying vec2 vUv;\n\nvec2 rotUv(vec2 uv, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    mat2 m = mat2(c,s,-s,c);\n    return m * uv;\n}\n\nvec2 random2(vec2 st){\n      vec2 t = vec2(texture2D(uTexture, st/1023.).x, texture2D(uTexture, st/1023.+.5).x);\n      return t*t*4.;\n    }\n\n// value noise: https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n        vec2 i = floor(st);\n        vec2 f = fract(st);\n\n        vec2 u = f*f*(3.0-2.0*f);\n\n        return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                         dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                    mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                         dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n    }\n\nfloat fbm(in vec2 _st) {\n      float v = 0.0;\n      float a = 0.5;\n      vec2 shift = vec2(100.0);\n      for (int i = 0; i < OCTAVES; ++i) {\n          v += a * noise(_st);\n        _st = rotUv(_st, 0.5) * 2. + shift;\n        a *= 0.4;\n      }\n      return v;\n    }\n\nfloat pattern(vec2 uv, float time, inout vec2 q, inout vec2 r) {\n      q = vec2(fbm(uv * .4), fbm(uv + vec2(5.2, 1.3)));\n\n      r = vec2(fbm(uv * .1 + 4.0 * q + vec2(1.7 - time / 2.,9.2)), fbm(uv + 4.0 * q + vec2(8.3 - time / 2., 2.8)));\n\n      vec2 s = vec2(fbm(uv + 5.0 * r + vec2(21.7 - time / 2., 90.2)), fbm( uv * .05 + 5.0 * r + vec2(80.3 - time / 2., 20.8))) * .35;\n\n      return fbm(uv * .05 + 4.0 * s);\n    }\n\n// pattern adapted from: https://www.shadertoy.com/view/wttXz8\nvoid main() {\n    vec2 nUv = vUv - vec2(0.5);\n    nUv = rotUv(nUv, 0.1 * uTime);\n    nUv *= 0.9 * (sin(uTime)) + 3.;\n    nUv.x -= 0.2 * uTime;\n\n    vec2 q = vec2(0.);\n    vec2 r = vec2(0.);\n\n    float c = 3. * abs(pattern(nUv, uTime, q, r));\n    vec3 col = vec3(c);\n    col.r += dot(q, r) * 15. * uC;\n    col.b += dot(q, r) * 10. * (1. - uC);\n\n    float strength = smoothstep(1., 0.0, 2.5*distance(vUv, vec2(0.5)));\n    col = mix(vec3(0.), col, strength);\n\n    gl_FragColor = vec4(col, 1.);\n}";


var $efa27b50db0c8f94$exports = {};
$efa27b50db0c8f94$exports = "#define GLSLIFY 1\nattribute vec3 aSphere;\n\nuniform float uProgress;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec3 pos = position;\n    pos = mix(pos, aSphere, uProgress);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n    vUv = uv;\n}";


var $bc828eb139ee78c0$exports = {};
$bc828eb139ee78c0$exports = "#define GLSLIFY 1\nuniform sampler2D uMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n    vec4 map = texture2D(uMap, vUv);\n    gl_FragColor = vec4(vUv, 1., 1.);\n    gl_FragColor = map;\n}";



class $ea0b881b56c5595f$export$2e2bcd8739ae039 extends (/*@__PURE__*/$parcel$interopDefault($ef35f6280e8cf2f8$exports)) {
    constructor({ element: element , elements: elements  }){
        super();
        this.selector = element;
        this.selectorChildren = {
            ...elements
        };
        this.create();
    }
    create() {
        if (this.selector instanceof window.HTMLElement) this.element = this.selector;
        else this.element = document.querySelector(this.selector);
        this.elements = {
        };
        Object.entries(this.selectorChildren).forEach(([key, entry])=>{
            if (entry instanceof window.HTMLElement || entry instanceof window.NodeList || Array.isArray(entry)) this.elements[key] = entry;
            else {
                this.elements[key] = this.element.querySelectorAll(entry);
                if (this.elements[key].length === 0) this.elements[key] = null;
                else if (this.elements[key].length === 1) this.elements[key] = this.element.querySelector(entry);
            }
        });
    }
}


class $3b023ae3499a6e15$export$2e2bcd8739ae039 extends $ea0b881b56c5595f$export$2e2bcd8739ae039 {
    constructor({ element: element  }){
        super({
            element: element,
            elements: {
                wrapper: ".detail__wrapper",
                images: ".detail__explanation__media__image"
            }
        });
        this.width = window.innerWidth;
        this.scrollIndex = 0;
        this.index = Number(this.element.getAttribute("data-index"));
        this.height = this.elements.wrapper.clientHeight;
        this.setTextures();
        this.setTriggerHeights();
        this.setMeshPositions();
    }
    setTextures() {
        this.textures = [
            ...this.elements.images
        ].map((img)=>window.TEXTURES[img.getAttribute("data-src")]
        );
        this.count = this.textures.length;
    }
    setTriggerHeights() {
        this.triggerHeights = Array(this.textures.length).fill(0).map((_, index)=>{
            return (index * 2 + 1) * this.height * 0.5;
        });
    }
    setMeshPositions() {
        this.imagePositions = [
            ...this.elements.images
        ].map((img)=>{
            const bounds = img.getBoundingClientRect();
            return bounds.left + bounds.width / 2 - this.width / 2;
        });
        this.imagePositions.unshift(this.width * 0.8 - this.width / 2);
    }
    onResize() {
        this.height = this.elements.wrapper.clientHeight;
        this.width = window.innerWidth;
        this.setTriggerHeights();
        this.setMeshPositions();
    }
}




class $8c0a7b076df67cec$export$edf083caefbff926 extends $2d9d8c9fc2282acc$export$e176487c05830cc5 {
    constructor(geometry, options = {
    }){
        super(geometry);
        this.type = 'Reflector';
        const scope = this;
        const color = options.color !== undefined ? new $2d9d8c9fc2282acc$export$892596cec99bc70e(options.color) : new $2d9d8c9fc2282acc$export$892596cec99bc70e(8355711);
        const textureWidth = options.textureWidth || 512;
        const textureHeight = options.textureHeight || 512;
        const clipBias = options.clipBias || 0;
        const shader = options.shader || $8c0a7b076df67cec$export$edf083caefbff926.ReflectorShader;
        //
        const reflectorPlane = new $2d9d8c9fc2282acc$export$7ff5ac152ef991b0();
        const normal = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const reflectorWorldPosition = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const cameraWorldPosition = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const rotationMatrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        const lookAtPosition = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, -1);
        const clipPlane = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
        const view = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const target = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        const q = new $2d9d8c9fc2282acc$export$fa7daccca11cdbe3();
        const textureMatrix = new $2d9d8c9fc2282acc$export$2ae72fc923e5eb5();
        const virtualCamera = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7();
        const parameters = {
            minFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
            magFilter: $2d9d8c9fc2282acc$export$8a72f490b25c56c8,
            format: $2d9d8c9fc2282acc$export$7c67423a5ee6f5eb
        };
        const renderTarget = new $2d9d8c9fc2282acc$export$3c052beb2e51e23f(textureWidth, textureHeight, parameters);
        if (!$2d9d8c9fc2282acc$export$380958644dbbc22b.isPowerOfTwo(textureWidth) || !$2d9d8c9fc2282acc$export$380958644dbbc22b.isPowerOfTwo(textureHeight)) renderTarget.texture.generateMipmaps = false;
        const material = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            uniforms: $2d9d8c9fc2282acc$export$d8ecdf8615bfea69.clone(shader.uniforms),
            fragmentShader: shader.fragmentShader,
            vertexShader: shader.vertexShader
        });
        material.uniforms['tDiffuse'].value = renderTarget.texture;
        material.uniforms['color'].value = color;
        material.uniforms['textureMatrix'].value = textureMatrix;
        this.material = material;
        this.onBeforeRender = function(renderer, scene, camera) {
            reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);
            cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
            rotationMatrix.extractRotation(scope.matrixWorld);
            normal.set(0, 0, 1);
            normal.applyMatrix4(rotationMatrix);
            view.subVectors(reflectorWorldPosition, cameraWorldPosition);
            // Avoid rendering when reflector is facing away
            if (view.dot(normal) > 0) return;
            view.reflect(normal).negate();
            view.add(reflectorWorldPosition);
            rotationMatrix.extractRotation(camera.matrixWorld);
            lookAtPosition.set(0, 0, -1);
            lookAtPosition.applyMatrix4(rotationMatrix);
            lookAtPosition.add(cameraWorldPosition);
            target.subVectors(reflectorWorldPosition, lookAtPosition);
            target.reflect(normal).negate();
            target.add(reflectorWorldPosition);
            virtualCamera.position.copy(view);
            virtualCamera.up.set(0, 1, 0);
            virtualCamera.up.applyMatrix4(rotationMatrix);
            virtualCamera.up.reflect(normal);
            virtualCamera.lookAt(target);
            virtualCamera.far = camera.far; // Used in WebGLBackground
            virtualCamera.updateMatrixWorld();
            virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
            // Update the texture matrix
            textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
            textureMatrix.multiply(virtualCamera.projectionMatrix);
            textureMatrix.multiply(virtualCamera.matrixWorldInverse);
            textureMatrix.multiply(scope.matrixWorld);
            // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html
            // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf
            reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
            reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
            clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
            const projectionMatrix = virtualCamera.projectionMatrix;
            q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
            q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
            q.z = -1;
            q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
            // Calculate the scaled plane vector
            clipPlane.multiplyScalar(2 / clipPlane.dot(q));
            // Replacing the third row of the projection matrix
            projectionMatrix.elements[2] = clipPlane.x;
            projectionMatrix.elements[6] = clipPlane.y;
            projectionMatrix.elements[10] = clipPlane.z + 1 - clipBias;
            projectionMatrix.elements[14] = clipPlane.w;
            // Render
            renderTarget.texture.encoding = renderer.outputEncoding;
            scope.visible = false;
            const currentRenderTarget = renderer.getRenderTarget();
            const currentXrEnabled = renderer.xr.enabled;
            const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;
            renderer.xr.enabled = false; // Avoid camera modification
            renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows
            renderer.setRenderTarget(renderTarget);
            renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897
            if (renderer.autoClear === false) renderer.clear();
            renderer.render(scene, virtualCamera);
            renderer.xr.enabled = currentXrEnabled;
            renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;
            renderer.setRenderTarget(currentRenderTarget);
            // Restore viewport
            const viewport = camera.viewport;
            if (viewport !== undefined) renderer.state.viewport(viewport);
            scope.visible = true;
        };
        this.getRenderTarget = function() {
            return renderTarget;
        };
        this.dispose = function() {
            renderTarget.dispose();
            scope.material.dispose();
        };
    }
}
$8c0a7b076df67cec$export$edf083caefbff926.prototype.isReflector = true;
$8c0a7b076df67cec$export$edf083caefbff926.ReflectorShader = {
    uniforms: {
        'color': {
            value: null
        },
        'tDiffuse': {
            value: null
        },
        'textureMatrix': {
            value: null
        }
    },
    vertexShader: /* glsl */ `
		uniform mat4 textureMatrix;
		varying vec4 vUv;

		#include <common>
		#include <logdepthbuf_pars_vertex>

		void main() {

			vUv = textureMatrix * vec4( position, 1.0 );

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

			#include <logdepthbuf_vertex>

		}`,
    fragmentShader: /* glsl */ `
		uniform vec3 color;
		uniform sampler2D tDiffuse;
		varying vec4 vUv;

		#include <logdepthbuf_pars_fragment>

		float blendOverlay( float base, float blend ) {

			return( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );

		}

		vec3 blendOverlay( vec3 base, vec3 blend ) {

			return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );

		}

		void main() {

			#include <logdepthbuf_fragment>

			vec4 base = texture2DProj( tDiffuse, vUv );
			gl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );

		}`
};



class $35baa5a99af06e28$export$2e2bcd8739ae039 {
    constructor({ width: width , height: height , parent: parent  }){
        this.width = width;
        this.height = height;
        this.parent = parent;
        this.timeline = $980dae104ebd016a$export$99ee26438460406a.timeline();
        this.setMesh();
        this.modifyMaterial();
        this.setAnimation();
    }
    setMesh() {
        this.mesh = new $8c0a7b076df67cec$export$edf083caefbff926(new $2d9d8c9fc2282acc$export$e789a11a194ca4e0(1, 1), {
            textureWidth: this.width,
            textureHeight: this.height,
            clipBias: 0.1,
            encoding: $2d9d8c9fc2282acc$export$f32388edbb32674,
            color: 16777215
        });
        this.mesh.renderOrder = -10000000000;
        this.parent.add(this.mesh);
    }
    modifyMaterial() {
        this.mesh.material.transparent = true;
        this.mesh.material.onBeforeCompile = (shader)=>{
            shader.uniforms.uOpacity = {
                value: 1
            };
            shader.fragmentShader = shader.fragmentShader.replace("gl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );", `
        gl_FragColor = vec4( blendOverlay( base.rgb, color ), uOpacity * base.g );
        `);
            shader.fragmentShader = shader.fragmentShader.replace("varying vec4 vUv;", `
        varying vec4 vUv;
        uniform float uOpacity;
        `);
        };
    }
    setAnimation() {
        this.mesh.scale.set(2, 2, 2);
        this.mesh.position.y = -0.8196;
        this.origin = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        this.dummy = new $2d9d8c9fc2282acc$export$e4dd07dff30cc924();
        this.progress = 0;
        this.timeline.to(this, {
            progress: 1,
            duration: 12,
            onStart: ()=>{
                this.progress = 0;
            },
            repeat: -1,
            ease: "none",
            onUpdate: this.update.bind(this)
        });
    }
    update() {
        const pp = Math.min(2 * this.progress, 2 * (1 - this.progress));
        this.mesh.position.x = 0.683 * Math.cos(Math.PI * pp);
        this.mesh.position.z = -0.683 * (Math.sin(Math.PI * pp) * 0.5 + 1);
        this.dummy.position.copy(this.mesh.position);
        this.dummy.lookAt(this.origin);
        this.mesh.rotation.copy(this.dummy.rotation);
    }
    resume() {
        this.timeline.resume();
    }
    pause() {
        this.timeline.pause();
    }
}


class $77ffb9f622074fa6$var$Detection {
    isPhone() {
        if (!this.isPhoneChecked) {
            this.isPhoneChecked = true;
            this.isPhoneCheck = document.documentElement.classList.contains("phone");
        }
        return this.isPhoneCheck;
    }
    isTablet() {
        if (!this.isTabletChecked) {
            this.isTabletChecked = true;
            this.isTabletCheck = document.documentElement.classList.contains("tablet");
        }
        return this.isTabletCheck;
    }
    isDesktop() {
        if (!this.isDesktopChecked) {
            this.isDesktopChecked = true;
            this.isDesktopCheck = document.documentElement.classList.contains("desktop");
        }
        return this.isDesktopCheck;
    }
    constructor(){
        this.isPhoneChecked = false;
        this.isPhoneCheck = false;
        this.isTabletChecked = false;
        this.isTabletCheck = false;
        this.isDesktopChecked = false;
        this.isDesktopCheck = false;
    }
}
var //   const DetectionManager = new Detection()
//   export default DetectionManager
$77ffb9f622074fa6$export$2e2bcd8739ae039 = new $77ffb9f622074fa6$var$Detection();



class $5422d6f90a02ee3a$export$2e2bcd8739ae039 extends (/*@__PURE__*/$parcel$interopDefault($ef35f6280e8cf2f8$exports)) {
    constructor({ scene: scene , template: template , camera: camera  }){
        super();
        this.width = window.innerWidth;
        this.height = window.innerHeight;
        this.group = new $2d9d8c9fc2282acc$export$eb2fcfdbd7ba97d4();
        this.mouse = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        this.raycaster = new $2d9d8c9fc2282acc$export$8b7aaceff00bd2f();
        this.orbitControl = {
            current: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(),
            target: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(),
            diff: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(),
            sensitivity: 0.003,
            lerp: 0.05
        };
        this.defaultRotation = new $2d9d8c9fc2282acc$export$64b5c384219d3699(0.002, 0.008, 0.005);
        this.faceMap = [
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, -Math.PI / 2, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, Math.PI / 2, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(Math.PI / 2, 0, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(-Math.PI / 2, 0, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, 0, 0),
            new $2d9d8c9fc2282acc$export$64b5c384219d3699(0, Math.PI, 0), 
        ];
        this.meshRotationOffset = -0.6;
        this.imageElement = document.querySelector(".detail__explanation__media__image");
        this.detailElements = document.querySelectorAll(".detail");
        this.details = {
        };
        this.materials = [];
        this.touchStart = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        this.orbitControlEnabled = false;
        this.snippetRefElement = document.querySelector(".snippets__gallery");
        this.scene = scene;
        this.template = template;
        this.camera = camera;
        this.isFullscreen = false; //not used atm
        this.isTransitioning = false; //not used atm
        this.setGeometry();
        this.setDetails();
        this.setDefaultMaterial();
        this.setTextureMaterials();
        this.setMesh();
        $77ffb9f622074fa6$export$2e2bcd8739ae039.isDesktop() && this.setMirror();
        this.onResize({
            width: this.width,
            height: this.height
        });
        this.fullscreenTransitionDebounce = this.debounce(this.fullscreenTransition);
    }
    fromSnippetsTransition(time) {
        this.isTransitioning = true;
        this.group.rotation.set(0, 0, 0);
        this.materials.forEach((mat)=>{
            mat.uniforms.uProgress.value = 0;
        });
        const faceDirection = this.faceMap[Math.max(this.active.scrollIndex - 1, 0)];
        this.mesh.rotation.set(faceDirection.x, faceDirection.y, faceDirection.z);
        const scale = this.snippetRefElement.clientWidth;
        this.group.scale.set(scale, scale, scale);
        this.group.position.z = -scale / 2 + this.transitionStartPositionDepth;
        this.group.position.x = this.transitionStartPosition;
        const duration = 1.5;
        const ease = "power2.inOut";
        const delay = 0.3;
        const imgSize = this.imageElement.clientWidth;
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.scale, {
            duration: duration,
            delay: delay,
            ease: ease,
            x: imgSize,
            y: imgSize,
            z: imgSize
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.position, {
            duration: duration,
            delay: delay,
            ease: ease,
            x: this.active.imagePositions[this.active.scrollIndex],
            y: 0,
            z: -imgSize / 2
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.rotation, {
            duration: duration,
            delay: delay,
            ease: ease,
            y: this.active.scrollIndex % 2 === 0 ? this.meshRotationOffset : -this.meshRotationOffset
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.position, {
            duration: duration,
            delay: delay,
            ease: ease,
            y: Math.sin(Math.PI * ((time + duration) * 0.4 % 1)) * 0.1
        });
        const targetProgress = this.active.scrollIndex === 0 ? 1 : 0.4;
        this.materials.forEach((mat)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(mat.uniforms.uProgress, {
                duration: duration * 0.5,
                delay: delay,
                ease: ease,
                value: targetProgress
            });
        });
        $980dae104ebd016a$export$99ee26438460406a.delayedCall(duration, ()=>{
            this.isTransitioning = false;
        });
    }
    fromAboutTransition() {
        $980dae104ebd016a$export$99ee26438460406a.from(this.group.scale, {
            delay: 0.3,
            x: 0,
            y: 0,
            z: 0,
            duration: 1.5
        });
    }
    show({ from: from , to: to , time: time  }) {
        this.orbitControlEnabled = false;
        this.onChange(to);
        const delay = 0.3;
        $980dae104ebd016a$export$99ee26438460406a.delayedCall(delay, ()=>{
            this.scene.add(this.group);
        });
        if (from === "/snippets") this.fromSnippetsTransition(time);
        else if (from === "/about") this.fromAboutTransition();
    }
    toSnippetsTransition() {
        const targetScale = this.snippetRefElement.clientWidth;
        const duration = 1;
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.scale, {
            duration: duration,
            x: targetScale,
            y: targetScale,
            z: targetScale
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.position, {
            duration: duration,
            x: 0,
            z: -targetScale / 2
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.position, {
            duration: duration,
            y: 0
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.rotation, {
            duration: duration,
            y: 0
        });
        this.materials.forEach((mat)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(mat.uniforms.uProgress, {
                duration: duration,
                value: 0
            });
        });
        const meshRotationTarget = this.active.scrollIndex > 0 ? this.faceMap[this.active.scrollIndex - 1] : this.faceMap[0];
        $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.rotation, {
            duration: duration,
            ...meshRotationTarget
        });
        $980dae104ebd016a$export$99ee26438460406a.delayedCall(duration, ()=>{
            this.scene.remove(this.group);
        });
    }
    hide(template) {
        this.isFullscreen = false;
        this.orbitControlEnabled = false;
        this.exitFullscreen();
        this.emit("leavingDetail", this.active.textures[Math.max(this.active.scrollIndex - 1, 0)], this.active.index);
        if (template === "/snippets") this.toSnippetsTransition();
        else this.scene.remove(this.group);
    }
    setGeometry() {
        this.geometry = new $2d9d8c9fc2282acc$export$ab3456a079aa7d80(1, 1, 1, 20, 20, 20);
        const unitR = (0.5 * Math.sqrt(3) + 0.5) * 0.5; //0.68301270189
        const count = this.geometry.attributes.position.count;
        const sphereArray = new Float32Array(count * 3);
        const v = new $2d9d8c9fc2282acc$export$64b5c384219d3699();
        for(let i = 0; i < count; i++){
            v.fromBufferAttribute(this.geometry.attributes.position, i).setLength(unitR);
            sphereArray[i * 3] = v.x;
            sphereArray[i * 3 + 1] = v.y;
            sphereArray[i * 3 + 2] = v.z;
        }
        this.geometry.setAttribute("aSphere", new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(sphereArray, 3));
    }
    setDetails() {
        [
            ...this.detailElements
        ].forEach((element)=>{
            this.details[element.id] = new $3b023ae3499a6e15$export$2e2bcd8739ae039({
                element: element
            });
        });
    }
    setDefaultMaterial() {
        const noiseTexture = window.TEXTURES.noise;
        this.defaultMaterial = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            vertexShader: (/*@__PURE__*/$parcel$interopDefault($efa27b50db0c8f94$exports)),
            fragmentShader: (/*@__PURE__*/$parcel$interopDefault($b5ed3cfaeb1f6db4$exports)),
            depthTest: false,
            transparent: true,
            uniforms: {
                uProgress: {
                    value: 1
                },
                uTime: {
                    value: 0
                },
                uC: {
                    value: 0
                },
                uTexture: {
                    value: noiseTexture
                }
            }
        });
    }
    setTextureMaterials() {
        const textureMaterial = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            vertexShader: (/*@__PURE__*/$parcel$interopDefault($efa27b50db0c8f94$exports)),
            fragmentShader: (/*@__PURE__*/$parcel$interopDefault($bc828eb139ee78c0$exports)),
            depthTest: false,
            transparent: true,
            uniforms: {
                uProgress: {
                    value: 1
                },
                uMap: {
                    value: null
                }
            }
        });
        this.textureMaterials = [
            textureMaterial,
            textureMaterial.clone(),
            textureMaterial.clone(),
            textureMaterial.clone(), 
        ];
    }
    setMesh() {
        this.mesh = new $2d9d8c9fc2282acc$export$e176487c05830cc5(this.geometry, this.materials);
        this.mesh.renderOrder = 100000;
        this.group.renderOrder = 20000;
        this.group.add(this.mesh);
    }
    setMirror() {
        this.mirror = new $35baa5a99af06e28$export$2e2bcd8739ae039({
            width: this.width,
            height: this.height,
            parent: this.group
        });
    }
    updateMaterials() {
        for(let i = 0; i < 6; i++)if (i < this.active.count) {
            this.materials[i] = this.textureMaterials[i];
            this.materials[i].uniforms.uMap.value = this.active.textures[i];
        } else this.materials[i] = this.defaultMaterial;
    }
    onResize({ width: width , height: height  }) {
        this.width = window.innerWidth;
        this.height = window.innerHeight;
        if (this.isFullscreen) {
            this.onResizeFullScreen();
            return;
        }
        const { left: imgLeft , width: imgSize  } = this.imageElement.getBoundingClientRect();
        this.group.scale.set(imgSize, imgSize, imgSize);
        this.group.position.z = -imgSize / 2;
        this.group.position.x = this.active?.scrollIndex % 2 === 1 ? imgLeft - this.width / 2 + imgSize / 2 : -(imgLeft - this.width / 2 + imgSize / 2);
        this.group.rotation.y = Math.sign(this.group.position.x) * this.meshRotationOffset;
        Object.values(this.details).forEach((detail)=>detail.onResize()
        );
    }
    onResizeFullScreen() {
        const size = Math.min(this.active.height, window.innerWidth) * 0.95;
        this.group.scale.set(size, size, size);
        this.group.position.z = -size / 2;
        Object.values(this.details).forEach((detail)=>detail.onResize()
        );
    }
    onChange(template) {
        const id = template.split("/").pop();
        this.active = this.details[id];
        this.updateMaterials();
    }
    enterFullscreen() {
        this.emit("enterFullscreen");
        const size = Math.min(this.active.height, window.innerWidth) * 0.95;
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.scale, {
            x: size,
            y: size,
            z: size,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.position, {
            x: 0,
            z: -size / 2,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.position, {
            y: 0,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.rotation, {
            y: 0,
            duration: 1
        });
        this.materials.map((mat)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(mat.uniforms.uProgress, {
                value: 0,
                duration: 1.5
            });
        });
    }
    exitFullscreen() {
        this.emit("exitFullscreen");
        const { left: imgLeft , width: imgSize  } = this.imageElement.getBoundingClientRect();
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.scale, {
            x: imgSize,
            y: imgSize,
            z: imgSize,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.position, {
            x: this.active?.scrollIndex % 2 === 1 ? imgLeft - this.width / 2 + imgSize / 2 : -(imgLeft - this.width / 2 + imgSize / 2),
            z: -imgSize / 2,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.rotation, {
            y: this.active?.scrollIndex % 2 === 1 ? -this.meshRotationOffset : this.meshRotationOffset,
            duration: 1
        });
        this.materials.map((mat)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(mat.uniforms.uProgress, {
                value: this.active.scrollIndex > 0 ? 0.4 : 1,
                duration: 1.5
            });
        });
    }
    fullscreenTransition() {
        if (this.isFullscreen) {
            this.emit("exit fullscreen");
            this.exitFullscreen();
        } else {
            this.emit("enter fullscreen");
            this.enterFullscreen();
        }
        this.isFullscreen = !this.isFullscreen;
    }
    debounce(func, timeout = 100) {
        let timer;
        return (...args)=>{
            clearTimeout(timer);
            timer = setTimeout(()=>{
                func.apply(this, args);
            }, timeout);
        };
    }
    updateRaycaster(coords) {
        this.raycaster.setFromCamera(coords, this.camera);
        const intersect = this.raycaster.intersectObject(this.mesh);
        if (intersect.length) return true;
        else return false;
    }
    getFrontFace() {
        this.raycaster.setFromCamera({
            x: 0,
            y: 0
        }, this.camera);
        const intersect = this.raycaster.intersectObject(this.mesh);
        return intersect[0]?.face?.materialIndex || 0;
    }
    onTouchDown({ x: x , y: y  }) {
        const overMesh = this.updateRaycaster({
            x: 2 * (x / this.width) - 1,
            y: -2 * (y / this.height) + 1
        });
        this.touchStart.x = x;
        this.touchStart.y = y;
        if (overMesh) {
            this.emit("orbit control enabled");
            this.orbitControlEnabled = true;
            this.orbitControl.current.set(x, y);
            this.orbitControl.target.set(x, y);
            !$77ffb9f622074fa6$export$2e2bcd8739ae039.isDesktop() && (this.touchStartTime = this.time);
        } else this.orbitControlEnabled = false;
    }
    onTouchMove({ x: x , y: y  }) {
        if (this.orbitControlEnabled) {
            this.mouse.x = 2 * (x / this.width) - 1;
            this.mouse.y = -2 * (y / this.height) + 1;
            this.orbitControl.target.set(x, y);
        }
    }
    onTouchUp({ x: x , y: y  }) {
        if (this.orbitControlEnabled) {
            if ($77ffb9f622074fa6$export$2e2bcd8739ae039.isDesktop()) {
                const overMesh = this.updateRaycaster({
                    x: 2 * (x / this.width) - 1,
                    y: -2 * (y / this.height) + 1
                });
                if (overMesh) {
                    const xx = this.touchStart.distanceTo(new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(x, y));
                    if (xx < 2) this.fullscreenTransition();
                }
            } else {
                console.log("DIFF: ", this.time - this.touchStartTime);
                if (this.time - this.touchStartTime < 0.11) this.fullscreenTransition();
            }
            if (this.isFullscreen) {
                const frontFaceIndex = this.getFrontFace();
                $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.rotation, {
                    ...this.faceMap[frontFaceIndex],
                    duration: 1,
                    onComplete: ()=>{
                        this.orbitControl.current.copy(this.orbitControl.target);
                    }
                });
            } else if (this.active.scrollIndex > 0) $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.rotation, {
                ...this.faceMap[this.active.scrollIndex - 1],
                duration: 1,
                onComplete: ()=>{
                    this.orbitControl.current.copy(this.orbitControl.target);
                }
            });
        }
        this.emit("orbit control disabled");
        this.orbitControlEnabled = false;
    }
    triggerTransition(down) {
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.position, {
            x: this.active.imagePositions[this.active.scrollIndex],
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.rotation, {
            ...this.faceMap[this.active.scrollIndex - 1],
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.group.rotation, {
            y: Math.sign(this.active.imagePositions[this.active.scrollIndex]) * this.meshRotationOffset,
            duration: 1
        });
        if (this.active.scrollIndex > 0) this.materials.forEach((mat)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(mat.uniforms.uProgress, {
                value: 0.4,
                duration: 1
            });
        });
        else this.materials.forEach((mat)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(mat.uniforms.uProgress, {
                value: 1,
                duration: 1
            });
        });
    }
    updateOrbitControl() {
        this.orbitControl.current.lerp(this.orbitControl.target, this.orbitControl.lerp);
        this.orbitControl.diff.subVectors(this.orbitControl.target, this.orbitControl.current);
        if (this.orbitControl.diff.length() > 1) {
            this.orbitControl.diff.multiplyScalar(this.orbitControl.sensitivity);
            const q = new $2d9d8c9fc2282acc$export$23d6a54f0bbc85a3().setFromEuler(new $2d9d8c9fc2282acc$export$d93cc409a0768c5f(this.orbitControl.diff.y, this.orbitControl.diff.x, 0, "XYZ"));
            this.mesh.quaternion.multiplyQuaternions(q, this.mesh.quaternion);
        }
    }
    defaultMotionUpdate(time) {
        if (this.active.scrollIndex === 0) {
            this.mesh.rotation.x += this.defaultRotation.x;
            this.mesh.rotation.y += this.defaultRotation.y;
            this.mesh.rotation.z += this.defaultRotation.z;
        }
        this.mesh.position.y = Math.sin(Math.PI * (time * 0.4 % 1)) * 0.1;
    }
    updateDefaultMaterial(time) {
        this.defaultMaterial.uniforms.uTime.value = time;
        this.defaultMaterial.uniforms.uC.value = Math.sin(time);
    }
    update({ scroll: scroll , time: time  }) {
        this.time = time;
        this.updateDefaultMaterial(time);
        if (!this.isTransitioning) {
            if (!this.isFullscreen) this.defaultMotionUpdate(time);
            this.previousScroll = this.scroll;
            this.scroll = scroll;
            const down = this.scroll > this.previousScroll;
            this.updateOrbitControl();
            if (down && this.active.scrollIndex < 4) {
                if (this.scroll > this.active.triggerHeights[this.active.scrollIndex]) {
                    this.active.scrollIndex++;
                    this.triggerTransition(down);
                }
            } else if (this.active.scrollIndex > 0) {
                if (this.scroll < this.active.triggerHeights[this.active.scrollIndex - 1]) {
                    this.active.scrollIndex--;
                    this.triggerTransition(down);
                }
            }
        }
    }
}




var $c8f9b1d6b8a0f892$exports = {};
$c8f9b1d6b8a0f892$exports = "#define GLSLIFY 1\n#define PI 3.1415\nuniform sampler2D uTrail;\nuniform vec2 uResolution;\nuniform float uTime;\nuniform float uProgress;\nuniform float uShake;\nuniform float uScale;\nvarying vec2 vUv;\nattribute vec3 aExplode;\nattribute float aText;\nvarying float vText;\nvarying float vTrail;\n\nvoid main() {\n    vec2 nUv = uv;\n\n    vec3 pos = position;\n\n    pos += aExplode * uShake * sin(uTime*30.)*6.;\n\n    pos *= uScale;\n    vec2 resolution = uResolution * uScale;\n\n    nUv *= resolution;\n    nUv += 0.5 * (1. - resolution);\n\n\tfloat trail = texture2D(uTrail, nUv).r;\n    trail = clamp(trail, 0., 1.);\n\tfloat a = trail*PI*2.;\n    vec2 distortion = 20.1 * trail * vec2(sin(a), cos(a));\n\n    pos.xy += distortion.xy;\n\n    pos.z += 100.*sin(PI*uv.x);\n    pos.z += 100.*sin(PI*uv.y);\n\n    vec3 c = 500. * aExplode;\n    pos = mix(pos, c, uProgress);\n\n    vec4 viewPosition = modelViewMatrix * vec4(pos, 1.);\n    gl_Position = projectionMatrix * viewPosition;\n    \n    gl_PointSize = 1.5;\n    vUv = uv;\n    vText = aText;\n    vTrail = trail;\n}";


var $cba6571c08a128c6$exports = {};
$cba6571c08a128c6$exports = "#define GLSLIFY 1\nvarying vec2 vUv;\nvarying float vText;\nvarying float vTrail;\nuniform float uOpacity;\nuniform float uProgress;\n\nvoid main()\n{\n\tfloat isHome = (1. - uProgress);\n\tgl_FragColor = vec4(vec3(1.), (0.1 * isHome + 0.5*vText) * uOpacity);\n\tgl_FragColor -= vTrail * vec4(0.3, vUv.x, 0.1+0.2*vText, -0.5) * isHome;\n}\n\n";



class $b890fba77e00c649$export$2e2bcd8739ae039 extends (/*@__PURE__*/$parcel$interopDefault($ef35f6280e8cf2f8$exports)) {
    constructor({ width: width , height: height , scene: scene , trail: trail , template: template  }){
        super();
        this.logoElement = document.querySelector(".home__logo");
        this.textureWidth = 512;
        this.textureHeight = 256;
        this.threshold = 1;
        this.numVisible = 0;
        this.geometry = new $2d9d8c9fc2282acc$export$b7be63a67df8959();
        this.touchStart = new $2d9d8c9fc2282acc$export$c977b3e384af9ae1();
        this.rotation = {
            current: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(),
            target: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1()
        };
        this.vibrateAnimation = null;
        this.template = template;
        this.scene = scene;
        this.width = width;
        this.height = height;
        this.trail = trail;
        this.setImageData();
        this.countVisibleData();
        this.setAttributes();
        this.setMaterial();
        this.setMesh();
        this.onChange(this.template);
        this.onResize({
            width: this.width,
            height: this.height
        });
    }
    setImageData() {
        this.numPoints = this.textureWidth * this.textureHeight;
        const canvas = document.createElement("canvas");
        canvas.width = this.textureWidth;
        canvas.height = this.textureHeight;
        const ctx = canvas.getContext("2d");
        ctx.scale(1, -1);
        ctx.drawImage(this.logoElement, 0, 0, this.textureWidth, this.textureHeight * -1);
        const { data: data  } = ctx.getImageData(0, 0, this.textureWidth, this.textureHeight);
        this.imgData = Float32Array.from(data);
    }
    countVisibleData() {
        for(let i = 0; i < this.numPoints; i++)if (this.imgData[i * 4 + 1] > this.threshold) this.numVisible++;
    }
    setAttributes() {
        const positionArray = new Float32Array(this.numVisible * 3);
        const uvArray = new Float32Array(this.numVisible * 2);
        const textArray = new Float32Array(this.numVisible);
        const explodeArray = new Float32Array(this.numVisible * 3);
        for(let i = 0, j = 0; i < this.numPoints; i++){
            if (this.imgData[i * 4 + 1] <= this.threshold) continue;
            textArray[j] = this.imgData[i * 4] > 230 ? 1 : 0;
            positionArray[j * 3] = i % this.textureWidth - this.textureWidth / 2;
            positionArray[j * 3 + 1] = Math.floor(i / this.textureWidth) - this.textureHeight / 2;
            const theta = Math.random() * 2 * Math.PI;
            const phi = Math.random() * 2 * Math.PI;
            explodeArray[j * 3 + 0] = Math.sin(theta) * Math.cos(phi);
            explodeArray[j * 3 + 1] = Math.cos(theta);
            explodeArray[j * 3 + 2] = Math.sin(theta) * Math.sin(phi);
            uvArray[j * 2 + 0] = i % this.textureWidth / this.textureWidth;
            uvArray[j * 2 + 1] = Math.floor(i / this.textureWidth) / this.textureHeight;
            j++;
        }
        this.geometry.setAttribute("position", new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(positionArray, 3));
        this.geometry.setAttribute("aText", new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(textArray, 1));
        this.geometry.setAttribute("aExplode", new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(explodeArray, 3));
        this.geometry.setAttribute("uv", new $2d9d8c9fc2282acc$export$cbe7a62641830ebd(uvArray, 2));
    }
    setMaterial() {
        this.material = new $2d9d8c9fc2282acc$export$83c7d75d550a8b0d({
            uniforms: {
                uProgress: {
                    value: 0
                },
                uShake: {
                    value: 0
                },
                uTime: {
                    value: 0
                },
                uTrail: {
                    value: this.trail
                },
                uResolution: {
                    value: new $2d9d8c9fc2282acc$export$c977b3e384af9ae1(this.textureWidth / this.width, this.textureHeight / this.height)
                },
                uScale: {
                    value: 1
                },
                uHome: {
                    value: 1
                },
                uOpacity: {
                    value: 1
                }
            },
            transparent: true,
            vertexShader: (/*@__PURE__*/$parcel$interopDefault($c8f9b1d6b8a0f892$exports)),
            fragmentShader: (/*@__PURE__*/$parcel$interopDefault($cba6571c08a128c6$exports)),
            depthTest: false,
            depthWrite: false
        });
    }
    setMesh() {
        this.mesh = new $2d9d8c9fc2282acc$export$1c787534cb11aa3e(this.geometry, this.material);
        this.scene.add(this.mesh);
        this.mesh.renderOrder = -10;
        this.rotation.target.y = -0.485;
    }
    onTouchMove({ x: x , y: y  }) {
        if (this.mesh.visible) {
            const xScreen = 2 * x / this.width - 1;
            const yScreen = -2 * (y * 0.8) / this.height + 1;
            this.rotation.target.x = -yScreen;
            this.rotation.target.y = xScreen;
        }
    }
    onResize({ width: width , height: height  }) {
        this.width = width;
        this.height = height;
        const elementWidth = this.logoElement.clientWidth;
        const scale = elementWidth / this.textureWidth;
        if (this.material) {
            this.material.uniforms.uScale.value = scale;
            this.material.uniforms.uResolution.value.x = this.textureWidth / this.width;
            this.material.uniforms.uResolution.value.y = this.textureHeight / this.height;
        }
    }
    onChange(template) {
        this.template = template;
        if (template === "/") {
            this.mesh.visible = true;
            if (this.material) {
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uProgress, {
                    value: 0,
                    duration: 1.5
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uOpacity, {
                    value: 1,
                    duration: 1.5
                });
            }
            if (this.mesh) {
                $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.rotation, {
                    y: 0,
                    z: 0,
                    duration: 1.5
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.position, {
                    z: 10,
                    duration: 1.5
                });
            }
        } else if (template === "/snippets") {
            this.mesh.visible = true;
            if (this.material) {
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uProgress, {
                    value: 1,
                    duration: 1.5
                });
                $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uOpacity, {
                    value: 1,
                    duration: 1.5
                });
            }
            $980dae104ebd016a$export$99ee26438460406a.to(this.mesh.position, {
                z: 500,
                duration: 1.5
            });
        } else if (this.material) $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uOpacity, {
            value: 0,
            duration: 1.5,
            onComplete: ()=>{
                this.mesh.visible = false;
            }
        });
    }
    onMouseEnterLink() {
        if (this.template !== "/") return;
        this.emit("vibrate particles start");
        this.vibrateAnimation = $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uShake, {
            value: 1,
            duration: 3,
            onComplete: ()=>{
                this.emit("goToEplore");
                this.emit("vibrate particles end");
            }
        });
    }
    onMouseExitLink() {
        this.emit("vibrate particles end");
        this.vibrateAnimation?.kill();
        if (this.template !== "/") return;
        $980dae104ebd016a$export$99ee26438460406a.to(this.material.uniforms.uShake, {
            value: 0,
            duration: 1
        });
    }
    update(time) {
        if (this.mesh.visible) {
            this.material && (this.material.uniforms.uTime.value = time);
            this.rotation.current.lerp(this.rotation.target, 0.004);
            this.mesh.rotation.x = this.rotation.current.x;
            this.mesh.rotation.y = this.rotation.current.y;
        }
    }
}


class $d4b8791ca621a5a1$export$2e2bcd8739ae039 {
    constructor({ template: template  }){
        this.container = document.querySelector("#canvas");
        this.scene = new $2d9d8c9fc2282acc$export$38af1803e3442a7f();
        this.ratio = 0.8;
        this.time = 0;
        this.isDown = false;
        this.template = template;
        this.x = {
            start: 0,
            distance: 0,
            end: 0
        };
        this.y = {
            start: 0,
            distance: 0,
            end: 0
        };
        this.setRenderer();
        this.setCamera();
    }
    setRenderer() {
        this.renderer = new $2d9d8c9fc2282acc$export$f6cc00ef28d7cf97({
            alpha: false,
            powerPreference: "high-performance"
        });
        this.renderer.setPixelRatio(1);
        this.container.appendChild(this.renderer.domElement);
    }
    setCamera() {
        this.camera = new $2d9d8c9fc2282acc$export$74e4ae24825f68d7(65, 2, 2, 3500);
        this.camera.position.z = 500;
    }
    setTrail() {
        this.trail = new $19d4c7babde7c9f0$export$2e2bcd8739ae039({
            width: this.width,
            height: this.height,
            renderer: this.renderer,
            camera: this.camera,
            ratio: this.ratio
        });
    }
    setBackground() {
        this.background = new $0c400d4900c824ad$export$2e2bcd8739ae039({
            scene: this.scene,
            width: this.width,
            height: this.height,
            trail: this.trail.texture,
            fov: this.camera.fov,
            aspect: this.camera.aspect,
            template: this.template
        });
    }
    setParticles() {
        this.particles = new $b890fba77e00c649$export$2e2bcd8739ae039({
            scene: this.scene,
            width: this.width,
            height: this.height,
            trail: this.trail.texture,
            template: this.template
        });
    }
    setHome() {
        this.home = new $dca6d1e03401b07e$export$2e2bcd8739ae039();
        this.active = this.home;
    }
    setAbout() {
        this.about = new $36043e5593076086$export$2e2bcd8739ae039();
    }
    setSnippets() {
        this.snippets = new $a34760a1451bfed6$export$2e2bcd8739ae039({
            scene: this.scene,
            width: this.width,
            height: this.height
        });
        this.snippets.on("toDetail", (horizontalPosition, depth)=>{
            this.detail.transitionStartPosition = horizontalPosition;
            this.detail.transitionStartPositionDepth = depth;
        });
    }
    setDetail() {
        this.detail = new $5422d6f90a02ee3a$export$2e2bcd8739ae039({
            scene: this.scene,
            width: this.width,
            height: this.height,
            template: this.template,
            camera: this.camera
        });
        this.detail.on("leavingDetail", (texture, podIndex)=>{
            this.snippets.podTexture = texture;
            this.snippets.activePodIndex = podIndex;
        });
    }
    onPreloaded() {
        this.setTrail();
        this.setBackground();
        this.setParticles();
        this.setHome();
        this.setAbout();
        this.setSnippets();
        this.setDetail();
        this.onChange(this.template);
    }
    async onChange(template) {
        this.active.hide(template);
        this.particles.onChange(template); // try remove conditional
        this.background.onChange(template);
        // this.trail && this.trail.onChange(template);
        if (template === "/") {
            this.home.show();
            this.active = this.home;
        } else if (template === "/about") {
            this.about.show();
            this.active = this.about;
        } else if (template === "/snippets") {
            this.snippets.show(this.template);
            this.active = this.snippets;
        } else {
            this.detail.show({
                from: this.template,
                to: template,
                time: this.time
            });
            this.active = this.detail;
        }
        this.template = template;
    }
    onResize(transition) {
        this.width = this.container.offsetWidth;
        this.height = this.container.offsetHeight;
        this.renderer.setSize(this.width, this.height);
        this.camera.fov = 360 / Math.PI * Math.atan(this.height * 0.001);
        this.camera.aspect = this.width / this.height;
        this.camera.updateProjectionMatrix();
        this.trail.onResize({
            width: this.width,
            height: this.height,
            ratio: this.ratio
        });
        this.particles.onResize({
            width: this.width,
            height: this.height
        });
        this.background.onResize({
            camera: this.camera
        });
        !transition && this.detail.onResize({
            width: this.width,
            height: this.height
        });
        !transition && this.snippets.onResize({
            width: this.width,
            height: this.height
        });
    }
    onWheel(scroll) {
        this.template === "/snippets" && this.snippets.onWheel(scroll);
    }
    onTouchDown({ x: x , y: y  }) {
        this.active === this.snippets && this.snippets.onTouchDown({
            x: x,
            y: y
        });
        this.active == this.detail && this.detail.onTouchDown({
            x: x,
            y: y
        });
    }
    onTouchMove({ x: x , y: y , isDown: isDown  }) {
        this.active === this.snippets && isDown && this.snippets.onTouchMove({
            x: x,
            y: y
        });
        this.active === this.detail && this.detail.onTouchMove({
            x: x,
            y: y
        });
        this.trail.onTouchMove({
            x: x,
            y: y
        });
        this.particles.onTouchMove({
            x: x,
            y: y
        });
    }
    onTouchUp({ x: x , y: y  }) {
        this.active === this.snippets && this.snippets.onTouchUp();
        this.active === this.detail && this.detail.onTouchUp({
            x: x,
            y: y
        });
    }
    update(scroll) {
        this.time += 0.01633;
        this.active === this.snippets && this.snippets.update(this.time);
        this.active === this.detail && this.detail.update({
            time: this.time,
            scroll: scroll
        });
        this.background.update(this.time);
        this.trail.update();
        this.particles.update(this.time);
        this.renderer.render(this.scene, this.camera);
    }
}


var $e16859b358c20642$exports = {};

$e16859b358c20642$exports = (parcelRequire("hfThs"));



class $3db2ffd4c670ed86$export$ddf9e847a113aa9c {
    constructor(pool = 4){
        this.pool = pool;
        this.queue = [];
        this.workers = [];
        this.workersResolve = [];
        this.workerStatus = 0;
    }
    _initWorker(workerId) {
        if (!this.workers[workerId]) {
            const worker = this.workerCreator();
            worker.addEventListener('message', this._onMessage.bind(this, workerId));
            this.workers[workerId] = worker;
        }
    }
    _getIdleWorker() {
        for(let i = 0; i < this.pool; i++)if (!(this.workerStatus & 1 << i)) return i;
        return -1;
    }
    _onMessage(workerId, msg) {
        const resolve = this.workersResolve[workerId];
        resolve && resolve(msg);
        if (this.queue.length) {
            const { resolve: resolve , msg: msg , transfer: transfer  } = this.queue.shift();
            this.workersResolve[workerId] = resolve;
            this.workers[workerId].postMessage(msg, transfer);
        } else this.workerStatus ^= 1 << workerId;
    }
    setWorkerCreator(workerCreator) {
        this.workerCreator = workerCreator;
    }
    setWorkerLimit(pool) {
        this.pool = pool;
    }
    postMessage(msg, transfer) {
        return new Promise((resolve)=>{
            const workerId = this._getIdleWorker();
            if (workerId !== -1) {
                this._initWorker(workerId);
                this.workerStatus |= 1 << workerId;
                this.workersResolve[workerId] = resolve;
                this.workers[workerId].postMessage(msg, transfer);
            } else this.queue.push({
                resolve: resolve,
                msg: msg,
                transfer: transfer
            });
        });
    }
    dispose() {
        this.workers.forEach((worker)=>worker.terminate()
        );
        this.workersResolve.length = 0;
        this.workers.length = 0;
        this.queue.length = 0;
        this.workerStatus = 0;
    }
}


const $cc488ac7d96c3c0c$var$KTX2TransferSRGB = 2;
const $cc488ac7d96c3c0c$var$KTX2_ALPHA_PREMULTIPLIED = 1;
const $cc488ac7d96c3c0c$var$_taskCache = new WeakMap();
let $cc488ac7d96c3c0c$var$_activeLoaders = 0;
class $cc488ac7d96c3c0c$export$f2e11b211e093ce0 extends $2d9d8c9fc2282acc$export$3b0d6d7590275603 {
    constructor(manager){
        super(manager);
        this.transcoderPath = '';
        this.transcoderBinary = null;
        this.transcoderPending = null;
        this.workerPool = new $3db2ffd4c670ed86$export$ddf9e847a113aa9c();
        this.workerSourceURL = '';
        this.workerConfig = null;
        if (typeof MSC_TRANSCODER !== 'undefined') console.warn("THREE.KTX2Loader: Please update to latest \"basis_transcoder\". \"msc_basis_transcoder\" is no longer supported in three.js r125+.");
    }
    setTranscoderPath(path) {
        this.transcoderPath = path;
        return this;
    }
    setWorkerLimit(num) {
        this.workerPool.setWorkerLimit(num);
        return this;
    }
    detectSupport(renderer) {
        this.workerConfig = {
            astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),
            etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),
            etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),
            dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),
            bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),
            pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')
        };
        if (renderer.capabilities.isWebGL2) // https://github.com/mrdoob/three.js/pull/22928
        this.workerConfig.etc1Supported = false;
        return this;
    }
    dispose() {
        this.workerPool.dispose();
        if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);
        return this;
    }
    init() {
        if (!this.transcoderPending) {
            // Load transcoder wrapper.
            const jsLoader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
            jsLoader.setPath(this.transcoderPath);
            jsLoader.setWithCredentials(this.withCredentials);
            const jsContent1 = jsLoader.loadAsync('basis_transcoder.js');
            // Load transcoder WASM binary.
            const binaryLoader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
            binaryLoader.setPath(this.transcoderPath);
            binaryLoader.setResponseType('arraybuffer');
            binaryLoader.setWithCredentials(this.withCredentials);
            const binaryContent1 = binaryLoader.loadAsync('basis_transcoder.wasm');
            this.transcoderPending = Promise.all([
                jsContent1,
                binaryContent1
            ]).then(([jsContent, binaryContent])=>{
                const fn = $cc488ac7d96c3c0c$export$f2e11b211e093ce0.BasisWorker.toString();
                const body = [
                    '/* constants */',
                    'let _EngineFormat = ' + JSON.stringify($cc488ac7d96c3c0c$export$f2e11b211e093ce0.EngineFormat),
                    'let _TranscoderFormat = ' + JSON.stringify($cc488ac7d96c3c0c$export$f2e11b211e093ce0.TranscoderFormat),
                    'let _BasisFormat = ' + JSON.stringify($cc488ac7d96c3c0c$export$f2e11b211e093ce0.BasisFormat),
                    '/* basis_transcoder.js */',
                    jsContent,
                    '/* worker */',
                    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))
                ].join('\n');
                this.workerSourceURL = URL.createObjectURL(new Blob([
                    body
                ]));
                this.transcoderBinary = binaryContent;
                this.workerPool.setWorkerCreator(()=>{
                    const worker = new Worker(this.workerSourceURL);
                    const transcoderBinary = this.transcoderBinary.slice(0);
                    worker.postMessage({
                        type: 'init',
                        config: this.workerConfig,
                        transcoderBinary: transcoderBinary
                    }, [
                        transcoderBinary
                    ]);
                    return worker;
                });
            });
            if ($cc488ac7d96c3c0c$var$_activeLoaders > 0) // Each instance loads a transcoder and allocates workers, increasing network and memory cost.
            console.warn("THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues. Use a single KTX2Loader instance, or call .dispose() on old instances.");
            $cc488ac7d96c3c0c$var$_activeLoaders++;
        }
        return this.transcoderPending;
    }
    load(url, onLoad, onProgress, onError) {
        if (this.workerConfig === null) throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');
        const loader = new $2d9d8c9fc2282acc$export$98435a25b5cf7b2b(this.manager);
        loader.setResponseType('arraybuffer');
        loader.setWithCredentials(this.withCredentials);
        const texture = new $2d9d8c9fc2282acc$export$3466bac9141a5cc4();
        loader.load(url, (buffer)=>{
            // Check for an existing task using this buffer. A transferred buffer cannot be transferred
            // again from this thread.
            if ($cc488ac7d96c3c0c$var$_taskCache.has(buffer)) {
                const cachedTask = $cc488ac7d96c3c0c$var$_taskCache.get(buffer);
                return cachedTask.promise.then(onLoad).catch(onError);
            }
            this._createTexture([
                buffer
            ]).then(function(_texture) {
                texture.copy(_texture);
                texture.needsUpdate = true;
                if (onLoad) onLoad(texture);
            }).catch(onError);
        }, onProgress, onError);
        return texture;
    }
    _createTextureFrom(transcodeResult) {
        const { mipmaps: mipmaps , width: width , height: height , format: format , type: type , error: error , dfdTransferFn: dfdTransferFn , dfdFlags: dfdFlags  } = transcodeResult;
        if (type === 'error') return Promise.reject(error);
        const texture = new $2d9d8c9fc2282acc$export$3466bac9141a5cc4(mipmaps, width, height, format, $2d9d8c9fc2282acc$export$2e8ce08d3f6f5e10);
        texture.minFilter = mipmaps.length === 1 ? $2d9d8c9fc2282acc$export$8a72f490b25c56c8 : $2d9d8c9fc2282acc$export$5d8599b6a933fb1b;
        texture.magFilter = $2d9d8c9fc2282acc$export$8a72f490b25c56c8;
        texture.generateMipmaps = false;
        texture.needsUpdate = true;
        texture.encoding = dfdTransferFn === $cc488ac7d96c3c0c$var$KTX2TransferSRGB ? $2d9d8c9fc2282acc$export$f32388edbb32674 : $2d9d8c9fc2282acc$export$7207336e4151a112;
        texture.premultiplyAlpha = !!(dfdFlags & $cc488ac7d96c3c0c$var$KTX2_ALPHA_PREMULTIPLIED);
        return texture;
    }
    /**
	 * @param {ArrayBuffer[]} buffers
	 * @param {object?} config
	 * @return {Promise<CompressedTexture>}
	 */ _createTexture(buffers, config = {
    }) {
        const taskConfig = config;
        const texturePending = this.init().then(()=>{
            return this.workerPool.postMessage({
                type: 'transcode',
                buffers: buffers,
                taskConfig: taskConfig
            }, buffers);
        }).then((e)=>this._createTextureFrom(e.data)
        );
        // Cache the task result.
        $cc488ac7d96c3c0c$var$_taskCache.set(buffers[0], {
            promise: texturePending
        });
        return texturePending;
    }
    dispose() {
        URL.revokeObjectURL(this.workerSourceURL);
        this.workerPool.dispose();
        $cc488ac7d96c3c0c$var$_activeLoaders--;
        return this;
    }
}
/* CONSTANTS */ $cc488ac7d96c3c0c$export$f2e11b211e093ce0.BasisFormat = {
    ETC1S: 0,
    UASTC_4x4: 1
};
$cc488ac7d96c3c0c$export$f2e11b211e093ce0.TranscoderFormat = {
    ETC1: 0,
    ETC2: 1,
    BC1: 2,
    BC3: 3,
    BC4: 4,
    BC5: 5,
    BC7_M6_OPAQUE_ONLY: 6,
    BC7_M5: 7,
    PVRTC1_4_RGB: 8,
    PVRTC1_4_RGBA: 9,
    ASTC_4x4: 10,
    ATC_RGB: 11,
    ATC_RGBA_INTERPOLATED_ALPHA: 12,
    RGBA32: 13,
    RGB565: 14,
    BGR565: 15,
    RGBA4444: 16
};
$cc488ac7d96c3c0c$export$f2e11b211e093ce0.EngineFormat = {
    RGBAFormat: $2d9d8c9fc2282acc$export$3f8bb04b555a363c,
    RGBA_ASTC_4x4_Format: $2d9d8c9fc2282acc$export$dc5570b4a2b92d48,
    RGBA_BPTC_Format: $2d9d8c9fc2282acc$export$ce40b115e188bc81,
    RGBA_ETC2_EAC_Format: $2d9d8c9fc2282acc$export$23ed8300a860e7d8,
    RGBA_PVRTC_4BPPV1_Format: $2d9d8c9fc2282acc$export$b82296714358084c,
    RGBA_S3TC_DXT5_Format: $2d9d8c9fc2282acc$export$9a79c424327dacf9,
    RGB_ETC1_Format: $2d9d8c9fc2282acc$export$6ab91af2d757aee7,
    RGB_ETC2_Format: $2d9d8c9fc2282acc$export$7800993ef8106a6a,
    RGB_PVRTC_4BPPV1_Format: $2d9d8c9fc2282acc$export$19ada9bbb1af3573,
    RGB_S3TC_DXT1_Format: $2d9d8c9fc2282acc$export$21d1799c6d552fc0
};
/* WEB WORKER */ $cc488ac7d96c3c0c$export$f2e11b211e093ce0.BasisWorker = function() {
    let config;
    let transcoderPending;
    let BasisModule;
    const EngineFormat = _EngineFormat; // eslint-disable-line no-undef
    const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef
    const BasisFormat = _BasisFormat; // eslint-disable-line no-undef
    self.addEventListener('message', function(e) {
        const message = e.data;
        switch(message.type){
            case 'init':
                config = message.config;
                init(message.transcoderBinary);
                break;
            case 'transcode':
                transcoderPending.then(()=>{
                    try {
                        const { width: width , height: height , hasAlpha: hasAlpha , mipmaps: mipmaps , format: format , dfdTransferFn: dfdTransferFn , dfdFlags: dfdFlags  } = transcode(message.buffers[0]);
                        const buffers = [];
                        for(let i = 0; i < mipmaps.length; ++i)buffers.push(mipmaps[i].data.buffer);
                        self.postMessage({
                            type: 'transcode',
                            id: message.id,
                            width: width,
                            height: height,
                            hasAlpha: hasAlpha,
                            mipmaps: mipmaps,
                            format: format,
                            dfdTransferFn: dfdTransferFn,
                            dfdFlags: dfdFlags
                        }, buffers);
                    } catch (error) {
                        console.error(error);
                        self.postMessage({
                            type: 'error',
                            id: message.id,
                            error: error.message
                        });
                    }
                });
                break;
        }
    });
    function init(wasmBinary) {
        transcoderPending = new Promise((resolve)=>{
            BasisModule = {
                wasmBinary: wasmBinary,
                onRuntimeInitialized: resolve
            };
            BASIS(BasisModule); // eslint-disable-line no-undef
        }).then(()=>{
            BasisModule.initializeBasis();
            if (BasisModule.KTX2File === undefined) console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');
        });
    }
    function transcode(buffer) {
        const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));
        function cleanup() {
            ktx2File.close();
            ktx2File.delete();
        }
        if (!ktx2File.isValid()) {
            cleanup();
            throw new Error('THREE.KTX2Loader:	Invalid or unsupported .ktx2 file');
        }
        const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;
        const width = ktx2File.getWidth();
        const height = ktx2File.getHeight();
        const levels = ktx2File.getLevels();
        const hasAlpha = ktx2File.getHasAlpha();
        const dfdTransferFn = ktx2File.getDFDTransferFunc();
        const dfdFlags = ktx2File.getDFDFlags();
        const { transcoderFormat: transcoderFormat , engineFormat: engineFormat  } = getTranscoderFormat(basisFormat, width, height, hasAlpha);
        if (!width || !height || !levels) {
            cleanup();
            throw new Error('THREE.KTX2Loader:	Invalid texture');
        }
        if (!ktx2File.startTranscoding()) {
            cleanup();
            throw new Error('THREE.KTX2Loader: .startTranscoding failed');
        }
        const mipmaps = [];
        for(let mip = 0; mip < levels; mip++){
            const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);
            const mipWidth = levelInfo.origWidth;
            const mipHeight = levelInfo.origHeight;
            const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));
            const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);
            if (!status) {
                cleanup();
                throw new Error('THREE.KTX2Loader: .transcodeImage failed.');
            }
            mipmaps.push({
                data: dst,
                width: mipWidth,
                height: mipHeight
            });
        }
        cleanup();
        return {
            width: width,
            height: height,
            hasAlpha: hasAlpha,
            mipmaps: mipmaps,
            format: engineFormat,
            dfdTransferFn: dfdTransferFn,
            dfdFlags: dfdFlags
        };
    }
    //
    // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),
    // device capabilities, and texture dimensions. The list below ranks the formats separately
    // for ETC1S and UASTC.
    //
    // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at
    // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently
    // chooses RGBA32 only as a last resort and does not expose that option to the caller.
    const FORMAT_OPTIONS = [
        {
            if: 'astcSupported',
            basisFormat: [
                BasisFormat.UASTC_4x4
            ],
            transcoderFormat: [
                TranscoderFormat.ASTC_4x4,
                TranscoderFormat.ASTC_4x4
            ],
            engineFormat: [
                EngineFormat.RGBA_ASTC_4x4_Format,
                EngineFormat.RGBA_ASTC_4x4_Format
            ],
            priorityETC1S: Infinity,
            priorityUASTC: 1,
            needsPowerOfTwo: false
        },
        {
            if: 'bptcSupported',
            basisFormat: [
                BasisFormat.ETC1S,
                BasisFormat.UASTC_4x4
            ],
            transcoderFormat: [
                TranscoderFormat.BC7_M5,
                TranscoderFormat.BC7_M5
            ],
            engineFormat: [
                EngineFormat.RGBA_BPTC_Format,
                EngineFormat.RGBA_BPTC_Format
            ],
            priorityETC1S: 3,
            priorityUASTC: 2,
            needsPowerOfTwo: false
        },
        {
            if: 'dxtSupported',
            basisFormat: [
                BasisFormat.ETC1S,
                BasisFormat.UASTC_4x4
            ],
            transcoderFormat: [
                TranscoderFormat.BC1,
                TranscoderFormat.BC3
            ],
            engineFormat: [
                EngineFormat.RGB_S3TC_DXT1_Format,
                EngineFormat.RGBA_S3TC_DXT5_Format
            ],
            priorityETC1S: 4,
            priorityUASTC: 5,
            needsPowerOfTwo: false
        },
        {
            if: 'etc2Supported',
            basisFormat: [
                BasisFormat.ETC1S,
                BasisFormat.UASTC_4x4
            ],
            transcoderFormat: [
                TranscoderFormat.ETC1,
                TranscoderFormat.ETC2
            ],
            engineFormat: [
                EngineFormat.RGB_ETC2_Format,
                EngineFormat.RGBA_ETC2_EAC_Format
            ],
            priorityETC1S: 1,
            priorityUASTC: 3,
            needsPowerOfTwo: false
        },
        {
            if: 'etc1Supported',
            basisFormat: [
                BasisFormat.ETC1S,
                BasisFormat.UASTC_4x4
            ],
            transcoderFormat: [
                TranscoderFormat.ETC1
            ],
            engineFormat: [
                EngineFormat.RGB_ETC1_Format
            ],
            priorityETC1S: 2,
            priorityUASTC: 4,
            needsPowerOfTwo: false
        },
        {
            if: 'pvrtcSupported',
            basisFormat: [
                BasisFormat.ETC1S,
                BasisFormat.UASTC_4x4
            ],
            transcoderFormat: [
                TranscoderFormat.PVRTC1_4_RGB,
                TranscoderFormat.PVRTC1_4_RGBA
            ],
            engineFormat: [
                EngineFormat.RGB_PVRTC_4BPPV1_Format,
                EngineFormat.RGBA_PVRTC_4BPPV1_Format
            ],
            priorityETC1S: 5,
            priorityUASTC: 6,
            needsPowerOfTwo: true
        }, 
    ];
    const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {
        return a.priorityETC1S - b.priorityETC1S;
    });
    const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function(a, b) {
        return a.priorityUASTC - b.priorityUASTC;
    });
    function getTranscoderFormat(basisFormat, width, height, hasAlpha) {
        let transcoderFormat;
        let engineFormat;
        const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;
        for(let i = 0; i < options.length; i++){
            const opt = options[i];
            if (!config[opt.if]) continue;
            if (!opt.basisFormat.includes(basisFormat)) continue;
            if (hasAlpha && opt.transcoderFormat.length < 2) continue;
            if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;
            transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];
            engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];
            return {
                transcoderFormat: transcoderFormat,
                engineFormat: engineFormat
            };
        }
        console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');
        transcoderFormat = TranscoderFormat.RGBA32;
        engineFormat = EngineFormat.RGBAFormat;
        return {
            transcoderFormat: transcoderFormat,
            engineFormat: engineFormat
        };
    }
    function isPowerOfTwo(value) {
        if (value <= 2) return true;
        return (value & value - 1) === 0 && value !== 0;
    }
};



class $5c42d6186ba93490$export$2e2bcd8739ae039 extends (/*@__PURE__*/$parcel$interopDefault($ef35f6280e8cf2f8$exports)) {
    constructor(renderer){
        super();
        this.length = 0;
        this.loader = new $cc488ac7d96c3c0c$export$f2e11b211e093ce0();
        this.loader.setTranscoderPath("./basis/");
        this.loader.detectSupport(renderer);
        this.numAssets = Object.keys(window.TEXTURE_ASSETS).length + Object.keys(window.SOUND_ASSETS).length;
        this.load();
    }
    load() {
        window.TEXTURES = {
        };
        window.SOUNDS = {
        };
        Object.entries(window.TEXTURE_ASSETS).forEach(([name, url])=>{
            this.loader.load(url, (texture)=>{
                window.TEXTURES[name] = texture;
                this.onAssetLoaded(name);
            });
        });
        Object.entries(window.SOUND_ASSETS).forEach(([name, url])=>{
            const sound = new Audio(url);
            window.SOUNDS[name] = sound;
            sound.addEventListener("progress", ()=>this.onAssetLoaded(name)
            , {
                once: true
            });
        });
    }
    onAssetLoaded(name) {
        this.length += 1;
        const progress = this.length / this.numAssets;
        this.emit("asset loaded", progress, name);
        if (progress === 1) this.emit("all assets loaded");
    }
}




class $6b1f20d622136982$export$2e2bcd8739ae039 extends (/*@__PURE__*/$parcel$interopDefault($ef35f6280e8cf2f8$exports)) {
    // isDown = false;
    constructor({ classes: classes , element: element , elements: elements , isScrollable: isScrollable = true  }){
        super();
        this.classes = {
            ...classes
        };
        this.selectors = {
            element: element,
            elements: {
                ...elements
            }
        };
        this.scroll = {
            ease: 0.07,
            position: 0,
            current: 0,
            target: 0,
            limit: 5000,
            last: 0,
            touchPosition: 0
        };
        this.isScrollable = isScrollable;
        this.create();
    }
    create() {
        this.element = document.querySelector(this.selectors.element);
        this.elements = {
        };
        Object.entries(this.selectors.elements).forEach(([key, selector])=>{
            if (selector instanceof window.HTMLElement || selector instanceof window.NodeList) this.elements[key] = selector;
            else if (Array.isArray(selector)) this.elements[key] = selector;
            else {
                this.elements[key] = this.element.querySelectorAll(selector);
                if (this.elements[key].length === 0) this.elements[key] = null;
                else if (this.elements[key].length === 1) this.elements[key] = this.element.querySelector(selector);
            }
        });
    }
    show() {
    }
    hide() {
        this.element.classList.remove(this.classes.active);
        return Promise.resolve();
    }
    setScroll(value) {
        this.scroll.current = this.scroll.target = this.scroll.last = value;
        this.transform(this.elements.wrapper, value);
    }
    transform(element, y) {
        element.style.transform = `translate3d(0,${-Math.round(y)}px,0)`;
    }
    onResize() {
        window.requestAnimationFrame(()=>{
            this.scroll.limit = this.elements.wrapper.scrollHeight - this.elements.wrapper.clientHeight;
        });
    }
    onWheel(scroll) {
        this.scroll.target += scroll;
    }
    onTouchDown(position) {
        this.scroll.touchPosition = position;
    }
    onTouchMove(position) {
        const diff = this.scroll.touchPosition - position;
        this.scroll.touchPosition = position;
        this.scroll.target += diff * 4;
    }
    update() {
        if (this.isScrollable) {
            this.scroll.target = $95b9742290dc9865$export$7d15b64cf5a3a4c4(this.scroll.target, 0, this.scroll.limit);
            this.scroll.current = $95b9742290dc9865$export$3a89f8d6f6bf6c9f(this.scroll.current, this.scroll.target, this.scroll.ease);
            this.scroll.current = Math.floor(this.scroll.current);
            if (this.scroll.current < 0.1) this.scroll.current = 0;
            this.transform(this.elements.wrapper, this.scroll.current);
            this.scroll.last = this.scroll.current;
        }
    }
}



class $a48557c590541616$export$2e2bcd8739ae039 extends $6b1f20d622136982$export$2e2bcd8739ae039 {
    constructor(){
        super({
            classes: {
                active: "home--active"
            },
            element: ".home",
            elements: {
                wrapper: ".home__wrapper",
                particles: ".home__particles"
            },
            isScrollable: false
        });
    }
    show() {
        $980dae104ebd016a$export$99ee26438460406a.to(this.element, {
            autoAlpha: 1,
            duration: 0.5,
            ease: "expo.in"
        });
        this.element.classList.add(this.classes.active);
    }
    hide() {
        return new Promise((resolve)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(this.element, {
                autoAlpha: 0,
                duration: 0.5,
                ease: "expo.out",
                onComplete: ()=>{
                    this.element.classList.remove(this.classes.active);
                    resolve();
                }
            });
        });
    }
}



class $388f9f63da93d3ba$export$2e2bcd8739ae039 extends $6b1f20d622136982$export$2e2bcd8739ae039 {
    constructor(){
        super({
            classes: {
                active: "about--active"
            },
            element: ".about",
            elements: {
                wrapper: ".about__wrapper",
                toggle: ".credits__toggle",
                creditsList: ".about__credits__podlist",
                credits: ".credits",
                toggleText: ".credits__toggle__text",
                link: ".about__link",
                pod: document.querySelector(".about__credits__podname")
            },
            isScrollable: true
        });
        this.returnPageSet = true;
        this.addEventListeners();
    }
    show() {
        this.returnPageSet = true;
        this.element.classList.add(this.classes.active);
    }
    onResize() {
        window.requestAnimationFrame(()=>{
            this.scroll.limit = this.elements.wrapper.scrollHeight - this.elements.wrapper.clientHeight + window.innerHeight * 0.1;
        });
    }
    async hide() {
        await super.hide();
        this.element.classList.remove(this.classes.active);
    }
    addEventListeners() {
        this.elements.toggle.addEventListener("click", ()=>{
            this.elements.toggle.classList.toggle("active");
            this.elements.toggleText.classList.toggle("active");
            this.elements.creditsList.classList.toggle("active");
            this.onResize();
            window.requestAnimationFrame(()=>{
                this.scroll.target += this.elements.pod.clientHeight + 64;
            });
        });
        this.elements.link.addEventListener("click", ()=>{
            if (this.returnPageSet) window.history.back();
            else this.emit("navigate to home");
        });
    }
}



class $d15d66e1ad4fc80d$export$2e2bcd8739ae039 extends $6b1f20d622136982$export$2e2bcd8739ae039 {
    constructor(){
        super({
            classes: {
                active: "snippets--active"
            },
            element: ".snippets",
            elements: {
                wrapper: ".snippets__wrapper"
            },
            isScrollable: false
        });
    }
    show() {
        this.element.classList.add(this.classes.active);
    }
    async hide() {
        await super.hide();
        this.element.classList.remove(this.classes.active);
    }
}




class $f6f46493be0c38a2$export$2e2bcd8739ae039 extends $6b1f20d622136982$export$2e2bcd8739ae039 {
    constructor({ element: element  }){
        super({
            classes: {
                active: "detail--active"
            },
            element: element,
            elements: {
                wrapper: ".detail__wrapper",
                slice: ".detail__explanation__slice",
                textBox: ".detail__explanation__text__box",
                titleBox: ".detail__title__box",
                closeButton: ".detail__close"
            }
        });
        this.addEventListeners();
        this.createObserver();
    }
    // setData(id:string) {}
    show() {
        $980dae104ebd016a$export$99ee26438460406a.fromTo(this.element, {
            autoAlpha: 0
        }, {
            autoAlpha: 1,
            duration: 2,
            delay: 1
        });
        this.element.classList.add(this.classes.active);
    }
    async hide() {
        this.onExitFullscreen();
        super.hide();
        this.element.classList.remove(this.classes.active);
    }
    createObserver() {
        this.observer = new window.IntersectionObserver((entries)=>{
            entries.forEach((entry)=>{
                if (entry.isIntersecting) $980dae104ebd016a$export$99ee26438460406a.fromTo(entry.target, {
                    autoAlpha: 0
                }, {
                    autoAlpha: 1,
                    duration: 3
                });
            });
        }, {
            threshold: 0
        });
        this.elements.textBox.forEach((el)=>this.observer.observe(el)
        );
    }
    onEnterFullscreen() {
        this.isScrollable = false;
        this.elements.closeButton.style["pointer-events"] = "none";
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.closeButton, {
            opacity: 0,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.titleBox, {
            translateX: "-200%",
            duration: 1,
            ease: "power2.out"
        });
        this.elements.textBox.forEach((target, index)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(target, {
                translateX: index % 2 === 1 ? "-200%" : "200%",
                duration: 1,
                ease: "power2.out"
            });
        });
    }
    onExitFullscreen() {
        this.isScrollable = true;
        this.elements.closeButton.style.pointerEvents = "";
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.closeButton, {
            opacity: 1,
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.titleBox, {
            translateX: 0,
            duration: 1,
            ease: "power2.out"
        });
        this.elements.textBox.forEach((target)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(target, {
                translateX: 0,
                duration: 1,
                ease: "power2.out"
            });
        });
    }
    update() {
        super.update();
        if (this.scroll.current < window.innerHeight * 0.7) this.elements.closeButton.style.opacity = 1;
        else this.elements.closeButton.style.opacity = 0.4;
    }
    addEventListeners() {
    }
}




class $cdf592673956a290$export$2e2bcd8739ae039 extends $ea0b881b56c5595f$export$2e2bcd8739ae039 {
    constructor({ template: template  }){
        super({
            element: ".preloader",
            elements: {
                wrapper: ".preloader__wrapper",
                title: ".preloader__title",
                text: ".title1",
                progress: ".title2",
                abab: ".abab",
                baba: ".baba",
                notification: ".preloader__notification",
                notificationText: ".preloader__notification__text",
                assetName: ".preloader__notification__assetname"
            }
        });
        this.template = template;
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.spotlight = $980dae104ebd016a$export$99ee26438460406a.fromTo(".spotlight", {
            x: "-50%",
            y: "-50%"
        }, {
            x: "0",
            y: "0",
            duration: 10,
            repeat: -1,
            ease: "none"
        });
        this.bindEvents();
    }
    bindEvents() {
        this.onEnter = this.onEnter.bind(this);
    }
    onAssetLoaded(progress, image) {
        this.elements.assetName.innerText = image;
        $980dae104ebd016a$export$99ee26438460406a.set(this.elements.progress, {
            attr: {
                "data-text": `${Math.round(100 * progress)}%`
            },
            innerText: `${Math.round(100 * progress)}%`
        });
    }
    onAllAssetsLoaded() {
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.notificationText, {
            opacity: 0,
            duration: 1,
            repeat: 1,
            onRepeat: ()=>{
                this.elements.notificationText.innerText = "Ready! Click or press any key to enter.";
                this.elements.notification.classList.add("onloaded");
            }
        }).yoyo(true);
        document.addEventListener("click", this.onEnter);
        document.addEventListener("keypress", this.onEnter);
    }
    onEnter() {
        document.removeEventListener("click", this.onEnter);
        document.removeEventListener("keypress", this.onEnter);
        this.emit("enter site");
        this.hide();
    }
    hide() {
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.text, {
            transform: "translate(0, 100%)",
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.abab, {
            transform: "translate(0, 103%)",
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.progress, {
            transform: "translate(0, -100%)",
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.baba, {
            transform: "translate(0, -103%)",
            duration: 1
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.element, {
            autoAlpha: 0,
            delay: 0.5,
            duration: 1.5,
            ease: "power1.in",
            onComplete: this.destroy.bind(this)
        });
    }
    destroy() {
        this.emit("destroy preloader");
        this.spotlight.kill();
        this.element.parentNode.removeChild(this.element);
    }
}





class $f0785bdb198e58ec$export$2e2bcd8739ae039 extends $ea0b881b56c5595f$export$2e2bcd8739ae039 {
    constructor({ template: template  }){
        super({
            element: ".icon",
            elements: {
                wrapper: ".icon__wrapper",
                outer: ".icon__outer",
                inner: ".icon__inner",
                link: ".icon__link",
                svg: ".icon__svg",
                paths: "path",
                center: ".icon__center",
                sun: ".icon__sun",
                circle: ".icon__circle",
                white: ".icon__color__white",
                black: ".icon__color__black"
            }
        });
        this.template = template;
        this.setPaths();
    }
    setPaths() {
        this.paths = [
            ...this.elements.paths
        ].map((element)=>{
            const pathLength = element.getTotalLength();
            $980dae104ebd016a$export$99ee26438460406a.set(element, {
                strokeDashoffset: pathLength,
                strokeDasharray: `${pathLength} ${pathLength}`
            });
            return {
                element: element,
                pathLength: pathLength
            };
        });
    }
    onAssetLoaded(percent) {
        this.paths.forEach((path)=>{
            $980dae104ebd016a$export$99ee26438460406a.to(path.element, {
                strokeDashoffset: (1 - percent) * path.pathLength,
                duration: 3 * percent
            });
        });
    }
    setDefaultAnimation() {
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.outer, {
            rotation: 360,
            duration: 12,
            repeat: -1,
            svgOrigin: "32 32"
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.inner, {
            rotation: -360,
            duration: 8,
            repeat: -1,
            svgOrigin: "32 32"
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.white, {
            attr: {
                offset: 0.33
            },
            duration: 1,
            repeat: -1,
            delay: 1
        }).yoyo(true);
    }
    onEnterSite() {
        $77ffb9f622074fa6$export$2e2bcd8739ae039.isDesktop() && this.addEventListeners();
        this.show(this.template, true);
        this.setDefaultAnimation();
    }
    onMouseEnter() {
        this.emit("mouse enter icon");
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.black, {
            attr: {
                offset: 0.16,
                duration: 1.5
            }
        });
    }
    onMouseLeave() {
        this.emit("mouse exit icon");
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.black, {
            attr: {
                offset: 0,
                duration: 1.5
            }
        });
    }
    onDestroyPreloader() {
        this.element.classList.remove("icon__loading");
    }
    show(template, firstLoad) {
        if (template === "/") {
            this.elements.link.style.pointerEvents = "all";
            $980dae104ebd016a$export$99ee26438460406a.set(this.elements.svg, {
                transform: "translateY(0)"
            });
            $980dae104ebd016a$export$99ee26438460406a.set(this.elements.wrapper, {
                height: "10vw",
                width: "10vw",
                top: "",
                left: "",
                opacity: 0.5,
                right: firstLoad ? "" : "20%"
            });
            $980dae104ebd016a$export$99ee26438460406a.to(this.elements.wrapper, {
                right: "5%",
                duration: 1,
                opacity: 1,
                ease: "power2.out"
            });
            $980dae104ebd016a$export$99ee26438460406a.set(this.elements.link, {
                attr: {
                    href: "/snippets"
                }
            });
        } else if (template === "/snippets") {
            this.elements.link.style.pointerEvents = "all";
            $980dae104ebd016a$export$99ee26438460406a.set(this.elements.wrapper, {
                opacity: 1,
                height: "5rem",
                width: "5rem",
                top: "10%",
                left: "0",
                right: ""
            });
            $980dae104ebd016a$export$99ee26438460406a.fromTo(this.elements.svg, {
                transform: "translateY(5rem)"
            }, {
                transform: "translateY(0)",
                duration: 1,
                ease: "back.out(1.4)"
            });
            $980dae104ebd016a$export$99ee26438460406a.set(this.elements.link, {
                attr: {
                    href: "/"
                }
            });
        } else {
            $980dae104ebd016a$export$99ee26438460406a.to(this.elements.wrapper, {
                duration: 1,
                opacity: 0
            });
            this.elements.link.style.pointerEvents = "none";
        }
    }
    hide() {
        return new Promise((resolve)=>{
            this.elements.link.style.pointerEvents = "none";
            this.onMouseLeave();
            if (this.template === "/") $980dae104ebd016a$export$99ee26438460406a.to(this.elements.wrapper, {
                opacity: 0,
                duration: 1
            });
            else if (this.template === "/snippets") $980dae104ebd016a$export$99ee26438460406a.to(this.elements.svg, {
                transform: "translateY(8rem)",
                duration: 1,
                ease: "back.out(1.4)"
            });
            window.setTimeout(()=>resolve()
            , 1000);
        });
    }
    async onChange(template) {
        await this.hide();
        this.show(template);
        this.template = template;
    }
    addEventListeners() {
        this.elements.link.addEventListener("mouseenter", this.onMouseEnter.bind(this));
        this.elements.link.addEventListener("mouseleave", this.onMouseLeave.bind(this));
    }
}





class $4eaaa227927a9fce$export$2e2bcd8739ae039 extends $ea0b881b56c5595f$export$2e2bcd8739ae039 {
    constructor(){
        super({
            element: ".navigation",
            elements: {
                listWrapper: ".navigation__list__wrapper",
                list: ".navigation__list",
                listItems: ".navigation__list__item",
                overlay: ".navigation__overlay",
                overlayPath: ".navigation__overlay__path",
                icon: ".navigation__icon__svg",
                iconPath: ".navigation__icon__path"
            }
        });
        this.isOpen = false;
        $980dae104ebd016a$export$99ee26438460406a.set(this.elements.iconPath, {
            attr: {
                d: this.elements.iconPath.getAttribute("data-d")
            }
        });
        $980dae104ebd016a$export$99ee26438460406a.set(this.elements.overlayPath, {
            attr: {
                d: this.elements.overlayPath.getAttribute("data-d-curve")
            }
        });
        this.addEventListeners();
    }
    open() {
        this.isOpen = true;
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.iconPath, {
            duration: 0.5,
            attr: {
                d: this.elements.iconPath.getAttribute("data-d-click")
            }
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.overlay, {
            duration: 0.5,
            width: "100%",
            ease: "power2.in"
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.overlayPath, {
            duration: 0.3,
            delay: 0.5,
            attr: {
                d: this.elements.overlayPath.getAttribute("data-d")
            },
            ease: "power2.out"
        });
        this.elements.list.style.visibility = "visible";
        $980dae104ebd016a$export$99ee26438460406a.fromTo(this.elements.listItems, {
            x: 200,
            autoAlpha: 0
        }, {
            x: 0,
            duration: 0.3,
            autoAlpha: 1,
            delay: 0.5,
            stagger: 0.1
        });
    }
    close() {
        this.isOpen = false;
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.iconPath, {
            duration: 0.5,
            attr: {
                d: this.elements.iconPath.getAttribute("data-d")
            }
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.overlay, {
            duration: 0.5,
            delay: 0.3,
            width: "0",
            ease: "power2.out"
        });
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.overlayPath, {
            duration: 0.3,
            ease: "power2.in",
            attr: {
                d: this.elements.overlayPath.getAttribute("data-d-curve")
            }
        });
        $980dae104ebd016a$export$99ee26438460406a.fromTo(this.elements.listItems, {
            x: 0,
            autoAlpha: 1
        }, {
            x: 200,
            duration: 0.3,
            autoAlpha: 0,
            stagger: -0.1
        });
    }
    toggle() {
        if (this.isOpen) {
            this.emit("close nav");
            this.close();
        } else {
            this.emit("open nav");
            this.open();
        }
    }
    onMouseEnter() {
        if (!this.isOpen) {
            this.emit("enter nav icon");
            $980dae104ebd016a$export$99ee26438460406a.to(this.elements.iconPath, {
                duration: 0.5,
                attr: {
                    d: this.elements.iconPath.getAttribute("data-d-hover")
                }
            });
        }
    }
    onMouseLeave() {
        if (!this.isOpen) $980dae104ebd016a$export$99ee26438460406a.to(this.elements.iconPath, {
            duration: 0.5,
            attr: {
                d: this.elements.iconPath.getAttribute("data-d")
            }
        });
    }
    onChange() {
        this.isOpen && this.close();
    }
    addEventListeners() {
        if ($77ffb9f622074fa6$export$2e2bcd8739ae039.isDesktop()) {
            this.elements.icon.addEventListener("mouseenter", this.onMouseEnter.bind(this));
            this.elements.icon.addEventListener("mouseleave", this.onMouseLeave.bind(this));
        }
        this.elements.icon.addEventListener("click", this.toggle.bind(this));
        this.elements.overlay.addEventListener("click", ()=>{
            this.onChange();
        });
    }
}




class $a00114a469b37940$export$2e2bcd8739ae039 extends $ea0b881b56c5595f$export$2e2bcd8739ae039 {
    constructor(){
        super({
            element: ".footer",
            elements: {
                soundIconWrapper: ".footer__sound",
                soundIcon: ".footer__sound__icon__path",
                socialToggle: ".footer__social__icon__path",
                socialToggleWrapper: ".footer__social__toggle",
                socialIcons: ".footer__social_icons",
                testIcons: ".footer__social"
            }
        });
        this.isSoundOn = true;
        this.isSocialOpen = false;
        $980dae104ebd016a$export$99ee26438460406a.set(this.elements.soundIcon, {
            attr: {
                d: this.elements.soundIcon.getAttribute("data-d-on")
            }
        });
        this.bindEvents();
        this.addEventListeners();
        this.ons();
    }
    ons() {
        this.soundAnimation = $980dae104ebd016a$export$99ee26438460406a.to(this.elements.soundIcon, {
            x: "120",
            repeat: -1,
            ease: "none",
            duration: 4
        });
    }
    onClick() {
        if (this.isSoundOn) {
            $980dae104ebd016a$export$99ee26438460406a.to(this.elements.soundIcon, {
                duration: 0.3,
                attr: {
                    d: this.elements.soundIcon.getAttribute("data-d-off")
                }
            });
            this.emit("sound disabled");
        } else {
            $980dae104ebd016a$export$99ee26438460406a.to(this.elements.soundIcon, {
                duration: 0.3,
                attr: {
                    d: this.elements.soundIcon.getAttribute("data-d-on")
                }
            });
            this.emit("sound enabled");
        }
        this.isSoundOn = !this.isSoundOn;
    }
    closeSocial() {
        if (this.isSocialOpen === false) return;
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.socialToggle, {
            duration: 0.3,
            rotateZ: 0,
            transformOrigin: "center"
        });
        this.elements.socialIcons.style.pointerEvents = "none";
        $980dae104ebd016a$export$99ee26438460406a.fromTo(this.elements.socialIcons, {
            x: "0",
            autoAlpha: 1
        }, {
            duration: 0.3,
            autoAlpha: 0,
            x: "7rem"
        });
        this.isSocialOpen = false;
    }
    openSocial() {
        if (this.isSocialOpen === true) return;
        $980dae104ebd016a$export$99ee26438460406a.to(this.elements.socialToggle, {
            duration: 0.3,
            rotateZ: 45,
            transformOrigin: "center"
        });
        this.elements.socialIcons.style.pointerEvents = "all";
        $980dae104ebd016a$export$99ee26438460406a.fromTo(this.elements.socialIcons, {
            x: "7rem",
            autoAlpha: 0
        }, {
            duration: 0.3,
            x: "0",
            autoAlpha: 1
        });
        this.isSocialOpen = true;
    }
    bindEvents() {
        this.onClick = this.onClick.bind(this);
        this.openSocial = this.openSocial.bind(this);
        this.closeSocial = this.closeSocial.bind(this);
    }
    addEventListeners() {
        this.elements.soundIconWrapper.addEventListener("click", this.onClick);
        this.elements.socialToggleWrapper.addEventListener("mouseenter", this.openSocial);
        this.elements.socialToggleWrapper.addEventListener("mousedown", this.closeSocial);
        this.elements.socialToggleWrapper.addEventListener("touchstart", this.openSocial);
        this.elements.testIcons.addEventListener("mouseleave", this.closeSocial);
    }
}


function $1e04e461d16c2571$var$t(t, n, i) {
    return n in t ? Object.defineProperty(t, n, {
        value: i,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : t[n] = i, t;
}
function $1e04e461d16c2571$var$n(t, n1) {
    var i = Object.keys(t);
    if (Object.getOwnPropertySymbols) {
        var e = Object.getOwnPropertySymbols(t);
        n1 && (e = e.filter(function(n) {
            return Object.getOwnPropertyDescriptor(t, n).enumerable;
        })), i.push.apply(i, e);
    }
    return i;
}
function $1e04e461d16c2571$var$i(i) {
    for(var e = 1; e < arguments.length; e++){
        var r = null != arguments[e] ? arguments[e] : {
        };
        e % 2 ? $1e04e461d16c2571$var$n(Object(r), !0).forEach(function(n) {
            $1e04e461d16c2571$var$t(i, n, r[n]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(i, Object.getOwnPropertyDescriptors(r)) : $1e04e461d16c2571$var$n(Object(r)).forEach(function(t) {
            Object.defineProperty(i, t, Object.getOwnPropertyDescriptor(r, t));
        });
    }
    return i;
}
var { isArray: $1e04e461d16c2571$var$e  } = Array;
function $1e04e461d16c2571$var$r(t) {
    return $1e04e461d16c2571$var$e(t) ? t : [
        t
    ];
}
function $1e04e461d16c2571$var$o(t, n) {
    return t.indexOf(n) < 0 && (t.push(n), !0);
}
function $1e04e461d16c2571$var$s(t, n) {
    const i = t.indexOf(n);
    return -1 != i && (t.splice(i, 1), !0);
}
function $1e04e461d16c2571$var$l(t, n) {
    (null == n || n > t.length) && (n = t.length);
    for(var i = 0, e = new Array(n); i < n; i++)e[i] = t[i];
    return e;
}
function $1e04e461d16c2571$var$u(t1, n2) {
    var i1 = "undefined" != typeof Symbol && t1[Symbol.iterator] || t1["@@iterator"];
    if (i1) return (i1 = i1.call(t1)).next.bind(i1);
    if (Array.isArray(t1) || (i1 = (function(t, n) {
        if (t) {
            if ("string" == typeof t) return $1e04e461d16c2571$var$l(t, n);
            var i = Object.prototype.toString.call(t).slice(8, -1);
            return "Object" === i && t.constructor && (i = t.constructor.name), "Map" === i || "Set" === i ? Array.from(t) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? $1e04e461d16c2571$var$l(t, n) : void 0;
        }
    })(t1)) || n2 && t1 && "number" == typeof t1.length) {
        i1 && (t1 = i1);
        var e = 0;
        return function() {
            return e >= t1.length ? {
                done: !0
            } : {
                done: !1,
                value: t1[e++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var { hasOwnProperty: $1e04e461d16c2571$var$c , toString: $1e04e461d16c2571$var$a  } = Object.prototype;
function $1e04e461d16c2571$var$f(t) {
    const n = Object.create(null);
    return t && Object.assign(n, t), n;
}
function $1e04e461d16c2571$var$h(t) {
    return 1 == (null == t ? void 0 : t.nodeType);
}
function $1e04e461d16c2571$var$d(t, n, i, e, r, o, s, l, u, c, a) {
    return t;
}
var $1e04e461d16c2571$var$p = [
    "auto",
    "lazy",
    "eager",
    "unload"
], $1e04e461d16c2571$var$v = {
    auto: 0,
    lazy: 1,
    eager: 2,
    unload: 3
};
function $1e04e461d16c2571$var$m(t, n) {
    const i = $1e04e461d16c2571$var$v[null != t ? t : "auto"] || 0, e = $1e04e461d16c2571$var$v[null != n ? n : "auto"] || 0, r = Math.max(i, e);
    return $1e04e461d16c2571$var$p[r];
}
function $1e04e461d16c2571$var$y(t2, n) {
    let i = !1;
    const e = ()=>{
        i = !1, t2();
    };
    return (t)=>{
        i || (i = !0, (t || n)(e));
    };
}
function $1e04e461d16c2571$var$b(t) {
    const n = Object.getOwnPropertyDescriptor(t, "message");
    if (null != n && n.writable) return t;
    const { message: i , stack: e  } = t, r = new Error(i);
    for(const n3 in t)r[n3] = t[n3];
    return r.stack = e, r;
}
function $1e04e461d16c2571$var$_(t) {
    let n = null, i = "";
    for(var e, r = $1e04e461d16c2571$var$u(arguments, !0); !(e = r()).done;){
        const t = e.value;
        t instanceof Error && !n ? n = $1e04e461d16c2571$var$b(t) : (i && (i += " "), i += t);
    }
    return n ? i && (n.message = i + ": " + n.message) : n = new Error(i), n;
}
function $1e04e461d16c2571$var$g(t) {
    var n, i;
    null === (n = (i = self).__AMP_REPORT_ERROR) || void 0 === n || n.call(i, t);
}
function $1e04e461d16c2571$var$P(t) {
    const n = $1e04e461d16c2571$var$_.apply(null, arguments);
    setTimeout(()=>{
        throw $1e04e461d16c2571$var$g(n), n;
    });
}
function $1e04e461d16c2571$var$w(t, ...n) {
    try {
        return t.apply(null, n);
    } catch (t3) {
        $1e04e461d16c2571$var$P(t3);
    }
}
function $1e04e461d16c2571$var$A(t, n, i, e = !0, r = !0) {
    if (r) {
        const r = n(t, i, e);
        r && $1e04e461d16c2571$var$A(t, n, i, r, !1);
    } else if (t.children) for(var o, s = $1e04e461d16c2571$var$u(t.children, !0); !(o = s()).done;)$1e04e461d16c2571$var$A(o.value, n, i, e, !0);
}
var $1e04e461d16c2571$var$k = [], $1e04e461d16c2571$var$S = ()=>{
};
function $1e04e461d16c2571$var$M(t, n) {
    return t.values.scan(n);
}
function $1e04e461d16c2571$var$R(t, n, i) {
    return t.values.scanAll(i);
}
function $1e04e461d16c2571$var$x(t, n) {
    return t.values.has(n);
}
function $1e04e461d16c2571$var$T(t) {
    return !!t.recursive;
}
function $1e04e461d16c2571$var$z(t) {
    return void 0 !== t;
}
var $1e04e461d16c2571$var$C = class {
    static get(t) {
        let n = t.__AMP_NODE;
        return n || (n = new $1e04e461d16c2571$var$C(t, null), t.__AMP_NODE = n), n;
    }
    static closest(t, n = !0) {
        let i = t;
        for(; i;){
            if (i != t || n) {
                if (i.__AMP_NODE) return i.__AMP_NODE;
                const { nodeType: t  } = i;
                if (9 == t || 11 == t || $1e04e461d16c2571$var$h(i) && i.tagName.startsWith("AMP-")) return $1e04e461d16c2571$var$C.get(i);
            }
            i = i.__AMP_ASSIGNED_SLOT || i.assignedSlot || i.parentNode;
        }
        return null;
    }
    static assignSlot(t, n) {
        t.__AMP_ASSIGNED_SLOT != n && (t.__AMP_ASSIGNED_SLOT = n, $1e04e461d16c2571$var$E(t));
    }
    static unassignSlot(t, n) {
        t.__AMP_ASSIGNED_SLOT == n && (t.__AMP_ASSIGNED_SLOT = void 0, $1e04e461d16c2571$var$E(t));
    }
    static rediscoverChildren(t) {
        var n;
        const i = t.__AMP_NODE;
        null == i || null === (n = i.children) || void 0 === n || n.forEach($1e04e461d16c2571$var$I);
    }
    constructor(t4, n4){
        this.node = t4, this.name = n4, this.isRoot = 9 == t4.nodeType, this.root = this.isRoot ? this : null, this.parent = null, this.children = null, this.groups = null, this.values = new class {
            constructor(t){
                this.Ze = t, this.v = null, this.m = null, this.la = $1e04e461d16c2571$var$y(this.la.bind(this), setTimeout);
            }
            set(t, n, i) {
                $1e04e461d16c2571$var$d(n), $1e04e461d16c2571$var$d(void 0 !== i);
                const { key: e  } = t, r = this.v || (this.v = new Map);
                let o = r.get(e);
                o || (o = {
                    values: [],
                    setters: []
                }, r.set(e, o));
                const s = o.setters.indexOf(n), l = -1 == s || o.values[s] !== i;
                -1 == s ? (o.setters.push(n), o.values.push(i)) : l && (o.values[s] = i), l && (this.ping(t, !1), $1e04e461d16c2571$var$T(t) && $1e04e461d16c2571$var$A(this.Ze, $1e04e461d16c2571$var$M, t, !0, !1));
            }
            remove(t, n) {
                $1e04e461d16c2571$var$d(n);
                const { key: i  } = t, e = this.v, r = null == e ? void 0 : e.get(i);
                if (r) {
                    $1e04e461d16c2571$var$d(e);
                    const o = r.setters.indexOf(n);
                    -1 != o && (r.setters.splice(o, 1), r.values.splice(o, 1), 0 == r.setters.length && e.delete(i), $1e04e461d16c2571$var$A(this.Ze, $1e04e461d16c2571$var$M, t));
                }
            }
            has(t) {
                var n;
                return !(null === (n = this.v) || void 0 === n || !n.has(t.key));
            }
            subscribe(t, n) {
                const i = this.ua(t);
                if (!$1e04e461d16c2571$var$o(i.subscribers, n)) return;
                const e = i.value;
                $1e04e461d16c2571$var$z(e) && this.hi() && n(e);
            }
            unsubscribe(t, n) {
                var i;
                const e = null === (i = this.m) || void 0 === i ? void 0 : i.get(t.key);
                e && $1e04e461d16c2571$var$s(e.subscribers, n) && this.ca(e);
            }
            ping(t, n) {
                var i, e;
                null === (i = this.m) || void 0 === i || null === (e = i.get(t.key)) || void 0 === e || e.ping(n);
            }
            parentUpdated() {
                this.hi() && $1e04e461d16c2571$var$A(this.Ze, $1e04e461d16c2571$var$R, void 0, $1e04e461d16c2571$var$k);
            }
            rootUpdated() {
                const t5 = this.m;
                t5 && (this.hi() ? t5.forEach((t)=>{
                    const { prop: n  } = t;
                    this.ping(n, !0);
                }) : t5.forEach((t)=>{
                    const { prop: n  } = t;
                    $1e04e461d16c2571$var$T(n) && this.aa(t, null);
                }));
            }
            scan(t) {
                return this.ping(t, !0), !!$1e04e461d16c2571$var$T(t) && !this.has(t);
            }
            scanAll(t) {
                let n = null;
                const i2 = this.m;
                return i2 && i2.forEach((i)=>{
                    const { prop: e  } = i, { key: r  } = e;
                    -1 == (n || t).indexOf(r) && (this.ping(e, !0), this.Ze.children && this.has(e) && (n || (n = t.slice(0)), n.push(r)));
                }), n || t;
            }
            hi() {
                return !!this.Ze.root;
            }
            ua(t6) {
                const { deps: n5 , key: i  } = t6, e = this.m || (this.m = new Map);
                let r = e.get(i);
                return r || (r = {
                    prop: t6,
                    subscribers: [],
                    value: void 0,
                    pending: 0,
                    counter: 0,
                    depValues: n5.length > 0 ? n5.map($1e04e461d16c2571$var$S) : $1e04e461d16c2571$var$k,
                    parentValue: void 0,
                    parentContextNode: null,
                    ping: (t)=>{
                        if (this.hi()) {
                            const n = t ? 2 : 1;
                            r.pending = Math.max(r.pending, n), this.la();
                        }
                    },
                    pingDep: n5.length > 0 ? n5.map((t7, n)=>(t)=>{
                            r.depValues[n] = t, r.ping();
                        }
                    ) : $1e04e461d16c2571$var$k,
                    pingParent: $1e04e461d16c2571$var$T(t6) ? (t)=>{
                        r.parentValue = t, r.ping();
                    } : null
                }, e.set(i, r), n5.forEach((t, n)=>this.subscribe(t, r.pingDep[n])
                ), r.ping(!1)), r;
            }
            ca(t8) {
                var n;
                if (t8.subscribers.length > 0) return;
                const { pingDep: i , prop: e  } = t8, { deps: r , key: o  } = e;
                null === (n = this.m) || void 0 === n || n.delete(o), this.aa(t8, null), r.length > 0 && r.forEach((t, n)=>{
                    this.unsubscribe(t, i[n]);
                });
            }
            la() {
                if (!this.hi()) return;
                const t9 = this.m;
                if (!t9) return;
                let n;
                t9.forEach((t)=>{
                    t.counter = 0;
                });
                do n = 0, t9.forEach((t)=>{
                    if (0 != t.pending) {
                        const { key: i  } = t.prop;
                        if (t.counter++, t.counter > 5) return $1e04e461d16c2571$var$P(`cyclical prop: ${i}`), void (t.pending = 0);
                        n++, this.fa(t);
                    }
                });
                while (n > 0)
            }
            fa(t) {
                const n = 2 == t.pending;
                let i;
                try {
                    i = this.da(t, n);
                } catch (t10) {
                    $1e04e461d16c2571$var$P(t10);
                }
                t.pending = 0, this.pa(t, i);
            }
            pa(t, n) {
                const { prop: i , value: e  } = t, { key: r  } = i, o = this.m;
                if (e === n || t !== (null == o ? void 0 : o.get(r)) || !this.hi()) return;
                t.value = n;
                const { subscribers: s  } = t;
                for(var l, c = $1e04e461d16c2571$var$u(s, !0); !(l = c()).done;)(0, l.value)(n);
            }
            da(t11, n6) {
                var i3, e1;
                $1e04e461d16c2571$var$d(this.hi());
                const { depValues: r1 , prop: o  } = t11, { compute: s , defaultValue: l , key: u  } = o, c = null === (i3 = this.v) || void 0 === i3 || null === (e1 = i3.get(u)) || void 0 === e1 ? void 0 : e1.values, a = function(t, n) {
                    const { compute: i , recursive: e  } = t;
                    return "function" == typeof e ? !n || e(n) : !(e && n && !i) && e;
                }(o, c);
                if (n6 || a != Boolean(t11.parentContextNode)) {
                    const n7 = a ? function(t, n, i, e = !0) {
                        for(let r = e ? t : t.parent; r; r = r.parent)if (n(r, i)) return r;
                        return null;
                    }(this.Ze, $1e04e461d16c2571$var$x, o, !1) : null;
                    this.aa(t11, n7);
                }
                const f = $1e04e461d16c2571$var$z(t11.parentValue) ? t11.parentValue : a && !t11.parentContextNode ? l : void 0;
                let h;
                if (r1.every($1e04e461d16c2571$var$z) && (!a || $1e04e461d16c2571$var$z(f))) {
                    const { node: t12  } = this.Ze;
                    c && !s ? h = c[0] : $1e04e461d16c2571$var$T(o) ? c || r1.length > 0 ? h = (function(t, n, i, e, r) {
                        switch(r.length){
                            case 0:
                                return t(n, i, e);
                            case 1:
                                return t(n, i, e, r[0]);
                            case 2:
                                return t(n, i, e, r[0], r[1]);
                            case 3:
                                return t(n, i, e, r[0], r[1], r[2]);
                            default:
                                return t.apply(null, [
                                    n,
                                    i,
                                    e
                                ].concat(r));
                        }
                    })(s, t12, c || $1e04e461d16c2571$var$k, f, r1) : $1e04e461d16c2571$var$z(f) && (h = f) : s && (h = (function(t, n, i, e) {
                        switch(e.length){
                            case 0:
                                return t(n, i);
                            case 1:
                                return t(n, i, e[0]);
                            case 2:
                                return t(n, i, e[0], e[1]);
                            case 3:
                                return t(n, i, e[0], e[1], e[2]);
                            default:
                                return t.apply(null, [
                                    n,
                                    i
                                ].concat(e));
                        }
                    })(s, t12, c || $1e04e461d16c2571$var$k, r1));
                }
                return h;
            }
            aa(t, n) {
                const { parentContextNode: i , pingParent: e , prop: r  } = t;
                n != i && (t.parentContextNode = n, t.parentValue = void 0, $1e04e461d16c2571$var$d(e), i && i.values.unsubscribe(r, e), n && ($1e04e461d16c2571$var$d(e), n.values.subscribe(r, e)));
            }
        }(this), this.va = null, this.ma = !1, this.ya = $1e04e461d16c2571$var$y(this.ba.bind(this), setTimeout), 11 == t4.nodeType && t4.addEventListener("slotchange", (t)=>{
            var n, i;
            const e = t.target;
            e.assignedNodes().forEach($1e04e461d16c2571$var$E), null === (n = $1e04e461d16c2571$var$C.closest(e)) || void 0 === n || null === (i = n.children) || void 0 === i || i.forEach($1e04e461d16c2571$var$I);
        }), this.discover();
    }
    discover() {
        this.isDiscoverable() ? this.ya() : this.name && this.children && this.children.forEach($1e04e461d16c2571$var$I);
    }
    isDiscoverable() {
        return !this.isRoot && !this.ma;
    }
    setParent(t) {
        const n = null != t && t.nodeType ? $1e04e461d16c2571$var$C.get(t) : t;
        this._a(n, null != t);
    }
    setIsRoot(t) {
        var n, i;
        this.isRoot = t;
        const e = t ? this : null !== (n = null === (i = this.parent) || void 0 === i ? void 0 : i.root) && void 0 !== n ? n : null;
        this.updateRoot(e);
    }
    updateRoot(t14) {
        $1e04e461d16c2571$var$d(!t14 || t14.isRoot);
        const n9 = this.root;
        var i, e;
        t14 != n9 && (this.root = t14, this.values.rootUpdated(), null === (i = this.va) || void 0 === i || i.forEach((t)=>t.rootUpdated()
        ), null === (e = this.children) || void 0 === e || e.forEach((n)=>n.updateRoot(t14)
        ));
    }
    addGroup(t, n, i) {
        const e = this.groups || (this.groups = new Map), { children: r , node: o  } = this, s = new $1e04e461d16c2571$var$C(o, t);
        return e.set(t, {
            cn: s,
            match: n,
            weight: i
        }), s.setParent(this), null == r || r.forEach($1e04e461d16c2571$var$I), s;
    }
    group(t) {
        var n, i;
        return (null === (n = this.groups) || void 0 === n || null === (i = n.get(t)) || void 0 === i ? void 0 : i.cn) || null;
    }
    findGroup(t) {
        const { groups: n10  } = this;
        if (!n10) return null;
        let i = null, e = Number.NEGATIVE_INFINITY;
        return n10.forEach(({ cn: n , match: r , weight: o  })=>{
            r(t, this.node) && o > e && (i = n, e = o);
        }), i;
    }
    subscribe(t, n, i, e) {
        const r = this.va || (this.va = new Map);
        let o = r.get(t);
        o || (o = new n(this, i, e), r.set(t, o));
    }
    unsubscribe(t) {
        const n = this.va, i = null == n ? void 0 : n.get(t);
        i && (i.dispose(), $1e04e461d16c2571$var$d(n), n.delete(t));
    }
    ba() {
        if (!this.isDiscoverable()) return;
        const t = $1e04e461d16c2571$var$C.closest(this.node, !1), n = (null == t ? void 0 : t.findGroup(this.node)) || t;
        this._a(n, !1);
    }
    _a(t, n) {
        var i;
        this.ma = n;
        const e = this.parent;
        if (t != e) {
            if (this.parent = t, null != e && e.children && ($1e04e461d16c2571$var$d(e.children), $1e04e461d16c2571$var$s(e.children, this)), t) {
                const n = t.children || (t.children = []);
                $1e04e461d16c2571$var$o(n, this);
                for(var r, l = $1e04e461d16c2571$var$u(n, !0); !(r = l()).done;){
                    const t = r.value;
                    t != this && t.isDiscoverable() && t.discover();
                }
            }
            this.values.parentUpdated();
        }
        this.updateRoot(null !== (i = null == t ? void 0 : t.root) && void 0 !== i ? i : null);
    }
};
function $1e04e461d16c2571$var$E(t15) {
    !function(t, n, i = !0) {
        const e = $1e04e461d16c2571$var$C.closest(t, i);
        if (e) {
            if (e.node == t) n(e);
            else if (e.children) for(var r, o = $1e04e461d16c2571$var$u(e.children, !0); !(r = o()).done;){
                const i = r.value;
                t.contains(i.node) && n(i);
            }
        }
    }(t15, $1e04e461d16c2571$var$I);
}
function $1e04e461d16c2571$var$I(t) {
    t.discover();
}
var $1e04e461d16c2571$var$V = [];
function $1e04e461d16c2571$var$j(t, n) {
    const e = $1e04e461d16c2571$var$i({
        key: t,
        deps: $1e04e461d16c2571$var$V,
        recursive: !1
    }, n);
    return $1e04e461d16c2571$var$d(0 == e.deps.length || e.compute), e;
}
var $1e04e461d16c2571$var$O = [], $1e04e461d16c2571$var$$ = ()=>{
};
function $1e04e461d16c2571$var$N(t, n, i) {
    n = $1e04e461d16c2571$var$r(n);
    const e = i;
    $1e04e461d16c2571$var$C.get(t).subscribe(e, $1e04e461d16c2571$var$L, i, n);
}
var $1e04e461d16c2571$var$F, $1e04e461d16c2571$var$L = class {
    constructor(t16, n11, i){
        if (this.contextNode = t16, this.ga = n11, this.Pa = i, this.wa = i.length > 0 ? i.map($1e04e461d16c2571$var$$) : $1e04e461d16c2571$var$O, this.Aa = i.length > 0 ? i.map((t17, n)=>(t)=>{
                this.wa[n] = t, this.ka();
            }
        ) : $1e04e461d16c2571$var$O, this._s = !1, this.Sa = null, this.ka = $1e04e461d16c2571$var$y(this.ka.bind(this), setTimeout), i.length > 0) {
            const { values: t  } = this.contextNode;
            i.forEach((n, i)=>t.subscribe(n, this.Aa[i])
            );
        }
        this.hi() && this.ka();
    }
    dispose() {
        if (this.Pa.length > 0) {
            const { values: t  } = this.contextNode;
            this.Pa.forEach((n, i)=>t.unsubscribe(n, this.Aa[i])
            );
        }
        this.de();
    }
    rootUpdated() {
        const t = this.hi();
        this.de(), t && this.ka();
    }
    hi() {
        return !!this.contextNode.root;
    }
    ka() {
        this.hi() && (this.wa.every($1e04e461d16c2571$var$U) ? (this._s = !0, this.Ma()) : this._s && (this._s = !1, this.de()));
    }
    Ma() {
        this.de();
        const t18 = this.ga;
        this.Sa = (function(t, n) {
            switch(n.length){
                case 0:
                    return t();
                case 1:
                    return t(n[0]);
                case 2:
                    return t(n[0], n[1]);
                case 3:
                    return t(n[0], n[1], n[2]);
                default:
                    return t.apply(null, n);
            }
        })(t18, this.wa);
    }
    de() {
        this.Sa && ($1e04e461d16c2571$var$w(this.Sa), this.Sa = null);
    }
};
function $1e04e461d16c2571$var$U(t) {
    return void 0 !== t;
}
function $1e04e461d16c2571$var$W(t) {
    $1e04e461d16c2571$var$C.get(t).discover();
}
function $1e04e461d16c2571$var$D(t, n, i, e) {
    $1e04e461d16c2571$var$C.get(t).values.set(n, i, e);
}
function $1e04e461d16c2571$var$q(t, n, i) {
    $1e04e461d16c2571$var$C.get(t).values.remove(n, i);
}
function $1e04e461d16c2571$var$H() {
    return $1e04e461d16c2571$var$F || ($1e04e461d16c2571$var$F = Promise.resolve(void 0));
}
var $1e04e461d16c2571$var$B = class {
    constructor(){
        this.promise = new Promise((t, n)=>{
            this.resolve = t, this.reject = n;
        });
    }
};
function $1e04e461d16c2571$var$G(t) {
    return (t.ownerDocument || t).defaultView;
}
function $1e04e461d16c2571$var$Q(t) {
    $1e04e461d16c2571$var$d(/^[\w-]+$/.test(t));
}
function $1e04e461d16c2571$var$Z(t19, n) {
    return t19.querySelector(function(t, n) {
        return t.replace(/^|,/g, "$&:scope ");
    }(n));
}
function $1e04e461d16c2571$var$J(t, n) {
    const i = t.matches || t.webkitMatchesSelector || t.mozMatchesSelector || t.msMatchesSelector || t.oMatchesSelector;
    return !!i && i.call(t, n);
}
function $1e04e461d16c2571$var$K(t, n) {
    return $1e04e461d16c2571$var$Q(n), $1e04e461d16c2571$var$Z(t, `> [${n}]`);
}
function $1e04e461d16c2571$var$X(t20) {
    return (function(t, n) {
        const i = [];
        for(let n12 = t.firstChild; n12; n12 = n12.nextSibling)!$1e04e461d16c2571$var$Y(n12) && i.push(n12);
        return i;
    })(t20);
}
function $1e04e461d16c2571$var$Y(t21) {
    return !!function(t) {
        let n;
        return "string" == typeof t ? n = t : $1e04e461d16c2571$var$h(t) && (n = t.tagName), !!n && n.toLowerCase().startsWith("i-");
    }(t21) || t21.nodeType === Node.ELEMENT_NODE && (t21.hasAttribute("placeholder") || t21.hasAttribute("fallback") || t21.hasAttribute("overflow"));
}
var $1e04e461d16c2571$var$tt, $1e04e461d16c2571$var$nt = {
    bubbles: !0,
    cancelable: !0
};
function $1e04e461d16c2571$var$it(t22, n13, i4) {
    return (function(t, n) {
        for(const i in n)t.setAttribute(i, n[i]);
        return t;
    })(t22.createElement(n13), i4);
}
function $1e04e461d16c2571$var$et(t, n, i, e) {
    const r = i || {
    };
    $1e04e461d16c2571$var$d(t.ownerDocument);
    const o = t.ownerDocument.createEvent("Event");
    o.data = r;
    const { bubbles: s , cancelable: l  } = e || $1e04e461d16c2571$var$nt;
    o.initEvent(n, s, l), t.dispatchEvent(o);
}
function $1e04e461d16c2571$var$rt(t, n) {
    return [
        {
            query: t.matchMedia(n),
            value: "1"
        },
        {
            query: null,
            value: ""
        }
    ];
}
function $1e04e461d16c2571$var$ot(t23, n14) {
    return n14.split(",").map((n)=>{
        if (0 == (n = n.replace(/\s+/g, " ").trim()).length) return;
        let i, e, r;
        if (")" == n.charAt(n.length - 1)) {
            let t = 1;
            for(r = n.length - 2; r >= 0; r--){
                const i = n.charAt(r);
                if ("(" == i ? t-- : ")" == i && t++, 0 == t) break;
            }
            const i = r - 1;
            if (r > 0) for(r--; r >= 0; r--){
                const t = n.charAt(r);
                if (!("%" == t || "-" == t || "_" == t || t >= "a" && t <= "z" || t >= "A" && t <= "Z" || t >= "0" && t <= "9")) break;
            }
            if (r >= i) return null;
        } else for(r = n.length - 2; r >= 0; r--){
            const t = n.charAt(r);
            if (!("%" == t || "." == t || t >= "a" && t <= "z" || t >= "A" && t <= "Z" || t >= "0" && t <= "9")) break;
        }
        return r >= 0 ? (i = n.substring(0, r + 1).trim(), e = n.substring(r + 1).trim()) : (e = n, i = void 0), e ? {
            query: i ? t23.matchMedia(i) : null,
            value: e
        } : null;
    }).filter(Boolean);
}
function $1e04e461d16c2571$var$st(t, n, i) {
    for(let e = 0; e < t.length; e++){
        const { query: r  } = t[e];
        r && (void 0 !== r.onchange ? r.onchange = i ? n : null : i ? r.addListener(n) : r.removeListener(n));
    }
}
var $1e04e461d16c2571$var$lt = [
    "Webkit",
    "webkit",
    "Moz",
    "moz",
    "ms",
    "O",
    "o"
], $1e04e461d16c2571$var$ut = {
    "getPropertyPriority": ()=>""
    ,
    "getPropertyValue": ()=>""
};
function $1e04e461d16c2571$var$ct(t24, n15, i5, e2, r2) {
    const o = function(t25, n16, i8) {
        if ($1e04e461d16c2571$var$ht(n16)) return n16;
        $1e04e461d16c2571$var$tt || ($1e04e461d16c2571$var$tt = $1e04e461d16c2571$var$f());
        let e3 = $1e04e461d16c2571$var$tt[n16];
        if (!e3 || i8) {
            if (e3 = n16, void 0 === t25[n16]) {
                const i6 = function(t) {
                    return t.charAt(0).toUpperCase() + t.slice(1);
                }(n16), r = function(t, n) {
                    for(let i = 0; i < $1e04e461d16c2571$var$lt.length; i++){
                        const e = $1e04e461d16c2571$var$lt[i] + n;
                        if (void 0 !== t[e]) return e;
                    }
                    return "";
                }(t25, i6);
                void 0 !== t25[r] && (e3 = r);
            }
            i8 || ($1e04e461d16c2571$var$tt[n16] = e3);
        }
        return e3;
    }(t24.style, n15, r2);
    if (!o) return;
    const s = e2 ? i5 + e2 : i5;
    $1e04e461d16c2571$var$ht(o) ? t24.style.setProperty(o, s) : t24.style[o] = s;
}
function $1e04e461d16c2571$var$at(t) {
    return `${t}px`;
}
function $1e04e461d16c2571$var$ft(t, n) {
    for(let i = 0; i < n.length; i++)$1e04e461d16c2571$var$ct(t, n[i], null);
}
function $1e04e461d16c2571$var$ht(t) {
    return t.startsWith("--");
}
var $1e04e461d16c2571$var$dt = /vertical/, $1e04e461d16c2571$var$pt = new WeakMap, $1e04e461d16c2571$var$vt = new WeakMap, $1e04e461d16c2571$var$mt = new WeakMap;
function $1e04e461d16c2571$var$yt(t) {
    let n = $1e04e461d16c2571$var$pt.get(t);
    return n || (n = new t.ResizeObserver($1e04e461d16c2571$var$bt), $1e04e461d16c2571$var$pt.set(t, n)), n;
}
function $1e04e461d16c2571$var$bt(t) {
    const n = new Set;
    for(let i = t.length - 1; i >= 0; i--){
        const e = t[i], { target: r  } = e;
        if (n.has(r)) continue;
        n.add(r);
        const o = $1e04e461d16c2571$var$vt.get(r);
        if (o) {
            $1e04e461d16c2571$var$mt.set(r, e);
            for(let t = 0; t < o.length; t++){
                const { callback: n , type: i  } = o[t];
                $1e04e461d16c2571$var$_t(i, n, e);
            }
        }
    }
}
function $1e04e461d16c2571$var$_t(t, n, i) {
    if (0 == t) {
        const { contentRect: t  } = i, { height: e , width: r  } = t;
        $1e04e461d16c2571$var$w(n, {
            width: r,
            height: e
        });
    } else if (1 == t) {
        const { borderBoxSize: t  } = i;
        let e;
        if (t) e = t.length > 0 ? t[0] : {
            inlineSize: 0,
            blockSize: 0
        };
        else {
            const { target: t26  } = i, n17 = $1e04e461d16c2571$var$G(t26), r = $1e04e461d16c2571$var$dt.test(function(t, n) {
                return t.getComputedStyle(n) || $1e04e461d16c2571$var$ut;
            }(n17, t26).writingMode), { offsetHeight: o , offsetWidth: s  } = t26;
            let l, u;
            r ? (u = s, l = o) : (l = s, u = o), e = {
                inlineSize: l,
                blockSize: u
            };
        }
        $1e04e461d16c2571$var$w(n, e);
    }
}
var $1e04e461d16c2571$var$gt, $1e04e461d16c2571$var$Pt, $1e04e461d16c2571$var$wt, $1e04e461d16c2571$var$At, $1e04e461d16c2571$var$kt, $1e04e461d16c2571$var$St, $1e04e461d16c2571$var$Mt, $1e04e461d16c2571$var$Rt, $1e04e461d16c2571$var$xt, $1e04e461d16c2571$var$Tt, $1e04e461d16c2571$var$zt = {
}, $1e04e461d16c2571$var$Ct = [], $1e04e461d16c2571$var$Et = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function $1e04e461d16c2571$var$It(t, n) {
    for(var i in n)t[i] = n[i];
    return t;
}
function $1e04e461d16c2571$var$Vt(t) {
    var n = t.parentNode;
    n && n.removeChild(t);
}
function $1e04e461d16c2571$var$jt(t, n, i) {
    var e, r, o, s = {
    };
    for(o in n)"key" == o ? e = n[o] : "ref" == o ? r = n[o] : s[o] = n[o];
    if (arguments.length > 2 && (s.children = arguments.length > 3 ? $1e04e461d16c2571$var$gt.call(arguments, 2) : i), "function" == typeof t && null != t.defaultProps) for(o in t.defaultProps)void 0 === s[o] && (s[o] = t.defaultProps[o]);
    return $1e04e461d16c2571$var$Ot(t, s, e, r, null);
}
function $1e04e461d16c2571$var$Ot(t, n, i, e, r) {
    var o = {
        type: t,
        props: n,
        key: i,
        ref: e,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == r ? ++$1e04e461d16c2571$var$wt : r
    };
    return null == r && null != $1e04e461d16c2571$var$Pt.vnode && $1e04e461d16c2571$var$Pt.vnode(o), o;
}
function $1e04e461d16c2571$var$$t(t) {
    return t.children;
}
function $1e04e461d16c2571$var$Nt(t, n) {
    this.props = t, this.context = n;
}
function $1e04e461d16c2571$var$Ft(t, n) {
    if (null == n) return t.__ ? $1e04e461d16c2571$var$Ft(t.__, t.__.__k.indexOf(t) + 1) : null;
    for(var i; n < t.__k.length; n++)if (null != (i = t.__k[n]) && null != i.__e) return i.__e;
    return "function" == typeof t.type ? $1e04e461d16c2571$var$Ft(t) : null;
}
function $1e04e461d16c2571$var$Lt(t) {
    var n, i;
    if (null != (t = t.__) && null != t.__c) {
        for(t.__e = t.__c.base = null, n = 0; n < t.__k.length; n++)if (null != (i = t.__k[n]) && null != i.__e) {
            t.__e = t.__c.base = i.__e;
            break;
        }
        return $1e04e461d16c2571$var$Lt(t);
    }
}
function $1e04e461d16c2571$var$Ut(t) {
    (!t.__d && (t.__d = !0) && $1e04e461d16c2571$var$At.push(t) && !$1e04e461d16c2571$var$Wt.__r++ || $1e04e461d16c2571$var$St !== $1e04e461d16c2571$var$Pt.debounceRendering) && (($1e04e461d16c2571$var$St = $1e04e461d16c2571$var$Pt.debounceRendering) || $1e04e461d16c2571$var$kt)($1e04e461d16c2571$var$Wt);
}
function $1e04e461d16c2571$var$Wt() {
    for(var t27; $1e04e461d16c2571$var$Wt.__r = $1e04e461d16c2571$var$At.length;)t27 = $1e04e461d16c2571$var$At.sort(function(t, n) {
        return t.__v.__b - n.__v.__b;
    }), $1e04e461d16c2571$var$At = [], t27.some(function(t) {
        var n, i, e, r, o, s;
        t.__d && (o = (r = (n = t).__v).__e, (s = n.__P) && (i = [], (e = $1e04e461d16c2571$var$It({
        }, r)).__v = r.__v + 1, $1e04e461d16c2571$var$Jt(s, r, e, n.__n, void 0 !== s.ownerSVGElement, null != r.__h ? [
            o
        ] : null, i, null == o ? $1e04e461d16c2571$var$Ft(r) : o, r.__h), $1e04e461d16c2571$var$Kt(i, r), r.__e != o && $1e04e461d16c2571$var$Lt(r)));
    });
}
function $1e04e461d16c2571$var$Dt(t, n, i, e, r, o, s, l, u, c) {
    var a, f, h, d, p, v, m, y = e && e.__k || $1e04e461d16c2571$var$Ct, b = y.length;
    for(i.__k = [], a = 0; a < n.length; a++)if (null != (d = i.__k[a] = null == (d = n[a]) || "boolean" == typeof d ? null : "string" == typeof d || "number" == typeof d || "bigint" == typeof d ? $1e04e461d16c2571$var$Ot(null, d, null, null, d) : Array.isArray(d) ? $1e04e461d16c2571$var$Ot($1e04e461d16c2571$var$$t, {
        children: d
    }, null, null, null) : d.__b > 0 ? $1e04e461d16c2571$var$Ot(d.type, d.props, d.key, null, d.__v) : d)) {
        if (d.__ = i, d.__b = i.__b + 1, null === (h = y[a]) || h && d.key == h.key && d.type === h.type) y[a] = void 0;
        else for(f = 0; f < b; f++){
            if ((h = y[f]) && d.key == h.key && d.type === h.type) {
                y[f] = void 0;
                break;
            }
            h = null;
        }
        $1e04e461d16c2571$var$Jt(t, d, h = h || $1e04e461d16c2571$var$zt, r, o, s, l, u, c), p = d.__e, (f = d.ref) && h.ref != f && (m || (m = []), h.ref && m.push(h.ref, null, d), m.push(f, d.__c || p, d)), null != p ? (null == v && (v = p), "function" == typeof d.type && d.__k === h.__k ? d.__d = u = $1e04e461d16c2571$var$qt(d, u, t) : u = $1e04e461d16c2571$var$Ht(t, d, h, y, p, u), "function" == typeof i.type && (i.__d = u)) : u && h.__e == u && u.parentNode != t && (u = $1e04e461d16c2571$var$Ft(h));
    }
    for(i.__e = v, a = b; a--;)null != y[a] && ("function" == typeof i.type && null != y[a].__e && y[a].__e == i.__d && (i.__d = $1e04e461d16c2571$var$Ft(e, a + 1)), $1e04e461d16c2571$var$Yt(y[a], y[a]));
    if (m) for(a = 0; a < m.length; a++)$1e04e461d16c2571$var$Xt(m[a], m[++a], m[++a]);
}
function $1e04e461d16c2571$var$qt(t, n, i) {
    for(var e, r = t.__k, o = 0; r && o < r.length; o++)(e = r[o]) && (e.__ = t, n = "function" == typeof e.type ? $1e04e461d16c2571$var$qt(e, n, i) : $1e04e461d16c2571$var$Ht(i, e, e, r, e.__e, n));
    return n;
}
function $1e04e461d16c2571$var$Ht(t, n, i, e, r, o) {
    var s, l, u;
    if (void 0 !== n.__d) s = n.__d, n.__d = void 0;
    else if (null == i || r != o || null == r.parentNode) t: if (null == o || o.parentNode !== t) t.appendChild(r), s = null;
    else {
        for(l = o, u = 0; (l = l.nextSibling) && u < e.length; u += 2)if (l == r) break t;
        t.insertBefore(r, o), s = o;
    }
    return void 0 !== s ? s : r.nextSibling;
}
function $1e04e461d16c2571$var$Bt(t, n, i) {
    "-" === n[0] ? t.setProperty(n, i) : t[n] = null == i ? "" : "number" != typeof i || $1e04e461d16c2571$var$Et.test(n) ? i : i + "px";
}
function $1e04e461d16c2571$var$Gt(t, n, i, e, r) {
    var o;
    t: if ("style" === n) {
        if ("string" == typeof i) t.style.cssText = i;
        else {
            if ("string" == typeof e && (t.style.cssText = e = ""), e) for(n in e)i && n in i || $1e04e461d16c2571$var$Bt(t.style, n, "");
            if (i) for(n in i)e && i[n] === e[n] || $1e04e461d16c2571$var$Bt(t.style, n, i[n]);
        }
    } else if ("o" === n[0] && "n" === n[1]) o = n !== (n = n.replace(/Capture$/, "")), n = n.toLowerCase() in t ? n.toLowerCase().slice(2) : n.slice(2), t.l || (t.l = {
    }), t.l[n + o] = i, i ? e || t.addEventListener(n, o ? $1e04e461d16c2571$var$Zt : $1e04e461d16c2571$var$Qt, o) : t.removeEventListener(n, o ? $1e04e461d16c2571$var$Zt : $1e04e461d16c2571$var$Qt, o);
    else if ("dangerouslySetInnerHTML" !== n) {
        if (r) n = n.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");
        else if ("href" !== n && "list" !== n && "form" !== n && "tabIndex" !== n && "download" !== n && n in t) try {
            t[n] = null == i ? "" : i;
            break t;
        } catch (t28) {
        }
        "function" == typeof i || (null != i && (!1 !== i || "a" === n[0] && "r" === n[1]) ? t.setAttribute(n, i) : t.removeAttribute(n));
    }
}
function $1e04e461d16c2571$var$Qt(t) {
    this.l[t.type + !1]($1e04e461d16c2571$var$Pt.event ? $1e04e461d16c2571$var$Pt.event(t) : t);
}
function $1e04e461d16c2571$var$Zt(t) {
    this.l[t.type + !0]($1e04e461d16c2571$var$Pt.event ? $1e04e461d16c2571$var$Pt.event(t) : t);
}
function $1e04e461d16c2571$var$Jt(t29, n19, i9, e4, r3, o1, s1, l1, u1) {
    var c1, a1, f1, h1, d1, p1, v, m, y, b, _, g = n19.type;
    if (void 0 !== n19.constructor) return null;
    null != i9.__h && (u1 = i9.__h, l1 = n19.__e = i9.__e, n19.__h = null, o1 = [
        l1
    ]), (c1 = $1e04e461d16c2571$var$Pt.__b) && c1(n19);
    try {
        t: if ("function" == typeof g) {
            if (m = n19.props, y = (c1 = g.contextType) && e4[c1.__c], b = c1 ? y ? y.props.value : c1.__ : e4, i9.__c ? v = (a1 = n19.__c = i9.__c).__ = a1.__E : ("prototype" in g && g.prototype.render ? n19.__c = a1 = new g(m, b) : (n19.__c = a1 = new $1e04e461d16c2571$var$Nt(m, b), a1.constructor = g, a1.render = $1e04e461d16c2571$var$tn), y && y.sub(a1), a1.props = m, a1.state || (a1.state = {
            }), a1.context = b, a1.__n = e4, f1 = a1.__d = !0, a1.__h = []), null == a1.__s && (a1.__s = a1.state), null != g.getDerivedStateFromProps && (a1.__s == a1.state && (a1.__s = $1e04e461d16c2571$var$It({
            }, a1.__s)), $1e04e461d16c2571$var$It(a1.__s, g.getDerivedStateFromProps(m, a1.__s))), h1 = a1.props, d1 = a1.state, f1) null == g.getDerivedStateFromProps && null != a1.componentWillMount && a1.componentWillMount(), null != a1.componentDidMount && a1.__h.push(a1.componentDidMount);
            else {
                if (null == g.getDerivedStateFromProps && m !== h1 && null != a1.componentWillReceiveProps && a1.componentWillReceiveProps(m, b), !a1.__e && null != a1.shouldComponentUpdate && !1 === a1.shouldComponentUpdate(m, a1.__s, b) || n19.__v === i9.__v) {
                    a1.props = m, a1.state = a1.__s, n19.__v !== i9.__v && (a1.__d = !1), a1.__v = n19, n19.__e = i9.__e, n19.__k = i9.__k, n19.__k.forEach(function(t) {
                        t && (t.__ = n19);
                    }), a1.__h.length && s1.push(a1);
                    break t;
                }
                null != a1.componentWillUpdate && a1.componentWillUpdate(m, a1.__s, b), null != a1.componentDidUpdate && a1.__h.push(function() {
                    a1.componentDidUpdate(h1, d1, p1);
                });
            }
            a1.context = b, a1.props = m, a1.state = a1.__s, (c1 = $1e04e461d16c2571$var$Pt.__r) && c1(n19), a1.__d = !1, a1.__v = n19, a1.__P = t29, c1 = a1.render(a1.props, a1.state, a1.context), a1.state = a1.__s, null != a1.getChildContext && (e4 = $1e04e461d16c2571$var$It($1e04e461d16c2571$var$It({
            }, e4), a1.getChildContext())), f1 || null == a1.getSnapshotBeforeUpdate || (p1 = a1.getSnapshotBeforeUpdate(h1, d1)), _ = null != c1 && c1.type === $1e04e461d16c2571$var$$t && null == c1.key ? c1.props.children : c1, $1e04e461d16c2571$var$Dt(t29, Array.isArray(_) ? _ : [
                _
            ], n19, i9, e4, r3, o1, s1, l1, u1), a1.base = n19.__e, n19.__h = null, a1.__h.length && s1.push(a1), v && (a1.__E = a1.__ = null), a1.__e = !1;
        } else null == o1 && n19.__v === i9.__v ? (n19.__k = i9.__k, n19.__e = i9.__e) : n19.__e = (function(t30, n20, i10, e5, r4, o2, s, l) {
            var u, c, a, f = i10.props, h = n20.props, d = n20.type, p = 0;
            if ("svg" === d && (r4 = !0), null != o2) {
                for(; p < o2.length; p++)if ((u = o2[p]) && (u === t30 || (d ? u.localName == d : 3 == u.nodeType))) {
                    t30 = u, o2[p] = null;
                    break;
                }
            }
            if (null == t30) {
                if (null === d) return document.createTextNode(h);
                t30 = r4 ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, h.is && h), o2 = null, l = !1;
            }
            if (null === d) f === h || l && t30.data === h || (t30.data = h);
            else {
                if (o2 = o2 && $1e04e461d16c2571$var$gt.call(t30.childNodes), c = (f = i10.props || $1e04e461d16c2571$var$zt).dangerouslySetInnerHTML, a = h.dangerouslySetInnerHTML, !l) {
                    if (null != o2) for(f = {
                    }, p = 0; p < t30.attributes.length; p++)f[t30.attributes[p].name] = t30.attributes[p].value;
                    (a || c) && (a && (c && a.__html == c.__html || a.__html === t30.innerHTML) || (t30.innerHTML = a && a.__html || ""));
                }
                if ((function(t, n, i, e, r) {
                    var o;
                    for(o in i)"children" === o || "key" === o || o in n || $1e04e461d16c2571$var$Gt(t, o, null, i[o], e);
                    for(o in n)r && "function" != typeof n[o] || "children" === o || "key" === o || "value" === o || "checked" === o || i[o] === n[o] || $1e04e461d16c2571$var$Gt(t, o, n[o], i[o], e);
                })(t30, h, f, r4, l), a) n20.__k = [];
                else if (p = n20.props.children, $1e04e461d16c2571$var$Dt(t30, Array.isArray(p) ? p : [
                    p
                ], n20, i10, e5, r4 && "foreignObject" !== d, o2, s, o2 ? o2[0] : i10.__k && $1e04e461d16c2571$var$Ft(i10, 0), l), null != o2) for(p = o2.length; p--;)null != o2[p] && $1e04e461d16c2571$var$Vt(o2[p]);
                l || ("value" in h && void 0 !== (p = h.value) && (p !== t30.value || "progress" === d && !p) && $1e04e461d16c2571$var$Gt(t30, "value", p, f.value, !1), "checked" in h && void 0 !== (p = h.checked) && p !== t30.checked && $1e04e461d16c2571$var$Gt(t30, "checked", p, f.checked, !1));
            }
            return t30;
        })(i9.__e, n19, i9, e4, r3, o1, s1, u1);
        (c1 = $1e04e461d16c2571$var$Pt.diffed) && c1(n19);
    } catch (t) {
        n19.__v = null, (u1 || null != o1) && (n19.__e = l1, n19.__h = !!u1, o1[o1.indexOf(l1)] = null), $1e04e461d16c2571$var$Pt.__e(t, n19, i9);
    }
}
function $1e04e461d16c2571$var$Kt(t31, n21) {
    $1e04e461d16c2571$var$Pt.__c && $1e04e461d16c2571$var$Pt.__c(n21, t31), t31.some(function(n) {
        try {
            t31 = n.__h, n.__h = [], t31.some(function(t) {
                t.call(n);
            });
        } catch (t) {
            $1e04e461d16c2571$var$Pt.__e(t, n.__v);
        }
    });
}
function $1e04e461d16c2571$var$Xt(t, n, i) {
    try {
        "function" == typeof t ? t(n) : t.current = n;
    } catch (t32) {
        $1e04e461d16c2571$var$Pt.__e(t32, i);
    }
}
function $1e04e461d16c2571$var$Yt(t, n, i) {
    var e, r;
    if ($1e04e461d16c2571$var$Pt.unmount && $1e04e461d16c2571$var$Pt.unmount(t), (e = t.ref) && (e.current && e.current !== t.__e || $1e04e461d16c2571$var$Xt(e, null, n)), null != (e = t.__c)) {
        if (e.componentWillUnmount) try {
            e.componentWillUnmount();
        } catch (t) {
            $1e04e461d16c2571$var$Pt.__e(t, n);
        }
        e.base = e.__P = null;
    }
    if (e = t.__k) for(r = 0; r < e.length; r++)e[r] && $1e04e461d16c2571$var$Yt(e[r], n, "function" != typeof t.type);
    i || null == t.__e || $1e04e461d16c2571$var$Vt(t.__e), t.__e = t.__d = void 0;
}
function $1e04e461d16c2571$var$tn(t, n, i) {
    return this.constructor(t, i);
}
function $1e04e461d16c2571$var$nn(t, n, i) {
    var e, r, o;
    $1e04e461d16c2571$var$Pt.__ && $1e04e461d16c2571$var$Pt.__(t, n), r = (e = "function" == typeof i) ? null : i && i.__k || n.__k, o = [], $1e04e461d16c2571$var$Jt(n, t = (!e && i || n).__k = $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$$t, null, [
        t
    ]), r || $1e04e461d16c2571$var$zt, $1e04e461d16c2571$var$zt, void 0 !== n.ownerSVGElement, !e && i ? [
        i
    ] : r ? null : n.firstChild ? $1e04e461d16c2571$var$gt.call(n.childNodes) : null, o, !e && i ? i : r ? r.__e : n.firstChild, e), $1e04e461d16c2571$var$Kt(o, t);
}
function $1e04e461d16c2571$var$en(t, n) {
    $1e04e461d16c2571$var$nn(t, n, $1e04e461d16c2571$var$en);
}
$1e04e461d16c2571$var$gt = $1e04e461d16c2571$var$Ct.slice, $1e04e461d16c2571$var$Pt = {
    __e: function(t, n) {
        for(var i, e, r; n = n.__;)if ((i = n.__c) && !i.__) try {
            if ((e = i.constructor) && null != e.getDerivedStateFromError && (i.setState(e.getDerivedStateFromError(t)), r = i.__d), null != i.componentDidCatch && (i.componentDidCatch(t), r = i.__d), r) return i.__E = i;
        } catch (n22) {
            t = n22;
        }
        throw t;
    }
}, $1e04e461d16c2571$var$wt = 0, $1e04e461d16c2571$var$Nt.prototype.setState = function(t, n) {
    var i;
    i = null != this.__s && this.__s !== this.state ? this.__s : this.__s = $1e04e461d16c2571$var$It({
    }, this.state), "function" == typeof t && (t = t($1e04e461d16c2571$var$It({
    }, i), this.props)), t && $1e04e461d16c2571$var$It(i, t), null != t && this.__v && (n && this.__h.push(n), $1e04e461d16c2571$var$Ut(this));
}, $1e04e461d16c2571$var$Nt.prototype.forceUpdate = function(t) {
    this.__v && (this.__e = !0, t && this.__h.push(t), $1e04e461d16c2571$var$Ut(this));
}, $1e04e461d16c2571$var$Nt.prototype.render = $1e04e461d16c2571$var$$t, $1e04e461d16c2571$var$At = [], $1e04e461d16c2571$var$kt = "function" == typeof Promise ? Promise.prototype.then.bind($1e04e461d16c2571$var$H()) : setTimeout, $1e04e461d16c2571$var$Wt.__r = 0, $1e04e461d16c2571$var$Mt = 0;
var $1e04e461d16c2571$var$rn = 0, $1e04e461d16c2571$var$on = [], $1e04e461d16c2571$var$sn = $1e04e461d16c2571$var$Pt.__b, $1e04e461d16c2571$var$ln = $1e04e461d16c2571$var$Pt.__r, $1e04e461d16c2571$var$un = $1e04e461d16c2571$var$Pt.diffed, $1e04e461d16c2571$var$cn = $1e04e461d16c2571$var$Pt.__c, $1e04e461d16c2571$var$an = $1e04e461d16c2571$var$Pt.unmount;
function $1e04e461d16c2571$var$fn(t, n) {
    $1e04e461d16c2571$var$Pt.__h && $1e04e461d16c2571$var$Pt.__h($1e04e461d16c2571$var$xt, t, $1e04e461d16c2571$var$rn || n), $1e04e461d16c2571$var$rn = 0;
    var i = $1e04e461d16c2571$var$xt.__H || ($1e04e461d16c2571$var$xt.__H = {
        __: [],
        __h: []
    });
    return t >= i.__.length && i.__.push({
    }), i.__[t];
}
function $1e04e461d16c2571$var$hn(t, n) {
    var i = $1e04e461d16c2571$var$fn($1e04e461d16c2571$var$Rt++, 4);
    !$1e04e461d16c2571$var$Pt.__s && $1e04e461d16c2571$var$An(i.__H, n) && (i.__ = t, i.__H = n, $1e04e461d16c2571$var$xt.__h.push(i));
}
function $1e04e461d16c2571$var$dn(t) {
    return $1e04e461d16c2571$var$rn = 5, $1e04e461d16c2571$var$pn(function() {
        return {
            current: t
        };
    }, []);
}
function $1e04e461d16c2571$var$pn(t, n) {
    var i = $1e04e461d16c2571$var$fn($1e04e461d16c2571$var$Rt++, 7);
    return $1e04e461d16c2571$var$An(i.__H, n) && (i.__ = t(), i.__H = n, i.__h = t), i.__;
}
function $1e04e461d16c2571$var$vn() {
    $1e04e461d16c2571$var$on.forEach(function(t) {
        if (t.__P) try {
            t.__H.__h.forEach($1e04e461d16c2571$var$Pn), t.__H.__h.forEach($1e04e461d16c2571$var$wn), t.__H.__h = [];
        } catch (n) {
            t.__H.__h = [], $1e04e461d16c2571$var$Pt.__e(n, t.__v);
        }
    }), $1e04e461d16c2571$var$on = [];
}
$1e04e461d16c2571$var$Pt.__b = function(t) {
    $1e04e461d16c2571$var$xt = null, $1e04e461d16c2571$var$sn && $1e04e461d16c2571$var$sn(t);
}, $1e04e461d16c2571$var$Pt.__r = function(t) {
    $1e04e461d16c2571$var$ln && $1e04e461d16c2571$var$ln(t), $1e04e461d16c2571$var$Rt = 0;
    var n = ($1e04e461d16c2571$var$xt = t.__c).__H;
    n && (n.__h.forEach($1e04e461d16c2571$var$Pn), n.__h.forEach($1e04e461d16c2571$var$wn), n.__h = []);
}, $1e04e461d16c2571$var$Pt.diffed = function(t33) {
    $1e04e461d16c2571$var$un && $1e04e461d16c2571$var$un(t33);
    var n23 = t33.__c;
    n23 && n23.__H && n23.__H.__h.length && (1 !== $1e04e461d16c2571$var$on.push(n23) && $1e04e461d16c2571$var$Tt === $1e04e461d16c2571$var$Pt.requestAnimationFrame || (($1e04e461d16c2571$var$Tt = $1e04e461d16c2571$var$Pt.requestAnimationFrame) || function(t) {
        var n, i = function() {
            clearTimeout(e), $1e04e461d16c2571$var$gn && cancelAnimationFrame(n), setTimeout(t);
        }, e = setTimeout(i, 100);
        $1e04e461d16c2571$var$gn && (n = requestAnimationFrame(i));
    })($1e04e461d16c2571$var$vn)), $1e04e461d16c2571$var$xt = null;
}, $1e04e461d16c2571$var$Pt.__c = function(t34, n) {
    n.some(function(t35) {
        try {
            t35.__h.forEach($1e04e461d16c2571$var$Pn), t35.__h = t35.__h.filter(function(t) {
                return !t.__ || $1e04e461d16c2571$var$wn(t);
            });
        } catch (i) {
            n.some(function(t) {
                t.__h && (t.__h = []);
            }), n = [], $1e04e461d16c2571$var$Pt.__e(i, t35.__v);
        }
    }), $1e04e461d16c2571$var$cn && $1e04e461d16c2571$var$cn(t34, n);
}, $1e04e461d16c2571$var$Pt.unmount = function(t) {
    $1e04e461d16c2571$var$an && $1e04e461d16c2571$var$an(t);
    var n = t.__c;
    if (n && n.__H) try {
        n.__H.__.forEach($1e04e461d16c2571$var$Pn);
    } catch (t36) {
        $1e04e461d16c2571$var$Pt.__e(t36, n.__v);
    }
};
var $1e04e461d16c2571$var$mn, $1e04e461d16c2571$var$yn, $1e04e461d16c2571$var$bn, $1e04e461d16c2571$var$_n, $1e04e461d16c2571$var$gn = "function" == typeof requestAnimationFrame;
function $1e04e461d16c2571$var$Pn(t) {
    var n = $1e04e461d16c2571$var$xt;
    "function" == typeof t.__c && t.__c(), $1e04e461d16c2571$var$xt = n;
}
function $1e04e461d16c2571$var$wn(t) {
    var n = $1e04e461d16c2571$var$xt;
    t.__c = t.__(), $1e04e461d16c2571$var$xt = n;
}
function $1e04e461d16c2571$var$An(t, n24) {
    return !t || t.length !== n24.length || n24.some(function(n, i) {
        return n !== t[i];
    });
}
if ("undefined" != typeof AMP && AMP.BaseElement) $1e04e461d16c2571$var$mn = AMP.BaseElement;
else {
    class t37 {
        constructor(t38){
            this.element = t38, this.win = $1e04e461d16c2571$var$G(t38);
        }
        mutateElement(t) {
            $1e04e461d16c2571$var$H().then(t);
        }
        isLayoutSupported() {
            return !0;
        }
        mountCallback() {
        }
        unmountCallback() {
        }
        buildCallback() {
        }
    }
    $1e04e461d16c2571$var$mn = t37;
}
function $1e04e461d16c2571$var$kn() {
    var t39, n25;
    return $1e04e461d16c2571$var$_n || (n25 = {
        __c: t39 = "__cC" + $1e04e461d16c2571$var$Mt++,
        __: {
            renderable: !0,
            playable: !0,
            loading: "auto"
        },
        Consumer: function(t, n) {
            return t.children(n);
        },
        Provider: function(n26) {
            var i, e;
            return this.getChildContext || (i = [], (e = {
            })[t39] = this, this.getChildContext = function() {
                return e;
            }, this.shouldComponentUpdate = function(t) {
                this.props.value !== t.value && i.some($1e04e461d16c2571$var$Ut);
            }, this.sub = function(t) {
                i.push(t);
                var n = t.componentWillUnmount;
                t.componentWillUnmount = function() {
                    i.splice(i.indexOf(t), 1), n && n.call(t);
                };
            }), n26.children;
        }
    }, $1e04e461d16c2571$var$_n = n25.Provider.__ = n25.Consumer.contextType = n25);
}
function $1e04e461d16c2571$var$Sn({ children: t , loading: n = "auto" , notify: i , playable: e = !0 , renderable: r = !0  }) {
    const o = $1e04e461d16c2571$var$Mn(), s = r && o.renderable, l = s && e && o.playable, u = $1e04e461d16c2571$var$m(s ? "auto" : "lazy", $1e04e461d16c2571$var$m(n, o.loading)), c = i || o.notify, a = $1e04e461d16c2571$var$pn(()=>({
            renderable: s,
            playable: l,
            loading: u,
            notify: c
        })
    , [
        s,
        l,
        u,
        c
    ]);
    return $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$kn().Provider, {
        children: t,
        value: a
    });
}
function $1e04e461d16c2571$var$Mn() {
    var t, n, i;
    return t = $1e04e461d16c2571$var$kn(), n = $1e04e461d16c2571$var$xt.context[t.__c], (i = $1e04e461d16c2571$var$fn($1e04e461d16c2571$var$Rt++, 9)).c = t, n ? (null == i.__ && (i.__ = !0, n.sub($1e04e461d16c2571$var$xt)), n.props.value) : t.__;
}
var $1e04e461d16c2571$var$Rn = $1e04e461d16c2571$var$j("CanRender", {
    defaultValue: !0,
    recursive: (t)=>t.reduce($1e04e461d16c2571$var$zn)
    ,
    compute: (t, n, i)=>i && n.reduce($1e04e461d16c2571$var$zn, !0) || !1
}), $1e04e461d16c2571$var$xn = $1e04e461d16c2571$var$j("CanPlay", {
    defaultValue: !0,
    recursive: (t)=>t.reduce($1e04e461d16c2571$var$zn)
    ,
    deps: [
        $1e04e461d16c2571$var$Rn
    ],
    compute: (t, n, i, e)=>e && i && n.reduce($1e04e461d16c2571$var$zn, !0) || !1
}), $1e04e461d16c2571$var$Tn = $1e04e461d16c2571$var$j("Loading", {
    defaultValue: "auto",
    recursive: !0,
    deps: [
        $1e04e461d16c2571$var$Rn
    ],
    compute: (t, n, i, e)=>$1e04e461d16c2571$var$m(e ? "auto" : "lazy", $1e04e461d16c2571$var$m(i || "auto", n.reduce($1e04e461d16c2571$var$m, "auto")))
}), $1e04e461d16c2571$var$zn = (t, n)=>t && n
, $1e04e461d16c2571$var$Cn = (t)=>t.ensureLoaded()
, $1e04e461d16c2571$var$En = (t)=>t.pause()
, $1e04e461d16c2571$var$In = (t)=>t.unmount()
;
function $1e04e461d16c2571$var$Vn(t, n = !0) {
    $1e04e461d16c2571$var$$n(t, n, !1, $1e04e461d16c2571$var$Cn);
}
function $1e04e461d16c2571$var$jn(t, n = !0) {
    $1e04e461d16c2571$var$$n(t, n, !0, $1e04e461d16c2571$var$En);
}
function $1e04e461d16c2571$var$On(t, n = !0) {
    $1e04e461d16c2571$var$$n(t, n, !0, $1e04e461d16c2571$var$In);
}
function $1e04e461d16c2571$var$$n(t, n, i, e) {
    const o = $1e04e461d16c2571$var$r(t);
    for(let t40 = 0; t40 < o.length; t40++)$1e04e461d16c2571$var$Nn(o[t40], n, i, e);
}
function $1e04e461d16c2571$var$Nn(t, n, i, e) {
    if (n && t.classList.contains("i-amphtml-element")) {
        const n = t;
        if ($1e04e461d16c2571$var$w(e, n), !i) {
            const t = n.getPlaceholder();
            return void (t && $1e04e461d16c2571$var$Nn(t, !0, !1, e));
        }
    }
    const r = t.getElementsByClassName("i-amphtml-element");
    let o = null;
    for(let t41 = 0; t41 < r.length; t41++){
        const n = r[t41];
        if (i) $1e04e461d16c2571$var$w(e, n);
        else {
            o = o || [];
            let t = !1;
            for(let i = 0; i < o.length; i++)if (o[i].contains(n)) {
                t = !0;
                break;
            }
            t || (o.push(n), $1e04e461d16c2571$var$w(e, n));
        }
    }
}
var $1e04e461d16c2571$var$Fn = {
}, $1e04e461d16c2571$var$Ln = new WeakMap;
function $1e04e461d16c2571$var$Un(t42, n27, e, r = !1) {
    if (t42.setAttribute("slot", n27), !r) return $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$Wn, $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
    }, e || $1e04e461d16c2571$var$Fn), {
    }, {
        name: n27
    }));
    const o = $1e04e461d16c2571$var$Ln.get(t42);
    if (o && (function(t, n) {
        if (null == t || null == n) return t === n;
        for(const i in t)if (t[i] !== n[i]) return !1;
        for(const i11 in n)if (n[i11] !== t[i11]) return !1;
        return !0;
    })(o.oldProps, e)) return o.component;
    function s(t) {
        return $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$Wn, $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
        }, e || $1e04e461d16c2571$var$Fn), {
        }, {
            name: n27
        }, t));
    }
    return $1e04e461d16c2571$var$Ln.set(t42, {
        oldProps: e,
        component: s
    }), s;
}
function $1e04e461d16c2571$var$Wn(t43) {
    const n28 = $1e04e461d16c2571$var$dn(null);
    var e6, r, o;
    return (function(t44, n29) {
        const i = null == n29 ? void 0 : n29.loading, e = $1e04e461d16c2571$var$Mn();
        $1e04e461d16c2571$var$hn(()=>{
            const n = t44.current;
            return $1e04e461d16c2571$var$d($1e04e461d16c2571$var$h(n)), $1e04e461d16c2571$var$D(n, $1e04e461d16c2571$var$Rn, $1e04e461d16c2571$var$Wn, e.renderable), $1e04e461d16c2571$var$D(n, $1e04e461d16c2571$var$xn, $1e04e461d16c2571$var$Wn, e.playable), $1e04e461d16c2571$var$D(n, $1e04e461d16c2571$var$Tn, $1e04e461d16c2571$var$Wn, e.loading), e.playable || $1e04e461d16c2571$var$Dn(n, $1e04e461d16c2571$var$jn, !0), ()=>{
                var t;
                $1e04e461d16c2571$var$q(n, $1e04e461d16c2571$var$Rn, $1e04e461d16c2571$var$Wn), $1e04e461d16c2571$var$q(n, $1e04e461d16c2571$var$xn, $1e04e461d16c2571$var$Wn), $1e04e461d16c2571$var$q(n, $1e04e461d16c2571$var$Tn, $1e04e461d16c2571$var$Wn), t = n, $1e04e461d16c2571$var$C.rediscoverChildren(t);
            };
        }, [
            t44,
            e
        ]), $1e04e461d16c2571$var$hn(()=>{
            const n = t44.current;
            return $1e04e461d16c2571$var$d($1e04e461d16c2571$var$h(n)), "lazy" != i && $1e04e461d16c2571$var$Dn(n, $1e04e461d16c2571$var$Vn, !0), ()=>{
                $1e04e461d16c2571$var$Dn(n, $1e04e461d16c2571$var$On, !1);
            };
        }, [
            t44,
            i
        ]);
    })(n28, t43), e6 = ()=>{
        t43.postRender && t43.postRender();
    }, o = $1e04e461d16c2571$var$fn($1e04e461d16c2571$var$Rt++, 3), !$1e04e461d16c2571$var$Pt.__s && $1e04e461d16c2571$var$An(o.__H, r) && (o.__ = e6, o.__H = r, $1e04e461d16c2571$var$xt.__H.__h.push(o)), $1e04e461d16c2571$var$jt("slot", $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
    }, t43), {
    }, {
        ref: n28
    }));
}
function $1e04e461d16c2571$var$Dn(t, n, i) {
    const e = t.assignedElements ? t.assignedElements() : t;
    if (Array.isArray(e) && 0 == e.length) return;
    if (!i) return void n(e);
    const r = t.ownerDocument.defaultView;
    r && (r.requestIdleCallback || r.setTimeout)(()=>n(e)
    );
}
var $1e04e461d16c2571$var$qn = {
    "position": "absolute",
    "top": "0",
    "left": "0",
    "width": "100%",
    "height": "100%"
}, $1e04e461d16c2571$var$Hn = function() {
    let t = 0;
    return ()=>String(++t)
    ;
}();
function $1e04e461d16c2571$var$Bn(t, n) {
    return Object.values(t).some(n);
}
var $1e04e461d16c2571$var$Gn = (t)=>"string" == typeof t || !!t.selector
, $1e04e461d16c2571$var$Qn = (t)=>{
    var n;
    return 3 === t.nodeType && 0 === (null === (n = t.nodeValue) || void 0 === n ? void 0 : n.trim().length);
};
function $1e04e461d16c2571$var$Zn(t, n, e, r, o) {
    const { "layoutSizeDefined": s , "lightDomTag": l , "props": u  } = t;
    o && o.start();
    const c = $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
    }, r), {
    }, {
        ref: e
    });
    return l && (c["i-amphtml-rendered"] = !0, c.__AMP_RENDERED = !0, c.as = l), s && (t.usesShadowDom ? c.style = $1e04e461d16c2571$var$qn : c.class = "i-amphtml-fill-content"), $1e04e461d16c2571$var$Jn(t, c, u, n, o), o && o.complete(), c;
}
function $1e04e461d16c2571$var$Jn(t45, n, i12, e, r) {
    if ($1e04e461d16c2571$var$Bn(i12, $1e04e461d16c2571$var$Gn)) {
        const o = function(t46) {
            return (function(t, n) {
                const i = [];
                for(let n30 = t.firstElementChild; n30; n30 = n30.nextElementSibling)!$1e04e461d16c2571$var$Y(n30) && i.push(n30);
                return i;
            })(t46);
        }(e);
        for(let e7 = 0; e7 < o.length; e7++){
            const s = o[e7], l = $1e04e461d16c2571$var$Xn(s, i12);
            if (!l) continue;
            const u = i12[l], { as: c = !1 , single: a , name: f = l , clone: h , props: p = {
            }  } = u;
            $1e04e461d16c2571$var$d(h || t45.usesShadowDom);
            const v = {
            };
            if ($1e04e461d16c2571$var$Jn(t45, v, p, s, r), a) n[f] = $1e04e461d16c2571$var$Un(s, s.getAttribute("slot") || `i-amphtml-${f}`, v, c);
            else {
                const t = n[f] || (n[f] = []);
                $1e04e461d16c2571$var$d(!c), t.push(h ? $1e04e461d16c2571$var$Kn(s) : $1e04e461d16c2571$var$Un(s, s.getAttribute("slot") || `i-amphtml-${f}-${$1e04e461d16c2571$var$Hn()}`, v));
            }
        }
    }
    for(const s in i12){
        const l = i12[s];
        let u;
        if ($1e04e461d16c2571$var$d([
            l.attr,
            l.attrs,
            l.attrMatches,
            l.selector,
            l.passthrough,
            l.passthroughNonEmpty
        ].filter(Boolean).length <= 1), l.passthrough ? ($1e04e461d16c2571$var$d(t45.usesShadowDom), u = [
            $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$Wn, {
                loading: "lazy"
            })
        ]) : l.passthroughNonEmpty ? ($1e04e461d16c2571$var$d(t45.usesShadowDom), u = $1e04e461d16c2571$var$X(e).every($1e04e461d16c2571$var$Qn) ? null : [
            $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$Wn, {
                loading: "lazy"
            })
        ]) : l.attr ? (u = e.getAttribute(l.attr), l.media && null != u && ($1e04e461d16c2571$var$d(r), u = r.resolveListQuery(String(u)))) : l.parseAttrs && ($1e04e461d16c2571$var$d(l.attrs || l.attrMatches), u = l.parseAttrs(e)), null == u) null != l.default && (n[s] = l.default);
        else {
            const t = "number" == l.type ? parseFloat(u) : "boolean" == l.type ? null == (o = u) ? void 0 : "false" !== o : u;
            n[s] = t;
        }
    }
    var o;
}
function $1e04e461d16c2571$var$Kn(t) {
    const n = {
        "key": t
    }, { attributes: i , localName: e  } = t, { length: r  } = i;
    for(let t47 = 0; t47 < r; t47++){
        const { name: e , value: r  } = i[t47];
        n[e] = r;
    }
    return $1e04e461d16c2571$var$jt(e, n);
}
function $1e04e461d16c2571$var$Xn(t, n) {
    for(const i in n){
        const e = n[i], r = "string" == typeof e ? e : e.selector;
        if (r && $1e04e461d16c2571$var$J(t, r)) return i;
    }
    return null;
}
var $1e04e461d16c2571$var$Yn = {
    childList: !0
}, $1e04e461d16c2571$var$ti = {
    childList: !0,
    characterData: !0
}, $1e04e461d16c2571$var$ni = {
    childList: !0
}, $1e04e461d16c2571$var$ii = {
    "style": "display: contents; background: inherit;",
    "part": "c"
}, $1e04e461d16c2571$var$ei = {
    "name": "i-amphtml-svc"
}, $1e04e461d16c2571$var$ri = {
    "i-amphtml-rendered": ""
}, $1e04e461d16c2571$var$oi = ()=>!0
, $1e04e461d16c2571$var$si = (t)=>!!t.media
, $1e04e461d16c2571$var$li = (t)=>!(!t.passthrough && !t.passthroughNonEmpty)
, $1e04e461d16c2571$var$ui = class extends $1e04e461d16c2571$var$mn {
    static R1() {
        return !0;
    }
    static requiresShadowDom() {
        return this.usesShadowDom;
    }
    static usesLoading() {
        return this.loadable;
    }
    static prerenderAllowed() {
        return !this.usesLoading();
    }
    static Component() {
        $1e04e461d16c2571$var$d(!1);
    }
    getDefaultProps() {
        return {
            "loading": "auto",
            "onReadyState": (t, n)=>{
                this.Ra(t, n);
            },
            "onPlayingState": (t)=>{
                this.xa(t);
            }
        };
    }
    constructor(t48){
        super(t48), this.Ta = this.getDefaultProps(), this.za = {
            renderable: !1,
            playable: !0,
            loading: "auto",
            notify: ()=>this.mutateElement(()=>{
                })
        }, this.Ca = !1, this.Ea = null, this.Ia = null, this.Va = (t)=>{
            null !== t && (this.Ea ? this.ja(t) : this.Oa(t)), this.Ia = t, this.$a();
        }, this.Na = null, this.Fa = null, this.La = null, this.Ua = !1, this.Wa = null, this.Da = ()=>{
            this.Ua = !1, this.qa();
        }, this.Ha = !1, this.ui = !1, this.observer = null, this.Ba = new class {
            constructor(t){
                this.Ga = t, this.Qa = !1, this.Za = !1, this.Ja = this.Ja.bind(this);
            }
            updatePlaying(t49) {
                t49 !== this.Qa && (this.Qa = t49, t49 ? (this.Za = !1, (function(t50, n31) {
                    !function(t51, n, i) {
                        const e = t51.ownerDocument.defaultView;
                        if (!e) return;
                        let r = $1e04e461d16c2571$var$vt.get(t51);
                        if (r || (r = [], $1e04e461d16c2571$var$vt.set(t51, r), $1e04e461d16c2571$var$yt(e).observe(t51)), !r.some((t)=>t.callback === i && 1 === t.type
                        )) {
                            r.push({
                                type: 1,
                                callback: i
                            });
                            const n = $1e04e461d16c2571$var$mt.get(t51);
                            n && setTimeout(()=>$1e04e461d16c2571$var$_t(1, i, n)
                            );
                        }
                    }(t50, 0, n31);
                })(this.Ga, this.Ja)) : (function(t52, n33) {
                    !function(t53, n, i) {
                        const e8 = $1e04e461d16c2571$var$vt.get(t53);
                        if (e8 && ((function(t, n) {
                            const e = [];
                            let r = 0;
                            for(let n32 = 0; n32 < t.length; n32++){
                                const s = t[n32];
                                (o = s).callback === i && 1 === o.type ? e.push(s) : (r < n32 && (t[r] = s), r++);
                            }
                            var o;
                            r < t.length && (t.length = r);
                        })(e8), 0 == e8.length)) {
                            $1e04e461d16c2571$var$vt.delete(t53), $1e04e461d16c2571$var$mt.delete(t53);
                            const n = t53.ownerDocument.defaultView;
                            n && $1e04e461d16c2571$var$yt(n).unobserve(t53);
                        }
                    }(t52, 0, n33);
                })(this.Ga, this.Ja));
            }
            Ja({ blockSize: t , inlineSize: n  }) {
                const i = n > 0 && t > 0;
                if (i === this.Za) return;
                this.Za = i;
                const e = this.Ga;
                i || e.pause();
            }
        }(t48), this.Ti = null;
    }
    init() {
    }
    isLayoutSupported(t54) {
        return this.constructor.layoutSizeDefined ? (function(t) {
            return "fixed" == t || "fixed-height" == t || "responsive" == t || "fill" == t || "flex-item" == t || "fluid" == t || "intrinsic" == t;
        })(t54) || "container" == t54 : super.isLayoutSupported(t54);
    }
    buildCallback() {
        const t55 = this.constructor;
        this.observer = new MutationObserver((t)=>this.Ka(t)
        );
        const { props: n34  } = t55, e9 = $1e04e461d16c2571$var$Bn(n34, $1e04e461d16c2571$var$Gn) ? $1e04e461d16c2571$var$Yn : null, r = $1e04e461d16c2571$var$Bn(n34, $1e04e461d16c2571$var$li) ? $1e04e461d16c2571$var$ti : null, o = t55.usesTemplate ? $1e04e461d16c2571$var$ni : null;
        this.observer.observe(this.element, $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
            attributes: !0
        }, e9), r), o)), this.Ti = $1e04e461d16c2571$var$Bn(n34, $1e04e461d16c2571$var$si) ? new class {
            constructor(t, n){
                this.Wt = t, this.o = n, this.Li = {
                }, this.Ui = null;
            }
            start() {
                this.Ui = this.Li, this.Li = {
                };
            }
            resolveMatchQuery(t) {
                return "1" === this.$i(t, $1e04e461d16c2571$var$rt, "1");
            }
            resolveListQuery(t) {
                return this.$i(t, $1e04e461d16c2571$var$ot, "");
            }
            complete() {
                for(const t in this.Ui)t in this.Li || $1e04e461d16c2571$var$st(this.Ui[t], this.o, !1);
                this.Ui = null;
            }
            dispose() {
                for(const t in this.Li)$1e04e461d16c2571$var$st(this.Li[t], this.o, !1);
                this.Li = {
                };
            }
            $i(t56, n35, i13) {
                if (!t56.trim()) return i13;
                let e10 = this.Li[t56];
                return e10 || ($1e04e461d16c2571$var$d(this.Ui), e10 = this.Ui[t56]), e10 || (e10 = n35(this.Wt, t56), $1e04e461d16c2571$var$st(e10, this.o, !0)), this.Li[t56] = e10, (function(t) {
                    for(let n = 0; n < t.length; n++){
                        const { query: i , value: e  } = t[n];
                        if (!i || i.matches) return e;
                    }
                    return "";
                })(e10);
            }
        }(this.win, ()=>this.Xa()
        ) : null;
        const { staticProps: s  } = t55, l = this.init();
        Object.assign(this.Ta, s, l), this.checkPropsPostMutations(), $1e04e461d16c2571$var$N(this.element, [], ()=>()=>{
                this.ui = !1, this.La && $1e04e461d16c2571$var$nn(null, this.La);
            }
        ), $1e04e461d16c2571$var$N(this.element, [
            $1e04e461d16c2571$var$Rn,
            $1e04e461d16c2571$var$xn,
            $1e04e461d16c2571$var$Tn
        ], (t, n, i)=>{
            this.za.renderable = t, this.za.playable = n, this.za.loading = i, this.ui = !0, this.Xa();
        });
        const { useContexts: u  } = t55;
        var c;
        return 0 != u.length && $1e04e461d16c2571$var$N(this.element, u, (...t)=>{
            this.Fa = t, this.Xa();
        }), this.Wa = new $1e04e461d16c2571$var$B, this.Xa(), t55.loadable && (null === (c = this.setReadyState) || void 0 === c || c.call(this, "loading")), this.$a(), this.Wa.promise;
    }
    ensureLoaded() {
        this.constructor.loadable && (this.mutateProps({
            "loading": "eager"
        }), this.Ca = !0);
    }
    mountCallback() {
        $1e04e461d16c2571$var$W(this.element), this.constructor.loadable && "auto" != this.getProp("loading") && (this.mutateProps({
            "loading": "auto"
        }), this.Ca = !1);
    }
    unmountCallback() {
        var t;
        $1e04e461d16c2571$var$W(this.element), this.constructor.loadable && this.mutateProps({
            "loading": "unload"
        }), this.xa(!1), null === (t = this.Ti) || void 0 === t || t.dispose();
    }
    mutateProps(t) {
        Object.assign(this.Ta, t), this.Xa();
    }
    api() {
        const t = this.Ia;
        return $1e04e461d16c2571$var$d(t), t;
    }
    mutationObserverCallback(t) {
    }
    checkPropsPostMutations() {
    }
    updatePropsForRendering(t) {
    }
    isReady(t) {
        return !0;
    }
    Ka(t57) {
        const n36 = this.constructor;
        this.mutationObserverCallback(t57);
        const i14 = t57.some((t58)=>(function(t, n) {
                const { type: i  } = n;
                if ("attributes" == i) {
                    if (t.usesTemplate && "template" == n.attributeName) return !0;
                    const { props: i  } = t;
                    for(const t59 in i){
                        var e, r;
                        const o = i[t59], s = n.attributeName;
                        if ($1e04e461d16c2571$var$d(s), s == o.attr || null !== (e = o.attrs) && void 0 !== e && e.includes(s) || null !== (r = o.attrMatches) && void 0 !== r && r.call(o, s)) return !0;
                    }
                    return !1;
                }
                return "childList" == i && ($1e04e461d16c2571$var$ci(n.addedNodes) || $1e04e461d16c2571$var$ci(n.removedNodes));
            })(n36, t58)
        );
        i14 && (this.checkPropsPostMutations(), this.Xa());
    }
    Xa() {
        this.Ua || (this.Ua = !0, this.mutateElement(this.Da));
    }
    $a() {
        const { Ia: t  } = this, n = null == t ? void 0 : t.readyState;
        n && n !== this.element.readyState && this.Ra(n);
    }
    Ra(t, n) {
        var i;
        null === (i = this.setReadyState) || void 0 === i || i.call(this, t, n), this.constructor.unloadOnPause && this.xa("complete" == t), this.Ca && (this.Ca = !1, this.mutateProps({
            "loading": "auto"
        }));
    }
    qa() {
        if (!this.ui) return;
        const t61 = this.constructor, { detached: n40 , usesShadowDom: e13  } = t61, r7 = e13 ? null : t61.lightDomTag;
        if (!this.La) {
            const i15 = this.win.document;
            if (e13) {
                $1e04e461d16c2571$var$d(!n40);
                let { shadowRoot: e11  } = this.element, r5 = e11 && (v = e11, $1e04e461d16c2571$var$Q("c"), $1e04e461d16c2571$var$Z(v, "> c"));
                if (r5) this.Ha = !0;
                else {
                    var o3, s, l, u, c, a;
                    e11 = this.element.attachShadow({
                        mode: "open",
                        delegatesFocus: t61.delegatesFocus
                    });
                    const { shadowCss: n37  } = t61;
                    n37 && (function(t, n, i) {
                        const e = t.ownerDocument, r = e.defaultView;
                        if (void 0 !== t.adoptedStyleSheets && void 0 !== r.CSSStyleSheet.prototype.replaceSync) {
                            const e = r.__AMP_SHADOW_CSS || (r.__AMP_SHADOW_CSS = {
                            });
                            let o = e[n];
                            o || (o = new r.CSSStyleSheet, $1e04e461d16c2571$var$d(o.replaceSync), o.replaceSync(i), e[n] = o), t.adoptedStyleSheets = t.adoptedStyleSheets.concat(o);
                        } else {
                            const r = e.createElement("style");
                            r.setAttribute("data-name", n), r.textContent = i, t.appendChild(r);
                        }
                    })(e11, this.element.tagName, n37), r5 = $1e04e461d16c2571$var$it(i15, "c", $1e04e461d16c2571$var$ii), e11.appendChild(r5);
                    const f = $1e04e461d16c2571$var$it(i15, "slot", $1e04e461d16c2571$var$ei);
                    e11.appendChild(f), null === (o3 = this.getPlaceholder) || void 0 === o3 || null === (s = o3.call(this)) || void 0 === s || s.setAttribute("slot", "i-amphtml-svc"), null === (l = this.getFallback) || void 0 === l || null === (u = l.call(this)) || void 0 === u || u.setAttribute("slot", "i-amphtml-svc"), null === (c = this.getOverflowElement) || void 0 === c || null === (a = c.call(this)) || void 0 === a || a.setAttribute("slot", "i-amphtml-svc");
                }
                this.La = r5, $1e04e461d16c2571$var$d(e11), (function(t, n) {
                    $1e04e461d16c2571$var$C.get(t).setParent(n);
                })(e11, this.element), (function(t, n, i, e = 0) {
                    $1e04e461d16c2571$var$C.get(t).addGroup(n, i, e);
                })(this.element, "unslotted", $1e04e461d16c2571$var$oi, -1), f = this.element, h = $1e04e461d16c2571$var$Rn, null === (p = $1e04e461d16c2571$var$C.get(f).group("unslotted")) || void 0 === p || p.values.set(h, this, !1);
            } else if (r7) {
                const n = this.element;
                this.La = n;
                const e = $1e04e461d16c2571$var$K(n, "i-amphtml-rendered") || $1e04e461d16c2571$var$it(i15, r7, $1e04e461d16c2571$var$ri);
                e.__AMP_RENDERED = !0, t61.layoutSizeDefined && e.classList.add("i-amphtml-fill-content"), this.La.appendChild(e);
            } else {
                const t = i15.createElement("i-amphtml-c");
                this.La = t, t.classList.add("i-amphtml-fill-content"), n40 || this.element.appendChild(t);
            }
        }
        var f, h, p, v;
        const m = this.La;
        $1e04e461d16c2571$var$d(m);
        const { useContexts: y  } = t61, b = this.Fa;
        if (0 != y.length && null == b) return;
        const _ = $1e04e461d16c2571$var$Zn(t61, this.element, this.Va, this.Ta, this.Ti);
        if (this.updatePropsForRendering(_), !this.isReady(_)) return;
        let g = $1e04e461d16c2571$var$jt(t61.Component, _);
        for(let t60 = 0; t60 < y.length; t60++){
            $1e04e461d16c2571$var$d(b);
            const n = y[t60].type, i = b[t60];
            i && (g = $1e04e461d16c2571$var$jt(n.Provider, {
                value: i
            }, g));
        }
        const P = $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$Sn, $1e04e461d16c2571$var$i({
        }, this.za), g);
        try {
            if (this.Ha) this.Ha = !1, $1e04e461d16c2571$var$en(P, m);
            else {
                const t = r7 ? $1e04e461d16c2571$var$K(m, "i-amphtml-rendered") : null;
                t && (t.__AMP_RENDERED = !0), $1e04e461d16c2571$var$nn(P, m, null != t ? t : void 0);
            }
        } catch (t) {
            var w;
            throw null === (w = this.Wa) || void 0 === w || w.reject(t), t;
        }
        e13 || n40 || this.mutateElement(()=>$1e04e461d16c2571$var$et(this.element, "amp:dom-update", void 0)
        ), this.Wa && (this.Wa.resolve(void 0), this.Wa = null);
    }
    getProp(t, n) {
        var i, e;
        return i = this.Ta, e = t, $1e04e461d16c2571$var$c.call(i, e) ? this.Ta[t] : n;
    }
    getApi() {
        const t = this.Ea;
        return t ? Promise.resolve(t) : (this.Na || (this.Na = new $1e04e461d16c2571$var$B), this.Na.promise);
    }
    Oa(t) {
        const n = $1e04e461d16c2571$var$f(), i = Object.keys(t);
        for(let t62 = 0; t62 < i.length; t62++){
            const e = i[t62];
            this.Ya(n, e);
        }
        this.Ea = n, this.Na && (this.Na.resolve(n), this.Na = null);
    }
    ja(t) {
    }
    triggerEvent(t, n, i) {
        $1e04e461d16c2571$var$et(t, n, i);
    }
    pauseCallback() {
        if (this.constructor.unloadOnPause) this.mutateProps({
            "loading": "unload"
        }), this.Ca = !0;
        else {
            var t;
            const { Ia: n  } = this;
            null == n || null === (t = n.pause) || void 0 === t || t.call(n);
        }
    }
    xa(t) {
        this.Ba.updatePlaying(t);
    }
    Ya(t63, n) {
        Object.defineProperty(t63, n, {
            configurable: !0,
            get: ()=>{
                const t = this.Ia;
                return $1e04e461d16c2571$var$d(t), t[n];
            },
            set: (t)=>{
                const i = this.Ia;
                $1e04e461d16c2571$var$d(i), i[n] = t;
            }
        });
    }
};
function $1e04e461d16c2571$var$ci(t) {
    for(let n = 0; n < t.length; n++){
        const i = t[n];
        if ($1e04e461d16c2571$var$h(i)) {
            if (i.__AMP_RENDERED || i.tagName.startsWith("I-") || "i-amphtml-svc" == i.getAttribute("slot")) continue;
            return !0;
        }
        if (3 == i.nodeType) return !0;
    }
    return !1;
}
function $1e04e461d16c2571$var$ai(t, n) {
    if (null == t) return {
    };
    var i, e, r = {
    }, o = Object.keys(t);
    for(e = 0; e < o.length; e++)i = o[e], n.indexOf(i) >= 0 || (r[i] = t[i]);
    return r;
}
function $1e04e461d16c2571$var$fi(t64) {
    return ($1e04e461d16c2571$var$fi = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
        return typeof t;
    } : function(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    })(t64);
}
function $1e04e461d16c2571$var$hi(t65) {
    var n = function(t, n) {
        if ("object" !== $1e04e461d16c2571$var$fi(t) || null === t) return t;
        var i = t[Symbol.toPrimitive];
        if (void 0 !== i) {
            var e = i.call(t, "string");
            if ("object" !== $1e04e461d16c2571$var$fi(e)) return e;
            throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return String(t);
    }(t65);
    return "symbol" === $1e04e461d16c2571$var$fi(n) ? n : String(n);
}
$1e04e461d16c2571$var$ui.staticProps = void 0, $1e04e461d16c2571$var$ui.useContexts = [], $1e04e461d16c2571$var$ui.loadable = !1, $1e04e461d16c2571$var$ui.unloadOnPause = !1, $1e04e461d16c2571$var$ui.layoutSizeDefined = !1, $1e04e461d16c2571$var$ui.lightDomTag = "", $1e04e461d16c2571$var$ui.usesTemplate = !1, $1e04e461d16c2571$var$ui.shadowCss = null, $1e04e461d16c2571$var$ui.usesShadowDom = !1, $1e04e461d16c2571$var$ui.detached = !1, $1e04e461d16c2571$var$ui.delegatesFocus = !1, $1e04e461d16c2571$var$ui.props = {
};
var $1e04e461d16c2571$var$di, $1e04e461d16c2571$var$pi = [
    "ref"
], $1e04e461d16c2571$var$vi = "undefined" != typeof Symbol && (null === ($1e04e461d16c2571$var$di = Symbol.for) || void 0 === $1e04e461d16c2571$var$di ? void 0 : $1e04e461d16c2571$var$di.call(Symbol, "react.forward_ref")) || 3911, $1e04e461d16c2571$var$mi = $1e04e461d16c2571$var$Pt.__b;
$1e04e461d16c2571$var$Pt.__b = function(t) {
    var n;
    null !== (n = t.type) && void 0 !== n && n.uf && t.ref && (t.props.ref = t.ref, t.ref = null), null == $1e04e461d16c2571$var$mi || $1e04e461d16c2571$var$mi(t);
};
var $1e04e461d16c2571$var$yi = function(t) {
    function n41(n) {
        const { ref: i  } = n, e = $1e04e461d16c2571$var$ai(n, $1e04e461d16c2571$var$pi);
        return t(e, i);
    }
    return n41.$$typeof = $1e04e461d16c2571$var$vi, n41.render = n41, n41.prototype.isReactComponent = !0, n41.uf = !0, n41;
}, $1e04e461d16c2571$var$bi = [
    null,
    "paint",
    "layout",
    "content",
    "size",
    "size paint",
    "size layout",
    "strict"
], $1e04e461d16c2571$var$_i = {
    "position": "relative",
    "width": "100%",
    "height": "100%"
}, $1e04e461d16c2571$var$gi = $1e04e461d16c2571$var$yi(function(t, n) {
    let e = "class", { as: r = "div" , children: o , contentAs: s = "div" , contentClassName: l , contentProps: u , contentRef: c , contentStyle: a , layout: f = !1 , paint: h = !1 , size: d = !1 , "style": p , wrapperClassName: v , wrapperStyle: m , [e]: y  } = t;
    const b = (d ? 4 : 0) + (f ? 2 : 0) + (h ? 1 : 0);
    return $1e04e461d16c2571$var$jt(r, $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
    }, $1e04e461d16c2571$var$ai(t, [
        "as",
        "children",
        "contentAs",
        "contentClassName",
        "contentProps",
        "contentRef",
        "contentStyle",
        "layout",
        "paint",
        "size",
        "style",
        "wrapperClassName",
        "wrapperStyle",
        e
    ].map($1e04e461d16c2571$var$hi))), {
    }, {
        ref: n,
        class: `${y || ""} ${v || ""}`.trim() || null,
        style: $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
        }, p), m), {
        }, {
            contain: $1e04e461d16c2571$var$bi[b]
        })
    }), $1e04e461d16c2571$var$jt(s, $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
    }, u), {
    }, {
        ref: c,
        class: l,
        style: $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
        }, d && $1e04e461d16c2571$var$_i), {
        }, {
            "overflow": h ? "hidden" : "visible"
        }, a)
    }), o));
});
$1e04e461d16c2571$var$yi(function(t, n) {
    let e = "class", { as: r = "div" , children: o , "style": s , wrapperClassName: l , wrapperStyle: u , [e]: c  } = t;
    return $1e04e461d16c2571$var$jt(r, $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
    }, $1e04e461d16c2571$var$ai(t, [
        "as",
        "children",
        "style",
        "wrapperClassName",
        "wrapperStyle",
        e
    ].map($1e04e461d16c2571$var$hi))), {
    }, {
        ref: n,
        class: `${c || ""} ${l || ""}`.trim() || null,
        style: $1e04e461d16c2571$var$i($1e04e461d16c2571$var$i({
        }, s), u)
    }), o);
});
var $1e04e461d16c2571$var$Pi = [
    "children",
    "maxFontSize",
    "minFontSize"
], $1e04e461d16c2571$var$wi = class extends $1e04e461d16c2571$var$ui {
};
function $1e04e461d16c2571$export$f1a7b7f485988794() {
    !function(t66, n42, i = self) {
        i.customElements.define(t66, function(t, n = self) {
            return $1e04e461d16c2571$var$yn && $1e04e461d16c2571$var$bn === n || ($1e04e461d16c2571$var$yn = ($1e04e461d16c2571$var$bn = n).HTMLElement), class extends $1e04e461d16c2571$var$yn {
                constructor(){
                    super(), this.implementation = new t(this);
                }
                connectedCallback() {
                    this.classList.add("i-amphtml-built"), this.implementation.mountCallback(), this.implementation.buildCallback();
                }
                disconnectedCallback() {
                    this.implementation.unmountCallback();
                }
                getApi() {
                    return this.implementation.getApi();
                }
            };
        }(n42, i));
    }("bento-fit-text", $1e04e461d16c2571$var$wi);
}
$1e04e461d16c2571$var$wi.Component = function(t67) {
    let { children: n43 , maxFontSize: e14 = 72 , minFontSize: r8 = 6  } = t67, o7 = $1e04e461d16c2571$var$ai(t67, $1e04e461d16c2571$var$Pi);
    const s2 = $1e04e461d16c2571$var$dn(null), l = $1e04e461d16c2571$var$dn(null), u = $1e04e461d16c2571$var$dn(null), c = (a = ()=>{
        if (!l.current || !s2.current) return;
        const { clientHeight: t68 , clientWidth: n44  } = s2.current, i17 = function(t, n, i, e, r) {
            for(r++; r - e > 1;){
                const o = Math.floor((e + r) / 2);
                $1e04e461d16c2571$var$ct(t, "fontSize", $1e04e461d16c2571$var$at(o));
                const s = t.scrollWidth;
                t.scrollHeight > n || s > i ? r = o : e = o;
            }
            return $1e04e461d16c2571$var$ct(t, "fontSize", $1e04e461d16c2571$var$at(e)), e;
        }(l.current, t68, n44, r8, e14);
        !function(t69, n45, i18) {
            const e = t69.scrollHeight > n45, r = 1.15 * i18, o = Math.floor(n45 / r);
            e ? ((function(t, n) {
                for(const i in n)$1e04e461d16c2571$var$ct(t, i, n[i]);
            })(t69, {
                "lineClamp": o,
                "-webkit-line-clamp": o,
                "maxHeight": $1e04e461d16c2571$var$at(r * o)
            }), $1e04e461d16c2571$var$ft(t69, [
                "display"
            ])) : ($1e04e461d16c2571$var$ct(t69, "display", "flex"), $1e04e461d16c2571$var$ft(t69, [
                "lineClamp",
                "-webkit-line-clamp",
                "maxHeight"
            ]));
        }(l.current, t68, i17);
    }, $1e04e461d16c2571$var$rn = 8, $1e04e461d16c2571$var$pn(function() {
        return a;
    }, [
        e14,
        r8
    ]));
    var a;
    return $1e04e461d16c2571$var$hn(()=>{
        const t = s2.current, n = u.current;
        if (!t || !n) return;
        const i = $1e04e461d16c2571$var$G(t);
        if (!i) return;
        const e = new i.ResizeObserver(()=>c()
        );
        return e.observe(t), e.observe(n), ()=>e.disconnect()
        ;
    }, [
        c
    ]), $1e04e461d16c2571$var$jt($1e04e461d16c2571$var$gi, $1e04e461d16c2571$var$i({
        size: !0,
        layout: !0,
        paint: !0,
        contentRef: s2,
        contentClassName: "fit-text-content-wrapper-faf5e99"
    }, o7), $1e04e461d16c2571$var$jt("div", {
        ref: l,
        class: "fit-text-content-faf5e99"
    }, $1e04e461d16c2571$var$jt("div", {
        ref: u,
        class: "min-content-height-faf5e99"
    }, n43)));
}, $1e04e461d16c2571$var$wi.props = {
    "children": {
        passthrough: !0
    },
    "minFontSize": {
        attr: "min-font-size",
        type: "number",
        media: !0
    },
    "maxFontSize": {
        attr: "max-font-size",
        type: "number",
        media: !0
    }
}, $1e04e461d16c2571$var$wi.layoutSizeDefined = !0, $1e04e461d16c2571$var$wi.usesShadowDom = !0, $1e04e461d16c2571$var$wi.shadowCss = ".fit-text-content-wrapper-faf5e99{display:-ms-flexbox;display:flex}.fit-text-content-faf5e99,.fit-text-content-wrapper-faf5e99{-ms-flex-wrap:nowrap;flex-wrap:nowrap;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center}.fit-text-content-faf5e99{display:-webkit-box;overflow:hidden;line-height:1.15em;text-overflow:ellipsis}.min-content-height-faf5e99{height:-webkit-min-content;height:min-content}";


class $25c46615606f4f8d$export$2e2bcd8739ae039 {
    constructor(){
        this.isDisabled = true;
        this.medias = window.SOUNDS;
        this.medias["backtrack"].loop = true;
        this.medias["particleVibration"].loop = true;
        document.addEventListener("visibilitychange", this.onVisibilityChange.bind(this));
    }
    enableSound() {
        this.medias["backtrack"].play();
        this.isDisabled = false;
    }
    disableSound() {
        this.medias["backtrack"].pause();
        this.isDisabled = true;
    }
    onVisibilityChange(event) {
        if (this.isDisabled) return;
        if (document.hidden) this.medias["backtrack"].pause();
        else this.medias["backtrack"].play();
        console.log(document.hidden);
        console.log(event);
    }
    onChange({ from: from , to: to  }) {
        if (this.isDisabled) return;
        if (from === "/" && to === "/snippets") {
            this.medias["homeToSnippets"].currentTime = 0;
            this.medias["homeToSnippets"].play();
        }
        if (from === "/snippets" && to === "/") {
            this.medias["snippetsToHome"].currentTime = 0;
            this.medias["snippetsToHome"].play();
        }
        if (from === "/snippets" && to.includes("/detail/")) {
            this.medias["openPod"].currentTime = 0;
            this.medias["openPod"].play();
        }
        if (from.includes("/detail/") && to === "/snippets") {
            this.medias["closePod"].currentTime = 0;
            this.medias["closePod"].play();
        }
        if (to === "/about") {
            this.medias["enterAbout"].currentTime = 0;
            this.medias["enterAbout"].play();
        }
        if (from === "/about") {
            this.medias["exitAbout"].currentTime = 0;
            this.medias["exitAbout"].play();
        }
    }
    onOpenNav() {
        if (this.isDisabled) return;
        this.medias["openNav"].currentTime = 0;
        this.medias["openNav"].play();
    }
    onCloseNav() {
        if (this.isDisabled) return;
        this.medias["closeNav"].currentTime = 0;
        this.medias["closeNav"].play();
    }
    onEnterNavIcon() {
        if (this.isDisabled) return;
        this.medias["navIconEnter"].currentTime = 0;
        this.medias["navIconEnter"].play();
    }
    onVibrateParticlesStart() {
        if (this.isDisabled) return;
        this.medias["particleVibration"].currentTime = 0;
        this.medias["particleVibration"].play();
    }
    onVibrateParticlesEnd() {
        if (this.isDisabled) return;
        this.medias["particleVibration"].pause();
    }
    onEnterFullscreen() {
        if (this.isDisabled) return;
        this.medias["fullscreen"].currentTime = 0;
        this.medias["fullscreen"].play();
    }
    onExitFullscreen() {
        if (this.isDisabled) return;
        this.medias["fullscreen"].currentTime = 0;
        this.medias["fullscreen"].play();
    }
}



class $0c8eb68a78c8b2f7$var$App {
    constructor(){
        this.isDown = false;
        this.touchEnd = {
            x: 0,
            y: 0
        };
        this.template = window.location.pathname;
        $1e04e461d16c2571$export$f1a7b7f485988794();
        this.setCanvas();
        this.setAssets();
        this.setPreloader();
        this.setIcon();
        this.setFooter();
        this.setNavigation();
        this.setPages();
        this.addLinkListeners();
    }
    setSound() {
        this.sound = new $25c46615606f4f8d$export$2e2bcd8739ae039();
        this.footer.on("sound enabled", ()=>{
            this.sound.enableSound();
        });
        this.footer.on("sound disabled", ()=>{
            this.sound.disableSound();
        });
        this.navigation.on("open nav", ()=>{
            this.sound.onOpenNav();
        });
        this.navigation.on("close nav", ()=>{
            this.sound.onCloseNav();
        });
        this.navigation.on("enter nav icon", ()=>{
            this.sound.onEnterNavIcon();
        });
        this.canvas.particles.on("vibrate particles start", ()=>{
            this.sound.onVibrateParticlesStart();
        });
        this.canvas.particles.on("vibrate particles end", ()=>{
            this.sound.onVibrateParticlesEnd();
        });
        this.canvas.detail.on("enter fullscreen", ()=>{
            this.sound.onEnterFullscreen();
        });
        this.canvas.detail.on("exit fullscreen", ()=>{
            this.sound.onExitFullscreen();
        });
        this.preloader.on("enter site", ()=>{
            this.sound.enableSound();
        });
    }
    setCanvas() {
        this.canvas = new $d4b8791ca621a5a1$export$2e2bcd8739ae039({
            template: this.template
        });
    }
    setAssets() {
        this.assets = new $5c42d6186ba93490$export$2e2bcd8739ae039(this.canvas.renderer);
        this.assets.on("asset loaded", (progress, image)=>{
            this.preloader.onAssetLoaded(progress, image);
            this.icon.onAssetLoaded(progress);
        });
        this.assets.once("all assets loaded", ()=>{
            this.preloader.onAllAssetsLoaded();
            this.onPreloaded();
        });
    }
    setPreloader() {
        this.preloader = new $cdf592673956a290$export$2e2bcd8739ae039({
            template: this.template
        });
        this.preloader.on("enter site", ()=>{
            this.bindEvents();
            this.addEventListeners();
            this.onResize();
        });
    }
    setIcon() {
        this.icon = new $f0785bdb198e58ec$export$2e2bcd8739ae039({
            template: this.template
        });
        this.preloader.on("enter site", ()=>{
            this.icon.onEnterSite();
        });
        this.preloader.on("destroy preloader", ()=>{
            this.icon.onDestroyPreloader();
        });
    }
    setFooter() {
        this.footer = new $a00114a469b37940$export$2e2bcd8739ae039();
    }
    setNavigation() {
        this.navigation = new $4eaaa227927a9fce$export$2e2bcd8739ae039();
    }
    setPages() {
        this.home = new $a48557c590541616$export$2e2bcd8739ae039();
        this.about = new $388f9f63da93d3ba$export$2e2bcd8739ae039();
        this.snippets = new $d15d66e1ad4fc80d$export$2e2bcd8739ae039();
        this.pages = {
            "/": this.home,
            "/about": this.about,
            "/snippets": this.snippets
        };
        const detailElements = document.querySelectorAll(".detail");
        detailElements.forEach((element)=>{
            this.pages[`/detail/${element.id}`] = new $f6f46493be0c38a2$export$2e2bcd8739ae039({
                element: `#${element.id}`
            });
        });
        this.page = this.pages[this.template];
        this.about.on("navigate to home", ()=>{
            this.onChange({
                url: "/"
            });
        });
    }
    /**
   * Events
   */ async onChange({ url: url , push: push = true  }) {
        url = url.replace(window.location.origin, "");
        if (this.template === url) {
            this.navigation.onChange();
            return;
        }
        if (push) window.history.pushState({
        }, "", url);
        this.sound.onChange({
            from: this.template,
            to: window.location.pathname
        });
        this.template = window.location.pathname;
        const page = this.pages[this.template];
        this.icon.onChange(this.template);
        this.navigation.onChange();
        await this.page.hide();
        this.page = page;
        this.onResize(undefined, true);
        await this.canvas.onChange(this.template);
        this.page.show();
    }
    onPreloaded() {
        this.canvas.onPreloaded();
        this.onResize();
        this.setSound();
        this.page.show();
        this.update();
        if (this.page instanceof $388f9f63da93d3ba$export$2e2bcd8739ae039) this.page.returnPageSet = false;
        this.canvas.particles.on("goToEplore", ()=>{
            this.onChange({
                url: "/snippets"
            });
        });
        this.canvas.detail.on("enterFullscreen", ()=>{
            this.page instanceof $f6f46493be0c38a2$export$2e2bcd8739ae039 && this.page.onEnterFullscreen();
        });
        this.canvas.detail.on("exitFullscreen", ()=>{
            this.page instanceof $f6f46493be0c38a2$export$2e2bcd8739ae039 && this.page.onExitFullscreen();
        });
        this.canvas.detail.on("orbit control enabled", ()=>{
            this.page instanceof $f6f46493be0c38a2$export$2e2bcd8739ae039 && (this.page.isScrollable = false);
        });
        this.canvas.detail.on("orbit control disabled", ()=>{
            this.page instanceof $f6f46493be0c38a2$export$2e2bcd8739ae039 && (this.page.isScrollable = true);
        });
        this.icon.on("mouse enter icon", ()=>{
            this.canvas.particles.onMouseEnterLink();
        });
        this.icon.on("mouse exit icon", ()=>{
            this.canvas.particles.onMouseExitLink();
        });
    }
    onPopState() {
        this.onChange({
            url: window.location.pathname,
            push: false
        });
    }
    onWheel(event) {
        if (this.navigation.isOpen) return;
        const { pixelY: pixelY  } = (/*@__PURE__*/$parcel$interopDefault($e16859b358c20642$exports))(event);
        this.canvas.onWheel(pixelY);
        this.page.isScrollable && this.page.onWheel(pixelY);
    }
    onTouchDown(event) {
        if (this.navigation.isOpen) return;
        this.isDown = true;
        let x, y;
        if (event.touches) {
            x = event.touches[0].clientX;
            y = event.touches[0].clientY;
        } else {
            x = event.clientX;
            y = event.clientY;
        }
        this.canvas.onTouchDown({
            x: x,
            y: y
        });
        this.page.onTouchDown(y);
    }
    onTouchMove(event) {
        if (this.navigation.isOpen) return;
        let x, y;
        if (event.touches) {
            x = event.touches[0].clientX;
            y = event.touches[0].clientY;
            this.touchEnd.x = x;
            this.touchEnd.y = y;
        } else {
            x = event.clientX;
            y = event.clientY;
        }
        this.canvas.onTouchMove({
            x: x,
            y: y,
            isDown: this.isDown
        });
        this.isDown && this.page.isScrollable && this.page.onTouchMove(y);
    }
    onTouchUp(event) {
        if (this.navigation.isOpen) return;
        this.isDown = false;
        let x, y;
        if (event.touches) {
            x = this.touchEnd.x;
            y = this.touchEnd.y;
        } else {
            x = event.clientX;
            y = event.clientY;
        }
        this.canvas.onTouchUp({
            x: x,
            y: y
        });
    }
    onResize(_, transition) {
        document.documentElement.style.setProperty("--vh", `${window.innerHeight * 0.01}px`);
        this.canvas.onResize(transition);
        this.page.onResize();
    }
    bindEvents() {
        this.onPopState = this.onPopState.bind(this);
        this.onWheel = this.onWheel.bind(this);
        this.onResize = this.onResize.bind(this);
        this.onTouchDown = this.onTouchDown.bind(this);
        this.onTouchMove = this.onTouchMove.bind(this);
        this.onTouchUp = this.onTouchUp.bind(this);
    }
    addEventListeners() {
        window.addEventListener("popstate", this.onPopState);
        window.addEventListener("resize", this.onResize);
        window.addEventListener("wheel", this.onWheel);
        window.addEventListener("mousedown", this.onTouchDown);
        window.addEventListener("mousemove", this.onTouchMove);
        $77ffb9f622074fa6$export$2e2bcd8739ae039.isDesktop() && window.addEventListener("mouseup", this.onTouchUp);
        window.addEventListener("touchstart", this.onTouchDown);
        window.addEventListener("touchmove", this.onTouchMove);
        window.addEventListener("touchend", this.onTouchUp);
    }
    addLinkListeners() {
        const links = document.querySelectorAll("a");
        links.forEach((link)=>{
            const { href: href  } = link;
            const isLocal = href.indexOf(window.location.origin) > -1;
            link.onclick = (event)=>{
                if (isLocal) {
                    event.preventDefault();
                    this.onChange({
                        url: link.href
                    });
                }
            };
        });
    }
    update() {
        this.canvas && this.canvas.update(this.page.scroll.current);
        this.page && this.page.update();
        window.requestAnimationFrame(this.update.bind(this));
    }
}
new $0c8eb68a78c8b2f7$var$App();

})();
